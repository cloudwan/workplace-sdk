// Code generated by protoc-gen-goten-client
// API: BuildingService
// DO NOT EDIT!!!

package building_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &building.Building{}
)

var (
	descriptorsInitialized      bool
	buildingServiceDescriptor   *BuildingServiceDescriptor
	getBuildingDescriptor       *GetBuildingDescriptor
	batchGetBuildingsDescriptor *BatchGetBuildingsDescriptor
	listBuildingsDescriptor     *ListBuildingsDescriptor
	watchBuildingDescriptor     *WatchBuildingDescriptor
	watchBuildingsDescriptor    *WatchBuildingsDescriptor
	createBuildingDescriptor    *CreateBuildingDescriptor
	updateBuildingDescriptor    *UpdateBuildingDescriptor
	deleteBuildingDescriptor    *DeleteBuildingDescriptor
)

type GetBuildingDescriptor struct{}

type GetBuildingDescriptorClientMsgHandle struct{}

type GetBuildingDescriptorServerMsgHandle struct{}

func (d *GetBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetBuildingRequest{}
}

func (d *GetBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *GetBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *GetBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *GetBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *GetBuildingDescriptor) IsCollection() bool {
	return false
}

func (d *GetBuildingDescriptor) IsPlural() bool {
	return false
}

func (d *GetBuildingDescriptor) HasResource() bool {
	return true
}

func (d *GetBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetBuildingDescriptor) GetVerb() string {
	return "get"
}

func (d *GetBuildingDescriptor) GetMethodName() string {
	return "GetBuilding"
}

func (d *GetBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/GetBuilding"
}

func (d *GetBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *GetBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *GetBuildingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *GetBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetBuildingDescriptorClientMsgHandle{}
}

func (d *GetBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetBuildingDescriptorServerMsgHandle{}
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*building.Name)(nil)
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*building.Name)(nil)
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetBuildingDescriptor() *GetBuildingDescriptor {
	return getBuildingDescriptor
}

type BatchGetBuildingsDescriptor struct{}

type BatchGetBuildingsDescriptorClientMsgHandle struct{}

type BatchGetBuildingsDescriptorServerMsgHandle struct{}

func (d *BatchGetBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetBuildingsRequest{}
}

func (d *BatchGetBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetBuildingsResponse{}
}

func (d *BatchGetBuildingsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetBuildingsDescriptor) GetMethodName() string {
	return "BatchGetBuildings"
}

func (d *BatchGetBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/BatchGetBuildings"
}

func (d *BatchGetBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *BatchGetBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *BatchGetBuildingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *BatchGetBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetBuildingsDescriptorClientMsgHandle{}
}

func (d *BatchGetBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetBuildingsDescriptorServerMsgHandle{}
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(building.BuildingNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (building.BuildingNameList)(nil)
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetBuildings(); len(resources) > 0 {
			list := make(building.BuildingNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (building.BuildingNameList)(nil)
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetBuildingsDescriptor() *BatchGetBuildingsDescriptor {
	return batchGetBuildingsDescriptor
}

type ListBuildingsDescriptor struct{}

type ListBuildingsDescriptorClientMsgHandle struct{}

type ListBuildingsDescriptorServerMsgHandle struct{}

func (d *ListBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListBuildingsRequest{}
}

func (d *ListBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListBuildingsResponse{}
}

func (d *ListBuildingsDescriptor) IsUnary() bool {
	return true
}

func (d *ListBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListBuildingsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListBuildingsDescriptor) IsCollection() bool {
	return true
}

func (d *ListBuildingsDescriptor) IsPlural() bool {
	return true
}

func (d *ListBuildingsDescriptor) HasResource() bool {
	return true
}

func (d *ListBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListBuildingsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListBuildingsDescriptor) GetMethodName() string {
	return "ListBuildings"
}

func (d *ListBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/ListBuildings"
}

func (d *ListBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *ListBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *ListBuildingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *ListBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListBuildingsDescriptorClientMsgHandle{}
}

func (d *ListBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListBuildingsDescriptorServerMsgHandle{}
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*building.ParentName)(nil)
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetBuildings(); len(resources) > 0 {
			list := make(building.BuildingNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (building.BuildingNameList)(nil)
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListBuildingsDescriptor() *ListBuildingsDescriptor {
	return listBuildingsDescriptor
}

type WatchBuildingDescriptor struct{}

type WatchBuildingDescriptorClientMsgHandle struct{}

type WatchBuildingDescriptorServerMsgHandle struct{}

func (d *WatchBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchBuildingRequest{}
}

func (d *WatchBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchBuildingResponse{}
}

func (d *WatchBuildingDescriptor) IsUnary() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchBuildingDescriptor) IsCollection() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsPlural() bool {
	return false
}

func (d *WatchBuildingDescriptor) HasResource() bool {
	return true
}

func (d *WatchBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchBuildingDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchBuildingDescriptor) GetMethodName() string {
	return "WatchBuilding"
}

func (d *WatchBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/WatchBuilding"
}

func (d *WatchBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *WatchBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *WatchBuildingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *WatchBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingDescriptorClientMsgHandle{}
}

func (d *WatchBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingDescriptorServerMsgHandle{}
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*building.Name)(nil)
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchBuildingResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *building.BuildingChange_Added_:
				return tResChange.Added.GetBuilding().GetName()
			case *building.BuildingChange_Modified_:
				return tResChange.Modified.GetName()
			case *building.BuildingChange_Removed_:
				return tResChange.Removed.GetName()
			case *building.BuildingChange_Current_:
				return tResChange.Current.GetBuilding().GetName()
			}
		}
	}
	return (*building.Name)(nil)
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchBuildingResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchBuildingResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchBuildingDescriptor() *WatchBuildingDescriptor {
	return watchBuildingDescriptor
}

type WatchBuildingsDescriptor struct{}

type WatchBuildingsDescriptorClientMsgHandle struct{}

type WatchBuildingsDescriptorServerMsgHandle struct{}

func (d *WatchBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchBuildingsRequest{}
}

func (d *WatchBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchBuildingsResponse{}
}

func (d *WatchBuildingsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchBuildingsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchBuildingsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchBuildingsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchBuildingsDescriptor) HasResource() bool {
	return true
}

func (d *WatchBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchBuildingsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchBuildingsDescriptor) GetMethodName() string {
	return "WatchBuildings"
}

func (d *WatchBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/WatchBuildings"
}

func (d *WatchBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *WatchBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *WatchBuildingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *WatchBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingsDescriptorClientMsgHandle{}
}

func (d *WatchBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingsDescriptorServerMsgHandle{}
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*building.ParentName)(nil)
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetBuildingChanges(); len(resChanges) > 0 {
			list := make(building.BuildingNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *building.BuildingChange_Added_:
					list = append(list, tResChange.Added.GetBuilding().GetName())
				case *building.BuildingChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *building.BuildingChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *building.BuildingChange_Current_:
					list = append(list, tResChange.Current.GetBuilding().GetName())
				}
			}
			return list
		}
	}
	return (building.BuildingNameList)(nil)
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchBuildingsDescriptor() *WatchBuildingsDescriptor {
	return watchBuildingsDescriptor
}

type CreateBuildingDescriptor struct{}

type CreateBuildingDescriptorClientMsgHandle struct{}

type CreateBuildingDescriptorServerMsgHandle struct{}

func (d *CreateBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateBuildingRequest{}
}

func (d *CreateBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *CreateBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *CreateBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateBuildingDescriptor) IsCollection() bool {
	return true
}

func (d *CreateBuildingDescriptor) IsPlural() bool {
	return false
}

func (d *CreateBuildingDescriptor) HasResource() bool {
	return true
}

func (d *CreateBuildingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateBuildingDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateBuildingDescriptor) GetMethodName() string {
	return "CreateBuilding"
}

func (d *CreateBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/CreateBuilding"
}

func (d *CreateBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *CreateBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *CreateBuildingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *CreateBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateBuildingDescriptorClientMsgHandle{}
}

func (d *CreateBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateBuildingDescriptorServerMsgHandle{}
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetBuilding()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*building.Name)(nil)
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*building.ParentName)(nil)
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*building.Name)(nil)
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateBuildingDescriptor() *CreateBuildingDescriptor {
	return createBuildingDescriptor
}

type UpdateBuildingDescriptor struct{}

type UpdateBuildingDescriptorClientMsgHandle struct{}

type UpdateBuildingDescriptorServerMsgHandle struct{}

func (d *UpdateBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateBuildingRequest{}
}

func (d *UpdateBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *UpdateBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateBuildingDescriptor) HasResource() bool {
	return true
}

func (d *UpdateBuildingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateBuildingDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateBuildingDescriptor) GetMethodName() string {
	return "UpdateBuilding"
}

func (d *UpdateBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/UpdateBuilding"
}

func (d *UpdateBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *UpdateBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *UpdateBuildingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *UpdateBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateBuildingDescriptorClientMsgHandle{}
}

func (d *UpdateBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateBuildingDescriptorServerMsgHandle{}
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetBuilding()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*building.Name)(nil)
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*building.Name)(nil)
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateBuildingDescriptor() *UpdateBuildingDescriptor {
	return updateBuildingDescriptor
}

type DeleteBuildingDescriptor struct{}

type DeleteBuildingDescriptorClientMsgHandle struct{}

type DeleteBuildingDescriptorServerMsgHandle struct{}

func (d *DeleteBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteBuildingRequest{}
}

func (d *DeleteBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteBuildingDescriptor) HasResource() bool {
	return true
}

func (d *DeleteBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteBuildingDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteBuildingDescriptor) GetMethodName() string {
	return "DeleteBuilding"
}

func (d *DeleteBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/DeleteBuilding"
}

func (d *DeleteBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *DeleteBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *DeleteBuildingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *DeleteBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteBuildingDescriptorClientMsgHandle{}
}

func (d *DeleteBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteBuildingDescriptorServerMsgHandle{}
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*building.Name)(nil)
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *building.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *building.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteBuildingDescriptor() *DeleteBuildingDescriptor {
	return deleteBuildingDescriptor
}

type BuildingServiceDescriptor struct{}

func (d *BuildingServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getBuildingDescriptor,
		batchGetBuildingsDescriptor,
		listBuildingsDescriptor,
		watchBuildingDescriptor,
		watchBuildingsDescriptor,
		createBuildingDescriptor,
		updateBuildingDescriptor,
		deleteBuildingDescriptor,
	}
}

func (d *BuildingServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.BuildingService"
}

func (d *BuildingServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BuildingServiceDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *BuildingServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BuildingServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetBuildingServiceDescriptor() *BuildingServiceDescriptor {
	return buildingServiceDescriptor
}

func initDescriptors() {
	buildingServiceDescriptor = &BuildingServiceDescriptor{}
	getBuildingDescriptor = &GetBuildingDescriptor{}
	batchGetBuildingsDescriptor = &BatchGetBuildingsDescriptor{}
	listBuildingsDescriptor = &ListBuildingsDescriptor{}
	watchBuildingDescriptor = &WatchBuildingDescriptor{}
	watchBuildingsDescriptor = &WatchBuildingsDescriptor{}
	createBuildingDescriptor = &CreateBuildingDescriptor{}
	updateBuildingDescriptor = &UpdateBuildingDescriptor{}
	deleteBuildingDescriptor = &DeleteBuildingDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(buildingServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteBuildingDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
