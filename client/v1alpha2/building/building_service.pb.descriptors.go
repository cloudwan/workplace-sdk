// Code generated by protoc-gen-goten-client
// API: BuildingService
// DO NOT EDIT!!!

package building_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &building.Building{}
)

var (
	descriptorsInitialized      bool
	buildingServiceDescriptor   *BuildingServiceDescriptor
	getBuildingDescriptor       *GetBuildingDescriptor
	batchGetBuildingsDescriptor *BatchGetBuildingsDescriptor
	listBuildingsDescriptor     *ListBuildingsDescriptor
	watchBuildingDescriptor     *WatchBuildingDescriptor
	watchBuildingsDescriptor    *WatchBuildingsDescriptor
	createBuildingDescriptor    *CreateBuildingDescriptor
	updateBuildingDescriptor    *UpdateBuildingDescriptor
	deleteBuildingDescriptor    *DeleteBuildingDescriptor
)

type GetBuildingDescriptor struct{}

type GetBuildingDescriptorClientMsgHandle struct{}

type GetBuildingDescriptorServerMsgHandle struct{}

func (d *GetBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetBuildingRequest{}
}

func (d *GetBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *GetBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *GetBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *GetBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *GetBuildingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetBuildingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetBuildingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetBuildingDescriptor) GetVerb() string {
	return "get"
}

func (d *GetBuildingDescriptor) GetMethodName() string {
	return "GetBuilding"
}

func (d *GetBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/GetBuilding"
}

func (d *GetBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *GetBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *GetBuildingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *GetBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetBuildingDescriptorClientMsgHandle{}
}

func (d *GetBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetBuildingDescriptorServerMsgHandle{}
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*building.Name)(nil)
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetBuildingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetBuildingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetBuildingDescriptor() *GetBuildingDescriptor {
	return getBuildingDescriptor
}

type BatchGetBuildingsDescriptor struct{}

type BatchGetBuildingsDescriptorClientMsgHandle struct{}

type BatchGetBuildingsDescriptorServerMsgHandle struct{}

func (d *BatchGetBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetBuildingsRequest{}
}

func (d *BatchGetBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetBuildingsResponse{}
}

func (d *BatchGetBuildingsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetBuildingsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetBuildingsDescriptor) GetMethodName() string {
	return "BatchGetBuildings"
}

func (d *BatchGetBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/BatchGetBuildings"
}

func (d *BatchGetBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *BatchGetBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *BatchGetBuildingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *BatchGetBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetBuildingsDescriptorClientMsgHandle{}
}

func (d *BatchGetBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetBuildingsDescriptorServerMsgHandle{}
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(building.BuildingNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (building.BuildingNameList)(nil)
}

func (h *BatchGetBuildingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetBuildings()
	list := make(building.BuildingNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetBuildingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetBuildingsDescriptor() *BatchGetBuildingsDescriptor {
	return batchGetBuildingsDescriptor
}

type ListBuildingsDescriptor struct{}

type ListBuildingsDescriptorClientMsgHandle struct{}

type ListBuildingsDescriptorServerMsgHandle struct{}

func (d *ListBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListBuildingsRequest{}
}

func (d *ListBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListBuildingsResponse{}
}

func (d *ListBuildingsDescriptor) IsUnary() bool {
	return true
}

func (d *ListBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListBuildingsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListBuildingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListBuildingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListBuildingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListBuildingsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListBuildingsDescriptor) GetMethodName() string {
	return "ListBuildings"
}

func (d *ListBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/ListBuildings"
}

func (d *ListBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *ListBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *ListBuildingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *ListBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListBuildingsDescriptorClientMsgHandle{}
}

func (d *ListBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListBuildingsDescriptorServerMsgHandle{}
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListBuildingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetBuildings()
	list := make(building.BuildingNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListBuildingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListBuildingsDescriptor() *ListBuildingsDescriptor {
	return listBuildingsDescriptor
}

type WatchBuildingDescriptor struct{}

type WatchBuildingDescriptorClientMsgHandle struct{}

type WatchBuildingDescriptorServerMsgHandle struct{}

func (d *WatchBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchBuildingRequest{}
}

func (d *WatchBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchBuildingResponse{}
}

func (d *WatchBuildingDescriptor) IsUnary() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchBuildingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchBuildingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchBuildingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchBuildingDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchBuildingDescriptor) GetMethodName() string {
	return "WatchBuilding"
}

func (d *WatchBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/WatchBuilding"
}

func (d *WatchBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *WatchBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *WatchBuildingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *WatchBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingDescriptorClientMsgHandle{}
}

func (d *WatchBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingDescriptorServerMsgHandle{}
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*building.Name)(nil)
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchBuildingResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *building.BuildingChange_Added_:
			return tResChange.Added.GetBuilding().GetName()
		case *building.BuildingChange_Modified_:
			return tResChange.Modified.GetName()
		case *building.BuildingChange_Removed_:
			return tResChange.Removed.GetName()
		case *building.BuildingChange_Current_:
			return tResChange.Current.GetBuilding().GetName()
		}
	}
	return (*building.Name)(nil)
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchBuildingResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchBuildingResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchBuildingDescriptor() *WatchBuildingDescriptor {
	return watchBuildingDescriptor
}

type WatchBuildingsDescriptor struct{}

type WatchBuildingsDescriptorClientMsgHandle struct{}

type WatchBuildingsDescriptorServerMsgHandle struct{}

func (d *WatchBuildingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchBuildingsRequest{}
}

func (d *WatchBuildingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchBuildingsResponse{}
}

func (d *WatchBuildingsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchBuildingsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchBuildingsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchBuildingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchBuildingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchBuildingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchBuildingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchBuildingsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchBuildingsDescriptor) GetMethodName() string {
	return "WatchBuildings"
}

func (d *WatchBuildingsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/WatchBuildings"
}

func (d *WatchBuildingsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchBuildingsDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *WatchBuildingsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchBuildingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchBuildingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *WatchBuildingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *WatchBuildingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingsDescriptorClientMsgHandle{}
}

func (d *WatchBuildingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchBuildingsDescriptorServerMsgHandle{}
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchBuildingsRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchBuildingsRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchBuildingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchBuildingsRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*building.ParentName)(nil)
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchBuildingsResponse) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchBuildingsResponse) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetBuildingChanges()
	list := make(building.BuildingNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *building.BuildingChange_Added_:
			list = append(list, tResChange.Added.GetBuilding().GetName())
		case *building.BuildingChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *building.BuildingChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *building.BuildingChange_Current_:
			list = append(list, tResChange.Current.GetBuilding().GetName())
		}
	}
	return list
}

func (h *WatchBuildingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchBuildingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchBuildingsResponse) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchBuildingsDescriptor() *WatchBuildingsDescriptor {
	return watchBuildingsDescriptor
}

type CreateBuildingDescriptor struct{}

type CreateBuildingDescriptorClientMsgHandle struct{}

type CreateBuildingDescriptorServerMsgHandle struct{}

func (d *CreateBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateBuildingRequest{}
}

func (d *CreateBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *CreateBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *CreateBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateBuildingDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateBuildingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateBuildingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateBuildingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateBuildingDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateBuildingDescriptor) GetMethodName() string {
	return "CreateBuilding"
}

func (d *CreateBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/CreateBuilding"
}

func (d *CreateBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *CreateBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *CreateBuildingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *CreateBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateBuildingDescriptorClientMsgHandle{}
}

func (d *CreateBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateBuildingDescriptorServerMsgHandle{}
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetBuilding().GetName()
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateBuildingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*building.ParentName)(nil)
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateBuildingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateBuildingDescriptor() *CreateBuildingDescriptor {
	return createBuildingDescriptor
}

type UpdateBuildingDescriptor struct{}

type UpdateBuildingDescriptorClientMsgHandle struct{}

type UpdateBuildingDescriptorServerMsgHandle struct{}

func (d *UpdateBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateBuildingRequest{}
}

func (d *UpdateBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &building.Building{}
}

func (d *UpdateBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateBuildingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateBuildingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateBuildingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateBuildingDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateBuildingDescriptor) GetMethodName() string {
	return "UpdateBuilding"
}

func (d *UpdateBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/UpdateBuilding"
}

func (d *UpdateBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *UpdateBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *UpdateBuildingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *UpdateBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateBuildingDescriptorClientMsgHandle{}
}

func (d *UpdateBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateBuildingDescriptorServerMsgHandle{}
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetBuilding().GetName()
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateBuildingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*building.Building) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*building.Building) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateBuildingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*building.Building)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*building.Building) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateBuildingDescriptor() *UpdateBuildingDescriptor {
	return updateBuildingDescriptor
}

type DeleteBuildingDescriptor struct{}

type DeleteBuildingDescriptorClientMsgHandle struct{}

type DeleteBuildingDescriptorServerMsgHandle struct{}

func (d *DeleteBuildingDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteBuildingRequest{}
}

func (d *DeleteBuildingDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteBuildingDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteBuildingDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteBuildingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteBuildingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteBuildingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteBuildingDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteBuildingDescriptor) GetMethodName() string {
	return "DeleteBuilding"
}

func (d *DeleteBuildingDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.BuildingService/DeleteBuilding"
}

func (d *DeleteBuildingDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteBuildingDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *DeleteBuildingDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteBuildingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteBuildingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return buildingServiceDescriptor
}

func (d *DeleteBuildingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return building.GetDescriptor()
}

func (d *DeleteBuildingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteBuildingDescriptorClientMsgHandle{}
}

func (d *DeleteBuildingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteBuildingDescriptorServerMsgHandle{}
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteBuildingRequest) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*building.Name)(nil)
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteBuildingRequest) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteBuildingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteBuildingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteBuildingRequest) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *building.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*building.Name
	})
	if ok {
		return building.BuildingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteBuildingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *building.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteBuildingDescriptor() *DeleteBuildingDescriptor {
	return deleteBuildingDescriptor
}

type BuildingServiceDescriptor struct{}

func (d *BuildingServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getBuildingDescriptor,
		batchGetBuildingsDescriptor,
		listBuildingsDescriptor,
		watchBuildingDescriptor,
		watchBuildingsDescriptor,
		createBuildingDescriptor,
		updateBuildingDescriptor,
		deleteBuildingDescriptor,
	}
}

func (d *BuildingServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.BuildingService"
}

func (d *BuildingServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BuildingServiceDescriptor) GetApiName() string {
	return "BuildingService"
}

func (d *BuildingServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BuildingServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetBuildingServiceDescriptor() *BuildingServiceDescriptor {
	return buildingServiceDescriptor
}

func initDescriptors() {
	buildingServiceDescriptor = &BuildingServiceDescriptor{}
	getBuildingDescriptor = &GetBuildingDescriptor{}
	batchGetBuildingsDescriptor = &BatchGetBuildingsDescriptor{}
	listBuildingsDescriptor = &ListBuildingsDescriptor{}
	watchBuildingDescriptor = &WatchBuildingDescriptor{}
	watchBuildingsDescriptor = &WatchBuildingsDescriptor{}
	createBuildingDescriptor = &CreateBuildingDescriptor{}
	updateBuildingDescriptor = &UpdateBuildingDescriptor{}
	deleteBuildingDescriptor = &DeleteBuildingDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(buildingServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchBuildingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateBuildingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteBuildingDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
