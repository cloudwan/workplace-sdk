// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/building_service.proto
// DO NOT EDIT!!!

package building_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &building.Building{}
	_ = &site.Site{}
)

func (o *GetBuildingRequest) GotenObjectExt() {}

func (o *GetBuildingRequest) MakeFullFieldMask() *GetBuildingRequest_FieldMask {
	return FullGetBuildingRequest_FieldMask()
}

func (o *GetBuildingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetBuildingRequest_FieldMask()
}

func (o *GetBuildingRequest) MakeDiffFieldMask(other *GetBuildingRequest) *GetBuildingRequest_FieldMask {
	if o == nil && other == nil {
		return &GetBuildingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetBuildingRequest_FieldMask()
	}

	res := &GetBuildingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetBuildingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetBuildingRequest))
}

func (o *GetBuildingRequest) Clone() *GetBuildingRequest {
	if o == nil {
		return nil
	}
	result := &GetBuildingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &building.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	result.View = o.View
	return result
}

func (o *GetBuildingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetBuildingRequest) Merge(source *GetBuildingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &building.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetBuildingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetBuildingRequest))
}

func (o *BatchGetBuildingsRequest) GotenObjectExt() {}

func (o *BatchGetBuildingsRequest) MakeFullFieldMask() *BatchGetBuildingsRequest_FieldMask {
	return FullBatchGetBuildingsRequest_FieldMask()
}

func (o *BatchGetBuildingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetBuildingsRequest_FieldMask()
}

func (o *BatchGetBuildingsRequest) MakeDiffFieldMask(other *BatchGetBuildingsRequest) *BatchGetBuildingsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetBuildingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetBuildingsRequest_FieldMask()
	}

	res := &BatchGetBuildingsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetBuildingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetBuildingsRequest))
}

func (o *BatchGetBuildingsRequest) Clone() *BatchGetBuildingsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetBuildingsRequest{}
	result.Names = make([]*building.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &building.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetBuildingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetBuildingsRequest) Merge(source *BatchGetBuildingsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *building.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &building.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetBuildingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetBuildingsRequest))
}

func (o *BatchGetBuildingsResponse) GotenObjectExt() {}

func (o *BatchGetBuildingsResponse) MakeFullFieldMask() *BatchGetBuildingsResponse_FieldMask {
	return FullBatchGetBuildingsResponse_FieldMask()
}

func (o *BatchGetBuildingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetBuildingsResponse_FieldMask()
}

func (o *BatchGetBuildingsResponse) MakeDiffFieldMask(other *BatchGetBuildingsResponse) *BatchGetBuildingsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetBuildingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetBuildingsResponse_FieldMask()
	}

	res := &BatchGetBuildingsResponse_FieldMask{}

	if len(o.GetBuildings()) == len(other.GetBuildings()) {
		for i, lValue := range o.GetBuildings() {
			rValue := other.GetBuildings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorBuildings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorBuildings})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetBuildingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetBuildingsResponse))
}

func (o *BatchGetBuildingsResponse) Clone() *BatchGetBuildingsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetBuildingsResponse{}
	result.Buildings = make([]*building.Building, len(o.Buildings))
	for i, sourceValue := range o.Buildings {
		result.Buildings[i] = sourceValue.Clone()
	}
	result.Missing = make([]*building.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &building.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetBuildingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetBuildingsResponse) Merge(source *BatchGetBuildingsResponse) {
	for _, sourceValue := range source.GetBuildings() {
		exists := false
		for _, currentValue := range o.Buildings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *building.Building
			if sourceValue != nil {
				newDstElement = new(building.Building)
				newDstElement.Merge(sourceValue)
			}
			o.Buildings = append(o.Buildings, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *building.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &building.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetBuildingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetBuildingsResponse))
}

func (o *ListBuildingsRequest) GotenObjectExt() {}

func (o *ListBuildingsRequest) MakeFullFieldMask() *ListBuildingsRequest_FieldMask {
	return FullListBuildingsRequest_FieldMask()
}

func (o *ListBuildingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListBuildingsRequest_FieldMask()
}

func (o *ListBuildingsRequest) MakeDiffFieldMask(other *ListBuildingsRequest) *ListBuildingsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListBuildingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListBuildingsRequest_FieldMask()
	}

	res := &ListBuildingsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListBuildingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListBuildingsRequest))
}

func (o *ListBuildingsRequest) Clone() *ListBuildingsRequest {
	if o == nil {
		return nil
	}
	result := &ListBuildingsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &building.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &building.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &building.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &building.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListBuildingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListBuildingsRequest) Merge(source *ListBuildingsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &building.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &building.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &building.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &building.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListBuildingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListBuildingsRequest))
}

func (o *ListBuildingsResponse) GotenObjectExt() {}

func (o *ListBuildingsResponse) MakeFullFieldMask() *ListBuildingsResponse_FieldMask {
	return FullListBuildingsResponse_FieldMask()
}

func (o *ListBuildingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListBuildingsResponse_FieldMask()
}

func (o *ListBuildingsResponse) MakeDiffFieldMask(other *ListBuildingsResponse) *ListBuildingsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListBuildingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListBuildingsResponse_FieldMask()
	}

	res := &ListBuildingsResponse_FieldMask{}

	if len(o.GetBuildings()) == len(other.GetBuildings()) {
		for i, lValue := range o.GetBuildings() {
			rValue := other.GetBuildings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorBuildings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorBuildings})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListBuildingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListBuildingsResponse))
}

func (o *ListBuildingsResponse) Clone() *ListBuildingsResponse {
	if o == nil {
		return nil
	}
	result := &ListBuildingsResponse{}
	result.Buildings = make([]*building.Building, len(o.Buildings))
	for i, sourceValue := range o.Buildings {
		result.Buildings[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &building.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &building.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListBuildingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListBuildingsResponse) Merge(source *ListBuildingsResponse) {
	for _, sourceValue := range source.GetBuildings() {
		exists := false
		for _, currentValue := range o.Buildings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *building.Building
			if sourceValue != nil {
				newDstElement = new(building.Building)
				newDstElement.Merge(sourceValue)
			}
			o.Buildings = append(o.Buildings, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &building.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &building.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListBuildingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListBuildingsResponse))
}

func (o *WatchBuildingRequest) GotenObjectExt() {}

func (o *WatchBuildingRequest) MakeFullFieldMask() *WatchBuildingRequest_FieldMask {
	return FullWatchBuildingRequest_FieldMask()
}

func (o *WatchBuildingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchBuildingRequest_FieldMask()
}

func (o *WatchBuildingRequest) MakeDiffFieldMask(other *WatchBuildingRequest) *WatchBuildingRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchBuildingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchBuildingRequest_FieldMask()
	}

	res := &WatchBuildingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchBuildingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchBuildingRequest))
}

func (o *WatchBuildingRequest) Clone() *WatchBuildingRequest {
	if o == nil {
		return nil
	}
	result := &WatchBuildingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &building.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchBuildingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchBuildingRequest) Merge(source *WatchBuildingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &building.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchBuildingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchBuildingRequest))
}

func (o *WatchBuildingResponse) GotenObjectExt() {}

func (o *WatchBuildingResponse) MakeFullFieldMask() *WatchBuildingResponse_FieldMask {
	return FullWatchBuildingResponse_FieldMask()
}

func (o *WatchBuildingResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchBuildingResponse_FieldMask()
}

func (o *WatchBuildingResponse) MakeDiffFieldMask(other *WatchBuildingResponse) *WatchBuildingResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchBuildingResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchBuildingResponse_FieldMask()
	}

	res := &WatchBuildingResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchBuildingResponse_FieldTerminalPath{selector: WatchBuildingResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchBuildingResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchBuildingResponse))
}

func (o *WatchBuildingResponse) Clone() *WatchBuildingResponse {
	if o == nil {
		return nil
	}
	result := &WatchBuildingResponse{}
	result.Change = proto.Clone(o.Change).(*building.BuildingChange)
	return result
}

func (o *WatchBuildingResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchBuildingResponse) Merge(source *WatchBuildingResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(building.BuildingChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchBuildingResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchBuildingResponse))
}

func (o *WatchBuildingsRequest) GotenObjectExt() {}

func (o *WatchBuildingsRequest) MakeFullFieldMask() *WatchBuildingsRequest_FieldMask {
	return FullWatchBuildingsRequest_FieldMask()
}

func (o *WatchBuildingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchBuildingsRequest_FieldMask()
}

func (o *WatchBuildingsRequest) MakeDiffFieldMask(other *WatchBuildingsRequest) *WatchBuildingsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchBuildingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchBuildingsRequest_FieldMask()
	}

	res := &WatchBuildingsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchBuildingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchBuildingsRequest))
}

func (o *WatchBuildingsRequest) Clone() *WatchBuildingsRequest {
	if o == nil {
		return nil
	}
	result := &WatchBuildingsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &building.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &building.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &building.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &building.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchBuildingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchBuildingsRequest) Merge(source *WatchBuildingsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &building.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &building.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &building.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &building.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchBuildingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchBuildingsRequest))
}

func (o *WatchBuildingsResponse) GotenObjectExt() {}

func (o *WatchBuildingsResponse) MakeFullFieldMask() *WatchBuildingsResponse_FieldMask {
	return FullWatchBuildingsResponse_FieldMask()
}

func (o *WatchBuildingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchBuildingsResponse_FieldMask()
}

func (o *WatchBuildingsResponse) MakeDiffFieldMask(other *WatchBuildingsResponse) *WatchBuildingsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchBuildingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchBuildingsResponse_FieldMask()
	}

	res := &WatchBuildingsResponse_FieldMask{}

	if len(o.GetBuildingChanges()) == len(other.GetBuildingChanges()) {
		for i, lValue := range o.GetBuildingChanges() {
			rValue := other.GetBuildingChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorBuildingChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorBuildingChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldSubPath{selector: WatchBuildingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchBuildingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchBuildingsResponse))
}

func (o *WatchBuildingsResponse) Clone() *WatchBuildingsResponse {
	if o == nil {
		return nil
	}
	result := &WatchBuildingsResponse{}
	result.BuildingChanges = make([]*building.BuildingChange, len(o.BuildingChanges))
	for i, sourceValue := range o.BuildingChanges {
		result.BuildingChanges[i] = proto.Clone(sourceValue).(*building.BuildingChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchBuildingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchBuildingsResponse) Merge(source *WatchBuildingsResponse) {
	for _, sourceValue := range source.GetBuildingChanges() {
		exists := false
		for _, currentValue := range o.BuildingChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *building.BuildingChange
			if sourceValue != nil {
				newDstElement = new(building.BuildingChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.BuildingChanges = append(o.BuildingChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchBuildingsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchBuildingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchBuildingsResponse))
}

func (o *WatchBuildingsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchBuildingsResponse_PageTokenChange) MakeFullFieldMask() *WatchBuildingsResponse_PageTokenChange_FieldMask {
	return FullWatchBuildingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchBuildingsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchBuildingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchBuildingsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchBuildingsResponse_PageTokenChange) *WatchBuildingsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchBuildingsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchBuildingsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchBuildingsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchBuildingsResponsePageTokenChange_FieldTerminalPath{selector: WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchBuildingsResponsePageTokenChange_FieldTerminalPath{selector: WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchBuildingsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchBuildingsResponse_PageTokenChange))
}

func (o *WatchBuildingsResponse_PageTokenChange) Clone() *WatchBuildingsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchBuildingsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &building.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &building.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchBuildingsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchBuildingsResponse_PageTokenChange) Merge(source *WatchBuildingsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &building.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &building.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchBuildingsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchBuildingsResponse_PageTokenChange))
}

func (o *CreateBuildingRequest) GotenObjectExt() {}

func (o *CreateBuildingRequest) MakeFullFieldMask() *CreateBuildingRequest_FieldMask {
	return FullCreateBuildingRequest_FieldMask()
}

func (o *CreateBuildingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateBuildingRequest_FieldMask()
}

func (o *CreateBuildingRequest) MakeDiffFieldMask(other *CreateBuildingRequest) *CreateBuildingRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateBuildingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateBuildingRequest_FieldMask()
	}

	res := &CreateBuildingRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateBuildingRequest_FieldTerminalPath{selector: CreateBuildingRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetBuilding().MakeDiffFieldMask(other.GetBuilding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateBuildingRequest_FieldTerminalPath{selector: CreateBuildingRequest_FieldPathSelectorBuilding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateBuildingRequest_FieldSubPath{selector: CreateBuildingRequest_FieldPathSelectorBuilding, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateBuildingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateBuildingRequest))
}

func (o *CreateBuildingRequest) Clone() *CreateBuildingRequest {
	if o == nil {
		return nil
	}
	result := &CreateBuildingRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &building.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Building = o.Building.Clone()
	return result
}

func (o *CreateBuildingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateBuildingRequest) Merge(source *CreateBuildingRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &building.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetBuilding() != nil {
		if o.Building == nil {
			o.Building = new(building.Building)
		}
		o.Building.Merge(source.GetBuilding())
	}
}

func (o *CreateBuildingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateBuildingRequest))
}

func (o *UpdateBuildingRequest) GotenObjectExt() {}

func (o *UpdateBuildingRequest) MakeFullFieldMask() *UpdateBuildingRequest_FieldMask {
	return FullUpdateBuildingRequest_FieldMask()
}

func (o *UpdateBuildingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateBuildingRequest_FieldMask()
}

func (o *UpdateBuildingRequest) MakeDiffFieldMask(other *UpdateBuildingRequest) *UpdateBuildingRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateBuildingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateBuildingRequest_FieldMask()
	}

	res := &UpdateBuildingRequest_FieldMask{}
	{
		subMask := o.GetBuilding().MakeDiffFieldMask(other.GetBuilding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorBuilding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateBuildingRequest_FieldSubPath{selector: UpdateBuildingRequest_FieldPathSelectorBuilding, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateBuildingRequest_FieldSubPath{selector: UpdateBuildingRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateBuildingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateBuildingRequest))
}

func (o *UpdateBuildingRequest) Clone() *UpdateBuildingRequest {
	if o == nil {
		return nil
	}
	result := &UpdateBuildingRequest{}
	result.Building = o.Building.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*building.Building_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateBuildingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateBuildingRequest) Merge(source *UpdateBuildingRequest) {
	if source.GetBuilding() != nil {
		if o.Building == nil {
			o.Building = new(building.Building)
		}
		o.Building.Merge(source.GetBuilding())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateBuildingRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateBuildingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateBuildingRequest))
}

func (o *UpdateBuildingRequest_CAS) GotenObjectExt() {}

func (o *UpdateBuildingRequest_CAS) MakeFullFieldMask() *UpdateBuildingRequest_CAS_FieldMask {
	return FullUpdateBuildingRequest_CAS_FieldMask()
}

func (o *UpdateBuildingRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateBuildingRequest_CAS_FieldMask()
}

func (o *UpdateBuildingRequest_CAS) MakeDiffFieldMask(other *UpdateBuildingRequest_CAS) *UpdateBuildingRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateBuildingRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateBuildingRequest_CAS_FieldMask()
	}

	res := &UpdateBuildingRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateBuildingRequestCAS_FieldTerminalPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateBuildingRequestCAS_FieldSubPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateBuildingRequestCAS_FieldTerminalPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateBuildingRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateBuildingRequest_CAS))
}

func (o *UpdateBuildingRequest_CAS) Clone() *UpdateBuildingRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateBuildingRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*building.Building_FieldMask)
	return result
}

func (o *UpdateBuildingRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateBuildingRequest_CAS) Merge(source *UpdateBuildingRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(building.Building)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(building.Building_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateBuildingRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateBuildingRequest_CAS))
}

func (o *DeleteBuildingRequest) GotenObjectExt() {}

func (o *DeleteBuildingRequest) MakeFullFieldMask() *DeleteBuildingRequest_FieldMask {
	return FullDeleteBuildingRequest_FieldMask()
}

func (o *DeleteBuildingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteBuildingRequest_FieldMask()
}

func (o *DeleteBuildingRequest) MakeDiffFieldMask(other *DeleteBuildingRequest) *DeleteBuildingRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteBuildingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteBuildingRequest_FieldMask()
	}

	res := &DeleteBuildingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteBuildingRequest_FieldTerminalPath{selector: DeleteBuildingRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteBuildingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteBuildingRequest))
}

func (o *DeleteBuildingRequest) Clone() *DeleteBuildingRequest {
	if o == nil {
		return nil
	}
	result := &DeleteBuildingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &building.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteBuildingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteBuildingRequest) Merge(source *DeleteBuildingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &building.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteBuildingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteBuildingRequest))
}
