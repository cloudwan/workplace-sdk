// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/building_service.proto
// DO NOT EDIT!!!

package building_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &building.Building{}
	_ = &site.Site{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetBuildingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetBuildingRequest_FieldPathSelector
	Get(source *GetBuildingRequest) []interface{}
	GetSingle(source *GetBuildingRequest) (interface{}, bool)
	ClearValue(item *GetBuildingRequest)

	// Those methods build corresponding GetBuildingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetBuildingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetBuildingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetBuildingRequest_FieldPathArrayItemValue
}

type GetBuildingRequest_FieldPathSelector int32

const (
	GetBuildingRequest_FieldPathSelectorName      GetBuildingRequest_FieldPathSelector = 0
	GetBuildingRequest_FieldPathSelectorFieldMask GetBuildingRequest_FieldPathSelector = 1
	GetBuildingRequest_FieldPathSelectorView      GetBuildingRequest_FieldPathSelector = 2
)

func (s GetBuildingRequest_FieldPathSelector) String() string {
	switch s {
	case GetBuildingRequest_FieldPathSelectorName:
		return "name"
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetBuildingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", s))
	}
}

func BuildGetBuildingRequest_FieldPath(fp gotenobject.RawFieldPath) (GetBuildingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetBuildingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetBuildingRequest_FieldTerminalPath{selector: GetBuildingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetBuildingRequest", fp)
}

func ParseGetBuildingRequest_FieldPath(rawField string) (GetBuildingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetBuildingRequest_FieldPath(fp)
}

func MustParseGetBuildingRequest_FieldPath(rawField string) GetBuildingRequest_FieldPath {
	fp, err := ParseGetBuildingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetBuildingRequest_FieldTerminalPath struct {
	selector GetBuildingRequest_FieldPathSelector
}

var _ GetBuildingRequest_FieldPath = (*GetBuildingRequest_FieldTerminalPath)(nil)

func (fp *GetBuildingRequest_FieldTerminalPath) Selector() GetBuildingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetBuildingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetBuildingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetBuildingRequest
func (fp *GetBuildingRequest_FieldTerminalPath) Get(source *GetBuildingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetBuildingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetBuildingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetBuildingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetBuildingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetBuildingRequest))
}

// GetSingle returns value pointed by specific field of from source GetBuildingRequest
func (fp *GetBuildingRequest_FieldTerminalPath) GetSingle(source *GetBuildingRequest) (interface{}, bool) {
	switch fp.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetBuildingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
	}
}

func (fp *GetBuildingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetBuildingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		return (*building.Reference)(nil)
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	case GetBuildingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
	}
}

func (fp *GetBuildingRequest_FieldTerminalPath) ClearValue(item *GetBuildingRequest) {
	if item != nil {
		switch fp.selector {
		case GetBuildingRequest_FieldPathSelectorName:
			item.Name = nil
		case GetBuildingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetBuildingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
		}
	}
}

func (fp *GetBuildingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetBuildingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetBuildingRequest_FieldPathSelectorName ||
		fp.selector == GetBuildingRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetBuildingRequest_FieldPathSelectorView
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithIValue(value interface{}) GetBuildingRequest_FieldPathValue {
	switch fp.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		return &GetBuildingRequest_FieldTerminalPathValue{GetBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		return &GetBuildingRequest_FieldTerminalPathValue{GetBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case GetBuildingRequest_FieldPathSelectorView:
		return &GetBuildingRequest_FieldTerminalPathValue{GetBuildingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
	}
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetBuildingRequest_FieldPathArrayOfValues {
	fpaov := &GetBuildingRequest_FieldTerminalPathArrayOfValues{GetBuildingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		return &GetBuildingRequest_FieldTerminalPathArrayOfValues{GetBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		return &GetBuildingRequest_FieldTerminalPathArrayOfValues{GetBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case GetBuildingRequest_FieldPathSelectorView:
		return &GetBuildingRequest_FieldTerminalPathArrayOfValues{GetBuildingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetBuildingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fp.selector))
	}
}

func (fp *GetBuildingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetBuildingRequest_FieldPathValue allows storing values for GetBuildingRequest fields according to their type
type GetBuildingRequest_FieldPathValue interface {
	GetBuildingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetBuildingRequest)
	CompareWith(*GetBuildingRequest) (cmp int, comparable bool)
}

func ParseGetBuildingRequest_FieldPathValue(pathStr, valueStr string) (GetBuildingRequest_FieldPathValue, error) {
	fp, err := ParseGetBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetBuildingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetBuildingRequest_FieldPathValue), nil
}

func MustParseGetBuildingRequest_FieldPathValue(pathStr, valueStr string) GetBuildingRequest_FieldPathValue {
	fpv, err := ParseGetBuildingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetBuildingRequest_FieldTerminalPathValue struct {
	GetBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ GetBuildingRequest_FieldPathValue = (*GetBuildingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetBuildingRequest' as interface{}
func (fpv *GetBuildingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetBuildingRequest_FieldTerminalPathValue) AsNameValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}
func (fpv *GetBuildingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *GetBuildingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetBuildingRequest
func (fpv *GetBuildingRequest_FieldTerminalPathValue) SetTo(target **GetBuildingRequest) {
	if *target == nil {
		*target = new(GetBuildingRequest)
	}
	switch fpv.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*building.Reference)
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	case GetBuildingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *GetBuildingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetBuildingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetBuildingRequest_FieldTerminalPathValue' with the value under path in 'GetBuildingRequest'.
func (fpv *GetBuildingRequest_FieldTerminalPathValue) CompareWith(source *GetBuildingRequest) (int, bool) {
	switch fpv.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetBuildingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *GetBuildingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetBuildingRequest))
}

// GetBuildingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetBuildingRequest according to their type
// Present only for array (repeated) types.
type GetBuildingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetBuildingRequest_FieldPath
	ContainsValue(*GetBuildingRequest) bool
}

// ParseGetBuildingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetBuildingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetBuildingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetBuildingRequest_FieldPathArrayItemValue), nil
}

func MustParseGetBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetBuildingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetBuildingRequest_FieldTerminalPathArrayItemValue struct {
	GetBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ GetBuildingRequest_FieldPathArrayItemValue = (*GetBuildingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetBuildingRequest as interface{}
func (fpaiv *GetBuildingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetBuildingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetBuildingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetBuildingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetBuildingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetBuildingRequest'
func (fpaiv *GetBuildingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetBuildingRequest) bool {
	slice := fpaiv.GetBuildingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetBuildingRequest_FieldPathArrayOfValues allows storing slice of values for GetBuildingRequest fields according to their type
type GetBuildingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetBuildingRequest_FieldPath
}

func ParseGetBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetBuildingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetBuildingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetBuildingRequest_FieldPathArrayOfValues), nil
}

func MustParseGetBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetBuildingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetBuildingRequest_FieldTerminalPathArrayOfValues struct {
	GetBuildingRequest_FieldTerminalPath
	values interface{}
}

var _ GetBuildingRequest_FieldPathArrayOfValues = (*GetBuildingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetBuildingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetBuildingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	case GetBuildingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case GetBuildingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetBuildingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
func (fpaov *GetBuildingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *GetBuildingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetBuildingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetBuildingsRequest_FieldPathSelector
	Get(source *BatchGetBuildingsRequest) []interface{}
	GetSingle(source *BatchGetBuildingsRequest) (interface{}, bool)
	ClearValue(item *BatchGetBuildingsRequest)

	// Those methods build corresponding BatchGetBuildingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetBuildingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetBuildingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetBuildingsRequest_FieldPathArrayItemValue
}

type BatchGetBuildingsRequest_FieldPathSelector int32

const (
	BatchGetBuildingsRequest_FieldPathSelectorParent    BatchGetBuildingsRequest_FieldPathSelector = 0
	BatchGetBuildingsRequest_FieldPathSelectorNames     BatchGetBuildingsRequest_FieldPathSelector = 1
	BatchGetBuildingsRequest_FieldPathSelectorFieldMask BatchGetBuildingsRequest_FieldPathSelector = 2
	BatchGetBuildingsRequest_FieldPathSelectorView      BatchGetBuildingsRequest_FieldPathSelector = 3
)

func (s BatchGetBuildingsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", s))
	}
}

func BuildBatchGetBuildingsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetBuildingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetBuildingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetBuildingsRequest_FieldTerminalPath{selector: BatchGetBuildingsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetBuildingsRequest", fp)
}

func ParseBatchGetBuildingsRequest_FieldPath(rawField string) (BatchGetBuildingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetBuildingsRequest_FieldPath(fp)
}

func MustParseBatchGetBuildingsRequest_FieldPath(rawField string) BatchGetBuildingsRequest_FieldPath {
	fp, err := ParseBatchGetBuildingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetBuildingsRequest_FieldTerminalPath struct {
	selector BatchGetBuildingsRequest_FieldPathSelector
}

var _ BatchGetBuildingsRequest_FieldPath = (*BatchGetBuildingsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) Selector() BatchGetBuildingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetBuildingsRequest
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) Get(source *BatchGetBuildingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetBuildingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetBuildingsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetBuildingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetBuildingsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetBuildingsRequest
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) GetSingle(source *BatchGetBuildingsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetBuildingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		return (*building.Reference)(nil)
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return ([]*building.Reference)(nil)
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) ClearValue(item *BatchGetBuildingsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetBuildingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetBuildingsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetBuildingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetBuildingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetBuildingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetBuildingsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetBuildingsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetBuildingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetBuildingsRequest_FieldPathSelectorView
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetBuildingsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		return &BatchGetBuildingsRequest_FieldTerminalPathValue{BatchGetBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return &BatchGetBuildingsRequest_FieldTerminalPathValue{BatchGetBuildingsRequest_FieldTerminalPath: *fp, value: value.([]*building.Reference)}
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetBuildingsRequest_FieldTerminalPathValue{BatchGetBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		return &BatchGetBuildingsRequest_FieldTerminalPathValue{BatchGetBuildingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetBuildingsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues{BatchGetBuildingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		return &BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues{BatchGetBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return &BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues{BatchGetBuildingsRequest_FieldTerminalPath: *fp, values: values.([][]*building.Reference)}
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues{BatchGetBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		return &BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues{BatchGetBuildingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetBuildingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return &BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue{BatchGetBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetBuildingsRequest_FieldPathValue allows storing values for BatchGetBuildingsRequest fields according to their type
type BatchGetBuildingsRequest_FieldPathValue interface {
	BatchGetBuildingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetBuildingsRequest)
	CompareWith(*BatchGetBuildingsRequest) (cmp int, comparable bool)
}

func ParseBatchGetBuildingsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetBuildingsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetBuildingsRequest_FieldPathValue), nil
}

func MustParseBatchGetBuildingsRequest_FieldPathValue(pathStr, valueStr string) BatchGetBuildingsRequest_FieldPathValue {
	fpv, err := ParseBatchGetBuildingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetBuildingsRequest_FieldTerminalPathValue struct {
	BatchGetBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetBuildingsRequest_FieldPathValue = (*BatchGetBuildingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetBuildingsRequest' as interface{}
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) AsParentValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) AsNamesValue() ([]*building.Reference, bool) {
	res, ok := fpv.value.([]*building.Reference)
	return res, ok
}
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetBuildingsRequest
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) SetTo(target **BatchGetBuildingsRequest) {
	if *target == nil {
		*target = new(BatchGetBuildingsRequest)
	}
	switch fpv.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*building.Reference)
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*building.Reference)
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetBuildingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetBuildingsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetBuildingsRequest'.
func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetBuildingsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetBuildingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetBuildingsRequest))
}

// BatchGetBuildingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetBuildingsRequest according to their type
// Present only for array (repeated) types.
type BatchGetBuildingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetBuildingsRequest_FieldPath
	ContainsValue(*BatchGetBuildingsRequest) bool
}

// ParseBatchGetBuildingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetBuildingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetBuildingsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetBuildingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetBuildingsRequest_FieldPathArrayItemValue = (*BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetBuildingsRequest as interface{}
func (fpaiv *BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*building.Reference, bool) {
	res, ok := fpaiv.value.(*building.Reference)
	return res, ok
}

func (fpaiv *BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetBuildingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetBuildingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetBuildingsRequest'
func (fpaiv *BatchGetBuildingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetBuildingsRequest) bool {
	slice := fpaiv.BatchGetBuildingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetBuildingsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetBuildingsRequest fields according to their type
type BatchGetBuildingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetBuildingsRequest_FieldPath
}

func ParseBatchGetBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetBuildingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetBuildingsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetBuildingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetBuildingsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetBuildingsRequest_FieldPathArrayOfValues = (*BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetBuildingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	case BatchGetBuildingsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*building.Reference) {
			values = append(values, v)
		}
	case BatchGetBuildingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case BatchGetBuildingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
func (fpaov *BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*building.Reference, bool) {
	res, ok := fpaov.values.([][]*building.Reference)
	return res, ok
}
func (fpaov *BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *BatchGetBuildingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetBuildingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetBuildingsResponse_FieldPathSelector
	Get(source *BatchGetBuildingsResponse) []interface{}
	GetSingle(source *BatchGetBuildingsResponse) (interface{}, bool)
	ClearValue(item *BatchGetBuildingsResponse)

	// Those methods build corresponding BatchGetBuildingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetBuildingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetBuildingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetBuildingsResponse_FieldPathArrayItemValue
}

type BatchGetBuildingsResponse_FieldPathSelector int32

const (
	BatchGetBuildingsResponse_FieldPathSelectorBuildings BatchGetBuildingsResponse_FieldPathSelector = 0
	BatchGetBuildingsResponse_FieldPathSelectorMissing   BatchGetBuildingsResponse_FieldPathSelector = 1
)

func (s BatchGetBuildingsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return "buildings"
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", s))
	}
}

func BuildBatchGetBuildingsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetBuildingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetBuildingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "buildings":
			return &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorBuildings}, nil
		case "missing":
			return &BatchGetBuildingsResponse_FieldTerminalPath{selector: BatchGetBuildingsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "buildings":
			if subpath, err := building.BuildBuilding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetBuildingsResponse_FieldSubPath{selector: BatchGetBuildingsResponse_FieldPathSelectorBuildings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetBuildingsResponse", fp)
}

func ParseBatchGetBuildingsResponse_FieldPath(rawField string) (BatchGetBuildingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetBuildingsResponse_FieldPath(fp)
}

func MustParseBatchGetBuildingsResponse_FieldPath(rawField string) BatchGetBuildingsResponse_FieldPath {
	fp, err := ParseBatchGetBuildingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetBuildingsResponse_FieldTerminalPath struct {
	selector BatchGetBuildingsResponse_FieldPathSelector
}

var _ BatchGetBuildingsResponse_FieldPath = (*BatchGetBuildingsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) Selector() BatchGetBuildingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetBuildingsResponse
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) Get(source *BatchGetBuildingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
			for _, value := range source.GetBuildings() {
				values = append(values, value)
			}
		case BatchGetBuildingsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetBuildingsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetBuildingsResponse
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) GetSingle(source *BatchGetBuildingsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		res := source.GetBuildings()
		return res, res != nil
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return ([]*building.Building)(nil)
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return ([]*building.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) ClearValue(item *BatchGetBuildingsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
			item.Buildings = nil
		case BatchGetBuildingsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetBuildingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetBuildingsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetBuildingsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return &BatchGetBuildingsResponse_FieldTerminalPathValue{BatchGetBuildingsResponse_FieldTerminalPath: *fp, value: value.([]*building.Building)}
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return &BatchGetBuildingsResponse_FieldTerminalPathValue{BatchGetBuildingsResponse_FieldTerminalPath: *fp, value: value.([]*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetBuildingsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues{BatchGetBuildingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return &BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues{BatchGetBuildingsResponse_FieldTerminalPath: *fp, values: values.([][]*building.Building)}
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return &BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues{BatchGetBuildingsResponse_FieldTerminalPath: *fp, values: values.([][]*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetBuildingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return &BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue{BatchGetBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.Building)}
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return &BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue{BatchGetBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetBuildingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetBuildingsResponse_FieldSubPath struct {
	selector BatchGetBuildingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetBuildingsResponse_FieldPath = (*BatchGetBuildingsResponse_FieldSubPath)(nil)

func (fps *BatchGetBuildingsResponse_FieldSubPath) Selector() BatchGetBuildingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetBuildingsResponse_FieldSubPath) AsBuildingsSubPath() (building.Building_FieldPath, bool) {
	res, ok := fps.subPath.(building.Building_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetBuildingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetBuildingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetBuildingsResponse
func (fps *BatchGetBuildingsResponse_FieldSubPath) Get(source *BatchGetBuildingsResponse) (values []interface{}) {
	if asBuildingFieldPath, ok := fps.AsBuildingsSubPath(); ok {
		for _, item := range source.GetBuildings() {
			values = append(values, asBuildingFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetBuildingsResponse))
}

// GetSingle returns value of selected field from source BatchGetBuildingsResponse
func (fps *BatchGetBuildingsResponse_FieldSubPath) GetSingle(source *BatchGetBuildingsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		if len(source.GetBuildings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBuildings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetBuildingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) ClearValue(item *BatchGetBuildingsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
			for _, subItem := range item.Buildings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetBuildingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetBuildingsResponse_FieldPathValue {
	return &BatchGetBuildingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetBuildingsResponse_FieldPathArrayOfValues {
	return &BatchGetBuildingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetBuildingsResponse_FieldPathArrayItemValue {
	return &BatchGetBuildingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetBuildingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetBuildingsResponse_FieldPathValue allows storing values for BatchGetBuildingsResponse fields according to their type
type BatchGetBuildingsResponse_FieldPathValue interface {
	BatchGetBuildingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetBuildingsResponse)
	CompareWith(*BatchGetBuildingsResponse) (cmp int, comparable bool)
}

func ParseBatchGetBuildingsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetBuildingsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetBuildingsResponse_FieldPathValue), nil
}

func MustParseBatchGetBuildingsResponse_FieldPathValue(pathStr, valueStr string) BatchGetBuildingsResponse_FieldPathValue {
	fpv, err := ParseBatchGetBuildingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetBuildingsResponse_FieldTerminalPathValue struct {
	BatchGetBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetBuildingsResponse_FieldPathValue = (*BatchGetBuildingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetBuildingsResponse' as interface{}
func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) AsBuildingsValue() ([]*building.Building, bool) {
	res, ok := fpv.value.([]*building.Building)
	return res, ok
}
func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) AsMissingValue() ([]*building.Reference, bool) {
	res, ok := fpv.value.([]*building.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetBuildingsResponse
func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) SetTo(target **BatchGetBuildingsResponse) {
	if *target == nil {
		*target = new(BatchGetBuildingsResponse)
	}
	switch fpv.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		(*target).Buildings = fpv.value.([]*building.Building)
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*building.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetBuildingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetBuildingsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetBuildingsResponse'.
func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetBuildingsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return 0, false
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetBuildingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetBuildingsResponse))
}

type BatchGetBuildingsResponse_FieldSubPathValue struct {
	BatchGetBuildingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetBuildingsResponse_FieldPathValue = (*BatchGetBuildingsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) AsBuildingsPathValue() (building.Building_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(building.Building_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) SetTo(target **BatchGetBuildingsResponse) {
	if *target == nil {
		*target = new(BatchGetBuildingsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetBuildingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) CompareWith(source *BatchGetBuildingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetBuildingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetBuildingsResponse))
}

// BatchGetBuildingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetBuildingsResponse according to their type
// Present only for array (repeated) types.
type BatchGetBuildingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetBuildingsResponse_FieldPath
	ContainsValue(*BatchGetBuildingsResponse) bool
}

// ParseBatchGetBuildingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetBuildingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetBuildingsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetBuildingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetBuildingsResponse_FieldPathArrayItemValue = (*BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetBuildingsResponse as interface{}
func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) AsBuildingsItemValue() (*building.Building, bool) {
	res, ok := fpaiv.value.(*building.Building)
	return res, ok
}
func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*building.Reference, bool) {
	res, ok := fpaiv.value.(*building.Reference)
	return res, ok
}

func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetBuildingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetBuildingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetBuildingsResponse'
func (fpaiv *BatchGetBuildingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetBuildingsResponse) bool {
	slice := fpaiv.BatchGetBuildingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetBuildingsResponse_FieldSubPathArrayItemValue struct {
	BatchGetBuildingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetBuildingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetBuildingsResponse_FieldSubPathArrayItemValue) AsBuildingsPathItemValue() (building.Building_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetBuildingsResponse'
func (fpaivs *BatchGetBuildingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetBuildingsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetBuildingsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetBuildingsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetBuildingsResponse fields according to their type
type BatchGetBuildingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetBuildingsResponse_FieldPath
}

func ParseBatchGetBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetBuildingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetBuildingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetBuildingsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetBuildingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetBuildingsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetBuildingsResponse_FieldPathArrayOfValues = (*BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetBuildingsResponse_FieldPathSelectorBuildings:
		for _, v := range fpaov.values.([][]*building.Building) {
			values = append(values, v)
		}
	case BatchGetBuildingsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*building.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues) AsBuildingsArrayOfValues() ([][]*building.Building, bool) {
	res, ok := fpaov.values.([][]*building.Building)
	return res, ok
}
func (fpaov *BatchGetBuildingsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*building.Reference, bool) {
	res, ok := fpaov.values.([][]*building.Reference)
	return res, ok
}

type BatchGetBuildingsResponse_FieldSubPathArrayOfValues struct {
	BatchGetBuildingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetBuildingsResponse_FieldPathArrayOfValues = (*BatchGetBuildingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetBuildingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetBuildingsResponse_FieldSubPathArrayOfValues) AsBuildingsPathArrayOfValues() (building.Building_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(building.Building_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListBuildingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListBuildingsRequest_FieldPathSelector
	Get(source *ListBuildingsRequest) []interface{}
	GetSingle(source *ListBuildingsRequest) (interface{}, bool)
	ClearValue(item *ListBuildingsRequest)

	// Those methods build corresponding ListBuildingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListBuildingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListBuildingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListBuildingsRequest_FieldPathArrayItemValue
}

type ListBuildingsRequest_FieldPathSelector int32

const (
	ListBuildingsRequest_FieldPathSelectorParent    ListBuildingsRequest_FieldPathSelector = 0
	ListBuildingsRequest_FieldPathSelectorPageSize  ListBuildingsRequest_FieldPathSelector = 1
	ListBuildingsRequest_FieldPathSelectorPageToken ListBuildingsRequest_FieldPathSelector = 2
	ListBuildingsRequest_FieldPathSelectorOrderBy   ListBuildingsRequest_FieldPathSelector = 3
	ListBuildingsRequest_FieldPathSelectorFilter    ListBuildingsRequest_FieldPathSelector = 4
	ListBuildingsRequest_FieldPathSelectorFieldMask ListBuildingsRequest_FieldPathSelector = 5
	ListBuildingsRequest_FieldPathSelectorView      ListBuildingsRequest_FieldPathSelector = 6
)

func (s ListBuildingsRequest_FieldPathSelector) String() string {
	switch s {
	case ListBuildingsRequest_FieldPathSelectorParent:
		return "parent"
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListBuildingsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListBuildingsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", s))
	}
}

func BuildListBuildingsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListBuildingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListBuildingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListBuildingsRequest_FieldTerminalPath{selector: ListBuildingsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListBuildingsRequest", fp)
}

func ParseListBuildingsRequest_FieldPath(rawField string) (ListBuildingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListBuildingsRequest_FieldPath(fp)
}

func MustParseListBuildingsRequest_FieldPath(rawField string) ListBuildingsRequest_FieldPath {
	fp, err := ParseListBuildingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListBuildingsRequest_FieldTerminalPath struct {
	selector ListBuildingsRequest_FieldPathSelector
}

var _ ListBuildingsRequest_FieldPath = (*ListBuildingsRequest_FieldTerminalPath)(nil)

func (fp *ListBuildingsRequest_FieldTerminalPath) Selector() ListBuildingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListBuildingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListBuildingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListBuildingsRequest
func (fp *ListBuildingsRequest_FieldTerminalPath) Get(source *ListBuildingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListBuildingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListBuildingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListBuildingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListBuildingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListBuildingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListBuildingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListBuildingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListBuildingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListBuildingsRequest))
}

// GetSingle returns value pointed by specific field of from source ListBuildingsRequest
func (fp *ListBuildingsRequest_FieldTerminalPath) GetSingle(source *ListBuildingsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListBuildingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListBuildingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
	}
}

func (fp *ListBuildingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListBuildingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListBuildingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		return (*building.ParentName)(nil)
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		return (*building.PagerCursor)(nil)
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		return (*building.OrderBy)(nil)
	case ListBuildingsRequest_FieldPathSelectorFilter:
		return (*building.Filter)(nil)
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	case ListBuildingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
	}
}

func (fp *ListBuildingsRequest_FieldTerminalPath) ClearValue(item *ListBuildingsRequest) {
	if item != nil {
		switch fp.selector {
		case ListBuildingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListBuildingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListBuildingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListBuildingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListBuildingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListBuildingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListBuildingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListBuildingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListBuildingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListBuildingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListBuildingsRequest_FieldPathSelectorParent ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorFilter ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListBuildingsRequest_FieldPathSelectorView
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithIValue(value interface{}) ListBuildingsRequest_FieldPathValue {
	switch fp.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.ParentName)}
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.OrderBy)}
	case ListBuildingsRequest_FieldPathSelectorFilter:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Filter)}
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case ListBuildingsRequest_FieldPathSelectorView:
		return &ListBuildingsRequest_FieldTerminalPathValue{ListBuildingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
	}
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListBuildingsRequest_FieldPathArrayOfValues {
	fpaov := &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.ParentName)}
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.OrderBy)}
	case ListBuildingsRequest_FieldPathSelectorFilter:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Filter)}
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case ListBuildingsRequest_FieldPathSelectorView:
		return &ListBuildingsRequest_FieldTerminalPathArrayOfValues{ListBuildingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListBuildingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fp.selector))
	}
}

func (fp *ListBuildingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListBuildingsRequest_FieldPathValue allows storing values for ListBuildingsRequest fields according to their type
type ListBuildingsRequest_FieldPathValue interface {
	ListBuildingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListBuildingsRequest)
	CompareWith(*ListBuildingsRequest) (cmp int, comparable bool)
}

func ParseListBuildingsRequest_FieldPathValue(pathStr, valueStr string) (ListBuildingsRequest_FieldPathValue, error) {
	fp, err := ParseListBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListBuildingsRequest_FieldPathValue), nil
}

func MustParseListBuildingsRequest_FieldPathValue(pathStr, valueStr string) ListBuildingsRequest_FieldPathValue {
	fpv, err := ParseListBuildingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListBuildingsRequest_FieldTerminalPathValue struct {
	ListBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListBuildingsRequest_FieldPathValue = (*ListBuildingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListBuildingsRequest' as interface{}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsParentValue() (*building.ParentName, bool) {
	res, ok := fpv.value.(*building.ParentName)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsOrderByValue() (*building.OrderBy, bool) {
	res, ok := fpv.value.(*building.OrderBy)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsFilterValue() (*building.Filter, bool) {
	res, ok := fpv.value.(*building.Filter)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListBuildingsRequest
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) SetTo(target **ListBuildingsRequest) {
	if *target == nil {
		*target = new(ListBuildingsRequest)
	}
	switch fpv.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*building.ParentName)
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*building.PagerCursor)
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*building.OrderBy)
	case ListBuildingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*building.Filter)
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	case ListBuildingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListBuildingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListBuildingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListBuildingsRequest_FieldTerminalPathValue' with the value under path in 'ListBuildingsRequest'.
func (fpv *ListBuildingsRequest_FieldTerminalPathValue) CompareWith(source *ListBuildingsRequest) (int, bool) {
	switch fpv.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*building.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListBuildingsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListBuildingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListBuildingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListBuildingsRequest))
}

// ListBuildingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListBuildingsRequest according to their type
// Present only for array (repeated) types.
type ListBuildingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListBuildingsRequest_FieldPath
	ContainsValue(*ListBuildingsRequest) bool
}

// ParseListBuildingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListBuildingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListBuildingsRequest_FieldPathArrayItemValue), nil
}

func MustParseListBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListBuildingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListBuildingsRequest_FieldTerminalPathArrayItemValue struct {
	ListBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListBuildingsRequest_FieldPathArrayItemValue = (*ListBuildingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListBuildingsRequest as interface{}
func (fpaiv *ListBuildingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListBuildingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListBuildingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListBuildingsRequest'
func (fpaiv *ListBuildingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListBuildingsRequest) bool {
	slice := fpaiv.ListBuildingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListBuildingsRequest_FieldPathArrayOfValues allows storing slice of values for ListBuildingsRequest fields according to their type
type ListBuildingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListBuildingsRequest_FieldPath
}

func ParseListBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListBuildingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListBuildingsRequest_FieldPathArrayOfValues), nil
}

func MustParseListBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListBuildingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListBuildingsRequest_FieldTerminalPathArrayOfValues struct {
	ListBuildingsRequest_FieldTerminalPath
	values interface{}
}

var _ ListBuildingsRequest_FieldPathArrayOfValues = (*ListBuildingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListBuildingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*building.ParentName) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*building.OrderBy) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*building.Filter) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case ListBuildingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*building.ParentName, bool) {
	res, ok := fpaov.values.([]*building.ParentName)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*building.OrderBy, bool) {
	res, ok := fpaov.values.([]*building.OrderBy)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*building.Filter, bool) {
	res, ok := fpaov.values.([]*building.Filter)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *ListBuildingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListBuildingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListBuildingsResponse_FieldPathSelector
	Get(source *ListBuildingsResponse) []interface{}
	GetSingle(source *ListBuildingsResponse) (interface{}, bool)
	ClearValue(item *ListBuildingsResponse)

	// Those methods build corresponding ListBuildingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListBuildingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListBuildingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListBuildingsResponse_FieldPathArrayItemValue
}

type ListBuildingsResponse_FieldPathSelector int32

const (
	ListBuildingsResponse_FieldPathSelectorBuildings     ListBuildingsResponse_FieldPathSelector = 0
	ListBuildingsResponse_FieldPathSelectorPrevPageToken ListBuildingsResponse_FieldPathSelector = 1
	ListBuildingsResponse_FieldPathSelectorNextPageToken ListBuildingsResponse_FieldPathSelector = 2
)

func (s ListBuildingsResponse_FieldPathSelector) String() string {
	switch s {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return "buildings"
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", s))
	}
}

func BuildListBuildingsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListBuildingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListBuildingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "buildings":
			return &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorBuildings}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListBuildingsResponse_FieldTerminalPath{selector: ListBuildingsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "buildings":
			if subpath, err := building.BuildBuilding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListBuildingsResponse_FieldSubPath{selector: ListBuildingsResponse_FieldPathSelectorBuildings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListBuildingsResponse", fp)
}

func ParseListBuildingsResponse_FieldPath(rawField string) (ListBuildingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListBuildingsResponse_FieldPath(fp)
}

func MustParseListBuildingsResponse_FieldPath(rawField string) ListBuildingsResponse_FieldPath {
	fp, err := ParseListBuildingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListBuildingsResponse_FieldTerminalPath struct {
	selector ListBuildingsResponse_FieldPathSelector
}

var _ ListBuildingsResponse_FieldPath = (*ListBuildingsResponse_FieldTerminalPath)(nil)

func (fp *ListBuildingsResponse_FieldTerminalPath) Selector() ListBuildingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListBuildingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListBuildingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListBuildingsResponse
func (fp *ListBuildingsResponse_FieldTerminalPath) Get(source *ListBuildingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListBuildingsResponse_FieldPathSelectorBuildings:
			for _, value := range source.GetBuildings() {
				values = append(values, value)
			}
		case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListBuildingsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListBuildingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListBuildingsResponse))
}

// GetSingle returns value pointed by specific field of from source ListBuildingsResponse
func (fp *ListBuildingsResponse_FieldTerminalPath) GetSingle(source *ListBuildingsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		res := source.GetBuildings()
		return res, res != nil
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
	}
}

func (fp *ListBuildingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListBuildingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return ([]*building.Building)(nil)
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		return (*building.PagerCursor)(nil)
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		return (*building.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
	}
}

func (fp *ListBuildingsResponse_FieldTerminalPath) ClearValue(item *ListBuildingsResponse) {
	if item != nil {
		switch fp.selector {
		case ListBuildingsResponse_FieldPathSelectorBuildings:
			item.Buildings = nil
		case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListBuildingsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListBuildingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListBuildingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListBuildingsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListBuildingsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithIValue(value interface{}) ListBuildingsResponse_FieldPathValue {
	switch fp.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return &ListBuildingsResponse_FieldTerminalPathValue{ListBuildingsResponse_FieldTerminalPath: *fp, value: value.([]*building.Building)}
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		return &ListBuildingsResponse_FieldTerminalPathValue{ListBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		return &ListBuildingsResponse_FieldTerminalPathValue{ListBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
	}
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListBuildingsResponse_FieldPathArrayOfValues {
	fpaov := &ListBuildingsResponse_FieldTerminalPathArrayOfValues{ListBuildingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return &ListBuildingsResponse_FieldTerminalPathArrayOfValues{ListBuildingsResponse_FieldTerminalPath: *fp, values: values.([][]*building.Building)}
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		return &ListBuildingsResponse_FieldTerminalPathArrayOfValues{ListBuildingsResponse_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		return &ListBuildingsResponse_FieldTerminalPathArrayOfValues{ListBuildingsResponse_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListBuildingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return &ListBuildingsResponse_FieldTerminalPathArrayItemValue{ListBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.Building)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fp.selector))
	}
}

func (fp *ListBuildingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListBuildingsResponse_FieldSubPath struct {
	selector ListBuildingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListBuildingsResponse_FieldPath = (*ListBuildingsResponse_FieldSubPath)(nil)

func (fps *ListBuildingsResponse_FieldSubPath) Selector() ListBuildingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListBuildingsResponse_FieldSubPath) AsBuildingsSubPath() (building.Building_FieldPath, bool) {
	res, ok := fps.subPath.(building.Building_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListBuildingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListBuildingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListBuildingsResponse
func (fps *ListBuildingsResponse_FieldSubPath) Get(source *ListBuildingsResponse) (values []interface{}) {
	if asBuildingFieldPath, ok := fps.AsBuildingsSubPath(); ok {
		for _, item := range source.GetBuildings() {
			values = append(values, asBuildingFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListBuildingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListBuildingsResponse))
}

// GetSingle returns value of selected field from source ListBuildingsResponse
func (fps *ListBuildingsResponse_FieldSubPath) GetSingle(source *ListBuildingsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		if len(source.GetBuildings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBuildings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fps.selector))
	}
}

func (fps *ListBuildingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListBuildingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListBuildingsResponse_FieldSubPath) ClearValue(item *ListBuildingsResponse) {
	if item != nil {
		switch fps.selector {
		case ListBuildingsResponse_FieldPathSelectorBuildings:
			for _, subItem := range item.Buildings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListBuildingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListBuildingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListBuildingsResponse_FieldSubPath) WithIValue(value interface{}) ListBuildingsResponse_FieldPathValue {
	return &ListBuildingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListBuildingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListBuildingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListBuildingsResponse_FieldPathArrayOfValues {
	return &ListBuildingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListBuildingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListBuildingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListBuildingsResponse_FieldPathArrayItemValue {
	return &ListBuildingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListBuildingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListBuildingsResponse_FieldPathValue allows storing values for ListBuildingsResponse fields according to their type
type ListBuildingsResponse_FieldPathValue interface {
	ListBuildingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListBuildingsResponse)
	CompareWith(*ListBuildingsResponse) (cmp int, comparable bool)
}

func ParseListBuildingsResponse_FieldPathValue(pathStr, valueStr string) (ListBuildingsResponse_FieldPathValue, error) {
	fp, err := ParseListBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListBuildingsResponse_FieldPathValue), nil
}

func MustParseListBuildingsResponse_FieldPathValue(pathStr, valueStr string) ListBuildingsResponse_FieldPathValue {
	fpv, err := ParseListBuildingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListBuildingsResponse_FieldTerminalPathValue struct {
	ListBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListBuildingsResponse_FieldPathValue = (*ListBuildingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListBuildingsResponse' as interface{}
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) AsBuildingsValue() ([]*building.Building, bool) {
	res, ok := fpv.value.([]*building.Building)
	return res, ok
}
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListBuildingsResponse
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) SetTo(target **ListBuildingsResponse) {
	if *target == nil {
		*target = new(ListBuildingsResponse)
	}
	switch fpv.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		(*target).Buildings = fpv.value.([]*building.Building)
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*building.PagerCursor)
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*building.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListBuildingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListBuildingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListBuildingsResponse_FieldTerminalPathValue' with the value under path in 'ListBuildingsResponse'.
func (fpv *ListBuildingsResponse_FieldTerminalPathValue) CompareWith(source *ListBuildingsResponse) (int, bool) {
	switch fpv.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return 0, false
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListBuildingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListBuildingsResponse))
}

type ListBuildingsResponse_FieldSubPathValue struct {
	ListBuildingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListBuildingsResponse_FieldPathValue = (*ListBuildingsResponse_FieldSubPathValue)(nil)

func (fpvs *ListBuildingsResponse_FieldSubPathValue) AsBuildingsPathValue() (building.Building_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(building.Building_FieldPathValue)
	return res, ok
}

func (fpvs *ListBuildingsResponse_FieldSubPathValue) SetTo(target **ListBuildingsResponse) {
	if *target == nil {
		*target = new(ListBuildingsResponse)
	}
	switch fpvs.Selector() {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListBuildingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListBuildingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListBuildingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListBuildingsResponse_FieldSubPathValue) CompareWith(source *ListBuildingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListBuildingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListBuildingsResponse))
}

// ListBuildingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListBuildingsResponse according to their type
// Present only for array (repeated) types.
type ListBuildingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListBuildingsResponse_FieldPath
	ContainsValue(*ListBuildingsResponse) bool
}

// ParseListBuildingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListBuildingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListBuildingsResponse_FieldPathArrayItemValue), nil
}

func MustParseListBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListBuildingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListBuildingsResponse_FieldTerminalPathArrayItemValue struct {
	ListBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListBuildingsResponse_FieldPathArrayItemValue = (*ListBuildingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListBuildingsResponse as interface{}
func (fpaiv *ListBuildingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListBuildingsResponse_FieldTerminalPathArrayItemValue) AsBuildingsItemValue() (*building.Building, bool) {
	res, ok := fpaiv.value.(*building.Building)
	return res, ok
}

func (fpaiv *ListBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListBuildingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListBuildingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListBuildingsResponse'
func (fpaiv *ListBuildingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListBuildingsResponse) bool {
	slice := fpaiv.ListBuildingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListBuildingsResponse_FieldSubPathArrayItemValue struct {
	ListBuildingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListBuildingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListBuildingsResponse_FieldSubPathArrayItemValue) AsBuildingsPathItemValue() (building.Building_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListBuildingsResponse'
func (fpaivs *ListBuildingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListBuildingsResponse) bool {
	switch fpaivs.Selector() {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListBuildingsResponse: %d", fpaivs.Selector()))
	}
}

// ListBuildingsResponse_FieldPathArrayOfValues allows storing slice of values for ListBuildingsResponse fields according to their type
type ListBuildingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListBuildingsResponse_FieldPath
}

func ParseListBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListBuildingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListBuildingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListBuildingsResponse_FieldPathArrayOfValues), nil
}

func MustParseListBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListBuildingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListBuildingsResponse_FieldTerminalPathArrayOfValues struct {
	ListBuildingsResponse_FieldTerminalPath
	values interface{}
}

var _ ListBuildingsResponse_FieldPathArrayOfValues = (*ListBuildingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListBuildingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListBuildingsResponse_FieldPathSelectorBuildings:
		for _, v := range fpaov.values.([][]*building.Building) {
			values = append(values, v)
		}
	case ListBuildingsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	case ListBuildingsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListBuildingsResponse_FieldTerminalPathArrayOfValues) AsBuildingsArrayOfValues() ([][]*building.Building, bool) {
	res, ok := fpaov.values.([][]*building.Building)
	return res, ok
}
func (fpaov *ListBuildingsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}
func (fpaov *ListBuildingsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}

type ListBuildingsResponse_FieldSubPathArrayOfValues struct {
	ListBuildingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListBuildingsResponse_FieldPathArrayOfValues = (*ListBuildingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListBuildingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListBuildingsResponse_FieldSubPathArrayOfValues) AsBuildingsPathArrayOfValues() (building.Building_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(building.Building_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchBuildingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchBuildingRequest_FieldPathSelector
	Get(source *WatchBuildingRequest) []interface{}
	GetSingle(source *WatchBuildingRequest) (interface{}, bool)
	ClearValue(item *WatchBuildingRequest)

	// Those methods build corresponding WatchBuildingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchBuildingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchBuildingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchBuildingRequest_FieldPathArrayItemValue
}

type WatchBuildingRequest_FieldPathSelector int32

const (
	WatchBuildingRequest_FieldPathSelectorName      WatchBuildingRequest_FieldPathSelector = 0
	WatchBuildingRequest_FieldPathSelectorFieldMask WatchBuildingRequest_FieldPathSelector = 1
	WatchBuildingRequest_FieldPathSelectorView      WatchBuildingRequest_FieldPathSelector = 2
)

func (s WatchBuildingRequest_FieldPathSelector) String() string {
	switch s {
	case WatchBuildingRequest_FieldPathSelectorName:
		return "name"
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchBuildingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", s))
	}
}

func BuildWatchBuildingRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchBuildingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchBuildingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchBuildingRequest_FieldTerminalPath{selector: WatchBuildingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchBuildingRequest", fp)
}

func ParseWatchBuildingRequest_FieldPath(rawField string) (WatchBuildingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchBuildingRequest_FieldPath(fp)
}

func MustParseWatchBuildingRequest_FieldPath(rawField string) WatchBuildingRequest_FieldPath {
	fp, err := ParseWatchBuildingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchBuildingRequest_FieldTerminalPath struct {
	selector WatchBuildingRequest_FieldPathSelector
}

var _ WatchBuildingRequest_FieldPath = (*WatchBuildingRequest_FieldTerminalPath)(nil)

func (fp *WatchBuildingRequest_FieldTerminalPath) Selector() WatchBuildingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchBuildingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchBuildingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchBuildingRequest
func (fp *WatchBuildingRequest_FieldTerminalPath) Get(source *WatchBuildingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchBuildingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchBuildingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchBuildingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchBuildingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchBuildingRequest))
}

// GetSingle returns value pointed by specific field of from source WatchBuildingRequest
func (fp *WatchBuildingRequest_FieldTerminalPath) GetSingle(source *WatchBuildingRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchBuildingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchBuildingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		return (*building.Reference)(nil)
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	case WatchBuildingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingRequest_FieldTerminalPath) ClearValue(item *WatchBuildingRequest) {
	if item != nil {
		switch fp.selector {
		case WatchBuildingRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchBuildingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchBuildingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchBuildingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchBuildingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchBuildingRequest_FieldPathSelectorName ||
		fp.selector == WatchBuildingRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchBuildingRequest_FieldPathSelectorView
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithIValue(value interface{}) WatchBuildingRequest_FieldPathValue {
	switch fp.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		return &WatchBuildingRequest_FieldTerminalPathValue{WatchBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		return &WatchBuildingRequest_FieldTerminalPathValue{WatchBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case WatchBuildingRequest_FieldPathSelectorView:
		return &WatchBuildingRequest_FieldTerminalPathValue{WatchBuildingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchBuildingRequest_FieldPathArrayOfValues {
	fpaov := &WatchBuildingRequest_FieldTerminalPathArrayOfValues{WatchBuildingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		return &WatchBuildingRequest_FieldTerminalPathArrayOfValues{WatchBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		return &WatchBuildingRequest_FieldTerminalPathArrayOfValues{WatchBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case WatchBuildingRequest_FieldPathSelectorView:
		return &WatchBuildingRequest_FieldTerminalPathArrayOfValues{WatchBuildingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchBuildingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchBuildingRequest_FieldPathValue allows storing values for WatchBuildingRequest fields according to their type
type WatchBuildingRequest_FieldPathValue interface {
	WatchBuildingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchBuildingRequest)
	CompareWith(*WatchBuildingRequest) (cmp int, comparable bool)
}

func ParseWatchBuildingRequest_FieldPathValue(pathStr, valueStr string) (WatchBuildingRequest_FieldPathValue, error) {
	fp, err := ParseWatchBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchBuildingRequest_FieldPathValue), nil
}

func MustParseWatchBuildingRequest_FieldPathValue(pathStr, valueStr string) WatchBuildingRequest_FieldPathValue {
	fpv, err := ParseWatchBuildingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchBuildingRequest_FieldTerminalPathValue struct {
	WatchBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingRequest_FieldPathValue = (*WatchBuildingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchBuildingRequest' as interface{}
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) AsNameValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchBuildingRequest
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) SetTo(target **WatchBuildingRequest) {
	if *target == nil {
		*target = new(WatchBuildingRequest)
	}
	switch fpv.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*building.Reference)
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	case WatchBuildingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchBuildingRequest_FieldTerminalPathValue' with the value under path in 'WatchBuildingRequest'.
func (fpv *WatchBuildingRequest_FieldTerminalPathValue) CompareWith(source *WatchBuildingRequest) (int, bool) {
	switch fpv.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchBuildingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchBuildingRequest))
}

// WatchBuildingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchBuildingRequest according to their type
// Present only for array (repeated) types.
type WatchBuildingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchBuildingRequest_FieldPath
	ContainsValue(*WatchBuildingRequest) bool
}

// ParseWatchBuildingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchBuildingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchBuildingRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchBuildingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchBuildingRequest_FieldTerminalPathArrayItemValue struct {
	WatchBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingRequest_FieldPathArrayItemValue = (*WatchBuildingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchBuildingRequest as interface{}
func (fpaiv *WatchBuildingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchBuildingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchBuildingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchBuildingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchBuildingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchBuildingRequest'
func (fpaiv *WatchBuildingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchBuildingRequest) bool {
	slice := fpaiv.WatchBuildingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchBuildingRequest_FieldPathArrayOfValues allows storing slice of values for WatchBuildingRequest fields according to their type
type WatchBuildingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchBuildingRequest_FieldPath
}

func ParseWatchBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchBuildingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchBuildingRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchBuildingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchBuildingRequest_FieldTerminalPathArrayOfValues struct {
	WatchBuildingRequest_FieldTerminalPath
	values interface{}
}

var _ WatchBuildingRequest_FieldPathArrayOfValues = (*WatchBuildingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchBuildingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchBuildingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	case WatchBuildingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case WatchBuildingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchBuildingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
func (fpaov *WatchBuildingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *WatchBuildingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchBuildingResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchBuildingResponse_FieldPathSelector
	Get(source *WatchBuildingResponse) []interface{}
	GetSingle(source *WatchBuildingResponse) (interface{}, bool)
	ClearValue(item *WatchBuildingResponse)

	// Those methods build corresponding WatchBuildingResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchBuildingResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchBuildingResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchBuildingResponse_FieldPathArrayItemValue
}

type WatchBuildingResponse_FieldPathSelector int32

const (
	WatchBuildingResponse_FieldPathSelectorChange WatchBuildingResponse_FieldPathSelector = 0
)

func (s WatchBuildingResponse_FieldPathSelector) String() string {
	switch s {
	case WatchBuildingResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", s))
	}
}

func BuildWatchBuildingResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchBuildingResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchBuildingResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchBuildingResponse_FieldTerminalPath{selector: WatchBuildingResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchBuildingResponse", fp)
}

func ParseWatchBuildingResponse_FieldPath(rawField string) (WatchBuildingResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchBuildingResponse_FieldPath(fp)
}

func MustParseWatchBuildingResponse_FieldPath(rawField string) WatchBuildingResponse_FieldPath {
	fp, err := ParseWatchBuildingResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchBuildingResponse_FieldTerminalPath struct {
	selector WatchBuildingResponse_FieldPathSelector
}

var _ WatchBuildingResponse_FieldPath = (*WatchBuildingResponse_FieldTerminalPath)(nil)

func (fp *WatchBuildingResponse_FieldTerminalPath) Selector() WatchBuildingResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchBuildingResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchBuildingResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchBuildingResponse
func (fp *WatchBuildingResponse_FieldTerminalPath) Get(source *WatchBuildingResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchBuildingResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchBuildingResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchBuildingResponse))
}

// GetSingle returns value pointed by specific field of from source WatchBuildingResponse
func (fp *WatchBuildingResponse_FieldTerminalPath) GetSingle(source *WatchBuildingResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchBuildingResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchBuildingResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		return (*building.BuildingChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingResponse_FieldTerminalPath) ClearValue(item *WatchBuildingResponse) {
	if item != nil {
		switch fp.selector {
		case WatchBuildingResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchBuildingResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchBuildingResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchBuildingResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchBuildingResponse_FieldPathSelectorChange
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithIValue(value interface{}) WatchBuildingResponse_FieldPathValue {
	switch fp.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		return &WatchBuildingResponse_FieldTerminalPathValue{WatchBuildingResponse_FieldTerminalPath: *fp, value: value.(*building.BuildingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchBuildingResponse_FieldPathArrayOfValues {
	fpaov := &WatchBuildingResponse_FieldTerminalPathArrayOfValues{WatchBuildingResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		return &WatchBuildingResponse_FieldTerminalPathArrayOfValues{WatchBuildingResponse_FieldTerminalPath: *fp, values: values.([]*building.BuildingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchBuildingResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchBuildingResponse_FieldPathValue allows storing values for WatchBuildingResponse fields according to their type
type WatchBuildingResponse_FieldPathValue interface {
	WatchBuildingResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchBuildingResponse)
	CompareWith(*WatchBuildingResponse) (cmp int, comparable bool)
}

func ParseWatchBuildingResponse_FieldPathValue(pathStr, valueStr string) (WatchBuildingResponse_FieldPathValue, error) {
	fp, err := ParseWatchBuildingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchBuildingResponse_FieldPathValue), nil
}

func MustParseWatchBuildingResponse_FieldPathValue(pathStr, valueStr string) WatchBuildingResponse_FieldPathValue {
	fpv, err := ParseWatchBuildingResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchBuildingResponse_FieldTerminalPathValue struct {
	WatchBuildingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingResponse_FieldPathValue = (*WatchBuildingResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchBuildingResponse' as interface{}
func (fpv *WatchBuildingResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchBuildingResponse_FieldTerminalPathValue) AsChangeValue() (*building.BuildingChange, bool) {
	res, ok := fpv.value.(*building.BuildingChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchBuildingResponse
func (fpv *WatchBuildingResponse_FieldTerminalPathValue) SetTo(target **WatchBuildingResponse) {
	if *target == nil {
		*target = new(WatchBuildingResponse)
	}
	switch fpv.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*building.BuildingChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchBuildingResponse_FieldTerminalPathValue' with the value under path in 'WatchBuildingResponse'.
func (fpv *WatchBuildingResponse_FieldTerminalPathValue) CompareWith(source *WatchBuildingResponse) (int, bool) {
	switch fpv.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchBuildingResponse))
}

// WatchBuildingResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchBuildingResponse according to their type
// Present only for array (repeated) types.
type WatchBuildingResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchBuildingResponse_FieldPath
	ContainsValue(*WatchBuildingResponse) bool
}

// ParseWatchBuildingResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchBuildingResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchBuildingResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchBuildingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchBuildingResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchBuildingResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchBuildingResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchBuildingResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchBuildingResponse_FieldTerminalPathArrayItemValue struct {
	WatchBuildingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingResponse_FieldPathArrayItemValue = (*WatchBuildingResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchBuildingResponse as interface{}
func (fpaiv *WatchBuildingResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchBuildingResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchBuildingResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchBuildingResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchBuildingResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchBuildingResponse'
func (fpaiv *WatchBuildingResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchBuildingResponse) bool {
	slice := fpaiv.WatchBuildingResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchBuildingResponse_FieldPathArrayOfValues allows storing slice of values for WatchBuildingResponse fields according to their type
type WatchBuildingResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchBuildingResponse_FieldPath
}

func ParseWatchBuildingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchBuildingResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchBuildingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchBuildingResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchBuildingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchBuildingResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchBuildingResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchBuildingResponse_FieldTerminalPathArrayOfValues struct {
	WatchBuildingResponse_FieldTerminalPath
	values interface{}
}

var _ WatchBuildingResponse_FieldPathArrayOfValues = (*WatchBuildingResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchBuildingResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchBuildingResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*building.BuildingChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchBuildingResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*building.BuildingChange, bool) {
	res, ok := fpaov.values.([]*building.BuildingChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchBuildingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchBuildingsRequest_FieldPathSelector
	Get(source *WatchBuildingsRequest) []interface{}
	GetSingle(source *WatchBuildingsRequest) (interface{}, bool)
	ClearValue(item *WatchBuildingsRequest)

	// Those methods build corresponding WatchBuildingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchBuildingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchBuildingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchBuildingsRequest_FieldPathArrayItemValue
}

type WatchBuildingsRequest_FieldPathSelector int32

const (
	WatchBuildingsRequest_FieldPathSelectorType         WatchBuildingsRequest_FieldPathSelector = 0
	WatchBuildingsRequest_FieldPathSelectorParent       WatchBuildingsRequest_FieldPathSelector = 1
	WatchBuildingsRequest_FieldPathSelectorPageSize     WatchBuildingsRequest_FieldPathSelector = 2
	WatchBuildingsRequest_FieldPathSelectorPageToken    WatchBuildingsRequest_FieldPathSelector = 3
	WatchBuildingsRequest_FieldPathSelectorOrderBy      WatchBuildingsRequest_FieldPathSelector = 4
	WatchBuildingsRequest_FieldPathSelectorResumeToken  WatchBuildingsRequest_FieldPathSelector = 5
	WatchBuildingsRequest_FieldPathSelectorFilter       WatchBuildingsRequest_FieldPathSelector = 6
	WatchBuildingsRequest_FieldPathSelectorFieldMask    WatchBuildingsRequest_FieldPathSelector = 7
	WatchBuildingsRequest_FieldPathSelectorView         WatchBuildingsRequest_FieldPathSelector = 8
	WatchBuildingsRequest_FieldPathSelectorMaxChunkSize WatchBuildingsRequest_FieldPathSelector = 9
)

func (s WatchBuildingsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchBuildingsRequest_FieldPathSelectorType:
		return "type"
	case WatchBuildingsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchBuildingsRequest_FieldPathSelectorView:
		return "view"
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", s))
	}
}

func BuildWatchBuildingsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchBuildingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchBuildingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchBuildingsRequest_FieldTerminalPath{selector: WatchBuildingsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchBuildingsRequest", fp)
}

func ParseWatchBuildingsRequest_FieldPath(rawField string) (WatchBuildingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchBuildingsRequest_FieldPath(fp)
}

func MustParseWatchBuildingsRequest_FieldPath(rawField string) WatchBuildingsRequest_FieldPath {
	fp, err := ParseWatchBuildingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchBuildingsRequest_FieldTerminalPath struct {
	selector WatchBuildingsRequest_FieldPathSelector
}

var _ WatchBuildingsRequest_FieldPath = (*WatchBuildingsRequest_FieldTerminalPath)(nil)

func (fp *WatchBuildingsRequest_FieldTerminalPath) Selector() WatchBuildingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchBuildingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchBuildingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchBuildingsRequest
func (fp *WatchBuildingsRequest_FieldTerminalPath) Get(source *WatchBuildingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchBuildingsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchBuildingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchBuildingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchBuildingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchBuildingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchBuildingsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchBuildingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchBuildingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchBuildingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchBuildingsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchBuildingsRequest
func (fp *WatchBuildingsRequest_FieldTerminalPath) GetSingle(source *WatchBuildingsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchBuildingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchBuildingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchBuildingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchBuildingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchBuildingsRequest_FieldPathSelectorParent:
		return (*building.ParentReference)(nil)
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		return (*building.PagerCursor)(nil)
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		return (*building.OrderBy)(nil)
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		return (*building.Filter)(nil)
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	case WatchBuildingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) ClearValue(item *WatchBuildingsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchBuildingsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchBuildingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchBuildingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchBuildingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchBuildingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchBuildingsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchBuildingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchBuildingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchBuildingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchBuildingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchBuildingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchBuildingsRequest_FieldPathSelectorType ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorParent ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorView ||
		fp.selector == WatchBuildingsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchBuildingsRequest_FieldPathValue {
	switch fp.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchBuildingsRequest_FieldPathSelectorParent:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.ParentReference)}
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.OrderBy)}
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Filter)}
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case WatchBuildingsRequest_FieldPathSelectorView:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchBuildingsRequest_FieldTerminalPathValue{WatchBuildingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchBuildingsRequest_FieldPathArrayOfValues {
	fpaov := &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchBuildingsRequest_FieldPathSelectorParent:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.ParentReference)}
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.OrderBy)}
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Filter)}
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case WatchBuildingsRequest_FieldPathSelectorView:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchBuildingsRequest_FieldTerminalPathArrayOfValues{WatchBuildingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchBuildingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fp.selector))
	}
}

func (fp *WatchBuildingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchBuildingsRequest_FieldPathValue allows storing values for WatchBuildingsRequest fields according to their type
type WatchBuildingsRequest_FieldPathValue interface {
	WatchBuildingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchBuildingsRequest)
	CompareWith(*WatchBuildingsRequest) (cmp int, comparable bool)
}

func ParseWatchBuildingsRequest_FieldPathValue(pathStr, valueStr string) (WatchBuildingsRequest_FieldPathValue, error) {
	fp, err := ParseWatchBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchBuildingsRequest_FieldPathValue), nil
}

func MustParseWatchBuildingsRequest_FieldPathValue(pathStr, valueStr string) WatchBuildingsRequest_FieldPathValue {
	fpv, err := ParseWatchBuildingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchBuildingsRequest_FieldTerminalPathValue struct {
	WatchBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsRequest_FieldPathValue = (*WatchBuildingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchBuildingsRequest' as interface{}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsParentValue() (*building.ParentReference, bool) {
	res, ok := fpv.value.(*building.ParentReference)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsOrderByValue() (*building.OrderBy, bool) {
	res, ok := fpv.value.(*building.OrderBy)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsFilterValue() (*building.Filter, bool) {
	res, ok := fpv.value.(*building.Filter)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchBuildingsRequest
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) SetTo(target **WatchBuildingsRequest) {
	if *target == nil {
		*target = new(WatchBuildingsRequest)
	}
	switch fpv.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchBuildingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*building.ParentReference)
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*building.PagerCursor)
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*building.OrderBy)
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*building.Filter)
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	case WatchBuildingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchBuildingsRequest_FieldTerminalPathValue' with the value under path in 'WatchBuildingsRequest'.
func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) CompareWith(source *WatchBuildingsRequest) (int, bool) {
	switch fpv.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*building.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchBuildingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchBuildingsRequest))
}

// WatchBuildingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchBuildingsRequest according to their type
// Present only for array (repeated) types.
type WatchBuildingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchBuildingsRequest_FieldPath
	ContainsValue(*WatchBuildingsRequest) bool
}

// ParseWatchBuildingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchBuildingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchBuildingsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchBuildingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchBuildingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchBuildingsRequest_FieldTerminalPathArrayItemValue struct {
	WatchBuildingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsRequest_FieldPathArrayItemValue = (*WatchBuildingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchBuildingsRequest as interface{}
func (fpaiv *WatchBuildingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchBuildingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchBuildingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchBuildingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchBuildingsRequest'
func (fpaiv *WatchBuildingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchBuildingsRequest) bool {
	slice := fpaiv.WatchBuildingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchBuildingsRequest_FieldPathArrayOfValues allows storing slice of values for WatchBuildingsRequest fields according to their type
type WatchBuildingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchBuildingsRequest_FieldPath
}

func ParseWatchBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchBuildingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchBuildingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchBuildingsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchBuildingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchBuildingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchBuildingsRequest_FieldTerminalPathArrayOfValues struct {
	WatchBuildingsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchBuildingsRequest_FieldPathArrayOfValues = (*WatchBuildingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchBuildingsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*building.ParentReference) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*building.OrderBy) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*building.Filter) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchBuildingsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*building.ParentReference, bool) {
	res, ok := fpaov.values.([]*building.ParentReference)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*building.OrderBy, bool) {
	res, ok := fpaov.values.([]*building.OrderBy)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*building.Filter, bool) {
	res, ok := fpaov.values.([]*building.Filter)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchBuildingsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchBuildingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchBuildingsResponse_FieldPathSelector
	Get(source *WatchBuildingsResponse) []interface{}
	GetSingle(source *WatchBuildingsResponse) (interface{}, bool)
	ClearValue(item *WatchBuildingsResponse)

	// Those methods build corresponding WatchBuildingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchBuildingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchBuildingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchBuildingsResponse_FieldPathArrayItemValue
}

type WatchBuildingsResponse_FieldPathSelector int32

const (
	WatchBuildingsResponse_FieldPathSelectorBuildingChanges WatchBuildingsResponse_FieldPathSelector = 0
	WatchBuildingsResponse_FieldPathSelectorIsCurrent       WatchBuildingsResponse_FieldPathSelector = 1
	WatchBuildingsResponse_FieldPathSelectorPageTokenChange WatchBuildingsResponse_FieldPathSelector = 2
	WatchBuildingsResponse_FieldPathSelectorResumeToken     WatchBuildingsResponse_FieldPathSelector = 3
	WatchBuildingsResponse_FieldPathSelectorSnapshotSize    WatchBuildingsResponse_FieldPathSelector = 4
	WatchBuildingsResponse_FieldPathSelectorIsSoftReset     WatchBuildingsResponse_FieldPathSelector = 5
	WatchBuildingsResponse_FieldPathSelectorIsHardReset     WatchBuildingsResponse_FieldPathSelector = 6
)

func (s WatchBuildingsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return "building_changes"
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", s))
	}
}

func BuildWatchBuildingsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchBuildingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchBuildingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "building_changes", "buildingChanges", "building-changes":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorBuildingChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchBuildingsResponse_FieldTerminalPath{selector: WatchBuildingsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchBuildingsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchBuildingsResponse_FieldSubPath{selector: WatchBuildingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchBuildingsResponse", fp)
}

func ParseWatchBuildingsResponse_FieldPath(rawField string) (WatchBuildingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchBuildingsResponse_FieldPath(fp)
}

func MustParseWatchBuildingsResponse_FieldPath(rawField string) WatchBuildingsResponse_FieldPath {
	fp, err := ParseWatchBuildingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchBuildingsResponse_FieldTerminalPath struct {
	selector WatchBuildingsResponse_FieldPathSelector
}

var _ WatchBuildingsResponse_FieldPath = (*WatchBuildingsResponse_FieldTerminalPath)(nil)

func (fp *WatchBuildingsResponse_FieldTerminalPath) Selector() WatchBuildingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchBuildingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchBuildingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchBuildingsResponse
func (fp *WatchBuildingsResponse_FieldTerminalPath) Get(source *WatchBuildingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
			for _, value := range source.GetBuildingChanges() {
				values = append(values, value)
			}
		case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchBuildingsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchBuildingsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchBuildingsResponse
func (fp *WatchBuildingsResponse_FieldTerminalPath) GetSingle(source *WatchBuildingsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		res := source.GetBuildingChanges()
		return res, res != nil
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchBuildingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return ([]*building.BuildingChange)(nil)
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchBuildingsResponse_PageTokenChange)(nil)
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) ClearValue(item *WatchBuildingsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
			item.BuildingChanges = nil
		case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchBuildingsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchBuildingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchBuildingsResponse_FieldPathSelectorBuildingChanges ||
		fp.selector == WatchBuildingsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchBuildingsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchBuildingsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchBuildingsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchBuildingsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchBuildingsResponse_FieldPathValue {
	switch fp.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.([]*building.BuildingChange)}
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(*WatchBuildingsResponse_PageTokenChange)}
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		return &WatchBuildingsResponse_FieldTerminalPathValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchBuildingsResponse_FieldPathArrayOfValues {
	fpaov := &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([][]*building.BuildingChange)}
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]*WatchBuildingsResponse_PageTokenChange)}
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		return &WatchBuildingsResponse_FieldTerminalPathArrayOfValues{WatchBuildingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchBuildingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return &WatchBuildingsResponse_FieldTerminalPathArrayItemValue{WatchBuildingsResponse_FieldTerminalPath: *fp, value: value.(*building.BuildingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchBuildingsResponse_FieldSubPath struct {
	selector WatchBuildingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchBuildingsResponse_FieldPath = (*WatchBuildingsResponse_FieldSubPath)(nil)

func (fps *WatchBuildingsResponse_FieldSubPath) Selector() WatchBuildingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchBuildingsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchBuildingsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchBuildingsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchBuildingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchBuildingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchBuildingsResponse
func (fps *WatchBuildingsResponse_FieldSubPath) Get(source *WatchBuildingsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchBuildingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchBuildingsResponse))
}

// GetSingle returns value of selected field from source WatchBuildingsResponse
func (fps *WatchBuildingsResponse_FieldSubPath) GetSingle(source *WatchBuildingsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fps.selector))
	}
}

func (fps *WatchBuildingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchBuildingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchBuildingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchBuildingsResponse_FieldSubPath) ClearValue(item *WatchBuildingsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchBuildingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchBuildingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchBuildingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithIValue(value interface{}) WatchBuildingsResponse_FieldPathValue {
	return &WatchBuildingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchBuildingsResponse_FieldPathArrayOfValues {
	return &WatchBuildingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchBuildingsResponse_FieldPathArrayItemValue {
	return &WatchBuildingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchBuildingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchBuildingsResponse_FieldPathValue allows storing values for WatchBuildingsResponse fields according to their type
type WatchBuildingsResponse_FieldPathValue interface {
	WatchBuildingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchBuildingsResponse)
	CompareWith(*WatchBuildingsResponse) (cmp int, comparable bool)
}

func ParseWatchBuildingsResponse_FieldPathValue(pathStr, valueStr string) (WatchBuildingsResponse_FieldPathValue, error) {
	fp, err := ParseWatchBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchBuildingsResponse_FieldPathValue), nil
}

func MustParseWatchBuildingsResponse_FieldPathValue(pathStr, valueStr string) WatchBuildingsResponse_FieldPathValue {
	fpv, err := ParseWatchBuildingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchBuildingsResponse_FieldTerminalPathValue struct {
	WatchBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsResponse_FieldPathValue = (*WatchBuildingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchBuildingsResponse' as interface{}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsBuildingChangesValue() ([]*building.BuildingChange, bool) {
	res, ok := fpv.value.([]*building.BuildingChange)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchBuildingsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchBuildingsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchBuildingsResponse
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) SetTo(target **WatchBuildingsResponse) {
	if *target == nil {
		*target = new(WatchBuildingsResponse)
	}
	switch fpv.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		(*target).BuildingChanges = fpv.value.([]*building.BuildingChange)
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchBuildingsResponse_PageTokenChange)
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchBuildingsResponse_FieldTerminalPathValue' with the value under path in 'WatchBuildingsResponse'.
func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) CompareWith(source *WatchBuildingsResponse) (int, bool) {
	switch fpv.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		return 0, false
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchBuildingsResponse))
}

type WatchBuildingsResponse_FieldSubPathValue struct {
	WatchBuildingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchBuildingsResponse_FieldPathValue = (*WatchBuildingsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchBuildingsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchBuildingsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) SetTo(target **WatchBuildingsResponse) {
	if *target == nil {
		*target = new(WatchBuildingsResponse)
	}
	switch fpvs.Selector() {
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchBuildingsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) CompareWith(source *WatchBuildingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchBuildingsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchBuildingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchBuildingsResponse))
}

// WatchBuildingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchBuildingsResponse according to their type
// Present only for array (repeated) types.
type WatchBuildingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchBuildingsResponse_FieldPath
	ContainsValue(*WatchBuildingsResponse) bool
}

// ParseWatchBuildingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchBuildingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchBuildingsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchBuildingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchBuildingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchBuildingsResponse_FieldTerminalPathArrayItemValue struct {
	WatchBuildingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsResponse_FieldPathArrayItemValue = (*WatchBuildingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchBuildingsResponse as interface{}
func (fpaiv *WatchBuildingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchBuildingsResponse_FieldTerminalPathArrayItemValue) AsBuildingChangesItemValue() (*building.BuildingChange, bool) {
	res, ok := fpaiv.value.(*building.BuildingChange)
	return res, ok
}

func (fpaiv *WatchBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchBuildingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchBuildingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchBuildingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchBuildingsResponse'
func (fpaiv *WatchBuildingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchBuildingsResponse) bool {
	slice := fpaiv.WatchBuildingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchBuildingsResponse_FieldSubPathArrayItemValue struct {
	WatchBuildingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchBuildingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchBuildingsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchBuildingsResponse'
func (fpaivs *WatchBuildingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchBuildingsResponse) bool {
	switch fpaivs.Selector() {
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse: %d", fpaivs.Selector()))
	}
}

// WatchBuildingsResponse_FieldPathArrayOfValues allows storing slice of values for WatchBuildingsResponse fields according to their type
type WatchBuildingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchBuildingsResponse_FieldPath
}

func ParseWatchBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchBuildingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchBuildingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchBuildingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchBuildingsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchBuildingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchBuildingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchBuildingsResponse_FieldTerminalPathArrayOfValues struct {
	WatchBuildingsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchBuildingsResponse_FieldPathArrayOfValues = (*WatchBuildingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchBuildingsResponse_FieldPathSelectorBuildingChanges:
		for _, v := range fpaov.values.([][]*building.BuildingChange) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchBuildingsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchBuildingsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsBuildingChangesArrayOfValues() ([][]*building.BuildingChange, bool) {
	res, ok := fpaov.values.([][]*building.BuildingChange)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchBuildingsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchBuildingsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchBuildingsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchBuildingsResponse_FieldSubPathArrayOfValues struct {
	WatchBuildingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchBuildingsResponse_FieldPathArrayOfValues = (*WatchBuildingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchBuildingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchBuildingsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchBuildingsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchBuildingsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchBuildingsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchBuildingsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchBuildingsResponse_PageTokenChange)

	// Those methods build corresponding WatchBuildingsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchBuildingsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchBuildingsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchBuildingsResponsePageTokenChange_FieldPathSelector = 0
	WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchBuildingsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchBuildingsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchBuildingsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchBuildingsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchBuildingsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchBuildingsResponsePageTokenChange_FieldTerminalPath{selector: WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchBuildingsResponsePageTokenChange_FieldTerminalPath{selector: WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchBuildingsResponse_PageTokenChange", fp)
}

func ParseWatchBuildingsResponsePageTokenChange_FieldPath(rawField string) (WatchBuildingsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchBuildingsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchBuildingsResponsePageTokenChange_FieldPath(rawField string) WatchBuildingsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchBuildingsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchBuildingsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchBuildingsResponsePageTokenChange_FieldPathSelector
}

var _ WatchBuildingsResponsePageTokenChange_FieldPath = (*WatchBuildingsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) Selector() WatchBuildingsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchBuildingsResponse_PageTokenChange
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchBuildingsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchBuildingsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchBuildingsResponse_PageTokenChange
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchBuildingsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchBuildingsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*building.PagerCursor)(nil)
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*building.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchBuildingsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchBuildingsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchBuildingsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue{WatchBuildingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue{WatchBuildingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*building.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchBuildingsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchBuildingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchBuildingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*building.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchBuildingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchBuildingsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchBuildingsResponsePageTokenChange_FieldPathValue interface {
	WatchBuildingsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchBuildingsResponse_PageTokenChange)
	CompareWith(*WatchBuildingsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchBuildingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchBuildingsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchBuildingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchBuildingsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchBuildingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchBuildingsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchBuildingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchBuildingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsResponsePageTokenChange_FieldPathValue = (*WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}
func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*building.PagerCursor, bool) {
	res, ok := fpv.value.(*building.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchBuildingsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchBuildingsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*building.PagerCursor)
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*building.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchBuildingsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchBuildingsResponse_PageTokenChange'.
func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchBuildingsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchBuildingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchBuildingsResponse_PageTokenChange))
}

// WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchBuildingsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchBuildingsResponse_PageTokenChange) bool
}

// ParseWatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchBuildingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchBuildingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchBuildingsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchBuildingsResponse_PageTokenChange as interface{}
func (fpaiv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchBuildingsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchBuildingsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchBuildingsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchBuildingsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchBuildingsResponsePageTokenChange_FieldPath
}

func ParseWatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchBuildingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchBuildingsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchBuildingsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	case WatchBuildingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*building.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}
func (fpaov *WatchBuildingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*building.PagerCursor, bool) {
	res, ok := fpaov.values.([]*building.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateBuildingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateBuildingRequest_FieldPathSelector
	Get(source *CreateBuildingRequest) []interface{}
	GetSingle(source *CreateBuildingRequest) (interface{}, bool)
	ClearValue(item *CreateBuildingRequest)

	// Those methods build corresponding CreateBuildingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateBuildingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateBuildingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateBuildingRequest_FieldPathArrayItemValue
}

type CreateBuildingRequest_FieldPathSelector int32

const (
	CreateBuildingRequest_FieldPathSelectorParent   CreateBuildingRequest_FieldPathSelector = 0
	CreateBuildingRequest_FieldPathSelectorBuilding CreateBuildingRequest_FieldPathSelector = 1
)

func (s CreateBuildingRequest_FieldPathSelector) String() string {
	switch s {
	case CreateBuildingRequest_FieldPathSelectorParent:
		return "parent"
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return "building"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", s))
	}
}

func BuildCreateBuildingRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateBuildingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateBuildingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateBuildingRequest_FieldTerminalPath{selector: CreateBuildingRequest_FieldPathSelectorParent}, nil
		case "building":
			return &CreateBuildingRequest_FieldTerminalPath{selector: CreateBuildingRequest_FieldPathSelectorBuilding}, nil
		}
	} else {
		switch fp[0] {
		case "building":
			if subpath, err := building.BuildBuilding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateBuildingRequest_FieldSubPath{selector: CreateBuildingRequest_FieldPathSelectorBuilding, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateBuildingRequest", fp)
}

func ParseCreateBuildingRequest_FieldPath(rawField string) (CreateBuildingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateBuildingRequest_FieldPath(fp)
}

func MustParseCreateBuildingRequest_FieldPath(rawField string) CreateBuildingRequest_FieldPath {
	fp, err := ParseCreateBuildingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateBuildingRequest_FieldTerminalPath struct {
	selector CreateBuildingRequest_FieldPathSelector
}

var _ CreateBuildingRequest_FieldPath = (*CreateBuildingRequest_FieldTerminalPath)(nil)

func (fp *CreateBuildingRequest_FieldTerminalPath) Selector() CreateBuildingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateBuildingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateBuildingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateBuildingRequest
func (fp *CreateBuildingRequest_FieldTerminalPath) Get(source *CreateBuildingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateBuildingRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateBuildingRequest_FieldPathSelectorBuilding:
			if source.Building != nil {
				values = append(values, source.Building)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateBuildingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateBuildingRequest))
}

// GetSingle returns value pointed by specific field of from source CreateBuildingRequest
func (fp *CreateBuildingRequest_FieldTerminalPath) GetSingle(source *CreateBuildingRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		res := source.GetBuilding()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
	}
}

func (fp *CreateBuildingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateBuildingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		return (*building.ParentReference)(nil)
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return (*building.Building)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
	}
}

func (fp *CreateBuildingRequest_FieldTerminalPath) ClearValue(item *CreateBuildingRequest) {
	if item != nil {
		switch fp.selector {
		case CreateBuildingRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateBuildingRequest_FieldPathSelectorBuilding:
			item.Building = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateBuildingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateBuildingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateBuildingRequest_FieldPathSelectorParent
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithIValue(value interface{}) CreateBuildingRequest_FieldPathValue {
	switch fp.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		return &CreateBuildingRequest_FieldTerminalPathValue{CreateBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.ParentReference)}
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return &CreateBuildingRequest_FieldTerminalPathValue{CreateBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Building)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
	}
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateBuildingRequest_FieldPathArrayOfValues {
	fpaov := &CreateBuildingRequest_FieldTerminalPathArrayOfValues{CreateBuildingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		return &CreateBuildingRequest_FieldTerminalPathArrayOfValues{CreateBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.ParentReference)}
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return &CreateBuildingRequest_FieldTerminalPathArrayOfValues{CreateBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Building)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateBuildingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fp.selector))
	}
}

func (fp *CreateBuildingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateBuildingRequest_FieldSubPath struct {
	selector CreateBuildingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateBuildingRequest_FieldPath = (*CreateBuildingRequest_FieldSubPath)(nil)

func (fps *CreateBuildingRequest_FieldSubPath) Selector() CreateBuildingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateBuildingRequest_FieldSubPath) AsBuildingSubPath() (building.Building_FieldPath, bool) {
	res, ok := fps.subPath.(building.Building_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateBuildingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateBuildingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateBuildingRequest
func (fps *CreateBuildingRequest_FieldSubPath) Get(source *CreateBuildingRequest) (values []interface{}) {
	if asBuildingFieldPath, ok := fps.AsBuildingSubPath(); ok {
		values = append(values, asBuildingFieldPath.Get(source.GetBuilding())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateBuildingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateBuildingRequest))
}

// GetSingle returns value of selected field from source CreateBuildingRequest
func (fps *CreateBuildingRequest_FieldSubPath) GetSingle(source *CreateBuildingRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		if source.GetBuilding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBuilding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fps.selector))
	}
}

func (fps *CreateBuildingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateBuildingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateBuildingRequest_FieldSubPath) ClearValue(item *CreateBuildingRequest) {
	if item != nil {
		switch fps.selector {
		case CreateBuildingRequest_FieldPathSelectorBuilding:
			fps.subPath.ClearValueRaw(item.Building)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateBuildingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateBuildingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateBuildingRequest_FieldSubPath) WithIValue(value interface{}) CreateBuildingRequest_FieldPathValue {
	return &CreateBuildingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateBuildingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateBuildingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateBuildingRequest_FieldPathArrayOfValues {
	return &CreateBuildingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateBuildingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateBuildingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateBuildingRequest_FieldPathArrayItemValue {
	return &CreateBuildingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateBuildingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateBuildingRequest_FieldPathValue allows storing values for CreateBuildingRequest fields according to their type
type CreateBuildingRequest_FieldPathValue interface {
	CreateBuildingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateBuildingRequest)
	CompareWith(*CreateBuildingRequest) (cmp int, comparable bool)
}

func ParseCreateBuildingRequest_FieldPathValue(pathStr, valueStr string) (CreateBuildingRequest_FieldPathValue, error) {
	fp, err := ParseCreateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateBuildingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateBuildingRequest_FieldPathValue), nil
}

func MustParseCreateBuildingRequest_FieldPathValue(pathStr, valueStr string) CreateBuildingRequest_FieldPathValue {
	fpv, err := ParseCreateBuildingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateBuildingRequest_FieldTerminalPathValue struct {
	CreateBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateBuildingRequest_FieldPathValue = (*CreateBuildingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateBuildingRequest' as interface{}
func (fpv *CreateBuildingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateBuildingRequest_FieldTerminalPathValue) AsParentValue() (*building.ParentReference, bool) {
	res, ok := fpv.value.(*building.ParentReference)
	return res, ok
}
func (fpv *CreateBuildingRequest_FieldTerminalPathValue) AsBuildingValue() (*building.Building, bool) {
	res, ok := fpv.value.(*building.Building)
	return res, ok
}

// SetTo stores value for selected field for object CreateBuildingRequest
func (fpv *CreateBuildingRequest_FieldTerminalPathValue) SetTo(target **CreateBuildingRequest) {
	if *target == nil {
		*target = new(CreateBuildingRequest)
	}
	switch fpv.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*building.ParentReference)
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		(*target).Building = fpv.value.(*building.Building)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateBuildingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateBuildingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateBuildingRequest_FieldTerminalPathValue' with the value under path in 'CreateBuildingRequest'.
func (fpv *CreateBuildingRequest_FieldTerminalPathValue) CompareWith(source *CreateBuildingRequest) (int, bool) {
	switch fpv.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*building.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateBuildingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateBuildingRequest))
}

type CreateBuildingRequest_FieldSubPathValue struct {
	CreateBuildingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateBuildingRequest_FieldPathValue = (*CreateBuildingRequest_FieldSubPathValue)(nil)

func (fpvs *CreateBuildingRequest_FieldSubPathValue) AsBuildingPathValue() (building.Building_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(building.Building_FieldPathValue)
	return res, ok
}

func (fpvs *CreateBuildingRequest_FieldSubPathValue) SetTo(target **CreateBuildingRequest) {
	if *target == nil {
		*target = new(CreateBuildingRequest)
	}
	switch fpvs.Selector() {
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		fpvs.subPathValue.(building.Building_FieldPathValue).SetTo(&(*target).Building)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateBuildingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateBuildingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateBuildingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateBuildingRequest_FieldSubPathValue) CompareWith(source *CreateBuildingRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return fpvs.subPathValue.(building.Building_FieldPathValue).CompareWith(source.GetBuilding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateBuildingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateBuildingRequest))
}

// CreateBuildingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateBuildingRequest according to their type
// Present only for array (repeated) types.
type CreateBuildingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateBuildingRequest_FieldPath
	ContainsValue(*CreateBuildingRequest) bool
}

// ParseCreateBuildingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateBuildingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateBuildingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateBuildingRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateBuildingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateBuildingRequest_FieldTerminalPathArrayItemValue struct {
	CreateBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateBuildingRequest_FieldPathArrayItemValue = (*CreateBuildingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateBuildingRequest as interface{}
func (fpaiv *CreateBuildingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateBuildingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateBuildingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateBuildingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateBuildingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateBuildingRequest'
func (fpaiv *CreateBuildingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateBuildingRequest) bool {
	slice := fpaiv.CreateBuildingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateBuildingRequest_FieldSubPathArrayItemValue struct {
	CreateBuildingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateBuildingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateBuildingRequest_FieldSubPathArrayItemValue) AsBuildingPathItemValue() (building.Building_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateBuildingRequest'
func (fpaivs *CreateBuildingRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateBuildingRequest) bool {
	switch fpaivs.Selector() {
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		return fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue).ContainsValue(source.GetBuilding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateBuildingRequest: %d", fpaivs.Selector()))
	}
}

// CreateBuildingRequest_FieldPathArrayOfValues allows storing slice of values for CreateBuildingRequest fields according to their type
type CreateBuildingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateBuildingRequest_FieldPath
}

func ParseCreateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateBuildingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateBuildingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateBuildingRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateBuildingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateBuildingRequest_FieldTerminalPathArrayOfValues struct {
	CreateBuildingRequest_FieldTerminalPath
	values interface{}
}

var _ CreateBuildingRequest_FieldPathArrayOfValues = (*CreateBuildingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateBuildingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateBuildingRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*building.ParentReference) {
			values = append(values, v)
		}
	case CreateBuildingRequest_FieldPathSelectorBuilding:
		for _, v := range fpaov.values.([]*building.Building) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateBuildingRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*building.ParentReference, bool) {
	res, ok := fpaov.values.([]*building.ParentReference)
	return res, ok
}
func (fpaov *CreateBuildingRequest_FieldTerminalPathArrayOfValues) AsBuildingArrayOfValues() ([]*building.Building, bool) {
	res, ok := fpaov.values.([]*building.Building)
	return res, ok
}

type CreateBuildingRequest_FieldSubPathArrayOfValues struct {
	CreateBuildingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateBuildingRequest_FieldPathArrayOfValues = (*CreateBuildingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateBuildingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateBuildingRequest_FieldSubPathArrayOfValues) AsBuildingPathArrayOfValues() (building.Building_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(building.Building_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateBuildingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateBuildingRequest_FieldPathSelector
	Get(source *UpdateBuildingRequest) []interface{}
	GetSingle(source *UpdateBuildingRequest) (interface{}, bool)
	ClearValue(item *UpdateBuildingRequest)

	// Those methods build corresponding UpdateBuildingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateBuildingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateBuildingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateBuildingRequest_FieldPathArrayItemValue
}

type UpdateBuildingRequest_FieldPathSelector int32

const (
	UpdateBuildingRequest_FieldPathSelectorBuilding   UpdateBuildingRequest_FieldPathSelector = 0
	UpdateBuildingRequest_FieldPathSelectorUpdateMask UpdateBuildingRequest_FieldPathSelector = 1
	UpdateBuildingRequest_FieldPathSelectorCas        UpdateBuildingRequest_FieldPathSelector = 2
)

func (s UpdateBuildingRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return "building"
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", s))
	}
}

func BuildUpdateBuildingRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateBuildingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateBuildingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "building":
			return &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorBuilding}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateBuildingRequest_FieldTerminalPath{selector: UpdateBuildingRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "building":
			if subpath, err := building.BuildBuilding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateBuildingRequest_FieldSubPath{selector: UpdateBuildingRequest_FieldPathSelectorBuilding, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateBuildingRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateBuildingRequest_FieldSubPath{selector: UpdateBuildingRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateBuildingRequest", fp)
}

func ParseUpdateBuildingRequest_FieldPath(rawField string) (UpdateBuildingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateBuildingRequest_FieldPath(fp)
}

func MustParseUpdateBuildingRequest_FieldPath(rawField string) UpdateBuildingRequest_FieldPath {
	fp, err := ParseUpdateBuildingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateBuildingRequest_FieldTerminalPath struct {
	selector UpdateBuildingRequest_FieldPathSelector
}

var _ UpdateBuildingRequest_FieldPath = (*UpdateBuildingRequest_FieldTerminalPath)(nil)

func (fp *UpdateBuildingRequest_FieldTerminalPath) Selector() UpdateBuildingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateBuildingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateBuildingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateBuildingRequest
func (fp *UpdateBuildingRequest_FieldTerminalPath) Get(source *UpdateBuildingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateBuildingRequest_FieldPathSelectorBuilding:
			if source.Building != nil {
				values = append(values, source.Building)
			}
		case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateBuildingRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateBuildingRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateBuildingRequest
func (fp *UpdateBuildingRequest_FieldTerminalPath) GetSingle(source *UpdateBuildingRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		res := source.GetBuilding()
		return res, res != nil
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateBuildingRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateBuildingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return (*building.Building)(nil)
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		return (*building.Building_FieldMask)(nil)
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return (*UpdateBuildingRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) ClearValue(item *UpdateBuildingRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateBuildingRequest_FieldPathSelectorBuilding:
			item.Building = nil
		case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateBuildingRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateBuildingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateBuildingRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateBuildingRequest_FieldPathValue {
	switch fp.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return &UpdateBuildingRequest_FieldTerminalPathValue{UpdateBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Building)}
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		return &UpdateBuildingRequest_FieldTerminalPathValue{UpdateBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return &UpdateBuildingRequest_FieldTerminalPathValue{UpdateBuildingRequest_FieldTerminalPath: *fp, value: value.(*UpdateBuildingRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateBuildingRequest_FieldPathArrayOfValues {
	fpaov := &UpdateBuildingRequest_FieldTerminalPathArrayOfValues{UpdateBuildingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return &UpdateBuildingRequest_FieldTerminalPathArrayOfValues{UpdateBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Building)}
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		return &UpdateBuildingRequest_FieldTerminalPathArrayOfValues{UpdateBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return &UpdateBuildingRequest_FieldTerminalPathArrayOfValues{UpdateBuildingRequest_FieldTerminalPath: *fp, values: values.([]*UpdateBuildingRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateBuildingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateBuildingRequest_FieldSubPath struct {
	selector UpdateBuildingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateBuildingRequest_FieldPath = (*UpdateBuildingRequest_FieldSubPath)(nil)

func (fps *UpdateBuildingRequest_FieldSubPath) Selector() UpdateBuildingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateBuildingRequest_FieldSubPath) AsBuildingSubPath() (building.Building_FieldPath, bool) {
	res, ok := fps.subPath.(building.Building_FieldPath)
	return res, ok
}
func (fps *UpdateBuildingRequest_FieldSubPath) AsCasSubPath() (UpdateBuildingRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateBuildingRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateBuildingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateBuildingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateBuildingRequest
func (fps *UpdateBuildingRequest_FieldSubPath) Get(source *UpdateBuildingRequest) (values []interface{}) {
	if asBuildingFieldPath, ok := fps.AsBuildingSubPath(); ok {
		values = append(values, asBuildingFieldPath.Get(source.GetBuilding())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateBuildingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateBuildingRequest))
}

// GetSingle returns value of selected field from source UpdateBuildingRequest
func (fps *UpdateBuildingRequest_FieldSubPath) GetSingle(source *UpdateBuildingRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		if source.GetBuilding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBuilding())
	case UpdateBuildingRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fps.selector))
	}
}

func (fps *UpdateBuildingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateBuildingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateBuildingRequest_FieldSubPath) ClearValue(item *UpdateBuildingRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateBuildingRequest_FieldPathSelectorBuilding:
			fps.subPath.ClearValueRaw(item.Building)
		case UpdateBuildingRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateBuildingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateBuildingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithIValue(value interface{}) UpdateBuildingRequest_FieldPathValue {
	return &UpdateBuildingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateBuildingRequest_FieldPathArrayOfValues {
	return &UpdateBuildingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateBuildingRequest_FieldPathArrayItemValue {
	return &UpdateBuildingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateBuildingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateBuildingRequest_FieldPathValue allows storing values for UpdateBuildingRequest fields according to their type
type UpdateBuildingRequest_FieldPathValue interface {
	UpdateBuildingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateBuildingRequest)
	CompareWith(*UpdateBuildingRequest) (cmp int, comparable bool)
}

func ParseUpdateBuildingRequest_FieldPathValue(pathStr, valueStr string) (UpdateBuildingRequest_FieldPathValue, error) {
	fp, err := ParseUpdateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateBuildingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateBuildingRequest_FieldPathValue), nil
}

func MustParseUpdateBuildingRequest_FieldPathValue(pathStr, valueStr string) UpdateBuildingRequest_FieldPathValue {
	fpv, err := ParseUpdateBuildingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateBuildingRequest_FieldTerminalPathValue struct {
	UpdateBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateBuildingRequest_FieldPathValue = (*UpdateBuildingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateBuildingRequest' as interface{}
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) AsBuildingValue() (*building.Building, bool) {
	res, ok := fpv.value.(*building.Building)
	return res, ok
}
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) AsCasValue() (*UpdateBuildingRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateBuildingRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateBuildingRequest
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) SetTo(target **UpdateBuildingRequest) {
	if *target == nil {
		*target = new(UpdateBuildingRequest)
	}
	switch fpv.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		(*target).Building = fpv.value.(*building.Building)
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*building.Building_FieldMask)
	case UpdateBuildingRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateBuildingRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateBuildingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateBuildingRequest_FieldTerminalPathValue' with the value under path in 'UpdateBuildingRequest'.
func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) CompareWith(source *UpdateBuildingRequest) (int, bool) {
	switch fpv.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return 0, false
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateBuildingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateBuildingRequest))
}

type UpdateBuildingRequest_FieldSubPathValue struct {
	UpdateBuildingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateBuildingRequest_FieldPathValue = (*UpdateBuildingRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) AsBuildingPathValue() (building.Building_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(building.Building_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateBuildingRequest_FieldSubPathValue) AsCasPathValue() (UpdateBuildingRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateBuildingRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) SetTo(target **UpdateBuildingRequest) {
	if *target == nil {
		*target = new(UpdateBuildingRequest)
	}
	switch fpvs.Selector() {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		fpvs.subPathValue.(building.Building_FieldPathValue).SetTo(&(*target).Building)
	case UpdateBuildingRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateBuildingRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateBuildingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) CompareWith(source *UpdateBuildingRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return fpvs.subPathValue.(building.Building_FieldPathValue).CompareWith(source.GetBuilding())
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateBuildingRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateBuildingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateBuildingRequest))
}

// UpdateBuildingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateBuildingRequest according to their type
// Present only for array (repeated) types.
type UpdateBuildingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateBuildingRequest_FieldPath
	ContainsValue(*UpdateBuildingRequest) bool
}

// ParseUpdateBuildingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateBuildingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateBuildingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateBuildingRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateBuildingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateBuildingRequest_FieldTerminalPathArrayItemValue struct {
	UpdateBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateBuildingRequest_FieldPathArrayItemValue = (*UpdateBuildingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateBuildingRequest as interface{}
func (fpaiv *UpdateBuildingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateBuildingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateBuildingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateBuildingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateBuildingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateBuildingRequest'
func (fpaiv *UpdateBuildingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateBuildingRequest) bool {
	slice := fpaiv.UpdateBuildingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateBuildingRequest_FieldSubPathArrayItemValue struct {
	UpdateBuildingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateBuildingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateBuildingRequest_FieldSubPathArrayItemValue) AsBuildingPathItemValue() (building.Building_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateBuildingRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateBuildingRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateBuildingRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateBuildingRequest'
func (fpaivs *UpdateBuildingRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateBuildingRequest) bool {
	switch fpaivs.Selector() {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		return fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue).ContainsValue(source.GetBuilding())
	case UpdateBuildingRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateBuildingRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest: %d", fpaivs.Selector()))
	}
}

// UpdateBuildingRequest_FieldPathArrayOfValues allows storing slice of values for UpdateBuildingRequest fields according to their type
type UpdateBuildingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateBuildingRequest_FieldPath
}

func ParseUpdateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateBuildingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateBuildingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateBuildingRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateBuildingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateBuildingRequest_FieldTerminalPathArrayOfValues struct {
	UpdateBuildingRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateBuildingRequest_FieldPathArrayOfValues = (*UpdateBuildingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateBuildingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateBuildingRequest_FieldPathSelectorBuilding:
		for _, v := range fpaov.values.([]*building.Building) {
			values = append(values, v)
		}
	case UpdateBuildingRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	case UpdateBuildingRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateBuildingRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateBuildingRequest_FieldTerminalPathArrayOfValues) AsBuildingArrayOfValues() ([]*building.Building, bool) {
	res, ok := fpaov.values.([]*building.Building)
	return res, ok
}
func (fpaov *UpdateBuildingRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}
func (fpaov *UpdateBuildingRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateBuildingRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateBuildingRequest_CAS)
	return res, ok
}

type UpdateBuildingRequest_FieldSubPathArrayOfValues struct {
	UpdateBuildingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateBuildingRequest_FieldPathArrayOfValues = (*UpdateBuildingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateBuildingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateBuildingRequest_FieldSubPathArrayOfValues) AsBuildingPathArrayOfValues() (building.Building_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(building.Building_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateBuildingRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateBuildingRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateBuildingRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateBuildingRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateBuildingRequestCAS_FieldPathSelector
	Get(source *UpdateBuildingRequest_CAS) []interface{}
	GetSingle(source *UpdateBuildingRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateBuildingRequest_CAS)

	// Those methods build corresponding UpdateBuildingRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateBuildingRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateBuildingRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateBuildingRequestCAS_FieldPathArrayItemValue
}

type UpdateBuildingRequestCAS_FieldPathSelector int32

const (
	UpdateBuildingRequestCAS_FieldPathSelectorConditionalState UpdateBuildingRequestCAS_FieldPathSelector = 0
	UpdateBuildingRequestCAS_FieldPathSelectorFieldMask        UpdateBuildingRequestCAS_FieldPathSelector = 1
)

func (s UpdateBuildingRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", s))
	}
}

func BuildUpdateBuildingRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateBuildingRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateBuildingRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateBuildingRequestCAS_FieldTerminalPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateBuildingRequestCAS_FieldTerminalPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := building.BuildBuilding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateBuildingRequestCAS_FieldSubPath{selector: UpdateBuildingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateBuildingRequest_CAS", fp)
}

func ParseUpdateBuildingRequestCAS_FieldPath(rawField string) (UpdateBuildingRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateBuildingRequestCAS_FieldPath(fp)
}

func MustParseUpdateBuildingRequestCAS_FieldPath(rawField string) UpdateBuildingRequestCAS_FieldPath {
	fp, err := ParseUpdateBuildingRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateBuildingRequestCAS_FieldTerminalPath struct {
	selector UpdateBuildingRequestCAS_FieldPathSelector
}

var _ UpdateBuildingRequestCAS_FieldPath = (*UpdateBuildingRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) Selector() UpdateBuildingRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateBuildingRequest_CAS
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) Get(source *UpdateBuildingRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateBuildingRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateBuildingRequest_CAS
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) GetSingle(source *UpdateBuildingRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateBuildingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return (*building.Building)(nil)
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		return (*building.Building_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) ClearValue(item *UpdateBuildingRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateBuildingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateBuildingRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateBuildingRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateBuildingRequestCAS_FieldTerminalPathValue{UpdateBuildingRequestCAS_FieldTerminalPath: *fp, value: value.(*building.Building)}
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateBuildingRequestCAS_FieldTerminalPathValue{UpdateBuildingRequestCAS_FieldTerminalPath: *fp, value: value.(*building.Building_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateBuildingRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues{UpdateBuildingRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues{UpdateBuildingRequestCAS_FieldTerminalPath: *fp, values: values.([]*building.Building)}
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues{UpdateBuildingRequestCAS_FieldTerminalPath: *fp, values: values.([]*building.Building_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateBuildingRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateBuildingRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateBuildingRequestCAS_FieldSubPath struct {
	selector UpdateBuildingRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateBuildingRequestCAS_FieldPath = (*UpdateBuildingRequestCAS_FieldSubPath)(nil)

func (fps *UpdateBuildingRequestCAS_FieldSubPath) Selector() UpdateBuildingRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateBuildingRequestCAS_FieldSubPath) AsConditionalStateSubPath() (building.Building_FieldPath, bool) {
	res, ok := fps.subPath.(building.Building_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateBuildingRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateBuildingRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateBuildingRequest_CAS
func (fps *UpdateBuildingRequestCAS_FieldSubPath) Get(source *UpdateBuildingRequest_CAS) (values []interface{}) {
	if asBuildingFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asBuildingFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateBuildingRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateBuildingRequest_CAS
func (fps *UpdateBuildingRequestCAS_FieldSubPath) GetSingle(source *UpdateBuildingRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateBuildingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateBuildingRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) ClearValue(item *UpdateBuildingRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateBuildingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateBuildingRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateBuildingRequestCAS_FieldPathValue {
	return &UpdateBuildingRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateBuildingRequestCAS_FieldPathArrayOfValues {
	return &UpdateBuildingRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateBuildingRequestCAS_FieldPathArrayItemValue {
	return &UpdateBuildingRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateBuildingRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateBuildingRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateBuildingRequestCAS_FieldPathValue interface {
	UpdateBuildingRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateBuildingRequest_CAS)
	CompareWith(*UpdateBuildingRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateBuildingRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateBuildingRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateBuildingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateBuildingRequestCAS_FieldPathValue), nil
}

func MustParseUpdateBuildingRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateBuildingRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateBuildingRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateBuildingRequestCAS_FieldTerminalPathValue struct {
	UpdateBuildingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateBuildingRequestCAS_FieldPathValue = (*UpdateBuildingRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*building.Building, bool) {
	res, ok := fpv.value.(*building.Building)
	return res, ok
}
func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*building.Building_FieldMask, bool) {
	res, ok := fpv.value.(*building.Building_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateBuildingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateBuildingRequest_CAS)
	}
	switch fpv.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*building.Building)
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*building.Building_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateBuildingRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateBuildingRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateBuildingRequest_CAS'.
func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateBuildingRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateBuildingRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateBuildingRequest_CAS))
}

type UpdateBuildingRequestCAS_FieldSubPathValue struct {
	UpdateBuildingRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateBuildingRequestCAS_FieldPathValue = (*UpdateBuildingRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (building.Building_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(building.Building_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) SetTo(target **UpdateBuildingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateBuildingRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(building.Building_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateBuildingRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) CompareWith(source *UpdateBuildingRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(building.Building_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateBuildingRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateBuildingRequest_CAS))
}

// UpdateBuildingRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateBuildingRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateBuildingRequestCAS_FieldPath
	ContainsValue(*UpdateBuildingRequest_CAS) bool
}

// ParseUpdateBuildingRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateBuildingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateBuildingRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateBuildingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateBuildingRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateBuildingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateBuildingRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateBuildingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateBuildingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateBuildingRequestCAS_FieldPathArrayItemValue = (*UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateBuildingRequest_CAS as interface{}
func (fpaiv *UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateBuildingRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateBuildingRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateBuildingRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateBuildingRequest_CAS) bool {
	slice := fpaiv.UpdateBuildingRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateBuildingRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateBuildingRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateBuildingRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateBuildingRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (building.Building_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateBuildingRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateBuildingRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(building.Building_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateBuildingRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateBuildingRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateBuildingRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateBuildingRequestCAS_FieldPath
}

func ParseUpdateBuildingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateBuildingRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateBuildingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateBuildingRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateBuildingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateBuildingRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateBuildingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateBuildingRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateBuildingRequestCAS_FieldPathArrayOfValues = (*UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateBuildingRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*building.Building) {
			values = append(values, v)
		}
	case UpdateBuildingRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*building.Building_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*building.Building, bool) {
	res, ok := fpaov.values.([]*building.Building)
	return res, ok
}
func (fpaov *UpdateBuildingRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*building.Building_FieldMask, bool) {
	res, ok := fpaov.values.([]*building.Building_FieldMask)
	return res, ok
}

type UpdateBuildingRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateBuildingRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateBuildingRequestCAS_FieldPathArrayOfValues = (*UpdateBuildingRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateBuildingRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateBuildingRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (building.Building_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(building.Building_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteBuildingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteBuildingRequest_FieldPathSelector
	Get(source *DeleteBuildingRequest) []interface{}
	GetSingle(source *DeleteBuildingRequest) (interface{}, bool)
	ClearValue(item *DeleteBuildingRequest)

	// Those methods build corresponding DeleteBuildingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteBuildingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteBuildingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteBuildingRequest_FieldPathArrayItemValue
}

type DeleteBuildingRequest_FieldPathSelector int32

const (
	DeleteBuildingRequest_FieldPathSelectorName DeleteBuildingRequest_FieldPathSelector = 0
)

func (s DeleteBuildingRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteBuildingRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", s))
	}
}

func BuildDeleteBuildingRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteBuildingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteBuildingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteBuildingRequest_FieldTerminalPath{selector: DeleteBuildingRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteBuildingRequest", fp)
}

func ParseDeleteBuildingRequest_FieldPath(rawField string) (DeleteBuildingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteBuildingRequest_FieldPath(fp)
}

func MustParseDeleteBuildingRequest_FieldPath(rawField string) DeleteBuildingRequest_FieldPath {
	fp, err := ParseDeleteBuildingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteBuildingRequest_FieldTerminalPath struct {
	selector DeleteBuildingRequest_FieldPathSelector
}

var _ DeleteBuildingRequest_FieldPath = (*DeleteBuildingRequest_FieldTerminalPath)(nil)

func (fp *DeleteBuildingRequest_FieldTerminalPath) Selector() DeleteBuildingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteBuildingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteBuildingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteBuildingRequest
func (fp *DeleteBuildingRequest_FieldTerminalPath) Get(source *DeleteBuildingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteBuildingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteBuildingRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteBuildingRequest
func (fp *DeleteBuildingRequest_FieldTerminalPath) GetSingle(source *DeleteBuildingRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
	}
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteBuildingRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteBuildingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		return (*building.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
	}
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) ClearValue(item *DeleteBuildingRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteBuildingRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteBuildingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteBuildingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteBuildingRequest_FieldPathSelectorName
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteBuildingRequest_FieldPathValue {
	switch fp.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		return &DeleteBuildingRequest_FieldTerminalPathValue{DeleteBuildingRequest_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
	}
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteBuildingRequest_FieldPathArrayOfValues {
	fpaov := &DeleteBuildingRequest_FieldTerminalPathArrayOfValues{DeleteBuildingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		return &DeleteBuildingRequest_FieldTerminalPathArrayOfValues{DeleteBuildingRequest_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteBuildingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fp.selector))
	}
}

func (fp *DeleteBuildingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteBuildingRequest_FieldPathValue allows storing values for DeleteBuildingRequest fields according to their type
type DeleteBuildingRequest_FieldPathValue interface {
	DeleteBuildingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteBuildingRequest)
	CompareWith(*DeleteBuildingRequest) (cmp int, comparable bool)
}

func ParseDeleteBuildingRequest_FieldPathValue(pathStr, valueStr string) (DeleteBuildingRequest_FieldPathValue, error) {
	fp, err := ParseDeleteBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteBuildingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteBuildingRequest_FieldPathValue), nil
}

func MustParseDeleteBuildingRequest_FieldPathValue(pathStr, valueStr string) DeleteBuildingRequest_FieldPathValue {
	fpv, err := ParseDeleteBuildingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteBuildingRequest_FieldTerminalPathValue struct {
	DeleteBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteBuildingRequest_FieldPathValue = (*DeleteBuildingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteBuildingRequest' as interface{}
func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) AsNameValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteBuildingRequest
func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) SetTo(target **DeleteBuildingRequest) {
	if *target == nil {
		*target = new(DeleteBuildingRequest)
	}
	switch fpv.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*building.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteBuildingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteBuildingRequest_FieldTerminalPathValue' with the value under path in 'DeleteBuildingRequest'.
func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) CompareWith(source *DeleteBuildingRequest) (int, bool) {
	switch fpv.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteBuildingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteBuildingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteBuildingRequest))
}

// DeleteBuildingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteBuildingRequest according to their type
// Present only for array (repeated) types.
type DeleteBuildingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteBuildingRequest_FieldPath
	ContainsValue(*DeleteBuildingRequest) bool
}

// ParseDeleteBuildingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteBuildingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteBuildingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteBuildingRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteBuildingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteBuildingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteBuildingRequest_FieldTerminalPathArrayItemValue struct {
	DeleteBuildingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteBuildingRequest_FieldPathArrayItemValue = (*DeleteBuildingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteBuildingRequest as interface{}
func (fpaiv *DeleteBuildingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteBuildingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteBuildingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteBuildingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteBuildingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteBuildingRequest'
func (fpaiv *DeleteBuildingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteBuildingRequest) bool {
	slice := fpaiv.DeleteBuildingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteBuildingRequest_FieldPathArrayOfValues allows storing slice of values for DeleteBuildingRequest fields according to their type
type DeleteBuildingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteBuildingRequest_FieldPath
}

func ParseDeleteBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteBuildingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteBuildingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteBuildingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteBuildingRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteBuildingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteBuildingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteBuildingRequest_FieldTerminalPathArrayOfValues struct {
	DeleteBuildingRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteBuildingRequest_FieldPathArrayOfValues = (*DeleteBuildingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteBuildingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteBuildingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteBuildingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
