// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/device_group_service.proto
// DO NOT EDIT!!!

package device_group_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	device_group "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device_group"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &device_group.DeviceGroup{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetDeviceGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetDeviceGroupRequest_FieldPathSelector
	Get(source *GetDeviceGroupRequest) []interface{}
	GetSingle(source *GetDeviceGroupRequest) (interface{}, bool)
	ClearValue(item *GetDeviceGroupRequest)

	// Those methods build corresponding GetDeviceGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetDeviceGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetDeviceGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetDeviceGroupRequest_FieldPathArrayItemValue
}

type GetDeviceGroupRequest_FieldPathSelector int32

const (
	GetDeviceGroupRequest_FieldPathSelectorName      GetDeviceGroupRequest_FieldPathSelector = 0
	GetDeviceGroupRequest_FieldPathSelectorFieldMask GetDeviceGroupRequest_FieldPathSelector = 1
	GetDeviceGroupRequest_FieldPathSelectorView      GetDeviceGroupRequest_FieldPathSelector = 2
)

func (s GetDeviceGroupRequest_FieldPathSelector) String() string {
	switch s {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		return "name"
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetDeviceGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", s))
	}
}

func BuildGetDeviceGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (GetDeviceGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetDeviceGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetDeviceGroupRequest", fp)
}

func ParseGetDeviceGroupRequest_FieldPath(rawField string) (GetDeviceGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetDeviceGroupRequest_FieldPath(fp)
}

func MustParseGetDeviceGroupRequest_FieldPath(rawField string) GetDeviceGroupRequest_FieldPath {
	fp, err := ParseGetDeviceGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetDeviceGroupRequest_FieldTerminalPath struct {
	selector GetDeviceGroupRequest_FieldPathSelector
}

var _ GetDeviceGroupRequest_FieldPath = (*GetDeviceGroupRequest_FieldTerminalPath)(nil)

func (fp *GetDeviceGroupRequest_FieldTerminalPath) Selector() GetDeviceGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetDeviceGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetDeviceGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetDeviceGroupRequest
func (fp *GetDeviceGroupRequest_FieldTerminalPath) Get(source *GetDeviceGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetDeviceGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetDeviceGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetDeviceGroupRequest))
}

// GetSingle returns value pointed by specific field of from source GetDeviceGroupRequest
func (fp *GetDeviceGroupRequest_FieldTerminalPath) GetSingle(source *GetDeviceGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetDeviceGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetDeviceGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		return (*device_group.Reference)(nil)
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case GetDeviceGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) ClearValue(item *GetDeviceGroupRequest) {
	if item != nil {
		switch fp.selector {
		case GetDeviceGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetDeviceGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetDeviceGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetDeviceGroupRequest_FieldPathSelectorName ||
		fp.selector == GetDeviceGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetDeviceGroupRequest_FieldPathSelectorView
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithIValue(value interface{}) GetDeviceGroupRequest_FieldPathValue {
	switch fp.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		return &GetDeviceGroupRequest_FieldTerminalPathValue{GetDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.Reference)}
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		return &GetDeviceGroupRequest_FieldTerminalPathValue{GetDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case GetDeviceGroupRequest_FieldPathSelectorView:
		return &GetDeviceGroupRequest_FieldTerminalPathValue{GetDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov := &GetDeviceGroupRequest_FieldTerminalPathArrayOfValues{GetDeviceGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		return &GetDeviceGroupRequest_FieldTerminalPathArrayOfValues{GetDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.Reference)}
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		return &GetDeviceGroupRequest_FieldTerminalPathArrayOfValues{GetDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case GetDeviceGroupRequest_FieldPathSelectorView:
		return &GetDeviceGroupRequest_FieldTerminalPathArrayOfValues{GetDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetDeviceGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetDeviceGroupRequest_FieldPathValue allows storing values for GetDeviceGroupRequest fields according to their type
type GetDeviceGroupRequest_FieldPathValue interface {
	GetDeviceGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetDeviceGroupRequest)
	CompareWith(*GetDeviceGroupRequest) (cmp int, comparable bool)
}

func ParseGetDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) (GetDeviceGroupRequest_FieldPathValue, error) {
	fp, err := ParseGetDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetDeviceGroupRequest_FieldPathValue), nil
}

func MustParseGetDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) GetDeviceGroupRequest_FieldPathValue {
	fpv, err := ParseGetDeviceGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetDeviceGroupRequest_FieldTerminalPathValue struct {
	GetDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceGroupRequest_FieldPathValue = (*GetDeviceGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetDeviceGroupRequest' as interface{}
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) AsNameValue() (*device_group.Reference, bool) {
	res, ok := fpv.value.(*device_group.Reference)
	return res, ok
}
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetDeviceGroupRequest
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) SetTo(target **GetDeviceGroupRequest) {
	if *target == nil {
		*target = new(GetDeviceGroupRequest)
	}
	switch fpv.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_group.Reference)
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case GetDeviceGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetDeviceGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetDeviceGroupRequest_FieldTerminalPathValue' with the value under path in 'GetDeviceGroupRequest'.
func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) CompareWith(source *GetDeviceGroupRequest) (int, bool) {
	switch fpv.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetDeviceGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetDeviceGroupRequest))
}

// GetDeviceGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetDeviceGroupRequest according to their type
// Present only for array (repeated) types.
type GetDeviceGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetDeviceGroupRequest_FieldPath
	ContainsValue(*GetDeviceGroupRequest) bool
}

// ParseGetDeviceGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetDeviceGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetDeviceGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseGetDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetDeviceGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetDeviceGroupRequest_FieldTerminalPathArrayItemValue struct {
	GetDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceGroupRequest_FieldPathArrayItemValue = (*GetDeviceGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetDeviceGroupRequest as interface{}
func (fpaiv *GetDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetDeviceGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetDeviceGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetDeviceGroupRequest'
func (fpaiv *GetDeviceGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetDeviceGroupRequest) bool {
	slice := fpaiv.GetDeviceGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetDeviceGroupRequest_FieldPathArrayOfValues allows storing slice of values for GetDeviceGroupRequest fields according to their type
type GetDeviceGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetDeviceGroupRequest_FieldPath
}

func ParseGetDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetDeviceGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetDeviceGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseGetDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetDeviceGroupRequest_FieldTerminalPathArrayOfValues struct {
	GetDeviceGroupRequest_FieldTerminalPath
	values interface{}
}

var _ GetDeviceGroupRequest_FieldPathArrayOfValues = (*GetDeviceGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetDeviceGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetDeviceGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_group.Reference) {
			values = append(values, v)
		}
	case GetDeviceGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case GetDeviceGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_group.Reference, bool) {
	res, ok := fpaov.values.([]*device_group.Reference)
	return res, ok
}
func (fpaov *GetDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *GetDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeviceGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeviceGroupsRequest_FieldPathSelector
	Get(source *BatchGetDeviceGroupsRequest) []interface{}
	GetSingle(source *BatchGetDeviceGroupsRequest) (interface{}, bool)
	ClearValue(item *BatchGetDeviceGroupsRequest)

	// Those methods build corresponding BatchGetDeviceGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeviceGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeviceGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeviceGroupsRequest_FieldPathArrayItemValue
}

type BatchGetDeviceGroupsRequest_FieldPathSelector int32

const (
	BatchGetDeviceGroupsRequest_FieldPathSelectorNames     BatchGetDeviceGroupsRequest_FieldPathSelector = 0
	BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask BatchGetDeviceGroupsRequest_FieldPathSelector = 1
	BatchGetDeviceGroupsRequest_FieldPathSelectorView      BatchGetDeviceGroupsRequest_FieldPathSelector = 2
)

func (s BatchGetDeviceGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", s))
	}
}

func BuildBatchGetDeviceGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeviceGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeviceGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeviceGroupsRequest", fp)
}

func ParseBatchGetDeviceGroupsRequest_FieldPath(rawField string) (BatchGetDeviceGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeviceGroupsRequest_FieldPath(fp)
}

func MustParseBatchGetDeviceGroupsRequest_FieldPath(rawField string) BatchGetDeviceGroupsRequest_FieldPath {
	fp, err := ParseBatchGetDeviceGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeviceGroupsRequest_FieldTerminalPath struct {
	selector BatchGetDeviceGroupsRequest_FieldPathSelector
}

var _ BatchGetDeviceGroupsRequest_FieldPath = (*BatchGetDeviceGroupsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) Selector() BatchGetDeviceGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeviceGroupsRequest
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) Get(source *BatchGetDeviceGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeviceGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeviceGroupsRequest
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) GetSingle(source *BatchGetDeviceGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeviceGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return ([]*device_group.Reference)(nil)
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) ClearValue(item *BatchGetDeviceGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeviceGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeviceGroupsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetDeviceGroupsRequest_FieldPathSelectorView
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeviceGroupsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathValue{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.([]*device_group.Reference)}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathValue{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathValue{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([][]*device_group.Reference)}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeviceGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return &BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue{BatchGetDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetDeviceGroupsRequest_FieldPathValue allows storing values for BatchGetDeviceGroupsRequest fields according to their type
type BatchGetDeviceGroupsRequest_FieldPathValue interface {
	BatchGetDeviceGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeviceGroupsRequest)
	CompareWith(*BatchGetDeviceGroupsRequest) (cmp int, comparable bool)
}

func ParseBatchGetDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetDeviceGroupsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeviceGroupsRequest_FieldPathValue), nil
}

func MustParseBatchGetDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) BatchGetDeviceGroupsRequest_FieldPathValue {
	fpv, err := ParseBatchGetDeviceGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeviceGroupsRequest_FieldTerminalPathValue struct {
	BatchGetDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceGroupsRequest_FieldPathValue = (*BatchGetDeviceGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeviceGroupsRequest' as interface{}
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) AsNamesValue() ([]*device_group.Reference, bool) {
	res, ok := fpv.value.([]*device_group.Reference)
	return res, ok
}
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeviceGroupsRequest
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) SetTo(target **BatchGetDeviceGroupsRequest) {
	if *target == nil {
		*target = new(BatchGetDeviceGroupsRequest)
	}
	switch fpv.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*device_group.Reference)
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeviceGroupsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetDeviceGroupsRequest'.
func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetDeviceGroupsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeviceGroupsRequest))
}

// BatchGetDeviceGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeviceGroupsRequest according to their type
// Present only for array (repeated) types.
type BatchGetDeviceGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeviceGroupsRequest_FieldPath
	ContainsValue(*BatchGetDeviceGroupsRequest) bool
}

// ParseBatchGetDeviceGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeviceGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeviceGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeviceGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceGroupsRequest_FieldPathArrayItemValue = (*BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeviceGroupsRequest as interface{}
func (fpaiv *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*device_group.Reference, bool) {
	res, ok := fpaiv.value.(*device_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeviceGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeviceGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceGroupsRequest'
func (fpaiv *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeviceGroupsRequest) bool {
	slice := fpaiv.BatchGetDeviceGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetDeviceGroupsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetDeviceGroupsRequest fields according to their type
type BatchGetDeviceGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeviceGroupsRequest_FieldPath
}

func ParseBatchGetDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeviceGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeviceGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetDeviceGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeviceGroupsRequest_FieldPathArrayOfValues = (*BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeviceGroupsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*device_group.Reference) {
			values = append(values, v)
		}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case BatchGetDeviceGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*device_group.Reference, bool) {
	res, ok := fpaov.values.([][]*device_group.Reference)
	return res, ok
}
func (fpaov *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *BatchGetDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeviceGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeviceGroupsResponse_FieldPathSelector
	Get(source *BatchGetDeviceGroupsResponse) []interface{}
	GetSingle(source *BatchGetDeviceGroupsResponse) (interface{}, bool)
	ClearValue(item *BatchGetDeviceGroupsResponse)

	// Those methods build corresponding BatchGetDeviceGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayItemValue
}

type BatchGetDeviceGroupsResponse_FieldPathSelector int32

const (
	BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups BatchGetDeviceGroupsResponse_FieldPathSelector = 0
	BatchGetDeviceGroupsResponse_FieldPathSelectorMissing      BatchGetDeviceGroupsResponse_FieldPathSelector = 1
)

func (s BatchGetDeviceGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return "device_groups"
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", s))
	}
}

func BuildBatchGetDeviceGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeviceGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeviceGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_groups", "deviceGroups", "device-groups":
			return &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups}, nil
		case "missing":
			return &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "device_groups", "deviceGroups", "device-groups":
			if subpath, err := device_group.BuildDeviceGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetDeviceGroupsResponse_FieldSubPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeviceGroupsResponse", fp)
}

func ParseBatchGetDeviceGroupsResponse_FieldPath(rawField string) (BatchGetDeviceGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeviceGroupsResponse_FieldPath(fp)
}

func MustParseBatchGetDeviceGroupsResponse_FieldPath(rawField string) BatchGetDeviceGroupsResponse_FieldPath {
	fp, err := ParseBatchGetDeviceGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeviceGroupsResponse_FieldTerminalPath struct {
	selector BatchGetDeviceGroupsResponse_FieldPathSelector
}

var _ BatchGetDeviceGroupsResponse_FieldPath = (*BatchGetDeviceGroupsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) Selector() BatchGetDeviceGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeviceGroupsResponse
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) Get(source *BatchGetDeviceGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			for _, value := range source.GetDeviceGroups() {
				values = append(values, value)
			}
		case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeviceGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeviceGroupsResponse
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) GetSingle(source *BatchGetDeviceGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		res := source.GetDeviceGroups()
		return res, res != nil
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return ([]*device_group.DeviceGroup)(nil)
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return ([]*device_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) ClearValue(item *BatchGetDeviceGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			item.DeviceGroups = nil
		case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeviceGroupsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathValue{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.([]*device_group.DeviceGroup)}
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathValue{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.([]*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*device_group.DeviceGroup)}
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup)}
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetDeviceGroupsResponse_FieldSubPath struct {
	selector BatchGetDeviceGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetDeviceGroupsResponse_FieldPath = (*BatchGetDeviceGroupsResponse_FieldSubPath)(nil)

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) Selector() BatchGetDeviceGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) AsDeviceGroupsSubPath() (device_group.DeviceGroup_FieldPath, bool) {
	res, ok := fps.subPath.(device_group.DeviceGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetDeviceGroupsResponse
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) Get(source *BatchGetDeviceGroupsResponse) (values []interface{}) {
	if asDeviceGroupFieldPath, ok := fps.AsDeviceGroupsSubPath(); ok {
		for _, item := range source.GetDeviceGroups() {
			values = append(values, asDeviceGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetDeviceGroupsResponse))
}

// GetSingle returns value of selected field from source BatchGetDeviceGroupsResponse
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) GetSingle(source *BatchGetDeviceGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		if len(source.GetDeviceGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) ClearValue(item *BatchGetDeviceGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			for _, subItem := range item.DeviceGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathValue {
	return &BatchGetDeviceGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayOfValues {
	return &BatchGetDeviceGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetDeviceGroupsResponse_FieldPathArrayItemValue {
	return &BatchGetDeviceGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetDeviceGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetDeviceGroupsResponse_FieldPathValue allows storing values for BatchGetDeviceGroupsResponse fields according to their type
type BatchGetDeviceGroupsResponse_FieldPathValue interface {
	BatchGetDeviceGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeviceGroupsResponse)
	CompareWith(*BatchGetDeviceGroupsResponse) (cmp int, comparable bool)
}

func ParseBatchGetDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetDeviceGroupsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeviceGroupsResponse_FieldPathValue), nil
}

func MustParseBatchGetDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) BatchGetDeviceGroupsResponse_FieldPathValue {
	fpv, err := ParseBatchGetDeviceGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeviceGroupsResponse_FieldTerminalPathValue struct {
	BatchGetDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceGroupsResponse_FieldPathValue = (*BatchGetDeviceGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeviceGroupsResponse' as interface{}
func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) AsDeviceGroupsValue() ([]*device_group.DeviceGroup, bool) {
	res, ok := fpv.value.([]*device_group.DeviceGroup)
	return res, ok
}
func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) AsMissingValue() ([]*device_group.Reference, bool) {
	res, ok := fpv.value.([]*device_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeviceGroupsResponse
func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) SetTo(target **BatchGetDeviceGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetDeviceGroupsResponse)
	}
	switch fpv.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		(*target).DeviceGroups = fpv.value.([]*device_group.DeviceGroup)
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*device_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeviceGroupsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetDeviceGroupsResponse'.
func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetDeviceGroupsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return 0, false
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeviceGroupsResponse))
}

type BatchGetDeviceGroupsResponse_FieldSubPathValue struct {
	BatchGetDeviceGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetDeviceGroupsResponse_FieldPathValue = (*BatchGetDeviceGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) AsDeviceGroupsPathValue() (device_group.DeviceGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) SetTo(target **BatchGetDeviceGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetDeviceGroupsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) CompareWith(source *BatchGetDeviceGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeviceGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetDeviceGroupsResponse))
}

// BatchGetDeviceGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeviceGroupsResponse according to their type
// Present only for array (repeated) types.
type BatchGetDeviceGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeviceGroupsResponse_FieldPath
	ContainsValue(*BatchGetDeviceGroupsResponse) bool
}

// ParseBatchGetDeviceGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeviceGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeviceGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeviceGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceGroupsResponse_FieldPathArrayItemValue = (*BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeviceGroupsResponse as interface{}
func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) AsDeviceGroupsItemValue() (*device_group.DeviceGroup, bool) {
	res, ok := fpaiv.value.(*device_group.DeviceGroup)
	return res, ok
}
func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*device_group.Reference, bool) {
	res, ok := fpaiv.value.(*device_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeviceGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeviceGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceGroupsResponse'
func (fpaiv *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeviceGroupsResponse) bool {
	slice := fpaiv.BatchGetDeviceGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetDeviceGroupsResponse_FieldSubPathArrayItemValue struct {
	BatchGetDeviceGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetDeviceGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetDeviceGroupsResponse_FieldSubPathArrayItemValue) AsDeviceGroupsPathItemValue() (device_group.DeviceGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceGroupsResponse'
func (fpaivs *BatchGetDeviceGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetDeviceGroupsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceGroupsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetDeviceGroupsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetDeviceGroupsResponse fields according to their type
type BatchGetDeviceGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeviceGroupsResponse_FieldPath
}

func ParseBatchGetDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeviceGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeviceGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetDeviceGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeviceGroupsResponse_FieldPathArrayOfValues = (*BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		for _, v := range fpaov.values.([][]*device_group.DeviceGroup) {
			values = append(values, v)
		}
	case BatchGetDeviceGroupsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*device_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsDeviceGroupsArrayOfValues() ([][]*device_group.DeviceGroup, bool) {
	res, ok := fpaov.values.([][]*device_group.DeviceGroup)
	return res, ok
}
func (fpaov *BatchGetDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*device_group.Reference, bool) {
	res, ok := fpaov.values.([][]*device_group.Reference)
	return res, ok
}

type BatchGetDeviceGroupsResponse_FieldSubPathArrayOfValues struct {
	BatchGetDeviceGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetDeviceGroupsResponse_FieldPathArrayOfValues = (*BatchGetDeviceGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetDeviceGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetDeviceGroupsResponse_FieldSubPathArrayOfValues) AsDeviceGroupsPathArrayOfValues() (device_group.DeviceGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_group.DeviceGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeviceGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeviceGroupsRequest_FieldPathSelector
	Get(source *ListDeviceGroupsRequest) []interface{}
	GetSingle(source *ListDeviceGroupsRequest) (interface{}, bool)
	ClearValue(item *ListDeviceGroupsRequest)

	// Those methods build corresponding ListDeviceGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeviceGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeviceGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeviceGroupsRequest_FieldPathArrayItemValue
}

type ListDeviceGroupsRequest_FieldPathSelector int32

const (
	ListDeviceGroupsRequest_FieldPathSelectorParent    ListDeviceGroupsRequest_FieldPathSelector = 0
	ListDeviceGroupsRequest_FieldPathSelectorPageSize  ListDeviceGroupsRequest_FieldPathSelector = 1
	ListDeviceGroupsRequest_FieldPathSelectorPageToken ListDeviceGroupsRequest_FieldPathSelector = 2
	ListDeviceGroupsRequest_FieldPathSelectorOrderBy   ListDeviceGroupsRequest_FieldPathSelector = 3
	ListDeviceGroupsRequest_FieldPathSelectorFilter    ListDeviceGroupsRequest_FieldPathSelector = 4
	ListDeviceGroupsRequest_FieldPathSelectorFieldMask ListDeviceGroupsRequest_FieldPathSelector = 5
	ListDeviceGroupsRequest_FieldPathSelectorView      ListDeviceGroupsRequest_FieldPathSelector = 6
)

func (s ListDeviceGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", s))
	}
}

func BuildListDeviceGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListDeviceGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeviceGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeviceGroupsRequest", fp)
}

func ParseListDeviceGroupsRequest_FieldPath(rawField string) (ListDeviceGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeviceGroupsRequest_FieldPath(fp)
}

func MustParseListDeviceGroupsRequest_FieldPath(rawField string) ListDeviceGroupsRequest_FieldPath {
	fp, err := ParseListDeviceGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeviceGroupsRequest_FieldTerminalPath struct {
	selector ListDeviceGroupsRequest_FieldPathSelector
}

var _ ListDeviceGroupsRequest_FieldPath = (*ListDeviceGroupsRequest_FieldTerminalPath)(nil)

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) Selector() ListDeviceGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeviceGroupsRequest
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) Get(source *ListDeviceGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeviceGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListDeviceGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListDeviceGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeviceGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source ListDeviceGroupsRequest
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) GetSingle(source *ListDeviceGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeviceGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		return (*device_group.ParentName)(nil)
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		return (*device_group.PagerCursor)(nil)
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return (*device_group.OrderBy)(nil)
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		return (*device_group.Filter)(nil)
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) ClearValue(item *ListDeviceGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case ListDeviceGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListDeviceGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListDeviceGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeviceGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeviceGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeviceGroupsRequest_FieldPathSelectorParent ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListDeviceGroupsRequest_FieldPathSelectorView
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) ListDeviceGroupsRequest_FieldPathValue {
	switch fp.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.ParentName)}
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.OrderBy)}
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.Filter)}
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		return &ListDeviceGroupsRequest_FieldTerminalPathValue{ListDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov := &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.ParentName)}
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.OrderBy)}
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.Filter)}
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		return &ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues{ListDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeviceGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListDeviceGroupsRequest_FieldPathValue allows storing values for ListDeviceGroupsRequest fields according to their type
type ListDeviceGroupsRequest_FieldPathValue interface {
	ListDeviceGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeviceGroupsRequest)
	CompareWith(*ListDeviceGroupsRequest) (cmp int, comparable bool)
}

func ParseListDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) (ListDeviceGroupsRequest_FieldPathValue, error) {
	fp, err := ParseListDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeviceGroupsRequest_FieldPathValue), nil
}

func MustParseListDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) ListDeviceGroupsRequest_FieldPathValue {
	fpv, err := ParseListDeviceGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeviceGroupsRequest_FieldTerminalPathValue struct {
	ListDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeviceGroupsRequest_FieldPathValue = (*ListDeviceGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeviceGroupsRequest' as interface{}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsParentValue() (*device_group.ParentName, bool) {
	res, ok := fpv.value.(*device_group.ParentName)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*device_group.OrderBy, bool) {
	res, ok := fpv.value.(*device_group.OrderBy)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*device_group.Filter, bool) {
	res, ok := fpv.value.(*device_group.Filter)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListDeviceGroupsRequest
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) SetTo(target **ListDeviceGroupsRequest) {
	if *target == nil {
		*target = new(ListDeviceGroupsRequest)
	}
	switch fpv.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device_group.ParentName)
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device_group.PagerCursor)
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device_group.OrderBy)
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device_group.Filter)
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeviceGroupsRequest_FieldTerminalPathValue' with the value under path in 'ListDeviceGroupsRequest'.
func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) CompareWith(source *ListDeviceGroupsRequest) (int, bool) {
	switch fpv.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device_group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeviceGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeviceGroupsRequest))
}

// ListDeviceGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeviceGroupsRequest according to their type
// Present only for array (repeated) types.
type ListDeviceGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeviceGroupsRequest_FieldPath
	ContainsValue(*ListDeviceGroupsRequest) bool
}

// ParseListDeviceGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeviceGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeviceGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseListDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListDeviceGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue struct {
	ListDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeviceGroupsRequest_FieldPathArrayItemValue = (*ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeviceGroupsRequest as interface{}
func (fpaiv *ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeviceGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeviceGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceGroupsRequest'
func (fpaiv *ListDeviceGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeviceGroupsRequest) bool {
	slice := fpaiv.ListDeviceGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListDeviceGroupsRequest_FieldPathArrayOfValues allows storing slice of values for ListDeviceGroupsRequest fields according to their type
type ListDeviceGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeviceGroupsRequest_FieldPath
}

func ParseListDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeviceGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeviceGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseListDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues struct {
	ListDeviceGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ ListDeviceGroupsRequest_FieldPathArrayOfValues = (*ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeviceGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device_group.ParentName) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device_group.OrderBy) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device_group.Filter) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case ListDeviceGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device_group.ParentName, bool) {
	res, ok := fpaov.values.([]*device_group.ParentName)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*device_group.OrderBy)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device_group.Filter, bool) {
	res, ok := fpaov.values.([]*device_group.Filter)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *ListDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeviceGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeviceGroupsResponse_FieldPathSelector
	Get(source *ListDeviceGroupsResponse) []interface{}
	GetSingle(source *ListDeviceGroupsResponse) (interface{}, bool)
	ClearValue(item *ListDeviceGroupsResponse)

	// Those methods build corresponding ListDeviceGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeviceGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeviceGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeviceGroupsResponse_FieldPathArrayItemValue
}

type ListDeviceGroupsResponse_FieldPathSelector int32

const (
	ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups  ListDeviceGroupsResponse_FieldPathSelector = 0
	ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken ListDeviceGroupsResponse_FieldPathSelector = 1
	ListDeviceGroupsResponse_FieldPathSelectorNextPageToken ListDeviceGroupsResponse_FieldPathSelector = 2
)

func (s ListDeviceGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return "device_groups"
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", s))
	}
}

func BuildListDeviceGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListDeviceGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeviceGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_groups", "deviceGroups", "device-groups":
			return &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "device_groups", "deviceGroups", "device-groups":
			if subpath, err := device_group.BuildDeviceGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListDeviceGroupsResponse_FieldSubPath{selector: ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeviceGroupsResponse", fp)
}

func ParseListDeviceGroupsResponse_FieldPath(rawField string) (ListDeviceGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeviceGroupsResponse_FieldPath(fp)
}

func MustParseListDeviceGroupsResponse_FieldPath(rawField string) ListDeviceGroupsResponse_FieldPath {
	fp, err := ParseListDeviceGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeviceGroupsResponse_FieldTerminalPath struct {
	selector ListDeviceGroupsResponse_FieldPathSelector
}

var _ ListDeviceGroupsResponse_FieldPath = (*ListDeviceGroupsResponse_FieldTerminalPath)(nil)

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) Selector() ListDeviceGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeviceGroupsResponse
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) Get(source *ListDeviceGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			for _, value := range source.GetDeviceGroups() {
				values = append(values, value)
			}
		case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeviceGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source ListDeviceGroupsResponse
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) GetSingle(source *ListDeviceGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		res := source.GetDeviceGroups()
		return res, res != nil
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return ([]*device_group.DeviceGroup)(nil)
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*device_group.PagerCursor)(nil)
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		return (*device_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) ClearValue(item *ListDeviceGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			item.DeviceGroups = nil
		case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeviceGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListDeviceGroupsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) ListDeviceGroupsResponse_FieldPathValue {
	switch fp.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &ListDeviceGroupsResponse_FieldTerminalPathValue{ListDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.([]*device_group.DeviceGroup)}
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListDeviceGroupsResponse_FieldTerminalPathValue{ListDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListDeviceGroupsResponse_FieldTerminalPathValue{ListDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov := &ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues{ListDeviceGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues{ListDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*device_group.DeviceGroup)}
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues{ListDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues{ListDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeviceGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return &ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue{ListDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListDeviceGroupsResponse_FieldSubPath struct {
	selector ListDeviceGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListDeviceGroupsResponse_FieldPath = (*ListDeviceGroupsResponse_FieldSubPath)(nil)

func (fps *ListDeviceGroupsResponse_FieldSubPath) Selector() ListDeviceGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListDeviceGroupsResponse_FieldSubPath) AsDeviceGroupsSubPath() (device_group.DeviceGroup_FieldPath, bool) {
	res, ok := fps.subPath.(device_group.DeviceGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListDeviceGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListDeviceGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListDeviceGroupsResponse
func (fps *ListDeviceGroupsResponse_FieldSubPath) Get(source *ListDeviceGroupsResponse) (values []interface{}) {
	if asDeviceGroupFieldPath, ok := fps.AsDeviceGroupsSubPath(); ok {
		for _, item := range source.GetDeviceGroups() {
			values = append(values, asDeviceGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListDeviceGroupsResponse))
}

// GetSingle returns value of selected field from source ListDeviceGroupsResponse
func (fps *ListDeviceGroupsResponse_FieldSubPath) GetSingle(source *ListDeviceGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		if len(source.GetDeviceGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fps.selector))
	}
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListDeviceGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) ClearValue(item *ListDeviceGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
			for _, subItem := range item.DeviceGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListDeviceGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithIValue(value interface{}) ListDeviceGroupsResponse_FieldPathValue {
	return &ListDeviceGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListDeviceGroupsResponse_FieldPathArrayOfValues {
	return &ListDeviceGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListDeviceGroupsResponse_FieldPathArrayItemValue {
	return &ListDeviceGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListDeviceGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListDeviceGroupsResponse_FieldPathValue allows storing values for ListDeviceGroupsResponse fields according to their type
type ListDeviceGroupsResponse_FieldPathValue interface {
	ListDeviceGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeviceGroupsResponse)
	CompareWith(*ListDeviceGroupsResponse) (cmp int, comparable bool)
}

func ParseListDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) (ListDeviceGroupsResponse_FieldPathValue, error) {
	fp, err := ParseListDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeviceGroupsResponse_FieldPathValue), nil
}

func MustParseListDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) ListDeviceGroupsResponse_FieldPathValue {
	fpv, err := ParseListDeviceGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeviceGroupsResponse_FieldTerminalPathValue struct {
	ListDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeviceGroupsResponse_FieldPathValue = (*ListDeviceGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeviceGroupsResponse' as interface{}
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) AsDeviceGroupsValue() ([]*device_group.DeviceGroup, bool) {
	res, ok := fpv.value.([]*device_group.DeviceGroup)
	return res, ok
}
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListDeviceGroupsResponse
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) SetTo(target **ListDeviceGroupsResponse) {
	if *target == nil {
		*target = new(ListDeviceGroupsResponse)
	}
	switch fpv.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		(*target).DeviceGroups = fpv.value.([]*device_group.DeviceGroup)
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device_group.PagerCursor)
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeviceGroupsResponse_FieldTerminalPathValue' with the value under path in 'ListDeviceGroupsResponse'.
func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) CompareWith(source *ListDeviceGroupsResponse) (int, bool) {
	switch fpv.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return 0, false
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeviceGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeviceGroupsResponse))
}

type ListDeviceGroupsResponse_FieldSubPathValue struct {
	ListDeviceGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListDeviceGroupsResponse_FieldPathValue = (*ListDeviceGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) AsDeviceGroupsPathValue() (device_group.DeviceGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue)
	return res, ok
}

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) SetTo(target **ListDeviceGroupsResponse) {
	if *target == nil {
		*target = new(ListDeviceGroupsResponse)
	}
	switch fpvs.Selector() {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) CompareWith(source *ListDeviceGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeviceGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListDeviceGroupsResponse))
}

// ListDeviceGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeviceGroupsResponse according to their type
// Present only for array (repeated) types.
type ListDeviceGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeviceGroupsResponse_FieldPath
	ContainsValue(*ListDeviceGroupsResponse) bool
}

// ParseListDeviceGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeviceGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeviceGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseListDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListDeviceGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue struct {
	ListDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeviceGroupsResponse_FieldPathArrayItemValue = (*ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeviceGroupsResponse as interface{}
func (fpaiv *ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue) AsDeviceGroupsItemValue() (*device_group.DeviceGroup, bool) {
	res, ok := fpaiv.value.(*device_group.DeviceGroup)
	return res, ok
}

func (fpaiv *ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeviceGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeviceGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceGroupsResponse'
func (fpaiv *ListDeviceGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeviceGroupsResponse) bool {
	slice := fpaiv.ListDeviceGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListDeviceGroupsResponse_FieldSubPathArrayItemValue struct {
	ListDeviceGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListDeviceGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListDeviceGroupsResponse_FieldSubPathArrayItemValue) AsDeviceGroupsPathItemValue() (device_group.DeviceGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceGroupsResponse'
func (fpaivs *ListDeviceGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListDeviceGroupsResponse) bool {
	switch fpaivs.Selector() {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceGroupsResponse: %d", fpaivs.Selector()))
	}
}

// ListDeviceGroupsResponse_FieldPathArrayOfValues allows storing slice of values for ListDeviceGroupsResponse fields according to their type
type ListDeviceGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeviceGroupsResponse_FieldPath
}

func ParseListDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeviceGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeviceGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseListDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues struct {
	ListDeviceGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ ListDeviceGroupsResponse_FieldPathArrayOfValues = (*ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups:
		for _, v := range fpaov.values.([][]*device_group.DeviceGroup) {
			values = append(values, v)
		}
	case ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	case ListDeviceGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsDeviceGroupsArrayOfValues() ([][]*device_group.DeviceGroup, bool) {
	res, ok := fpaov.values.([][]*device_group.DeviceGroup)
	return res, ok
}
func (fpaov *ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}
func (fpaov *ListDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}

type ListDeviceGroupsResponse_FieldSubPathArrayOfValues struct {
	ListDeviceGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListDeviceGroupsResponse_FieldPathArrayOfValues = (*ListDeviceGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListDeviceGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListDeviceGroupsResponse_FieldSubPathArrayOfValues) AsDeviceGroupsPathArrayOfValues() (device_group.DeviceGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_group.DeviceGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceGroupRequest_FieldPathSelector
	Get(source *WatchDeviceGroupRequest) []interface{}
	GetSingle(source *WatchDeviceGroupRequest) (interface{}, bool)
	ClearValue(item *WatchDeviceGroupRequest)

	// Those methods build corresponding WatchDeviceGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceGroupRequest_FieldPathArrayItemValue
}

type WatchDeviceGroupRequest_FieldPathSelector int32

const (
	WatchDeviceGroupRequest_FieldPathSelectorName      WatchDeviceGroupRequest_FieldPathSelector = 0
	WatchDeviceGroupRequest_FieldPathSelectorFieldMask WatchDeviceGroupRequest_FieldPathSelector = 1
	WatchDeviceGroupRequest_FieldPathSelectorView      WatchDeviceGroupRequest_FieldPathSelector = 2
)

func (s WatchDeviceGroupRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		return "name"
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", s))
	}
}

func BuildWatchDeviceGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceGroupRequest", fp)
}

func ParseWatchDeviceGroupRequest_FieldPath(rawField string) (WatchDeviceGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceGroupRequest_FieldPath(fp)
}

func MustParseWatchDeviceGroupRequest_FieldPath(rawField string) WatchDeviceGroupRequest_FieldPath {
	fp, err := ParseWatchDeviceGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceGroupRequest_FieldTerminalPath struct {
	selector WatchDeviceGroupRequest_FieldPathSelector
}

var _ WatchDeviceGroupRequest_FieldPath = (*WatchDeviceGroupRequest_FieldTerminalPath)(nil)

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) Selector() WatchDeviceGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceGroupRequest
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) Get(source *WatchDeviceGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeviceGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceGroupRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceGroupRequest
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) GetSingle(source *WatchDeviceGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		return (*device_group.Reference)(nil)
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) ClearValue(item *WatchDeviceGroupRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeviceGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceGroupRequest_FieldPathSelectorName ||
		fp.selector == WatchDeviceGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeviceGroupRequest_FieldPathSelectorView
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceGroupRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		return &WatchDeviceGroupRequest_FieldTerminalPathValue{WatchDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.Reference)}
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceGroupRequest_FieldTerminalPathValue{WatchDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		return &WatchDeviceGroupRequest_FieldTerminalPathValue{WatchDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		return &WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.Reference)}
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		return &WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceGroupRequest_FieldPathValue allows storing values for WatchDeviceGroupRequest fields according to their type
type WatchDeviceGroupRequest_FieldPathValue interface {
	WatchDeviceGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceGroupRequest)
	CompareWith(*WatchDeviceGroupRequest) (cmp int, comparable bool)
}

func ParseWatchDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) (WatchDeviceGroupRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceGroupRequest_FieldPathValue), nil
}

func MustParseWatchDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) WatchDeviceGroupRequest_FieldPathValue {
	fpv, err := ParseWatchDeviceGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceGroupRequest_FieldTerminalPathValue struct {
	WatchDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupRequest_FieldPathValue = (*WatchDeviceGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceGroupRequest' as interface{}
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) AsNameValue() (*device_group.Reference, bool) {
	res, ok := fpv.value.(*device_group.Reference)
	return res, ok
}
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceGroupRequest
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) SetTo(target **WatchDeviceGroupRequest) {
	if *target == nil {
		*target = new(WatchDeviceGroupRequest)
	}
	switch fpv.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_group.Reference)
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceGroupRequest_FieldTerminalPathValue' with the value under path in 'WatchDeviceGroupRequest'.
func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) CompareWith(source *WatchDeviceGroupRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceGroupRequest))
}

// WatchDeviceGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceGroupRequest according to their type
// Present only for array (repeated) types.
type WatchDeviceGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceGroupRequest_FieldPath
	ContainsValue(*WatchDeviceGroupRequest) bool
}

// ParseWatchDeviceGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupRequest_FieldPathArrayItemValue = (*WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceGroupRequest as interface{}
func (fpaiv *WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceGroupRequest'
func (fpaiv *WatchDeviceGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceGroupRequest) bool {
	slice := fpaiv.WatchDeviceGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceGroupRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeviceGroupRequest fields according to their type
type WatchDeviceGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceGroupRequest_FieldPath
}

func ParseWatchDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeviceGroupRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceGroupRequest_FieldPathArrayOfValues = (*WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_group.Reference) {
			values = append(values, v)
		}
	case WatchDeviceGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchDeviceGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_group.Reference, bool) {
	res, ok := fpaov.values.([]*device_group.Reference)
	return res, ok
}
func (fpaov *WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceGroupResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceGroupResponse_FieldPathSelector
	Get(source *WatchDeviceGroupResponse) []interface{}
	GetSingle(source *WatchDeviceGroupResponse) (interface{}, bool)
	ClearValue(item *WatchDeviceGroupResponse)

	// Those methods build corresponding WatchDeviceGroupResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceGroupResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceGroupResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceGroupResponse_FieldPathArrayItemValue
}

type WatchDeviceGroupResponse_FieldPathSelector int32

const (
	WatchDeviceGroupResponse_FieldPathSelectorChange WatchDeviceGroupResponse_FieldPathSelector = 0
)

func (s WatchDeviceGroupResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", s))
	}
}

func BuildWatchDeviceGroupResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceGroupResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceGroupResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchDeviceGroupResponse_FieldTerminalPath{selector: WatchDeviceGroupResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceGroupResponse", fp)
}

func ParseWatchDeviceGroupResponse_FieldPath(rawField string) (WatchDeviceGroupResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceGroupResponse_FieldPath(fp)
}

func MustParseWatchDeviceGroupResponse_FieldPath(rawField string) WatchDeviceGroupResponse_FieldPath {
	fp, err := ParseWatchDeviceGroupResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceGroupResponse_FieldTerminalPath struct {
	selector WatchDeviceGroupResponse_FieldPathSelector
}

var _ WatchDeviceGroupResponse_FieldPath = (*WatchDeviceGroupResponse_FieldTerminalPath)(nil)

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) Selector() WatchDeviceGroupResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceGroupResponse
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) Get(source *WatchDeviceGroupResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceGroupResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceGroupResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceGroupResponse
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) GetSingle(source *WatchDeviceGroupResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceGroupResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		return (*device_group.DeviceGroupChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) ClearValue(item *WatchDeviceGroupResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceGroupResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceGroupResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceGroupResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceGroupResponse_FieldPathSelectorChange
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceGroupResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		return &WatchDeviceGroupResponse_FieldTerminalPathValue{WatchDeviceGroupResponse_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		return &WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupResponse_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceGroupResponse_FieldPathValue allows storing values for WatchDeviceGroupResponse fields according to their type
type WatchDeviceGroupResponse_FieldPathValue interface {
	WatchDeviceGroupResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceGroupResponse)
	CompareWith(*WatchDeviceGroupResponse) (cmp int, comparable bool)
}

func ParseWatchDeviceGroupResponse_FieldPathValue(pathStr, valueStr string) (WatchDeviceGroupResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeviceGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceGroupResponse_FieldPathValue), nil
}

func MustParseWatchDeviceGroupResponse_FieldPathValue(pathStr, valueStr string) WatchDeviceGroupResponse_FieldPathValue {
	fpv, err := ParseWatchDeviceGroupResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceGroupResponse_FieldTerminalPathValue struct {
	WatchDeviceGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupResponse_FieldPathValue = (*WatchDeviceGroupResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceGroupResponse' as interface{}
func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) AsChangeValue() (*device_group.DeviceGroupChange, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroupChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceGroupResponse
func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) SetTo(target **WatchDeviceGroupResponse) {
	if *target == nil {
		*target = new(WatchDeviceGroupResponse)
	}
	switch fpv.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*device_group.DeviceGroupChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceGroupResponse_FieldTerminalPathValue' with the value under path in 'WatchDeviceGroupResponse'.
func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) CompareWith(source *WatchDeviceGroupResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceGroupResponse))
}

// WatchDeviceGroupResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceGroupResponse according to their type
// Present only for array (repeated) types.
type WatchDeviceGroupResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceGroupResponse_FieldPath
	ContainsValue(*WatchDeviceGroupResponse) bool
}

// ParseWatchDeviceGroupResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceGroupResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceGroupResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceGroupResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceGroupResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeviceGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupResponse_FieldPathArrayItemValue = (*WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceGroupResponse as interface{}
func (fpaiv *WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceGroupResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceGroupResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceGroupResponse'
func (fpaiv *WatchDeviceGroupResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceGroupResponse) bool {
	slice := fpaiv.WatchDeviceGroupResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceGroupResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeviceGroupResponse fields according to their type
type WatchDeviceGroupResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceGroupResponse_FieldPath
}

func ParseWatchDeviceGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceGroupResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceGroupResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceGroupResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeviceGroupResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceGroupResponse_FieldPathArrayOfValues = (*WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceGroupResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*device_group.DeviceGroupChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceGroupResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*device_group.DeviceGroupChange, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroupChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceGroupsRequest_FieldPathSelector
	Get(source *WatchDeviceGroupsRequest) []interface{}
	GetSingle(source *WatchDeviceGroupsRequest) (interface{}, bool)
	ClearValue(item *WatchDeviceGroupsRequest)

	// Those methods build corresponding WatchDeviceGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceGroupsRequest_FieldPathArrayItemValue
}

type WatchDeviceGroupsRequest_FieldPathSelector int32

const (
	WatchDeviceGroupsRequest_FieldPathSelectorType         WatchDeviceGroupsRequest_FieldPathSelector = 0
	WatchDeviceGroupsRequest_FieldPathSelectorParent       WatchDeviceGroupsRequest_FieldPathSelector = 1
	WatchDeviceGroupsRequest_FieldPathSelectorPageSize     WatchDeviceGroupsRequest_FieldPathSelector = 2
	WatchDeviceGroupsRequest_FieldPathSelectorPageToken    WatchDeviceGroupsRequest_FieldPathSelector = 3
	WatchDeviceGroupsRequest_FieldPathSelectorOrderBy      WatchDeviceGroupsRequest_FieldPathSelector = 4
	WatchDeviceGroupsRequest_FieldPathSelectorResumeToken  WatchDeviceGroupsRequest_FieldPathSelector = 5
	WatchDeviceGroupsRequest_FieldPathSelectorFilter       WatchDeviceGroupsRequest_FieldPathSelector = 6
	WatchDeviceGroupsRequest_FieldPathSelectorFieldMask    WatchDeviceGroupsRequest_FieldPathSelector = 7
	WatchDeviceGroupsRequest_FieldPathSelectorView         WatchDeviceGroupsRequest_FieldPathSelector = 8
	WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize WatchDeviceGroupsRequest_FieldPathSelector = 9
)

func (s WatchDeviceGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		return "type"
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		return "view"
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", s))
	}
}

func BuildWatchDeviceGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceGroupsRequest", fp)
}

func ParseWatchDeviceGroupsRequest_FieldPath(rawField string) (WatchDeviceGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceGroupsRequest_FieldPath(fp)
}

func MustParseWatchDeviceGroupsRequest_FieldPath(rawField string) WatchDeviceGroupsRequest_FieldPath {
	fp, err := ParseWatchDeviceGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceGroupsRequest_FieldTerminalPath struct {
	selector WatchDeviceGroupsRequest_FieldPathSelector
}

var _ WatchDeviceGroupsRequest_FieldPath = (*WatchDeviceGroupsRequest_FieldTerminalPath)(nil)

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) Selector() WatchDeviceGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceGroupsRequest
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) Get(source *WatchDeviceGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceGroupsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchDeviceGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeviceGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceGroupsRequest
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) GetSingle(source *WatchDeviceGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		return (*device_group.ParentReference)(nil)
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		return (*device_group.PagerCursor)(nil)
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return (*device_group.OrderBy)(nil)
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		return (*device_group.Filter)(nil)
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) ClearValue(item *WatchDeviceGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceGroupsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchDeviceGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeviceGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorType ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorParent ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorView ||
		fp.selector == WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceGroupsRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.ParentReference)}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.OrderBy)}
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.Filter)}
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeviceGroupsRequest_FieldTerminalPathValue{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.ParentReference)}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.OrderBy)}
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.Filter)}
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues{WatchDeviceGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceGroupsRequest_FieldPathValue allows storing values for WatchDeviceGroupsRequest fields according to their type
type WatchDeviceGroupsRequest_FieldPathValue interface {
	WatchDeviceGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceGroupsRequest)
	CompareWith(*WatchDeviceGroupsRequest) (cmp int, comparable bool)
}

func ParseWatchDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) (WatchDeviceGroupsRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceGroupsRequest_FieldPathValue), nil
}

func MustParseWatchDeviceGroupsRequest_FieldPathValue(pathStr, valueStr string) WatchDeviceGroupsRequest_FieldPathValue {
	fpv, err := ParseWatchDeviceGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceGroupsRequest_FieldTerminalPathValue struct {
	WatchDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsRequest_FieldPathValue = (*WatchDeviceGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceGroupsRequest' as interface{}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsParentValue() (*device_group.ParentReference, bool) {
	res, ok := fpv.value.(*device_group.ParentReference)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*device_group.OrderBy, bool) {
	res, ok := fpv.value.(*device_group.OrderBy)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*device_group.Filter, bool) {
	res, ok := fpv.value.(*device_group.Filter)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceGroupsRequest
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) SetTo(target **WatchDeviceGroupsRequest) {
	if *target == nil {
		*target = new(WatchDeviceGroupsRequest)
	}
	switch fpv.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device_group.ParentReference)
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device_group.PagerCursor)
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device_group.OrderBy)
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device_group.Filter)
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceGroupsRequest_FieldTerminalPathValue' with the value under path in 'WatchDeviceGroupsRequest'.
func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) CompareWith(source *WatchDeviceGroupsRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceGroupsRequest))
}

// WatchDeviceGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceGroupsRequest according to their type
// Present only for array (repeated) types.
type WatchDeviceGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceGroupsRequest_FieldPath
	ContainsValue(*WatchDeviceGroupsRequest) bool
}

// ParseWatchDeviceGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeviceGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsRequest_FieldPathArrayItemValue = (*WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceGroupsRequest as interface{}
func (fpaiv *WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceGroupsRequest'
func (fpaiv *WatchDeviceGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceGroupsRequest) bool {
	slice := fpaiv.WatchDeviceGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceGroupsRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeviceGroupsRequest fields according to their type
type WatchDeviceGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceGroupsRequest_FieldPath
}

func ParseWatchDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeviceGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceGroupsRequest_FieldPathArrayOfValues = (*WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceGroupsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device_group.ParentReference) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device_group.OrderBy) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device_group.Filter) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*device_group.ParentReference)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*device_group.OrderBy)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device_group.Filter, bool) {
	res, ok := fpaov.values.([]*device_group.Filter)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchDeviceGroupsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceGroupsResponse_FieldPathSelector
	Get(source *WatchDeviceGroupsResponse) []interface{}
	GetSingle(source *WatchDeviceGroupsResponse) (interface{}, bool)
	ClearValue(item *WatchDeviceGroupsResponse)

	// Those methods build corresponding WatchDeviceGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceGroupsResponse_FieldPathArrayItemValue
}

type WatchDeviceGroupsResponse_FieldPathSelector int32

const (
	WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges WatchDeviceGroupsResponse_FieldPathSelector = 0
	WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent          WatchDeviceGroupsResponse_FieldPathSelector = 1
	WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange    WatchDeviceGroupsResponse_FieldPathSelector = 2
	WatchDeviceGroupsResponse_FieldPathSelectorResumeToken        WatchDeviceGroupsResponse_FieldPathSelector = 3
	WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize       WatchDeviceGroupsResponse_FieldPathSelector = 4
	WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset        WatchDeviceGroupsResponse_FieldPathSelector = 5
	WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset        WatchDeviceGroupsResponse_FieldPathSelector = 6
)

func (s WatchDeviceGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return "device_group_changes"
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", s))
	}
}

func BuildWatchDeviceGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_group_changes", "deviceGroupChanges", "device-group-changes":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchDeviceGroupsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchDeviceGroupsResponse_FieldSubPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceGroupsResponse", fp)
}

func ParseWatchDeviceGroupsResponse_FieldPath(rawField string) (WatchDeviceGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceGroupsResponse_FieldPath(fp)
}

func MustParseWatchDeviceGroupsResponse_FieldPath(rawField string) WatchDeviceGroupsResponse_FieldPath {
	fp, err := ParseWatchDeviceGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceGroupsResponse_FieldTerminalPath struct {
	selector WatchDeviceGroupsResponse_FieldPathSelector
}

var _ WatchDeviceGroupsResponse_FieldPath = (*WatchDeviceGroupsResponse_FieldTerminalPath)(nil)

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) Selector() WatchDeviceGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceGroupsResponse
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) Get(source *WatchDeviceGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
			for _, value := range source.GetDeviceGroupChanges() {
				values = append(values, value)
			}
		case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceGroupsResponse
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) GetSingle(source *WatchDeviceGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		res := source.GetDeviceGroupChanges()
		return res, res != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return ([]*device_group.DeviceGroupChange)(nil)
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchDeviceGroupsResponse_PageTokenChange)(nil)
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) ClearValue(item *WatchDeviceGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
			item.DeviceGroupChanges = nil
		case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges ||
		fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceGroupsResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.([]*device_group.DeviceGroupChange)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*WatchDeviceGroupsResponse_PageTokenChange)}
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchDeviceGroupsResponse_FieldTerminalPathValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*device_group.DeviceGroupChange)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]*WatchDeviceGroupsResponse_PageTokenChange)}
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return &WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue{WatchDeviceGroupsResponse_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchDeviceGroupsResponse_FieldSubPath struct {
	selector WatchDeviceGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchDeviceGroupsResponse_FieldPath = (*WatchDeviceGroupsResponse_FieldSubPath)(nil)

func (fps *WatchDeviceGroupsResponse_FieldSubPath) Selector() WatchDeviceGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchDeviceGroupsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchDeviceGroupsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchDeviceGroupsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchDeviceGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchDeviceGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchDeviceGroupsResponse
func (fps *WatchDeviceGroupsResponse_FieldSubPath) Get(source *WatchDeviceGroupsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchDeviceGroupsResponse))
}

// GetSingle returns value of selected field from source WatchDeviceGroupsResponse
func (fps *WatchDeviceGroupsResponse_FieldSubPath) GetSingle(source *WatchDeviceGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fps.selector))
	}
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchDeviceGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchDeviceGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) ClearValue(item *WatchDeviceGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchDeviceGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchDeviceGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithIValue(value interface{}) WatchDeviceGroupsResponse_FieldPathValue {
	return &WatchDeviceGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupsResponse_FieldPathArrayOfValues {
	return &WatchDeviceGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupsResponse_FieldPathArrayItemValue {
	return &WatchDeviceGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchDeviceGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchDeviceGroupsResponse_FieldPathValue allows storing values for WatchDeviceGroupsResponse fields according to their type
type WatchDeviceGroupsResponse_FieldPathValue interface {
	WatchDeviceGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceGroupsResponse)
	CompareWith(*WatchDeviceGroupsResponse) (cmp int, comparable bool)
}

func ParseWatchDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) (WatchDeviceGroupsResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceGroupsResponse_FieldPathValue), nil
}

func MustParseWatchDeviceGroupsResponse_FieldPathValue(pathStr, valueStr string) WatchDeviceGroupsResponse_FieldPathValue {
	fpv, err := ParseWatchDeviceGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceGroupsResponse_FieldTerminalPathValue struct {
	WatchDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsResponse_FieldPathValue = (*WatchDeviceGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceGroupsResponse' as interface{}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsDeviceGroupChangesValue() ([]*device_group.DeviceGroupChange, bool) {
	res, ok := fpv.value.([]*device_group.DeviceGroupChange)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchDeviceGroupsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchDeviceGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceGroupsResponse
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) SetTo(target **WatchDeviceGroupsResponse) {
	if *target == nil {
		*target = new(WatchDeviceGroupsResponse)
	}
	switch fpv.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		(*target).DeviceGroupChanges = fpv.value.([]*device_group.DeviceGroupChange)
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchDeviceGroupsResponse_PageTokenChange)
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceGroupsResponse_FieldTerminalPathValue' with the value under path in 'WatchDeviceGroupsResponse'.
func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) CompareWith(source *WatchDeviceGroupsResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		return 0, false
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceGroupsResponse))
}

type WatchDeviceGroupsResponse_FieldSubPathValue struct {
	WatchDeviceGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchDeviceGroupsResponse_FieldPathValue = (*WatchDeviceGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchDeviceGroupsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchDeviceGroupsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) SetTo(target **WatchDeviceGroupsResponse) {
	if *target == nil {
		*target = new(WatchDeviceGroupsResponse)
	}
	switch fpvs.Selector() {
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchDeviceGroupsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) CompareWith(source *WatchDeviceGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchDeviceGroupsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeviceGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchDeviceGroupsResponse))
}

// WatchDeviceGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceGroupsResponse according to their type
// Present only for array (repeated) types.
type WatchDeviceGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceGroupsResponse_FieldPath
	ContainsValue(*WatchDeviceGroupsResponse) bool
}

// ParseWatchDeviceGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeviceGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsResponse_FieldPathArrayItemValue = (*WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceGroupsResponse as interface{}
func (fpaiv *WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue) AsDeviceGroupChangesItemValue() (*device_group.DeviceGroupChange, bool) {
	res, ok := fpaiv.value.(*device_group.DeviceGroupChange)
	return res, ok
}

func (fpaiv *WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceGroupsResponse'
func (fpaiv *WatchDeviceGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceGroupsResponse) bool {
	slice := fpaiv.WatchDeviceGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchDeviceGroupsResponse_FieldSubPathArrayItemValue struct {
	WatchDeviceGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchDeviceGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchDeviceGroupsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceGroupsResponse'
func (fpaivs *WatchDeviceGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchDeviceGroupsResponse) bool {
	switch fpaivs.Selector() {
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse: %d", fpaivs.Selector()))
	}
}

// WatchDeviceGroupsResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeviceGroupsResponse fields according to their type
type WatchDeviceGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceGroupsResponse_FieldPath
}

func ParseWatchDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeviceGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceGroupsResponse_FieldPathArrayOfValues = (*WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges:
		for _, v := range fpaov.values.([][]*device_group.DeviceGroupChange) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchDeviceGroupsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsDeviceGroupChangesArrayOfValues() ([][]*device_group.DeviceGroupChange, bool) {
	res, ok := fpaov.values.([][]*device_group.DeviceGroupChange)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchDeviceGroupsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchDeviceGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchDeviceGroupsResponse_FieldSubPathArrayOfValues struct {
	WatchDeviceGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchDeviceGroupsResponse_FieldPathArrayOfValues = (*WatchDeviceGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchDeviceGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchDeviceGroupsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceGroupsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchDeviceGroupsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchDeviceGroupsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchDeviceGroupsResponse_PageTokenChange)

	// Those methods build corresponding WatchDeviceGroupsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector = 0
	WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchDeviceGroupsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceGroupsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceGroupsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceGroupsResponse_PageTokenChange", fp)
}

func ParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(rawField string) (WatchDeviceGroupsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceGroupsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(rawField string) WatchDeviceGroupsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector
}

var _ WatchDeviceGroupsResponsePageTokenChange_FieldPath = (*WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) Selector() WatchDeviceGroupsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceGroupsResponse_PageTokenChange
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchDeviceGroupsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceGroupsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceGroupsResponse_PageTokenChange
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchDeviceGroupsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceGroupsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*device_group.PagerCursor)(nil)
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*device_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchDeviceGroupsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceGroupsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceGroupsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchDeviceGroupsResponsePageTokenChange_FieldPathValue interface {
	WatchDeviceGroupsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceGroupsResponse_PageTokenChange)
	CompareWith(*WatchDeviceGroupsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchDeviceGroupsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceGroupsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchDeviceGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchDeviceGroupsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsResponsePageTokenChange_FieldPathValue = (*WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}
func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*device_group.PagerCursor, bool) {
	res, ok := fpv.value.(*device_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchDeviceGroupsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchDeviceGroupsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device_group.PagerCursor)
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceGroupsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchDeviceGroupsResponse_PageTokenChange'.
func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchDeviceGroupsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceGroupsResponse_PageTokenChange))
}

// WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceGroupsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchDeviceGroupsResponse_PageTokenChange) bool
}

// ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceGroupsResponse_PageTokenChange as interface{}
func (fpaiv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceGroupsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceGroupsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceGroupsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceGroupsResponsePageTokenChange_FieldPath
}

func ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceGroupsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_group.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateDeviceGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateDeviceGroupRequest_FieldPathSelector
	Get(source *CreateDeviceGroupRequest) []interface{}
	GetSingle(source *CreateDeviceGroupRequest) (interface{}, bool)
	ClearValue(item *CreateDeviceGroupRequest)

	// Those methods build corresponding CreateDeviceGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateDeviceGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateDeviceGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateDeviceGroupRequest_FieldPathArrayItemValue
}

type CreateDeviceGroupRequest_FieldPathSelector int32

const (
	CreateDeviceGroupRequest_FieldPathSelectorParent      CreateDeviceGroupRequest_FieldPathSelector = 0
	CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup CreateDeviceGroupRequest_FieldPathSelector = 1
)

func (s CreateDeviceGroupRequest_FieldPathSelector) String() string {
	switch s {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		return "parent"
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return "device_group"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", s))
	}
}

func BuildCreateDeviceGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateDeviceGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateDeviceGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateDeviceGroupRequest_FieldTerminalPath{selector: CreateDeviceGroupRequest_FieldPathSelectorParent}, nil
		case "device_group", "deviceGroup", "device-group":
			return &CreateDeviceGroupRequest_FieldTerminalPath{selector: CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup}, nil
		}
	} else {
		switch fp[0] {
		case "device_group", "deviceGroup", "device-group":
			if subpath, err := device_group.BuildDeviceGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateDeviceGroupRequest_FieldSubPath{selector: CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateDeviceGroupRequest", fp)
}

func ParseCreateDeviceGroupRequest_FieldPath(rawField string) (CreateDeviceGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateDeviceGroupRequest_FieldPath(fp)
}

func MustParseCreateDeviceGroupRequest_FieldPath(rawField string) CreateDeviceGroupRequest_FieldPath {
	fp, err := ParseCreateDeviceGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateDeviceGroupRequest_FieldTerminalPath struct {
	selector CreateDeviceGroupRequest_FieldPathSelector
}

var _ CreateDeviceGroupRequest_FieldPath = (*CreateDeviceGroupRequest_FieldTerminalPath)(nil)

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) Selector() CreateDeviceGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateDeviceGroupRequest
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) Get(source *CreateDeviceGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateDeviceGroupRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			if source.DeviceGroup != nil {
				values = append(values, source.DeviceGroup)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateDeviceGroupRequest))
}

// GetSingle returns value pointed by specific field of from source CreateDeviceGroupRequest
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) GetSingle(source *CreateDeviceGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		res := source.GetDeviceGroup()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		return (*device_group.ParentReference)(nil)
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return (*device_group.DeviceGroup)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) ClearValue(item *CreateDeviceGroupRequest) {
	if item != nil {
		switch fp.selector {
		case CreateDeviceGroupRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			item.DeviceGroup = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateDeviceGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateDeviceGroupRequest_FieldPathSelectorParent
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithIValue(value interface{}) CreateDeviceGroupRequest_FieldPathValue {
	switch fp.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		return &CreateDeviceGroupRequest_FieldTerminalPathValue{CreateDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.ParentReference)}
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return &CreateDeviceGroupRequest_FieldTerminalPathValue{CreateDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov := &CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues{CreateDeviceGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		return &CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues{CreateDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.ParentReference)}
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return &CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues{CreateDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateDeviceGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateDeviceGroupRequest_FieldSubPath struct {
	selector CreateDeviceGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateDeviceGroupRequest_FieldPath = (*CreateDeviceGroupRequest_FieldSubPath)(nil)

func (fps *CreateDeviceGroupRequest_FieldSubPath) Selector() CreateDeviceGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateDeviceGroupRequest_FieldSubPath) AsDeviceGroupSubPath() (device_group.DeviceGroup_FieldPath, bool) {
	res, ok := fps.subPath.(device_group.DeviceGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateDeviceGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateDeviceGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateDeviceGroupRequest
func (fps *CreateDeviceGroupRequest_FieldSubPath) Get(source *CreateDeviceGroupRequest) (values []interface{}) {
	if asDeviceGroupFieldPath, ok := fps.AsDeviceGroupSubPath(); ok {
		values = append(values, asDeviceGroupFieldPath.Get(source.GetDeviceGroup())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateDeviceGroupRequest))
}

// GetSingle returns value of selected field from source CreateDeviceGroupRequest
func (fps *CreateDeviceGroupRequest_FieldSubPath) GetSingle(source *CreateDeviceGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		if source.GetDeviceGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fps.selector))
	}
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateDeviceGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) ClearValue(item *CreateDeviceGroupRequest) {
	if item != nil {
		switch fps.selector {
		case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			fps.subPath.ClearValueRaw(item.DeviceGroup)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateDeviceGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithIValue(value interface{}) CreateDeviceGroupRequest_FieldPathValue {
	return &CreateDeviceGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateDeviceGroupRequest_FieldPathArrayOfValues {
	return &CreateDeviceGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateDeviceGroupRequest_FieldPathArrayItemValue {
	return &CreateDeviceGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateDeviceGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateDeviceGroupRequest_FieldPathValue allows storing values for CreateDeviceGroupRequest fields according to their type
type CreateDeviceGroupRequest_FieldPathValue interface {
	CreateDeviceGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateDeviceGroupRequest)
	CompareWith(*CreateDeviceGroupRequest) (cmp int, comparable bool)
}

func ParseCreateDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) (CreateDeviceGroupRequest_FieldPathValue, error) {
	fp, err := ParseCreateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateDeviceGroupRequest_FieldPathValue), nil
}

func MustParseCreateDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) CreateDeviceGroupRequest_FieldPathValue {
	fpv, err := ParseCreateDeviceGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateDeviceGroupRequest_FieldTerminalPathValue struct {
	CreateDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceGroupRequest_FieldPathValue = (*CreateDeviceGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateDeviceGroupRequest' as interface{}
func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) AsParentValue() (*device_group.ParentReference, bool) {
	res, ok := fpv.value.(*device_group.ParentReference)
	return res, ok
}
func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) AsDeviceGroupValue() (*device_group.DeviceGroup, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup)
	return res, ok
}

// SetTo stores value for selected field for object CreateDeviceGroupRequest
func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) SetTo(target **CreateDeviceGroupRequest) {
	if *target == nil {
		*target = new(CreateDeviceGroupRequest)
	}
	switch fpv.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device_group.ParentReference)
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		(*target).DeviceGroup = fpv.value.(*device_group.DeviceGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateDeviceGroupRequest_FieldTerminalPathValue' with the value under path in 'CreateDeviceGroupRequest'.
func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) CompareWith(source *CreateDeviceGroupRequest) (int, bool) {
	switch fpv.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateDeviceGroupRequest))
}

type CreateDeviceGroupRequest_FieldSubPathValue struct {
	CreateDeviceGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateDeviceGroupRequest_FieldPathValue = (*CreateDeviceGroupRequest_FieldSubPathValue)(nil)

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) AsDeviceGroupPathValue() (device_group.DeviceGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue)
	return res, ok
}

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) SetTo(target **CreateDeviceGroupRequest) {
	if *target == nil {
		*target = new(CreateDeviceGroupRequest)
	}
	switch fpvs.Selector() {
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).SetTo(&(*target).DeviceGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) CompareWith(source *CreateDeviceGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).CompareWith(source.GetDeviceGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateDeviceGroupRequest))
}

// CreateDeviceGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateDeviceGroupRequest according to their type
// Present only for array (repeated) types.
type CreateDeviceGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateDeviceGroupRequest_FieldPath
	ContainsValue(*CreateDeviceGroupRequest) bool
}

// ParseCreateDeviceGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateDeviceGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateDeviceGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateDeviceGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue struct {
	CreateDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceGroupRequest_FieldPathArrayItemValue = (*CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateDeviceGroupRequest as interface{}
func (fpaiv *CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateDeviceGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateDeviceGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceGroupRequest'
func (fpaiv *CreateDeviceGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateDeviceGroupRequest) bool {
	slice := fpaiv.CreateDeviceGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateDeviceGroupRequest_FieldSubPathArrayItemValue struct {
	CreateDeviceGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateDeviceGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateDeviceGroupRequest_FieldSubPathArrayItemValue) AsDeviceGroupPathItemValue() (device_group.DeviceGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceGroupRequest'
func (fpaivs *CreateDeviceGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateDeviceGroupRequest) bool {
	switch fpaivs.Selector() {
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue).ContainsValue(source.GetDeviceGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceGroupRequest: %d", fpaivs.Selector()))
	}
}

// CreateDeviceGroupRequest_FieldPathArrayOfValues allows storing slice of values for CreateDeviceGroupRequest fields according to their type
type CreateDeviceGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateDeviceGroupRequest_FieldPath
}

func ParseCreateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateDeviceGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateDeviceGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues struct {
	CreateDeviceGroupRequest_FieldTerminalPath
	values interface{}
}

var _ CreateDeviceGroupRequest_FieldPathArrayOfValues = (*CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateDeviceGroupRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device_group.ParentReference) {
			values = append(values, v)
		}
	case CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*device_group.ParentReference)
	return res, ok
}
func (fpaov *CreateDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsDeviceGroupArrayOfValues() ([]*device_group.DeviceGroup, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup)
	return res, ok
}

type CreateDeviceGroupRequest_FieldSubPathArrayOfValues struct {
	CreateDeviceGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateDeviceGroupRequest_FieldPathArrayOfValues = (*CreateDeviceGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateDeviceGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateDeviceGroupRequest_FieldSubPathArrayOfValues) AsDeviceGroupPathArrayOfValues() (device_group.DeviceGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_group.DeviceGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceGroupRequest_FieldPathSelector
	Get(source *UpdateDeviceGroupRequest) []interface{}
	GetSingle(source *UpdateDeviceGroupRequest) (interface{}, bool)
	ClearValue(item *UpdateDeviceGroupRequest)

	// Those methods build corresponding UpdateDeviceGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequest_FieldPathArrayItemValue
}

type UpdateDeviceGroupRequest_FieldPathSelector int32

const (
	UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup UpdateDeviceGroupRequest_FieldPathSelector = 0
	UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask  UpdateDeviceGroupRequest_FieldPathSelector = 1
	UpdateDeviceGroupRequest_FieldPathSelectorCas         UpdateDeviceGroupRequest_FieldPathSelector = 2
)

func (s UpdateDeviceGroupRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return "device_group"
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", s))
	}
}

func BuildUpdateDeviceGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_group", "deviceGroup", "device-group":
			return &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "device_group", "deviceGroup", "device-group":
			if subpath, err := device_group.BuildDeviceGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceGroupRequest_FieldSubPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateDeviceGroupRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceGroupRequest_FieldSubPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceGroupRequest", fp)
}

func ParseUpdateDeviceGroupRequest_FieldPath(rawField string) (UpdateDeviceGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceGroupRequest_FieldPath(fp)
}

func MustParseUpdateDeviceGroupRequest_FieldPath(rawField string) UpdateDeviceGroupRequest_FieldPath {
	fp, err := ParseUpdateDeviceGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceGroupRequest_FieldTerminalPath struct {
	selector UpdateDeviceGroupRequest_FieldPathSelector
}

var _ UpdateDeviceGroupRequest_FieldPath = (*UpdateDeviceGroupRequest_FieldTerminalPath)(nil)

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) Selector() UpdateDeviceGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceGroupRequest
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) Get(source *UpdateDeviceGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			if source.DeviceGroup != nil {
				values = append(values, source.DeviceGroup)
			}
		case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateDeviceGroupRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceGroupRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceGroupRequest
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) GetSingle(source *UpdateDeviceGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		res := source.GetDeviceGroup()
		return res, res != nil
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return (*device_group.DeviceGroup)(nil)
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return (*UpdateDeviceGroupRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) ClearValue(item *UpdateDeviceGroupRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			item.DeviceGroup = nil
		case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateDeviceGroupRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceGroupRequest_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return &UpdateDeviceGroupRequest_FieldTerminalPathValue{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup)}
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceGroupRequest_FieldTerminalPathValue{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return &UpdateDeviceGroupRequest_FieldTerminalPathValue{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*UpdateDeviceGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return &UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup)}
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return &UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*UpdateDeviceGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceGroupRequest_FieldSubPath struct {
	selector UpdateDeviceGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceGroupRequest_FieldPath = (*UpdateDeviceGroupRequest_FieldSubPath)(nil)

func (fps *UpdateDeviceGroupRequest_FieldSubPath) Selector() UpdateDeviceGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceGroupRequest_FieldSubPath) AsDeviceGroupSubPath() (device_group.DeviceGroup_FieldPath, bool) {
	res, ok := fps.subPath.(device_group.DeviceGroup_FieldPath)
	return res, ok
}
func (fps *UpdateDeviceGroupRequest_FieldSubPath) AsCasSubPath() (UpdateDeviceGroupRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateDeviceGroupRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceGroupRequest
func (fps *UpdateDeviceGroupRequest_FieldSubPath) Get(source *UpdateDeviceGroupRequest) (values []interface{}) {
	if asDeviceGroupFieldPath, ok := fps.AsDeviceGroupSubPath(); ok {
		values = append(values, asDeviceGroupFieldPath.Get(source.GetDeviceGroup())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceGroupRequest))
}

// GetSingle returns value of selected field from source UpdateDeviceGroupRequest
func (fps *UpdateDeviceGroupRequest_FieldSubPath) GetSingle(source *UpdateDeviceGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		if source.GetDeviceGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceGroup())
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fps.selector))
	}
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) ClearValue(item *UpdateDeviceGroupRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
			fps.subPath.ClearValueRaw(item.DeviceGroup)
		case UpdateDeviceGroupRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithIValue(value interface{}) UpdateDeviceGroupRequest_FieldPathValue {
	return &UpdateDeviceGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequest_FieldPathArrayOfValues {
	return &UpdateDeviceGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequest_FieldPathArrayItemValue {
	return &UpdateDeviceGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceGroupRequest_FieldPathValue allows storing values for UpdateDeviceGroupRequest fields according to their type
type UpdateDeviceGroupRequest_FieldPathValue interface {
	UpdateDeviceGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceGroupRequest)
	CompareWith(*UpdateDeviceGroupRequest) (cmp int, comparable bool)
}

func ParseUpdateDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) (UpdateDeviceGroupRequest_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceGroupRequest_FieldPathValue), nil
}

func MustParseUpdateDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) UpdateDeviceGroupRequest_FieldPathValue {
	fpv, err := ParseUpdateDeviceGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceGroupRequest_FieldTerminalPathValue struct {
	UpdateDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceGroupRequest_FieldPathValue = (*UpdateDeviceGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateDeviceGroupRequest' as interface{}
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) AsDeviceGroupValue() (*device_group.DeviceGroup, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup)
	return res, ok
}
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) AsCasValue() (*UpdateDeviceGroupRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateDeviceGroupRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateDeviceGroupRequest
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) SetTo(target **UpdateDeviceGroupRequest) {
	if *target == nil {
		*target = new(UpdateDeviceGroupRequest)
	}
	switch fpv.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		(*target).DeviceGroup = fpv.value.(*device_group.DeviceGroup)
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateDeviceGroupRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceGroupRequest_FieldTerminalPathValue' with the value under path in 'UpdateDeviceGroupRequest'.
func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) CompareWith(source *UpdateDeviceGroupRequest) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return 0, false
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceGroupRequest))
}

type UpdateDeviceGroupRequest_FieldSubPathValue struct {
	UpdateDeviceGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceGroupRequest_FieldPathValue = (*UpdateDeviceGroupRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) AsDeviceGroupPathValue() (device_group.DeviceGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) AsCasPathValue() (UpdateDeviceGroupRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateDeviceGroupRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) SetTo(target **UpdateDeviceGroupRequest) {
	if *target == nil {
		*target = new(UpdateDeviceGroupRequest)
	}
	switch fpvs.Selector() {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).SetTo(&(*target).DeviceGroup)
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateDeviceGroupRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) CompareWith(source *UpdateDeviceGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).CompareWith(source.GetDeviceGroup())
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateDeviceGroupRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceGroupRequest))
}

// UpdateDeviceGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateDeviceGroupRequest according to their type
// Present only for array (repeated) types.
type UpdateDeviceGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceGroupRequest_FieldPath
	ContainsValue(*UpdateDeviceGroupRequest) bool
}

// ParseUpdateDeviceGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceGroupRequest_FieldPathArrayItemValue = (*UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceGroupRequest as interface{}
func (fpaiv *UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceGroupRequest'
func (fpaiv *UpdateDeviceGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceGroupRequest) bool {
	slice := fpaiv.UpdateDeviceGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceGroupRequest_FieldSubPathArrayItemValue struct {
	UpdateDeviceGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceGroupRequest_FieldSubPathArrayItemValue) AsDeviceGroupPathItemValue() (device_group.DeviceGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateDeviceGroupRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceGroupRequest'
func (fpaivs *UpdateDeviceGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceGroupRequest) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		return fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue).ContainsValue(source.GetDeviceGroup())
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceGroupRequest_FieldPathArrayOfValues allows storing slice of values for UpdateDeviceGroupRequest fields according to their type
type UpdateDeviceGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceGroupRequest_FieldPath
}

func ParseUpdateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceGroupRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceGroupRequest_FieldPathArrayOfValues = (*UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup) {
			values = append(values, v)
		}
	case UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	case UpdateDeviceGroupRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateDeviceGroupRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsDeviceGroupArrayOfValues() ([]*device_group.DeviceGroup, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup)
	return res, ok
}
func (fpaov *UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}
func (fpaov *UpdateDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateDeviceGroupRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateDeviceGroupRequest_CAS)
	return res, ok
}

type UpdateDeviceGroupRequest_FieldSubPathArrayOfValues struct {
	UpdateDeviceGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceGroupRequest_FieldPathArrayOfValues = (*UpdateDeviceGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceGroupRequest_FieldSubPathArrayOfValues) AsDeviceGroupPathArrayOfValues() (device_group.DeviceGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_group.DeviceGroup_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateDeviceGroupRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceGroupRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceGroupRequestCAS_FieldPathSelector
	Get(source *UpdateDeviceGroupRequest_CAS) []interface{}
	GetSingle(source *UpdateDeviceGroupRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateDeviceGroupRequest_CAS)

	// Those methods build corresponding UpdateDeviceGroupRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue
}

type UpdateDeviceGroupRequestCAS_FieldPathSelector int32

const (
	UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState UpdateDeviceGroupRequestCAS_FieldPathSelector = 0
	UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask        UpdateDeviceGroupRequestCAS_FieldPathSelector = 1
)

func (s UpdateDeviceGroupRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", s))
	}
}

func BuildUpdateDeviceGroupRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceGroupRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceGroupRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateDeviceGroupRequestCAS_FieldTerminalPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateDeviceGroupRequestCAS_FieldTerminalPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := device_group.BuildDeviceGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceGroupRequestCAS_FieldSubPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceGroupRequest_CAS", fp)
}

func ParseUpdateDeviceGroupRequestCAS_FieldPath(rawField string) (UpdateDeviceGroupRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceGroupRequestCAS_FieldPath(fp)
}

func MustParseUpdateDeviceGroupRequestCAS_FieldPath(rawField string) UpdateDeviceGroupRequestCAS_FieldPath {
	fp, err := ParseUpdateDeviceGroupRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceGroupRequestCAS_FieldTerminalPath struct {
	selector UpdateDeviceGroupRequestCAS_FieldPathSelector
}

var _ UpdateDeviceGroupRequestCAS_FieldPath = (*UpdateDeviceGroupRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) Selector() UpdateDeviceGroupRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceGroupRequest_CAS
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) Get(source *UpdateDeviceGroupRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceGroupRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceGroupRequest_CAS
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) GetSingle(source *UpdateDeviceGroupRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return (*device_group.DeviceGroup)(nil)
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		return (*device_group.DeviceGroup_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) ClearValue(item *UpdateDeviceGroupRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceGroupRequestCAS_FieldTerminalPathValue{UpdateDeviceGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup)}
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceGroupRequestCAS_FieldTerminalPathValue{UpdateDeviceGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*device_group.DeviceGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup)}
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*device_group.DeviceGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceGroupRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceGroupRequestCAS_FieldSubPath struct {
	selector UpdateDeviceGroupRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceGroupRequestCAS_FieldPath = (*UpdateDeviceGroupRequestCAS_FieldSubPath)(nil)

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) Selector() UpdateDeviceGroupRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) AsConditionalStateSubPath() (device_group.DeviceGroup_FieldPath, bool) {
	res, ok := fps.subPath.(device_group.DeviceGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceGroupRequest_CAS
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) Get(source *UpdateDeviceGroupRequest_CAS) (values []interface{}) {
	if asDeviceGroupFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asDeviceGroupFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceGroupRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateDeviceGroupRequest_CAS
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) GetSingle(source *UpdateDeviceGroupRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) ClearValue(item *UpdateDeviceGroupRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathValue {
	return &UpdateDeviceGroupRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues {
	return &UpdateDeviceGroupRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue {
	return &UpdateDeviceGroupRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceGroupRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceGroupRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateDeviceGroupRequestCAS_FieldPathValue interface {
	UpdateDeviceGroupRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceGroupRequest_CAS)
	CompareWith(*UpdateDeviceGroupRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateDeviceGroupRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateDeviceGroupRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceGroupRequestCAS_FieldPathValue), nil
}

func MustParseUpdateDeviceGroupRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateDeviceGroupRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateDeviceGroupRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceGroupRequestCAS_FieldTerminalPathValue struct {
	UpdateDeviceGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceGroupRequestCAS_FieldPathValue = (*UpdateDeviceGroupRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*device_group.DeviceGroup, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup)
	return res, ok
}
func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpv.value.(*device_group.DeviceGroup_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateDeviceGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceGroupRequest_CAS)
	}
	switch fpv.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*device_group.DeviceGroup)
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_group.DeviceGroup_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceGroupRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceGroupRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateDeviceGroupRequest_CAS'.
func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateDeviceGroupRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceGroupRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceGroupRequest_CAS))
}

type UpdateDeviceGroupRequestCAS_FieldSubPathValue struct {
	UpdateDeviceGroupRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceGroupRequestCAS_FieldPathValue = (*UpdateDeviceGroupRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (device_group.DeviceGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) SetTo(target **UpdateDeviceGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceGroupRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceGroupRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) CompareWith(source *UpdateDeviceGroupRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(device_group.DeviceGroup_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceGroupRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceGroupRequest_CAS))
}

// UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceGroupRequestCAS_FieldPath
	ContainsValue(*UpdateDeviceGroupRequest_CAS) bool
}

// ParseUpdateDeviceGroupRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceGroupRequestCAS_FieldPathArrayItemValue = (*UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceGroupRequest_CAS as interface{}
func (fpaiv *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceGroupRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceGroupRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceGroupRequest_CAS) bool {
	slice := fpaiv.UpdateDeviceGroupRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceGroupRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateDeviceGroupRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceGroupRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceGroupRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (device_group.DeviceGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateDeviceGroupRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceGroupRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(device_group.DeviceGroup_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceGroupRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceGroupRequestCAS_FieldPath
}

func ParseUpdateDeviceGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceGroupRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup) {
			values = append(values, v)
		}
	case UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_group.DeviceGroup_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*device_group.DeviceGroup, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup)
	return res, ok
}
func (fpaov *UpdateDeviceGroupRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_group.DeviceGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_group.DeviceGroup_FieldMask)
	return res, ok
}

type UpdateDeviceGroupRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateDeviceGroupRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceGroupRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceGroupRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceGroupRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceGroupRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (device_group.DeviceGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_group.DeviceGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteDeviceGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteDeviceGroupRequest_FieldPathSelector
	Get(source *DeleteDeviceGroupRequest) []interface{}
	GetSingle(source *DeleteDeviceGroupRequest) (interface{}, bool)
	ClearValue(item *DeleteDeviceGroupRequest)

	// Those methods build corresponding DeleteDeviceGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteDeviceGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteDeviceGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteDeviceGroupRequest_FieldPathArrayItemValue
}

type DeleteDeviceGroupRequest_FieldPathSelector int32

const (
	DeleteDeviceGroupRequest_FieldPathSelectorName DeleteDeviceGroupRequest_FieldPathSelector = 0
)

func (s DeleteDeviceGroupRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", s))
	}
}

func BuildDeleteDeviceGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteDeviceGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteDeviceGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteDeviceGroupRequest_FieldTerminalPath{selector: DeleteDeviceGroupRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteDeviceGroupRequest", fp)
}

func ParseDeleteDeviceGroupRequest_FieldPath(rawField string) (DeleteDeviceGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteDeviceGroupRequest_FieldPath(fp)
}

func MustParseDeleteDeviceGroupRequest_FieldPath(rawField string) DeleteDeviceGroupRequest_FieldPath {
	fp, err := ParseDeleteDeviceGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteDeviceGroupRequest_FieldTerminalPath struct {
	selector DeleteDeviceGroupRequest_FieldPathSelector
}

var _ DeleteDeviceGroupRequest_FieldPath = (*DeleteDeviceGroupRequest_FieldTerminalPath)(nil)

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) Selector() DeleteDeviceGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteDeviceGroupRequest
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) Get(source *DeleteDeviceGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteDeviceGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteDeviceGroupRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteDeviceGroupRequest
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) GetSingle(source *DeleteDeviceGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteDeviceGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		return (*device_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) ClearValue(item *DeleteDeviceGroupRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteDeviceGroupRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteDeviceGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteDeviceGroupRequest_FieldPathSelectorName
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteDeviceGroupRequest_FieldPathValue {
	switch fp.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		return &DeleteDeviceGroupRequest_FieldTerminalPathValue{DeleteDeviceGroupRequest_FieldTerminalPath: *fp, value: value.(*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov := &DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues{DeleteDeviceGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		return &DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues{DeleteDeviceGroupRequest_FieldTerminalPath: *fp, values: values.([]*device_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteDeviceGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteDeviceGroupRequest_FieldPathValue allows storing values for DeleteDeviceGroupRequest fields according to their type
type DeleteDeviceGroupRequest_FieldPathValue interface {
	DeleteDeviceGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteDeviceGroupRequest)
	CompareWith(*DeleteDeviceGroupRequest) (cmp int, comparable bool)
}

func ParseDeleteDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) (DeleteDeviceGroupRequest_FieldPathValue, error) {
	fp, err := ParseDeleteDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteDeviceGroupRequest_FieldPathValue), nil
}

func MustParseDeleteDeviceGroupRequest_FieldPathValue(pathStr, valueStr string) DeleteDeviceGroupRequest_FieldPathValue {
	fpv, err := ParseDeleteDeviceGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteDeviceGroupRequest_FieldTerminalPathValue struct {
	DeleteDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceGroupRequest_FieldPathValue = (*DeleteDeviceGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteDeviceGroupRequest' as interface{}
func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) AsNameValue() (*device_group.Reference, bool) {
	res, ok := fpv.value.(*device_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteDeviceGroupRequest
func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) SetTo(target **DeleteDeviceGroupRequest) {
	if *target == nil {
		*target = new(DeleteDeviceGroupRequest)
	}
	switch fpv.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteDeviceGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteDeviceGroupRequest_FieldTerminalPathValue' with the value under path in 'DeleteDeviceGroupRequest'.
func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) CompareWith(source *DeleteDeviceGroupRequest) (int, bool) {
	switch fpv.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteDeviceGroupRequest))
}

// DeleteDeviceGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteDeviceGroupRequest according to their type
// Present only for array (repeated) types.
type DeleteDeviceGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteDeviceGroupRequest_FieldPath
	ContainsValue(*DeleteDeviceGroupRequest) bool
}

// ParseDeleteDeviceGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteDeviceGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteDeviceGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteDeviceGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteDeviceGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue struct {
	DeleteDeviceGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceGroupRequest_FieldPathArrayItemValue = (*DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteDeviceGroupRequest as interface{}
func (fpaiv *DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteDeviceGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteDeviceGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteDeviceGroupRequest'
func (fpaiv *DeleteDeviceGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteDeviceGroupRequest) bool {
	slice := fpaiv.DeleteDeviceGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteDeviceGroupRequest_FieldPathArrayOfValues allows storing slice of values for DeleteDeviceGroupRequest fields according to their type
type DeleteDeviceGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteDeviceGroupRequest_FieldPath
}

func ParseDeleteDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteDeviceGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteDeviceGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteDeviceGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteDeviceGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteDeviceGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues struct {
	DeleteDeviceGroupRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteDeviceGroupRequest_FieldPathArrayOfValues = (*DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteDeviceGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteDeviceGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_group.Reference, bool) {
	res, ok := fpaov.values.([]*device_group.Reference)
	return res, ok
}
