// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/device_group_service.proto
// DO NOT EDIT!!!

package device_group_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	device_group "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device_group"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &device_group.DeviceGroup{}
)

func (o *GetDeviceGroupRequest) GotenObjectExt() {}

func (o *GetDeviceGroupRequest) MakeFullFieldMask() *GetDeviceGroupRequest_FieldMask {
	return FullGetDeviceGroupRequest_FieldMask()
}

func (o *GetDeviceGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetDeviceGroupRequest_FieldMask()
}

func (o *GetDeviceGroupRequest) MakeDiffFieldMask(other *GetDeviceGroupRequest) *GetDeviceGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &GetDeviceGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetDeviceGroupRequest_FieldMask()
	}

	res := &GetDeviceGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetDeviceGroupRequest_FieldTerminalPath{selector: GetDeviceGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetDeviceGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetDeviceGroupRequest))
}

func (o *GetDeviceGroupRequest) Clone() *GetDeviceGroupRequest {
	if o == nil {
		return nil
	}
	result := &GetDeviceGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *GetDeviceGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetDeviceGroupRequest) Merge(source *GetDeviceGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetDeviceGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetDeviceGroupRequest))
}

func (o *BatchGetDeviceGroupsRequest) GotenObjectExt() {}

func (o *BatchGetDeviceGroupsRequest) MakeFullFieldMask() *BatchGetDeviceGroupsRequest_FieldMask {
	return FullBatchGetDeviceGroupsRequest_FieldMask()
}

func (o *BatchGetDeviceGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeviceGroupsRequest_FieldMask()
}

func (o *BatchGetDeviceGroupsRequest) MakeDiffFieldMask(other *BatchGetDeviceGroupsRequest) *BatchGetDeviceGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeviceGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeviceGroupsRequest_FieldMask()
	}

	res := &BatchGetDeviceGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsRequest_FieldTerminalPath{selector: BatchGetDeviceGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetDeviceGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeviceGroupsRequest))
}

func (o *BatchGetDeviceGroupsRequest) Clone() *BatchGetDeviceGroupsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetDeviceGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_group.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*device_group.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &device_group.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetDeviceGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeviceGroupsRequest) Merge(source *BatchGetDeviceGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_group.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetDeviceGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeviceGroupsRequest))
}

func (o *BatchGetDeviceGroupsResponse) GotenObjectExt() {}

func (o *BatchGetDeviceGroupsResponse) MakeFullFieldMask() *BatchGetDeviceGroupsResponse_FieldMask {
	return FullBatchGetDeviceGroupsResponse_FieldMask()
}

func (o *BatchGetDeviceGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeviceGroupsResponse_FieldMask()
}

func (o *BatchGetDeviceGroupsResponse) MakeDiffFieldMask(other *BatchGetDeviceGroupsResponse) *BatchGetDeviceGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeviceGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeviceGroupsResponse_FieldMask()
	}

	res := &BatchGetDeviceGroupsResponse_FieldMask{}

	if len(o.GetDeviceGroups()) == len(other.GetDeviceGroups()) {
		for i, lValue := range o.GetDeviceGroups() {
			rValue := other.GetDeviceGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorDeviceGroups})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceGroupsResponse_FieldTerminalPath{selector: BatchGetDeviceGroupsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetDeviceGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeviceGroupsResponse))
}

func (o *BatchGetDeviceGroupsResponse) Clone() *BatchGetDeviceGroupsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetDeviceGroupsResponse{}
	result.DeviceGroups = make([]*device_group.DeviceGroup, len(o.DeviceGroups))
	for i, sourceValue := range o.DeviceGroups {
		result.DeviceGroups[i] = sourceValue.Clone()
	}
	result.Missing = make([]*device_group.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &device_group.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetDeviceGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeviceGroupsResponse) Merge(source *BatchGetDeviceGroupsResponse) {
	for _, sourceValue := range source.GetDeviceGroups() {
		exists := false
		for _, currentValue := range o.DeviceGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_group.DeviceGroup
			if sourceValue != nil {
				newDstElement = new(device_group.DeviceGroup)
				newDstElement.Merge(sourceValue)
			}
			o.DeviceGroups = append(o.DeviceGroups, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetDeviceGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeviceGroupsResponse))
}

func (o *ListDeviceGroupsRequest) GotenObjectExt() {}

func (o *ListDeviceGroupsRequest) MakeFullFieldMask() *ListDeviceGroupsRequest_FieldMask {
	return FullListDeviceGroupsRequest_FieldMask()
}

func (o *ListDeviceGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeviceGroupsRequest_FieldMask()
}

func (o *ListDeviceGroupsRequest) MakeDiffFieldMask(other *ListDeviceGroupsRequest) *ListDeviceGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListDeviceGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeviceGroupsRequest_FieldMask()
	}

	res := &ListDeviceGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListDeviceGroupsRequest_FieldTerminalPath{selector: ListDeviceGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListDeviceGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeviceGroupsRequest))
}

func (o *ListDeviceGroupsRequest) Clone() *ListDeviceGroupsRequest {
	if o == nil {
		return nil
	}
	result := &ListDeviceGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *ListDeviceGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeviceGroupsRequest) Merge(source *ListDeviceGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListDeviceGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeviceGroupsRequest))
}

func (o *ListDeviceGroupsResponse) GotenObjectExt() {}

func (o *ListDeviceGroupsResponse) MakeFullFieldMask() *ListDeviceGroupsResponse_FieldMask {
	return FullListDeviceGroupsResponse_FieldMask()
}

func (o *ListDeviceGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeviceGroupsResponse_FieldMask()
}

func (o *ListDeviceGroupsResponse) MakeDiffFieldMask(other *ListDeviceGroupsResponse) *ListDeviceGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListDeviceGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeviceGroupsResponse_FieldMask()
	}

	res := &ListDeviceGroupsResponse_FieldMask{}

	if len(o.GetDeviceGroups()) == len(other.GetDeviceGroups()) {
		for i, lValue := range o.GetDeviceGroups() {
			rValue := other.GetDeviceGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorDeviceGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceGroupsResponse_FieldTerminalPath{selector: ListDeviceGroupsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListDeviceGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeviceGroupsResponse))
}

func (o *ListDeviceGroupsResponse) Clone() *ListDeviceGroupsResponse {
	if o == nil {
		return nil
	}
	result := &ListDeviceGroupsResponse{}
	result.DeviceGroups = make([]*device_group.DeviceGroup, len(o.DeviceGroups))
	for i, sourceValue := range o.DeviceGroups {
		result.DeviceGroups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListDeviceGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeviceGroupsResponse) Merge(source *ListDeviceGroupsResponse) {
	for _, sourceValue := range source.GetDeviceGroups() {
		exists := false
		for _, currentValue := range o.DeviceGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_group.DeviceGroup
			if sourceValue != nil {
				newDstElement = new(device_group.DeviceGroup)
				newDstElement.Merge(sourceValue)
			}
			o.DeviceGroups = append(o.DeviceGroups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListDeviceGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeviceGroupsResponse))
}

func (o *WatchDeviceGroupRequest) GotenObjectExt() {}

func (o *WatchDeviceGroupRequest) MakeFullFieldMask() *WatchDeviceGroupRequest_FieldMask {
	return FullWatchDeviceGroupRequest_FieldMask()
}

func (o *WatchDeviceGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceGroupRequest_FieldMask()
}

func (o *WatchDeviceGroupRequest) MakeDiffFieldMask(other *WatchDeviceGroupRequest) *WatchDeviceGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceGroupRequest_FieldMask()
	}

	res := &WatchDeviceGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeviceGroupRequest_FieldTerminalPath{selector: WatchDeviceGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchDeviceGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceGroupRequest))
}

func (o *WatchDeviceGroupRequest) Clone() *WatchDeviceGroupRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeviceGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchDeviceGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceGroupRequest) Merge(source *WatchDeviceGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchDeviceGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceGroupRequest))
}

func (o *WatchDeviceGroupResponse) GotenObjectExt() {}

func (o *WatchDeviceGroupResponse) MakeFullFieldMask() *WatchDeviceGroupResponse_FieldMask {
	return FullWatchDeviceGroupResponse_FieldMask()
}

func (o *WatchDeviceGroupResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceGroupResponse_FieldMask()
}

func (o *WatchDeviceGroupResponse) MakeDiffFieldMask(other *WatchDeviceGroupResponse) *WatchDeviceGroupResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceGroupResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceGroupResponse_FieldMask()
	}

	res := &WatchDeviceGroupResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchDeviceGroupResponse_FieldTerminalPath{selector: WatchDeviceGroupResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchDeviceGroupResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceGroupResponse))
}

func (o *WatchDeviceGroupResponse) Clone() *WatchDeviceGroupResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeviceGroupResponse{}
	result.Change = proto.Clone(o.Change).(*device_group.DeviceGroupChange)
	return result
}

func (o *WatchDeviceGroupResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceGroupResponse) Merge(source *WatchDeviceGroupResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(device_group.DeviceGroupChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchDeviceGroupResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceGroupResponse))
}

func (o *WatchDeviceGroupsRequest) GotenObjectExt() {}

func (o *WatchDeviceGroupsRequest) MakeFullFieldMask() *WatchDeviceGroupsRequest_FieldMask {
	return FullWatchDeviceGroupsRequest_FieldMask()
}

func (o *WatchDeviceGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceGroupsRequest_FieldMask()
}

func (o *WatchDeviceGroupsRequest) MakeDiffFieldMask(other *WatchDeviceGroupsRequest) *WatchDeviceGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceGroupsRequest_FieldMask()
	}

	res := &WatchDeviceGroupsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsRequest_FieldTerminalPath{selector: WatchDeviceGroupsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchDeviceGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceGroupsRequest))
}

func (o *WatchDeviceGroupsRequest) Clone() *WatchDeviceGroupsRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeviceGroupsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchDeviceGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceGroupsRequest) Merge(source *WatchDeviceGroupsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchDeviceGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceGroupsRequest))
}

func (o *WatchDeviceGroupsResponse) GotenObjectExt() {}

func (o *WatchDeviceGroupsResponse) MakeFullFieldMask() *WatchDeviceGroupsResponse_FieldMask {
	return FullWatchDeviceGroupsResponse_FieldMask()
}

func (o *WatchDeviceGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceGroupsResponse_FieldMask()
}

func (o *WatchDeviceGroupsResponse) MakeDiffFieldMask(other *WatchDeviceGroupsResponse) *WatchDeviceGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceGroupsResponse_FieldMask()
	}

	res := &WatchDeviceGroupsResponse_FieldMask{}

	if len(o.GetDeviceGroupChanges()) == len(other.GetDeviceGroupChanges()) {
		for i, lValue := range o.GetDeviceGroupChanges() {
			rValue := other.GetDeviceGroupChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorDeviceGroupChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldSubPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponse_FieldTerminalPath{selector: WatchDeviceGroupsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchDeviceGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceGroupsResponse))
}

func (o *WatchDeviceGroupsResponse) Clone() *WatchDeviceGroupsResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeviceGroupsResponse{}
	result.DeviceGroupChanges = make([]*device_group.DeviceGroupChange, len(o.DeviceGroupChanges))
	for i, sourceValue := range o.DeviceGroupChanges {
		result.DeviceGroupChanges[i] = proto.Clone(sourceValue).(*device_group.DeviceGroupChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchDeviceGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceGroupsResponse) Merge(source *WatchDeviceGroupsResponse) {
	for _, sourceValue := range source.GetDeviceGroupChanges() {
		exists := false
		for _, currentValue := range o.DeviceGroupChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_group.DeviceGroupChange
			if sourceValue != nil {
				newDstElement = new(device_group.DeviceGroupChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.DeviceGroupChanges = append(o.DeviceGroupChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchDeviceGroupsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchDeviceGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceGroupsResponse))
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchDeviceGroupsResponse_PageTokenChange) MakeFullFieldMask() *WatchDeviceGroupsResponse_PageTokenChange_FieldMask {
	return FullWatchDeviceGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchDeviceGroupsResponse_PageTokenChange) *WatchDeviceGroupsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceGroupsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceGroupsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchDeviceGroupsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceGroupsResponse_PageTokenChange))
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) Clone() *WatchDeviceGroupsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchDeviceGroupsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) Merge(source *WatchDeviceGroupsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchDeviceGroupsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceGroupsResponse_PageTokenChange))
}

func (o *CreateDeviceGroupRequest) GotenObjectExt() {}

func (o *CreateDeviceGroupRequest) MakeFullFieldMask() *CreateDeviceGroupRequest_FieldMask {
	return FullCreateDeviceGroupRequest_FieldMask()
}

func (o *CreateDeviceGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateDeviceGroupRequest_FieldMask()
}

func (o *CreateDeviceGroupRequest) MakeDiffFieldMask(other *CreateDeviceGroupRequest) *CreateDeviceGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateDeviceGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateDeviceGroupRequest_FieldMask()
	}

	res := &CreateDeviceGroupRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateDeviceGroupRequest_FieldTerminalPath{selector: CreateDeviceGroupRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetDeviceGroup().MakeDiffFieldMask(other.GetDeviceGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateDeviceGroupRequest_FieldTerminalPath{selector: CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateDeviceGroupRequest_FieldSubPath{selector: CreateDeviceGroupRequest_FieldPathSelectorDeviceGroup, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateDeviceGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateDeviceGroupRequest))
}

func (o *CreateDeviceGroupRequest) Clone() *CreateDeviceGroupRequest {
	if o == nil {
		return nil
	}
	result := &CreateDeviceGroupRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DeviceGroup = o.DeviceGroup.Clone()
	return result
}

func (o *CreateDeviceGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateDeviceGroupRequest) Merge(source *CreateDeviceGroupRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetDeviceGroup() != nil {
		if o.DeviceGroup == nil {
			o.DeviceGroup = new(device_group.DeviceGroup)
		}
		o.DeviceGroup.Merge(source.GetDeviceGroup())
	}
}

func (o *CreateDeviceGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateDeviceGroupRequest))
}

func (o *UpdateDeviceGroupRequest) GotenObjectExt() {}

func (o *UpdateDeviceGroupRequest) MakeFullFieldMask() *UpdateDeviceGroupRequest_FieldMask {
	return FullUpdateDeviceGroupRequest_FieldMask()
}

func (o *UpdateDeviceGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceGroupRequest_FieldMask()
}

func (o *UpdateDeviceGroupRequest) MakeDiffFieldMask(other *UpdateDeviceGroupRequest) *UpdateDeviceGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceGroupRequest_FieldMask()
	}

	res := &UpdateDeviceGroupRequest_FieldMask{}
	{
		subMask := o.GetDeviceGroup().MakeDiffFieldMask(other.GetDeviceGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceGroupRequest_FieldSubPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorDeviceGroup, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceGroupRequest_FieldTerminalPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceGroupRequest_FieldSubPath{selector: UpdateDeviceGroupRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateDeviceGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceGroupRequest))
}

func (o *UpdateDeviceGroupRequest) Clone() *UpdateDeviceGroupRequest {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceGroupRequest{}
	result.DeviceGroup = o.DeviceGroup.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*device_group.DeviceGroup_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateDeviceGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceGroupRequest) Merge(source *UpdateDeviceGroupRequest) {
	if source.GetDeviceGroup() != nil {
		if o.DeviceGroup == nil {
			o.DeviceGroup = new(device_group.DeviceGroup)
		}
		o.DeviceGroup.Merge(source.GetDeviceGroup())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateDeviceGroupRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateDeviceGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceGroupRequest))
}

func (o *UpdateDeviceGroupRequest_CAS) GotenObjectExt() {}

func (o *UpdateDeviceGroupRequest_CAS) MakeFullFieldMask() *UpdateDeviceGroupRequest_CAS_FieldMask {
	return FullUpdateDeviceGroupRequest_CAS_FieldMask()
}

func (o *UpdateDeviceGroupRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceGroupRequest_CAS_FieldMask()
}

func (o *UpdateDeviceGroupRequest_CAS) MakeDiffFieldMask(other *UpdateDeviceGroupRequest_CAS) *UpdateDeviceGroupRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceGroupRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceGroupRequest_CAS_FieldMask()
	}

	res := &UpdateDeviceGroupRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceGroupRequestCAS_FieldTerminalPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceGroupRequestCAS_FieldSubPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceGroupRequestCAS_FieldTerminalPath{selector: UpdateDeviceGroupRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateDeviceGroupRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceGroupRequest_CAS))
}

func (o *UpdateDeviceGroupRequest_CAS) Clone() *UpdateDeviceGroupRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceGroupRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*device_group.DeviceGroup_FieldMask)
	return result
}

func (o *UpdateDeviceGroupRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceGroupRequest_CAS) Merge(source *UpdateDeviceGroupRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(device_group.DeviceGroup)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_group.DeviceGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateDeviceGroupRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceGroupRequest_CAS))
}

func (o *DeleteDeviceGroupRequest) GotenObjectExt() {}

func (o *DeleteDeviceGroupRequest) MakeFullFieldMask() *DeleteDeviceGroupRequest_FieldMask {
	return FullDeleteDeviceGroupRequest_FieldMask()
}

func (o *DeleteDeviceGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteDeviceGroupRequest_FieldMask()
}

func (o *DeleteDeviceGroupRequest) MakeDiffFieldMask(other *DeleteDeviceGroupRequest) *DeleteDeviceGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteDeviceGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteDeviceGroupRequest_FieldMask()
	}

	res := &DeleteDeviceGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteDeviceGroupRequest_FieldTerminalPath{selector: DeleteDeviceGroupRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteDeviceGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteDeviceGroupRequest))
}

func (o *DeleteDeviceGroupRequest) Clone() *DeleteDeviceGroupRequest {
	if o == nil {
		return nil
	}
	result := &DeleteDeviceGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteDeviceGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteDeviceGroupRequest) Merge(source *DeleteDeviceGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteDeviceGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteDeviceGroupRequest))
}
