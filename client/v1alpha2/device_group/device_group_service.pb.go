// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha2/device_group_service.proto
// DO NOT EDIT!!!

package device_group_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	device_group "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device_group"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &device_group.DeviceGroup{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetDeviceGroup][ntt.workplace.v1alpha2.GetDeviceGroup]
type GetDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.DeviceGroup
	Name *device_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetDeviceGroupRequest) Reset() {
	*m = GetDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetDeviceGroupRequest) ProtoMessage() {}

func (m *GetDeviceGroupRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetDeviceGroupRequest) GotenMessage() {}

// Deprecated, Use GetDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetDeviceGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetDeviceGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetDeviceGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetDeviceGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetDeviceGroupRequest) GetName() *device_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetDeviceGroupRequest) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetDeviceGroupRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetDeviceGroupRequest) SetName(fv *device_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetDeviceGroupRequest"))
	}
	m.Name = fv
}

func (m *GetDeviceGroupRequest) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetDeviceGroupRequest"))
	}
	m.FieldMask = fv
}

func (m *GetDeviceGroupRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetDeviceGroupRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetDeviceGroups][ntt.workplace.v1alpha2.BatchGetDeviceGroups]
type BatchGetDeviceGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of DeviceGroups
	Names []*device_group.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetDeviceGroupsRequest) Reset() {
	*m = BatchGetDeviceGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceGroupsRequest) ProtoMessage() {}

func (m *BatchGetDeviceGroupsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceGroupsRequest) GotenMessage() {}

// Deprecated, Use BatchGetDeviceGroupsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceGroupsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetDeviceGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceGroupsRequest) GetNames() []*device_group.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetDeviceGroupsRequest) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetDeviceGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetDeviceGroupsRequest) SetNames(fv []*device_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetDeviceGroupsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetDeviceGroupsRequest) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetDeviceGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetDeviceGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetDeviceGroupsRequest"))
	}
	m.View = fv
}

// BatchGetDeviceGroupsResponse
type BatchGetDeviceGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found DeviceGroups
	DeviceGroups []*device_group.DeviceGroup `protobuf:"bytes,1,rep,name=device_groups,json=deviceGroups,proto3" json:"device_groups,omitempty" firestore:"deviceGroups"`
	// list of not found DeviceGroups
	Missing []*device_group.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetDeviceGroupsResponse) Reset() {
	*m = BatchGetDeviceGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceGroupsResponse) ProtoMessage() {}

func (m *BatchGetDeviceGroupsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceGroupsResponse) GotenMessage() {}

// Deprecated, Use BatchGetDeviceGroupsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceGroupsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetDeviceGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceGroupsResponse) GetDeviceGroups() []*device_group.DeviceGroup {
	if m != nil {
		return m.DeviceGroups
	}
	return nil
}

func (m *BatchGetDeviceGroupsResponse) GetMissing() []*device_group.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetDeviceGroupsResponse) SetDeviceGroups(fv []*device_group.DeviceGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceGroups", "BatchGetDeviceGroupsResponse"))
	}
	m.DeviceGroups = fv
}

func (m *BatchGetDeviceGroupsResponse) SetMissing(fv []*device_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetDeviceGroupsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListDeviceGroups][ntt.workplace.v1alpha2.ListDeviceGroups]
type ListDeviceGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.workplace.v1alpha2.DeviceGroup
	Parent *device_group.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer DeviceGroups than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListDeviceGroupsResponse.next_page_token][ntt.workplace.v1alpha2.ListDeviceGroupsResponse.next_page_token]
	PageToken *device_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *device_group.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_group.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListDeviceGroupsRequest) Reset() {
	*m = ListDeviceGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceGroupsRequest) ProtoMessage() {}

func (m *ListDeviceGroupsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceGroupsRequest) GotenMessage() {}

// Deprecated, Use ListDeviceGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceGroupsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListDeviceGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceGroupsRequest) GetParent() *device_group.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListDeviceGroupsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListDeviceGroupsRequest) GetPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListDeviceGroupsRequest) GetOrderBy() *device_group.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListDeviceGroupsRequest) GetFilter() *device_group.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDeviceGroupsRequest) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListDeviceGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListDeviceGroupsRequest) SetParent(fv *device_group.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListDeviceGroupsRequest"))
	}
	m.Parent = fv
}

func (m *ListDeviceGroupsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListDeviceGroupsRequest"))
	}
	m.PageSize = fv
}

func (m *ListDeviceGroupsRequest) SetPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListDeviceGroupsRequest"))
	}
	m.PageToken = fv
}

func (m *ListDeviceGroupsRequest) SetOrderBy(fv *device_group.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListDeviceGroupsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListDeviceGroupsRequest) SetFilter(fv *device_group.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListDeviceGroupsRequest"))
	}
	m.Filter = fv
}

func (m *ListDeviceGroupsRequest) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListDeviceGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListDeviceGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListDeviceGroupsRequest"))
	}
	m.View = fv
}

// Request message for method
// [ListDeviceGroups][ntt.workplace.v1alpha2.ListDeviceGroups]
type ListDeviceGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of DeviceGroups
	DeviceGroups []*device_group.DeviceGroup `protobuf:"bytes,1,rep,name=device_groups,json=deviceGroups,proto3" json:"device_groups,omitempty" firestore:"deviceGroups"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListDeviceGroupsRequest.page_token][ntt.workplace.v1alpha2.ListDeviceGroupsRequest.page_token]
	PrevPageToken *device_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListDeviceGroupsRequest.page_token][ntt.workplace.v1alpha2.ListDeviceGroupsRequest.page_token]
	NextPageToken *device_group.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListDeviceGroupsResponse) Reset() {
	*m = ListDeviceGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceGroupsResponse) ProtoMessage() {}

func (m *ListDeviceGroupsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceGroupsResponse) GotenMessage() {}

// Deprecated, Use ListDeviceGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceGroupsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListDeviceGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceGroupsResponse) GetDeviceGroups() []*device_group.DeviceGroup {
	if m != nil {
		return m.DeviceGroups
	}
	return nil
}

func (m *ListDeviceGroupsResponse) GetPrevPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListDeviceGroupsResponse) GetNextPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListDeviceGroupsResponse) SetDeviceGroups(fv []*device_group.DeviceGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceGroups", "ListDeviceGroupsResponse"))
	}
	m.DeviceGroups = fv
}

func (m *ListDeviceGroupsResponse) SetPrevPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListDeviceGroupsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListDeviceGroupsResponse) SetNextPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListDeviceGroupsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method
// [WatchDeviceGroup][ntt.workplace.v1alpha2.WatchDeviceGroup]
type WatchDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.workplace.v1alpha2.DeviceGroup
	Name *device_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchDeviceGroupRequest) Reset() {
	*m = WatchDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceGroupRequest) ProtoMessage() {}

func (m *WatchDeviceGroupRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceGroupRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchDeviceGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceGroupRequest) GetName() *device_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchDeviceGroupRequest) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceGroupRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceGroupRequest) SetName(fv *device_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchDeviceGroupRequest"))
	}
	m.Name = fv
}

func (m *WatchDeviceGroupRequest) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceGroupRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceGroupRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceGroupRequest"))
	}
	m.View = fv
}

// WatchDeviceGroupResponse
type WatchDeviceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *device_group.DeviceGroupChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchDeviceGroupResponse) Reset() {
	*m = WatchDeviceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceGroupResponse) ProtoMessage() {}

func (m *WatchDeviceGroupResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceGroupResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceGroupResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceGroupResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchDeviceGroupResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceGroupResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceGroupResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceGroupResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceGroupResponse) GetChange() *device_group.DeviceGroupChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchDeviceGroupResponse) SetChange(fv *device_group.DeviceGroupChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchDeviceGroupResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchDeviceGroups][ntt.workplace.v1alpha2.WatchDeviceGroups]
type WatchDeviceGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.workplace.v1alpha2.DeviceGroup
	Parent *device_group.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer DeviceGroups than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *device_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *device_group.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_group.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to DeviceGroup that don't
	// affect any of masked fields won't be sent back.
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// DeviceGroup that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchDeviceGroupsRequest) Reset() {
	*m = WatchDeviceGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceGroupsRequest) ProtoMessage() {}

func (m *WatchDeviceGroupsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceGroupsRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceGroupsRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceGroupsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchDeviceGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceGroupsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchDeviceGroupsRequest) GetParent() *device_group.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchDeviceGroupsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchDeviceGroupsRequest) GetPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchDeviceGroupsRequest) GetOrderBy() *device_group.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchDeviceGroupsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceGroupsRequest) GetFilter() *device_group.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchDeviceGroupsRequest) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceGroupsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchDeviceGroupsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchDeviceGroupsRequest"))
	}
	m.Type = fv
}

func (m *WatchDeviceGroupsRequest) SetParent(fv *device_group.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchDeviceGroupsRequest"))
	}
	m.Parent = fv
}

func (m *WatchDeviceGroupsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchDeviceGroupsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchDeviceGroupsRequest) SetPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchDeviceGroupsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchDeviceGroupsRequest) SetOrderBy(fv *device_group.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchDeviceGroupsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchDeviceGroupsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceGroupsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceGroupsRequest) SetFilter(fv *device_group.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchDeviceGroupsRequest"))
	}
	m.Filter = fv
}

func (m *WatchDeviceGroupsRequest) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceGroupsRequest"))
	}
	m.View = fv
}

func (m *WatchDeviceGroupsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchDeviceGroupsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchDeviceGroupsResponse
type WatchDeviceGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of DeviceGroups
	DeviceGroupChanges []*device_group.DeviceGroupChange `protobuf:"bytes,2,rep,name=device_group_changes,json=deviceGroupChanges,proto3" json:"device_group_changes,omitempty" firestore:"deviceGroupChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All DeviceGroups will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchDeviceGroupsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (DeviceGroups will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchDeviceGroupsResponse) Reset() {
	*m = WatchDeviceGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceGroupsResponse) ProtoMessage() {}

func (m *WatchDeviceGroupsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceGroupsResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceGroupsResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceGroupsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchDeviceGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceGroupsResponse) GetDeviceGroupChanges() []*device_group.DeviceGroupChange {
	if m != nil {
		return m.DeviceGroupChanges
	}
	return nil
}

func (m *WatchDeviceGroupsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchDeviceGroupsResponse) GetPageTokenChange() *WatchDeviceGroupsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchDeviceGroupsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceGroupsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchDeviceGroupsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchDeviceGroupsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchDeviceGroupsResponse) SetDeviceGroupChanges(fv []*device_group.DeviceGroupChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceGroupChanges", "WatchDeviceGroupsResponse"))
	}
	m.DeviceGroupChanges = fv
}

func (m *WatchDeviceGroupsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchDeviceGroupsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchDeviceGroupsResponse) SetPageTokenChange(fv *WatchDeviceGroupsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchDeviceGroupsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchDeviceGroupsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceGroupsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceGroupsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchDeviceGroupsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchDeviceGroupsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchDeviceGroupsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchDeviceGroupsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchDeviceGroupsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateDeviceGroup][ntt.workplace.v1alpha2.CreateDeviceGroup]
type CreateDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.workplace.v1alpha2.DeviceGroup
	Parent *device_group.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// DeviceGroup resource body
	DeviceGroup *device_group.DeviceGroup `protobuf:"bytes,2,opt,name=device_group,json=deviceGroup,proto3" json:"device_group,omitempty" firestore:"deviceGroup"`
}

func (m *CreateDeviceGroupRequest) Reset() {
	*m = CreateDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateDeviceGroupRequest) ProtoMessage() {}

func (m *CreateDeviceGroupRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateDeviceGroupRequest) GotenMessage() {}

// Deprecated, Use CreateDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateDeviceGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateDeviceGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateDeviceGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateDeviceGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateDeviceGroupRequest) GetParent() *device_group.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateDeviceGroupRequest) GetDeviceGroup() *device_group.DeviceGroup {
	if m != nil {
		return m.DeviceGroup
	}
	return nil
}

func (m *CreateDeviceGroupRequest) SetParent(fv *device_group.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateDeviceGroupRequest"))
	}
	m.Parent = fv
}

func (m *CreateDeviceGroupRequest) SetDeviceGroup(fv *device_group.DeviceGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceGroup", "CreateDeviceGroupRequest"))
	}
	m.DeviceGroup = fv
}

// Request message for method
// [UpdateDeviceGroup][ntt.workplace.v1alpha2.UpdateDeviceGroup]
type UpdateDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// DeviceGroup resource body
	DeviceGroup *device_group.DeviceGroup `protobuf:"bytes,2,opt,name=device_group,json=deviceGroup,proto3" json:"device_group,omitempty" firestore:"deviceGroup"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceGroup_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateDeviceGroupRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateDeviceGroupRequest) Reset() {
	*m = UpdateDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceGroupRequest) ProtoMessage() {}

func (m *UpdateDeviceGroupRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceGroupRequest) GotenMessage() {}

// Deprecated, Use UpdateDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateDeviceGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceGroupRequest) GetDeviceGroup() *device_group.DeviceGroup {
	if m != nil {
		return m.DeviceGroup
	}
	return nil
}

func (m *UpdateDeviceGroupRequest) GetUpdateMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateDeviceGroupRequest) GetCas() *UpdateDeviceGroupRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateDeviceGroupRequest) SetDeviceGroup(fv *device_group.DeviceGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceGroup", "UpdateDeviceGroupRequest"))
	}
	m.DeviceGroup = fv
}

func (m *UpdateDeviceGroupRequest) SetUpdateMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateDeviceGroupRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateDeviceGroupRequest) SetCas(fv *UpdateDeviceGroupRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateDeviceGroupRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeleteDeviceGroup][ntt.workplace.v1alpha2.DeleteDeviceGroup]
type DeleteDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.DeviceGroup
	Name *device_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteDeviceGroupRequest) Reset() {
	*m = DeleteDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteDeviceGroupRequest) ProtoMessage() {}

func (m *DeleteDeviceGroupRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteDeviceGroupRequest) GotenMessage() {}

// Deprecated, Use DeleteDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteDeviceGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteDeviceGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteDeviceGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteDeviceGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteDeviceGroupRequest) GetName() *device_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteDeviceGroupRequest) SetName(fv *device_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteDeviceGroupRequest"))
	}
	m.Name = fv
}

type WatchDeviceGroupsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *device_group.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *device_group.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) Reset() {
	*m = WatchDeviceGroupsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceGroupsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchDeviceGroupsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceGroupsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchDeviceGroupsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchDeviceGroupsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) GetPrevPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) GetNextPageToken() *device_group.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) SetPrevPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchDeviceGroupsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchDeviceGroupsResponse_PageTokenChange) SetNextPageToken(fv *device_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchDeviceGroupsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateDeviceGroupRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *device_group.DeviceGroup `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *device_group.DeviceGroup_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateDeviceGroupRequest_CAS) Reset() {
	*m = UpdateDeviceGroupRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceGroupRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceGroupRequest_CAS) ProtoMessage() {}

func (m *UpdateDeviceGroupRequest_CAS) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_group_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceGroupRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateDeviceGroupRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateDeviceGroupRequest_CAS) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateDeviceGroupRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceGroupRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceGroupRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceGroupRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceGroupRequest_CAS) GetConditionalState() *device_group.DeviceGroup {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateDeviceGroupRequest_CAS) GetFieldMask() *device_group.DeviceGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateDeviceGroupRequest_CAS) SetConditionalState(fv *device_group.DeviceGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateDeviceGroupRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateDeviceGroupRequest_CAS) SetFieldMask(fv *device_group.DeviceGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateDeviceGroupRequest_CAS"))
	}
	m.FieldMask = fv
}

var workplace_proto_v1alpha2_device_group_service_proto preflect.FileDescriptor

var workplace_proto_v1alpha2_device_group_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xb2, 0xda,
	0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda, 0x21,
	0x0f, 0x32, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x32, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xb2, 0xda, 0x21, 0x0f, 0x3a, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xb2, 0xda, 0x21, 0x0f, 0x2a, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x1a, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x32,
	0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0xde, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xb2, 0xda, 0x21, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xbc, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xb2, 0xda, 0x21, 0x0f,
	0x12, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x32,
	0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x5d, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8b,
	0x04, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xb2, 0xda,
	0x21, 0x0f, 0x42, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f,
	0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x2a, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2,
	0xda, 0x21, 0x0f, 0x1a, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f,
	0x32, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x04, 0x0a,
	0x19, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xb2, 0xda, 0x21, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xb2, 0xda, 0x21, 0x0f, 0x42, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x54, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x1f, 0xc2, 0x85, 0x2c, 0x1b, 0x32, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x32, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x46, 0x0a,
	0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53,
	0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x50, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x13, 0xb2, 0xda, 0x21, 0x0f, 0x32, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a,
	0x2a, 0xc2, 0x85, 0x2c, 0x26, 0x32, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xb2, 0xda, 0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe7, 0x11, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xef, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x88, 0x01, 0x82, 0xdb, 0x21, 0x22, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12,
	0x98, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xdb, 0x21, 0x33, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0f, 0x12, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x28, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x93, 0x02, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xdb, 0x21, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x0f, 0x12, 0x0d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x92, 0x97, 0x22, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00,
	0x12, 0x8e, 0x02, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xdb, 0x21, 0x26, 0x0a,
	0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30,
	0x01, 0x12, 0xa7, 0x02, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x82,
	0xdb, 0x21, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x16, 0x12, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x26, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0xa1, 0x02, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb4, 0x01, 0x82, 0xdb, 0x21, 0x37, 0x0a,
	0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x16, 0x12, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x3a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x97, 0x22, 0x27,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12,
	0xae, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc1, 0x01, 0x82,
	0xdb, 0x21, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0e, 0x12, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x37, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03,
	0x12, 0xea, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x8a, 0x01, 0x82, 0xdb, 0x21, 0x1d, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x1a, 0x31, 0xca,
	0x41, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d,
	0x42, 0x84, 0x03, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x51, 0x0a, 0x13, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x8a, 0xff, 0xd0,
	0x02, 0x51, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x42, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1,
	0x02, 0x45, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha2_device_group_service_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha2_device_group_service_proto_rawDescData = workplace_proto_v1alpha2_device_group_service_proto_rawDesc
)

func workplace_proto_v1alpha2_device_group_service_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha2_device_group_service_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha2_device_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha2_device_group_service_proto_rawDescData)
	})
	return workplace_proto_v1alpha2_device_group_service_proto_rawDescData
}

var workplace_proto_v1alpha2_device_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var workplace_proto_v1alpha2_device_group_service_proto_goTypes = []interface{}{
	(*GetDeviceGroupRequest)(nil),                     // 0: ntt.workplace.v1alpha2.GetDeviceGroupRequest
	(*BatchGetDeviceGroupsRequest)(nil),               // 1: ntt.workplace.v1alpha2.BatchGetDeviceGroupsRequest
	(*BatchGetDeviceGroupsResponse)(nil),              // 2: ntt.workplace.v1alpha2.BatchGetDeviceGroupsResponse
	(*ListDeviceGroupsRequest)(nil),                   // 3: ntt.workplace.v1alpha2.ListDeviceGroupsRequest
	(*ListDeviceGroupsResponse)(nil),                  // 4: ntt.workplace.v1alpha2.ListDeviceGroupsResponse
	(*WatchDeviceGroupRequest)(nil),                   // 5: ntt.workplace.v1alpha2.WatchDeviceGroupRequest
	(*WatchDeviceGroupResponse)(nil),                  // 6: ntt.workplace.v1alpha2.WatchDeviceGroupResponse
	(*WatchDeviceGroupsRequest)(nil),                  // 7: ntt.workplace.v1alpha2.WatchDeviceGroupsRequest
	(*WatchDeviceGroupsResponse)(nil),                 // 8: ntt.workplace.v1alpha2.WatchDeviceGroupsResponse
	(*CreateDeviceGroupRequest)(nil),                  // 9: ntt.workplace.v1alpha2.CreateDeviceGroupRequest
	(*UpdateDeviceGroupRequest)(nil),                  // 10: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest
	(*DeleteDeviceGroupRequest)(nil),                  // 11: ntt.workplace.v1alpha2.DeleteDeviceGroupRequest
	(*WatchDeviceGroupsResponse_PageTokenChange)(nil), // 12: ntt.workplace.v1alpha2.WatchDeviceGroupsResponse.PageTokenChange
	(*UpdateDeviceGroupRequest_CAS)(nil),              // 13: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.CAS
	(*device_group.DeviceGroup_FieldMask)(nil),        // 14: ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	(view.View)(0),                                    // 15: goten.view.View
	(*device_group.DeviceGroup)(nil),                  // 16: ntt.workplace.v1alpha2.DeviceGroup
	(*device_group.DeviceGroupChange)(nil),            // 17: ntt.workplace.v1alpha2.DeviceGroupChange
	(watch_type.WatchType)(0),                         // 18: goten.watch_type.WatchType
	(*empty.Empty)(nil),                               // 19: google.protobuf.Empty
}
var workplace_proto_v1alpha2_device_group_service_proto_depIdxs = []int32{
	14, // 0: ntt.workplace.v1alpha2.GetDeviceGroupRequest.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	15, // 1: ntt.workplace.v1alpha2.GetDeviceGroupRequest.view:type_name -> goten.view.View
	14, // 2: ntt.workplace.v1alpha2.BatchGetDeviceGroupsRequest.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	15, // 3: ntt.workplace.v1alpha2.BatchGetDeviceGroupsRequest.view:type_name -> goten.view.View
	16, // 4: ntt.workplace.v1alpha2.BatchGetDeviceGroupsResponse.device_groups:type_name -> ntt.workplace.v1alpha2.DeviceGroup
	14, // 5: ntt.workplace.v1alpha2.ListDeviceGroupsRequest.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	15, // 6: ntt.workplace.v1alpha2.ListDeviceGroupsRequest.view:type_name -> goten.view.View
	16, // 7: ntt.workplace.v1alpha2.ListDeviceGroupsResponse.device_groups:type_name -> ntt.workplace.v1alpha2.DeviceGroup
	14, // 8: ntt.workplace.v1alpha2.WatchDeviceGroupRequest.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	15, // 9: ntt.workplace.v1alpha2.WatchDeviceGroupRequest.view:type_name -> goten.view.View
	17, // 10: ntt.workplace.v1alpha2.WatchDeviceGroupResponse.change:type_name -> ntt.workplace.v1alpha2.DeviceGroupChange
	18, // 11: ntt.workplace.v1alpha2.WatchDeviceGroupsRequest.type:type_name -> goten.watch_type.WatchType
	14, // 12: ntt.workplace.v1alpha2.WatchDeviceGroupsRequest.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	15, // 13: ntt.workplace.v1alpha2.WatchDeviceGroupsRequest.view:type_name -> goten.view.View
	17, // 14: ntt.workplace.v1alpha2.WatchDeviceGroupsResponse.device_group_changes:type_name -> ntt.workplace.v1alpha2.DeviceGroupChange
	12, // 15: ntt.workplace.v1alpha2.WatchDeviceGroupsResponse.page_token_change:type_name -> ntt.workplace.v1alpha2.WatchDeviceGroupsResponse.PageTokenChange
	16, // 16: ntt.workplace.v1alpha2.CreateDeviceGroupRequest.device_group:type_name -> ntt.workplace.v1alpha2.DeviceGroup
	16, // 17: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.device_group:type_name -> ntt.workplace.v1alpha2.DeviceGroup
	14, // 18: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.update_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	13, // 19: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.cas:type_name -> ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.CAS
	16, // 20: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.CAS.conditional_state:type_name -> ntt.workplace.v1alpha2.DeviceGroup
	14, // 21: ntt.workplace.v1alpha2.UpdateDeviceGroupRequest.CAS.field_mask:type_name -> ntt.workplace.v1alpha2.DeviceGroup_FieldMask
	0,  // 22: ntt.workplace.v1alpha2.DeviceGroupService.GetDeviceGroup:input_type -> ntt.workplace.v1alpha2.GetDeviceGroupRequest
	1,  // 23: ntt.workplace.v1alpha2.DeviceGroupService.BatchGetDeviceGroups:input_type -> ntt.workplace.v1alpha2.BatchGetDeviceGroupsRequest
	3,  // 24: ntt.workplace.v1alpha2.DeviceGroupService.ListDeviceGroups:input_type -> ntt.workplace.v1alpha2.ListDeviceGroupsRequest
	5,  // 25: ntt.workplace.v1alpha2.DeviceGroupService.WatchDeviceGroup:input_type -> ntt.workplace.v1alpha2.WatchDeviceGroupRequest
	7,  // 26: ntt.workplace.v1alpha2.DeviceGroupService.WatchDeviceGroups:input_type -> ntt.workplace.v1alpha2.WatchDeviceGroupsRequest
	9,  // 27: ntt.workplace.v1alpha2.DeviceGroupService.CreateDeviceGroup:input_type -> ntt.workplace.v1alpha2.CreateDeviceGroupRequest
	10, // 28: ntt.workplace.v1alpha2.DeviceGroupService.UpdateDeviceGroup:input_type -> ntt.workplace.v1alpha2.UpdateDeviceGroupRequest
	11, // 29: ntt.workplace.v1alpha2.DeviceGroupService.DeleteDeviceGroup:input_type -> ntt.workplace.v1alpha2.DeleteDeviceGroupRequest
	16, // 30: ntt.workplace.v1alpha2.DeviceGroupService.GetDeviceGroup:output_type -> ntt.workplace.v1alpha2.DeviceGroup
	2,  // 31: ntt.workplace.v1alpha2.DeviceGroupService.BatchGetDeviceGroups:output_type -> ntt.workplace.v1alpha2.BatchGetDeviceGroupsResponse
	4,  // 32: ntt.workplace.v1alpha2.DeviceGroupService.ListDeviceGroups:output_type -> ntt.workplace.v1alpha2.ListDeviceGroupsResponse
	6,  // 33: ntt.workplace.v1alpha2.DeviceGroupService.WatchDeviceGroup:output_type -> ntt.workplace.v1alpha2.WatchDeviceGroupResponse
	8,  // 34: ntt.workplace.v1alpha2.DeviceGroupService.WatchDeviceGroups:output_type -> ntt.workplace.v1alpha2.WatchDeviceGroupsResponse
	16, // 35: ntt.workplace.v1alpha2.DeviceGroupService.CreateDeviceGroup:output_type -> ntt.workplace.v1alpha2.DeviceGroup
	16, // 36: ntt.workplace.v1alpha2.DeviceGroupService.UpdateDeviceGroup:output_type -> ntt.workplace.v1alpha2.DeviceGroup
	19, // 37: ntt.workplace.v1alpha2.DeviceGroupService.DeleteDeviceGroup:output_type -> google.protobuf.Empty
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha2_device_group_service_proto_init() }
func workplace_proto_v1alpha2_device_group_service_proto_init() {
	if workplace_proto_v1alpha2_device_group_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceGroupsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_group_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceGroupRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha2_device_group_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           workplace_proto_v1alpha2_device_group_service_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha2_device_group_service_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha2_device_group_service_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha2_device_group_service_proto = out.File
	workplace_proto_v1alpha2_device_group_service_proto_rawDesc = nil
	workplace_proto_v1alpha2_device_group_service_proto_goTypes = nil
	workplace_proto_v1alpha2_device_group_service_proto_depIdxs = nil
}
