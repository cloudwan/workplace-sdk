// Code generated by protoc-gen-goten-client
// API: DeviceGroupService
// DO NOT EDIT!!!

package device_group_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device_group "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device_group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &device_group.DeviceGroup{}
)

var (
	descriptorsInitialized         bool
	deviceGroupServiceDescriptor   *DeviceGroupServiceDescriptor
	getDeviceGroupDescriptor       *GetDeviceGroupDescriptor
	batchGetDeviceGroupsDescriptor *BatchGetDeviceGroupsDescriptor
	listDeviceGroupsDescriptor     *ListDeviceGroupsDescriptor
	watchDeviceGroupDescriptor     *WatchDeviceGroupDescriptor
	watchDeviceGroupsDescriptor    *WatchDeviceGroupsDescriptor
	createDeviceGroupDescriptor    *CreateDeviceGroupDescriptor
	updateDeviceGroupDescriptor    *UpdateDeviceGroupDescriptor
	deleteDeviceGroupDescriptor    *DeleteDeviceGroupDescriptor
)

type GetDeviceGroupDescriptor struct{}

type GetDeviceGroupDescriptorClientMsgHandle struct{}

type GetDeviceGroupDescriptorServerMsgHandle struct{}

func (d *GetDeviceGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceGroupRequest{}
}

func (d *GetDeviceGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_group.DeviceGroup{}
}

func (d *GetDeviceGroupDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceGroupDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeviceGroupDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceGroupDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceGroupDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceGroupDescriptor) GetMethodName() string {
	return "GetDeviceGroup"
}

func (d *GetDeviceGroupDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/GetDeviceGroup"
}

func (d *GetDeviceGroupDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetDeviceGroupDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *GetDeviceGroupDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetDeviceGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetDeviceGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *GetDeviceGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *GetDeviceGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceGroupDescriptorClientMsgHandle{}
}

func (d *GetDeviceGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceGroupDescriptorServerMsgHandle{}
}

func (h *GetDeviceGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceGroupRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *GetDeviceGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceGroupRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceGroupRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_group.DeviceGroup) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *GetDeviceGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_group.DeviceGroup) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_group.DeviceGroup) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetDeviceGroupDescriptor() *GetDeviceGroupDescriptor {
	return getDeviceGroupDescriptor
}

type BatchGetDeviceGroupsDescriptor struct{}

type BatchGetDeviceGroupsDescriptorClientMsgHandle struct{}

type BatchGetDeviceGroupsDescriptorServerMsgHandle struct{}

func (d *BatchGetDeviceGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeviceGroupsRequest{}
}

func (d *BatchGetDeviceGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeviceGroupsResponse{}
}

func (d *BatchGetDeviceGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeviceGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeviceGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeviceGroupsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeviceGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeviceGroupsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeviceGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeviceGroupsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeviceGroupsDescriptor) GetMethodName() string {
	return "BatchGetDeviceGroups"
}

func (d *BatchGetDeviceGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/BatchGetDeviceGroups"
}

func (d *BatchGetDeviceGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetDeviceGroupsDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *BatchGetDeviceGroupsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetDeviceGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetDeviceGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *BatchGetDeviceGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *BatchGetDeviceGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceGroupsDescriptorClientMsgHandle{}
}

func (d *BatchGetDeviceGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceGroupsDescriptorServerMsgHandle{}
}

func (h *BatchGetDeviceGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceGroupsRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceGroupsRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(device_group.DeviceGroupNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (device_group.DeviceGroupNameList)(nil)
}

func (h *BatchGetDeviceGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceGroupsRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceGroupsResponse) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceGroupsResponse) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceGroups(); len(resources) > 0 {
			list := make(device_group.DeviceGroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_group.DeviceGroupNameList)(nil)
}

func (h *BatchGetDeviceGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceGroupsResponse) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetDeviceGroupsDescriptor() *BatchGetDeviceGroupsDescriptor {
	return batchGetDeviceGroupsDescriptor
}

type ListDeviceGroupsDescriptor struct{}

type ListDeviceGroupsDescriptorClientMsgHandle struct{}

type ListDeviceGroupsDescriptorServerMsgHandle struct{}

func (d *ListDeviceGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeviceGroupsRequest{}
}

func (d *ListDeviceGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeviceGroupsResponse{}
}

func (d *ListDeviceGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeviceGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeviceGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeviceGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeviceGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeviceGroupsDescriptor) HasResource() bool {
	return true
}

func (d *ListDeviceGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeviceGroupsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeviceGroupsDescriptor) GetMethodName() string {
	return "ListDeviceGroups"
}

func (d *ListDeviceGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/ListDeviceGroups"
}

func (d *ListDeviceGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListDeviceGroupsDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *ListDeviceGroupsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListDeviceGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListDeviceGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *ListDeviceGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *ListDeviceGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceGroupsDescriptorClientMsgHandle{}
}

func (d *ListDeviceGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceGroupsDescriptorServerMsgHandle{}
}

func (h *ListDeviceGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceGroupsRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceGroupsRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeviceGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceGroupsRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_group.ParentName)(nil)
}

func (h *ListDeviceGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceGroupsResponse) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceGroupsResponse) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceGroups(); len(resources) > 0 {
			list := make(device_group.DeviceGroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_group.DeviceGroupNameList)(nil)
}

func (h *ListDeviceGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceGroupsResponse) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListDeviceGroupsDescriptor() *ListDeviceGroupsDescriptor {
	return listDeviceGroupsDescriptor
}

type WatchDeviceGroupDescriptor struct{}

type WatchDeviceGroupDescriptorClientMsgHandle struct{}

type WatchDeviceGroupDescriptorServerMsgHandle struct{}

func (d *WatchDeviceGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceGroupRequest{}
}

func (d *WatchDeviceGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceGroupResponse{}
}

func (d *WatchDeviceGroupDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceGroupDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceGroupDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeviceGroupDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeviceGroupDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceGroupDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceGroupDescriptor) GetMethodName() string {
	return "WatchDeviceGroup"
}

func (d *WatchDeviceGroupDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/WatchDeviceGroup"
}

func (d *WatchDeviceGroupDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchDeviceGroupDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *WatchDeviceGroupDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchDeviceGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeviceGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *WatchDeviceGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *WatchDeviceGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceGroupDescriptorClientMsgHandle{}
}

func (d *WatchDeviceGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceGroupDescriptorServerMsgHandle{}
}

func (h *WatchDeviceGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceGroupRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *WatchDeviceGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceGroupRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceGroupRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceGroupResponse) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_group.DeviceGroupChange_Added_:
				return tResChange.Added.GetDeviceGroup().GetName()
			case *device_group.DeviceGroupChange_Modified_:
				return tResChange.Modified.GetName()
			case *device_group.DeviceGroupChange_Removed_:
				return tResChange.Removed.GetName()
			case *device_group.DeviceGroupChange_Current_:
				return tResChange.Current.GetDeviceGroup().GetName()
			}
		}
	}
	return (*device_group.Name)(nil)
}

func (h *WatchDeviceGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceGroupResponse) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceGroupResponse) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDeviceGroupDescriptor() *WatchDeviceGroupDescriptor {
	return watchDeviceGroupDescriptor
}

type WatchDeviceGroupsDescriptor struct{}

type WatchDeviceGroupsDescriptorClientMsgHandle struct{}

type WatchDeviceGroupsDescriptorServerMsgHandle struct{}

func (d *WatchDeviceGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceGroupsRequest{}
}

func (d *WatchDeviceGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceGroupsResponse{}
}

func (d *WatchDeviceGroupsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceGroupsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeviceGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeviceGroupsDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceGroupsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceGroupsDescriptor) GetMethodName() string {
	return "WatchDeviceGroups"
}

func (d *WatchDeviceGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/WatchDeviceGroups"
}

func (d *WatchDeviceGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchDeviceGroupsDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *WatchDeviceGroupsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchDeviceGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeviceGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *WatchDeviceGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *WatchDeviceGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceGroupsDescriptorClientMsgHandle{}
}

func (d *WatchDeviceGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceGroupsDescriptorServerMsgHandle{}
}

func (h *WatchDeviceGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceGroupsRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceGroupsRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceGroupsRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*device_group.ParentName)(nil)
}

func (h *WatchDeviceGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceGroupsResponse) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceGroupsResponse) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceGroupChanges(); len(resChanges) > 0 {
			list := make(device_group.DeviceGroupNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_group.DeviceGroupChange_Added_:
					list = append(list, tResChange.Added.GetDeviceGroup().GetName())
				case *device_group.DeviceGroupChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *device_group.DeviceGroupChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *device_group.DeviceGroupChange_Current_:
					list = append(list, tResChange.Current.GetDeviceGroup().GetName())
				}
			}
			return list
		}
	}
	return (device_group.DeviceGroupNameList)(nil)
}

func (h *WatchDeviceGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceGroupsResponse) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDeviceGroupsDescriptor() *WatchDeviceGroupsDescriptor {
	return watchDeviceGroupsDescriptor
}

type CreateDeviceGroupDescriptor struct{}

type CreateDeviceGroupDescriptorClientMsgHandle struct{}

type CreateDeviceGroupDescriptorServerMsgHandle struct{}

func (d *CreateDeviceGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeviceGroupRequest{}
}

func (d *CreateDeviceGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_group.DeviceGroup{}
}

func (d *CreateDeviceGroupDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeviceGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeviceGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeviceGroupDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDeviceGroupDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDeviceGroupDescriptor) HasResource() bool {
	return true
}

func (d *CreateDeviceGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeviceGroupDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeviceGroupDescriptor) GetMethodName() string {
	return "CreateDeviceGroup"
}

func (d *CreateDeviceGroupDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/CreateDeviceGroup"
}

func (d *CreateDeviceGroupDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateDeviceGroupDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *CreateDeviceGroupDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateDeviceGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateDeviceGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *CreateDeviceGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *CreateDeviceGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceGroupDescriptorClientMsgHandle{}
}

func (d *CreateDeviceGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceGroupDescriptorServerMsgHandle{}
}

func (h *CreateDeviceGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDeviceGroupRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *CreateDeviceGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDeviceGroupRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDeviceGroupRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*device_group.ParentName)(nil)
}

func (h *CreateDeviceGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_group.DeviceGroup) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *CreateDeviceGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_group.DeviceGroup) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_group.DeviceGroup) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateDeviceGroupDescriptor() *CreateDeviceGroupDescriptor {
	return createDeviceGroupDescriptor
}

type UpdateDeviceGroupDescriptor struct{}

type UpdateDeviceGroupDescriptorClientMsgHandle struct{}

type UpdateDeviceGroupDescriptorServerMsgHandle struct{}

func (d *UpdateDeviceGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeviceGroupRequest{}
}

func (d *UpdateDeviceGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_group.DeviceGroup{}
}

func (d *UpdateDeviceGroupDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeviceGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeviceGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeviceGroupDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDeviceGroupDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDeviceGroupDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDeviceGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeviceGroupDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeviceGroupDescriptor) GetMethodName() string {
	return "UpdateDeviceGroup"
}

func (d *UpdateDeviceGroupDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/UpdateDeviceGroup"
}

func (d *UpdateDeviceGroupDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateDeviceGroupDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *UpdateDeviceGroupDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateDeviceGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateDeviceGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *UpdateDeviceGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *UpdateDeviceGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceGroupDescriptorClientMsgHandle{}
}

func (d *UpdateDeviceGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceGroupDescriptorServerMsgHandle{}
}

func (h *UpdateDeviceGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDeviceGroupRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *UpdateDeviceGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDeviceGroupRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDeviceGroupRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_group.DeviceGroup) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *UpdateDeviceGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_group.DeviceGroup) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_group.DeviceGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_group.DeviceGroup) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateDeviceGroupDescriptor() *UpdateDeviceGroupDescriptor {
	return updateDeviceGroupDescriptor
}

type DeleteDeviceGroupDescriptor struct{}

type DeleteDeviceGroupDescriptorClientMsgHandle struct{}

type DeleteDeviceGroupDescriptorServerMsgHandle struct{}

func (d *DeleteDeviceGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeviceGroupRequest{}
}

func (d *DeleteDeviceGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteDeviceGroupDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeviceGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeviceGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeviceGroupDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDeviceGroupDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDeviceGroupDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDeviceGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeviceGroupDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeviceGroupDescriptor) GetMethodName() string {
	return "DeleteDeviceGroup"
}

func (d *DeleteDeviceGroupDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService/DeleteDeviceGroup"
}

func (d *DeleteDeviceGroupDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteDeviceGroupDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *DeleteDeviceGroupDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteDeviceGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteDeviceGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceGroupServiceDescriptor
}

func (d *DeleteDeviceGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_group.GetDescriptor()
}

func (d *DeleteDeviceGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceGroupDescriptorClientMsgHandle{}
}

func (d *DeleteDeviceGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceGroupDescriptorServerMsgHandle{}
}

func (h *DeleteDeviceGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDeviceGroupRequest) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_group.Name)(nil)
}

func (h *DeleteDeviceGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDeviceGroupRequest) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDeviceGroupRequest) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *device_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*device_group.Name
	})
	if ok {
		return device_group.DeviceGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *device_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteDeviceGroupDescriptor() *DeleteDeviceGroupDescriptor {
	return deleteDeviceGroupDescriptor
}

type DeviceGroupServiceDescriptor struct{}

func (d *DeviceGroupServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceGroupDescriptor,
		batchGetDeviceGroupsDescriptor,
		listDeviceGroupsDescriptor,
		watchDeviceGroupDescriptor,
		watchDeviceGroupsDescriptor,
		createDeviceGroupDescriptor,
		updateDeviceGroupDescriptor,
		deleteDeviceGroupDescriptor,
	}
}

func (d *DeviceGroupServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.DeviceGroupService"
}

func (d *DeviceGroupServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeviceGroupServiceDescriptor) GetApiName() string {
	return "DeviceGroupService"
}

func (d *DeviceGroupServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeviceGroupServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetDeviceGroupServiceDescriptor() *DeviceGroupServiceDescriptor {
	return deviceGroupServiceDescriptor
}

func initDescriptors() {
	deviceGroupServiceDescriptor = &DeviceGroupServiceDescriptor{}
	getDeviceGroupDescriptor = &GetDeviceGroupDescriptor{}
	batchGetDeviceGroupsDescriptor = &BatchGetDeviceGroupsDescriptor{}
	listDeviceGroupsDescriptor = &ListDeviceGroupsDescriptor{}
	watchDeviceGroupDescriptor = &WatchDeviceGroupDescriptor{}
	watchDeviceGroupsDescriptor = &WatchDeviceGroupsDescriptor{}
	createDeviceGroupDescriptor = &CreateDeviceGroupDescriptor{}
	updateDeviceGroupDescriptor = &UpdateDeviceGroupDescriptor{}
	deleteDeviceGroupDescriptor = &DeleteDeviceGroupDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceGroupServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeviceGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeviceGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeviceGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeviceGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeviceGroupDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
