// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/site_service.proto
// DO NOT EDIT!!!

package site_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &site.Site{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetSiteRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetSiteRequest_FieldPathSelector
	Get(source *GetSiteRequest) []interface{}
	GetSingle(source *GetSiteRequest) (interface{}, bool)
	ClearValue(item *GetSiteRequest)

	// Those methods build corresponding GetSiteRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetSiteRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetSiteRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetSiteRequest_FieldPathArrayItemValue
}

type GetSiteRequest_FieldPathSelector int32

const (
	GetSiteRequest_FieldPathSelectorName      GetSiteRequest_FieldPathSelector = 0
	GetSiteRequest_FieldPathSelectorFieldMask GetSiteRequest_FieldPathSelector = 1
	GetSiteRequest_FieldPathSelectorView      GetSiteRequest_FieldPathSelector = 2
)

func (s GetSiteRequest_FieldPathSelector) String() string {
	switch s {
	case GetSiteRequest_FieldPathSelectorName:
		return "name"
	case GetSiteRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetSiteRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", s))
	}
}

func BuildGetSiteRequest_FieldPath(fp gotenobject.RawFieldPath) (GetSiteRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetSiteRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetSiteRequest", fp)
}

func ParseGetSiteRequest_FieldPath(rawField string) (GetSiteRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetSiteRequest_FieldPath(fp)
}

func MustParseGetSiteRequest_FieldPath(rawField string) GetSiteRequest_FieldPath {
	fp, err := ParseGetSiteRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetSiteRequest_FieldTerminalPath struct {
	selector GetSiteRequest_FieldPathSelector
}

var _ GetSiteRequest_FieldPath = (*GetSiteRequest_FieldTerminalPath)(nil)

func (fp *GetSiteRequest_FieldTerminalPath) Selector() GetSiteRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetSiteRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetSiteRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetSiteRequest
func (fp *GetSiteRequest_FieldTerminalPath) Get(source *GetSiteRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetSiteRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetSiteRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetSiteRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetSiteRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetSiteRequest))
}

// GetSingle returns value pointed by specific field of from source GetSiteRequest
func (fp *GetSiteRequest_FieldTerminalPath) GetSingle(source *GetSiteRequest) (interface{}, bool) {
	switch fp.selector {
	case GetSiteRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetSiteRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetSiteRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
	}
}

func (fp *GetSiteRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetSiteRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetSiteRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetSiteRequest_FieldPathSelectorName:
		return (*site.Reference)(nil)
	case GetSiteRequest_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	case GetSiteRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
	}
}

func (fp *GetSiteRequest_FieldTerminalPath) ClearValue(item *GetSiteRequest) {
	if item != nil {
		switch fp.selector {
		case GetSiteRequest_FieldPathSelectorName:
			item.Name = nil
		case GetSiteRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetSiteRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
		}
	}
}

func (fp *GetSiteRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetSiteRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetSiteRequest_FieldPathSelectorName ||
		fp.selector == GetSiteRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetSiteRequest_FieldPathSelectorView
}

func (fp *GetSiteRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetSiteRequest_FieldTerminalPath) WithIValue(value interface{}) GetSiteRequest_FieldPathValue {
	switch fp.selector {
	case GetSiteRequest_FieldPathSelectorName:
		return &GetSiteRequest_FieldTerminalPathValue{GetSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	case GetSiteRequest_FieldPathSelectorFieldMask:
		return &GetSiteRequest_FieldTerminalPathValue{GetSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case GetSiteRequest_FieldPathSelectorView:
		return &GetSiteRequest_FieldTerminalPathValue{GetSiteRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
	}
}

func (fp *GetSiteRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetSiteRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetSiteRequest_FieldPathArrayOfValues {
	fpaov := &GetSiteRequest_FieldTerminalPathArrayOfValues{GetSiteRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetSiteRequest_FieldPathSelectorName:
		return &GetSiteRequest_FieldTerminalPathArrayOfValues{GetSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Reference)}
	case GetSiteRequest_FieldPathSelectorFieldMask:
		return &GetSiteRequest_FieldTerminalPathArrayOfValues{GetSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case GetSiteRequest_FieldPathSelectorView:
		return &GetSiteRequest_FieldTerminalPathArrayOfValues{GetSiteRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetSiteRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetSiteRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetSiteRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fp.selector))
	}
}

func (fp *GetSiteRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetSiteRequest_FieldPathValue allows storing values for GetSiteRequest fields according to their type
type GetSiteRequest_FieldPathValue interface {
	GetSiteRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetSiteRequest)
	CompareWith(*GetSiteRequest) (cmp int, comparable bool)
}

func ParseGetSiteRequest_FieldPathValue(pathStr, valueStr string) (GetSiteRequest_FieldPathValue, error) {
	fp, err := ParseGetSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSiteRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetSiteRequest_FieldPathValue), nil
}

func MustParseGetSiteRequest_FieldPathValue(pathStr, valueStr string) GetSiteRequest_FieldPathValue {
	fpv, err := ParseGetSiteRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetSiteRequest_FieldTerminalPathValue struct {
	GetSiteRequest_FieldTerminalPath
	value interface{}
}

var _ GetSiteRequest_FieldPathValue = (*GetSiteRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetSiteRequest' as interface{}
func (fpv *GetSiteRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetSiteRequest_FieldTerminalPathValue) AsNameValue() (*site.Reference, bool) {
	res, ok := fpv.value.(*site.Reference)
	return res, ok
}
func (fpv *GetSiteRequest_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *GetSiteRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetSiteRequest
func (fpv *GetSiteRequest_FieldTerminalPathValue) SetTo(target **GetSiteRequest) {
	if *target == nil {
		*target = new(GetSiteRequest)
	}
	switch fpv.selector {
	case GetSiteRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*site.Reference)
	case GetSiteRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	case GetSiteRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fpv.selector))
	}
}

func (fpv *GetSiteRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetSiteRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetSiteRequest_FieldTerminalPathValue' with the value under path in 'GetSiteRequest'.
func (fpv *GetSiteRequest_FieldTerminalPathValue) CompareWith(source *GetSiteRequest) (int, bool) {
	switch fpv.selector {
	case GetSiteRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*site.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetSiteRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetSiteRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSiteRequest: %d", fpv.selector))
	}
}

func (fpv *GetSiteRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetSiteRequest))
}

// GetSiteRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetSiteRequest according to their type
// Present only for array (repeated) types.
type GetSiteRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetSiteRequest_FieldPath
	ContainsValue(*GetSiteRequest) bool
}

// ParseGetSiteRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetSiteRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSiteRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetSiteRequest_FieldPathArrayItemValue), nil
}

func MustParseGetSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetSiteRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetSiteRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetSiteRequest_FieldTerminalPathArrayItemValue struct {
	GetSiteRequest_FieldTerminalPath
	value interface{}
}

var _ GetSiteRequest_FieldPathArrayItemValue = (*GetSiteRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetSiteRequest as interface{}
func (fpaiv *GetSiteRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetSiteRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetSiteRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetSiteRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetSiteRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetSiteRequest'
func (fpaiv *GetSiteRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetSiteRequest) bool {
	slice := fpaiv.GetSiteRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetSiteRequest_FieldPathArrayOfValues allows storing slice of values for GetSiteRequest fields according to their type
type GetSiteRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetSiteRequest_FieldPath
}

func ParseGetSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetSiteRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSiteRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetSiteRequest_FieldPathArrayOfValues), nil
}

func MustParseGetSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetSiteRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetSiteRequest_FieldTerminalPathArrayOfValues struct {
	GetSiteRequest_FieldTerminalPath
	values interface{}
}

var _ GetSiteRequest_FieldPathArrayOfValues = (*GetSiteRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetSiteRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetSiteRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*site.Reference) {
			values = append(values, v)
		}
	case GetSiteRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case GetSiteRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetSiteRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*site.Reference, bool) {
	res, ok := fpaov.values.([]*site.Reference)
	return res, ok
}
func (fpaov *GetSiteRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *GetSiteRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetSitesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetSitesRequest_FieldPathSelector
	Get(source *BatchGetSitesRequest) []interface{}
	GetSingle(source *BatchGetSitesRequest) (interface{}, bool)
	ClearValue(item *BatchGetSitesRequest)

	// Those methods build corresponding BatchGetSitesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetSitesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetSitesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetSitesRequest_FieldPathArrayItemValue
}

type BatchGetSitesRequest_FieldPathSelector int32

const (
	BatchGetSitesRequest_FieldPathSelectorNames     BatchGetSitesRequest_FieldPathSelector = 0
	BatchGetSitesRequest_FieldPathSelectorFieldMask BatchGetSitesRequest_FieldPathSelector = 1
	BatchGetSitesRequest_FieldPathSelectorView      BatchGetSitesRequest_FieldPathSelector = 2
)

func (s BatchGetSitesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetSitesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", s))
	}
}

func BuildBatchGetSitesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetSitesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetSitesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetSitesRequest", fp)
}

func ParseBatchGetSitesRequest_FieldPath(rawField string) (BatchGetSitesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetSitesRequest_FieldPath(fp)
}

func MustParseBatchGetSitesRequest_FieldPath(rawField string) BatchGetSitesRequest_FieldPath {
	fp, err := ParseBatchGetSitesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetSitesRequest_FieldTerminalPath struct {
	selector BatchGetSitesRequest_FieldPathSelector
}

var _ BatchGetSitesRequest_FieldPath = (*BatchGetSitesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetSitesRequest_FieldTerminalPath) Selector() BatchGetSitesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetSitesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetSitesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetSitesRequest
func (fp *BatchGetSitesRequest_FieldTerminalPath) Get(source *BatchGetSitesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetSitesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetSitesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetSitesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetSitesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetSitesRequest
func (fp *BatchGetSitesRequest_FieldTerminalPath) GetSingle(source *BatchGetSitesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetSitesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetSitesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetSitesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return ([]*site.Reference)(nil)
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	case BatchGetSitesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) ClearValue(item *BatchGetSitesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetSitesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetSitesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetSitesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetSitesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetSitesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetSitesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetSitesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetSitesRequest_FieldPathSelectorView
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetSitesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return &BatchGetSitesRequest_FieldTerminalPathValue{BatchGetSitesRequest_FieldTerminalPath: *fp, value: value.([]*site.Reference)}
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		return &BatchGetSitesRequest_FieldTerminalPathValue{BatchGetSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case BatchGetSitesRequest_FieldPathSelectorView:
		return &BatchGetSitesRequest_FieldTerminalPathValue{BatchGetSitesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetSitesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetSitesRequest_FieldTerminalPathArrayOfValues{BatchGetSitesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return &BatchGetSitesRequest_FieldTerminalPathArrayOfValues{BatchGetSitesRequest_FieldTerminalPath: *fp, values: values.([][]*site.Reference)}
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		return &BatchGetSitesRequest_FieldTerminalPathArrayOfValues{BatchGetSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case BatchGetSitesRequest_FieldPathSelectorView:
		return &BatchGetSitesRequest_FieldTerminalPathArrayOfValues{BatchGetSitesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetSitesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return &BatchGetSitesRequest_FieldTerminalPathArrayItemValue{BatchGetSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSitesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetSitesRequest_FieldPathValue allows storing values for BatchGetSitesRequest fields according to their type
type BatchGetSitesRequest_FieldPathValue interface {
	BatchGetSitesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetSitesRequest)
	CompareWith(*BatchGetSitesRequest) (cmp int, comparable bool)
}

func ParseBatchGetSitesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetSitesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetSitesRequest_FieldPathValue), nil
}

func MustParseBatchGetSitesRequest_FieldPathValue(pathStr, valueStr string) BatchGetSitesRequest_FieldPathValue {
	fpv, err := ParseBatchGetSitesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetSitesRequest_FieldTerminalPathValue struct {
	BatchGetSitesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetSitesRequest_FieldPathValue = (*BatchGetSitesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetSitesRequest' as interface{}
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) AsNamesValue() ([]*site.Reference, bool) {
	res, ok := fpv.value.([]*site.Reference)
	return res, ok
}
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetSitesRequest
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) SetTo(target **BatchGetSitesRequest) {
	if *target == nil {
		*target = new(BatchGetSitesRequest)
	}
	switch fpv.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*site.Reference)
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	case BatchGetSitesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSitesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetSitesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetSitesRequest'.
func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetSitesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetSitesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetSitesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetSitesRequest))
}

// BatchGetSitesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetSitesRequest according to their type
// Present only for array (repeated) types.
type BatchGetSitesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetSitesRequest_FieldPath
	ContainsValue(*BatchGetSitesRequest) bool
}

// ParseBatchGetSitesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetSitesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetSitesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetSitesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetSitesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetSitesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetSitesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetSitesRequest_FieldPathArrayItemValue = (*BatchGetSitesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetSitesRequest as interface{}
func (fpaiv *BatchGetSitesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetSitesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*site.Reference, bool) {
	res, ok := fpaiv.value.(*site.Reference)
	return res, ok
}

func (fpaiv *BatchGetSitesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetSitesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetSitesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetSitesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSitesRequest'
func (fpaiv *BatchGetSitesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetSitesRequest) bool {
	slice := fpaiv.BatchGetSitesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetSitesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetSitesRequest fields according to their type
type BatchGetSitesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetSitesRequest_FieldPath
}

func ParseBatchGetSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetSitesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetSitesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetSitesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetSitesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetSitesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetSitesRequest_FieldPathArrayOfValues = (*BatchGetSitesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetSitesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetSitesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*site.Reference) {
			values = append(values, v)
		}
	case BatchGetSitesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case BatchGetSitesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetSitesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*site.Reference, bool) {
	res, ok := fpaov.values.([][]*site.Reference)
	return res, ok
}
func (fpaov *BatchGetSitesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *BatchGetSitesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetSitesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetSitesResponse_FieldPathSelector
	Get(source *BatchGetSitesResponse) []interface{}
	GetSingle(source *BatchGetSitesResponse) (interface{}, bool)
	ClearValue(item *BatchGetSitesResponse)

	// Those methods build corresponding BatchGetSitesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetSitesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetSitesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetSitesResponse_FieldPathArrayItemValue
}

type BatchGetSitesResponse_FieldPathSelector int32

const (
	BatchGetSitesResponse_FieldPathSelectorSites   BatchGetSitesResponse_FieldPathSelector = 0
	BatchGetSitesResponse_FieldPathSelectorMissing BatchGetSitesResponse_FieldPathSelector = 1
)

func (s BatchGetSitesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return "sites"
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", s))
	}
}

func BuildBatchGetSitesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetSitesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetSitesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "sites":
			return &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorSites}, nil
		case "missing":
			return &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "sites":
			if subpath, err := site.BuildSite_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetSitesResponse_FieldSubPath{selector: BatchGetSitesResponse_FieldPathSelectorSites, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetSitesResponse", fp)
}

func ParseBatchGetSitesResponse_FieldPath(rawField string) (BatchGetSitesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetSitesResponse_FieldPath(fp)
}

func MustParseBatchGetSitesResponse_FieldPath(rawField string) BatchGetSitesResponse_FieldPath {
	fp, err := ParseBatchGetSitesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetSitesResponse_FieldTerminalPath struct {
	selector BatchGetSitesResponse_FieldPathSelector
}

var _ BatchGetSitesResponse_FieldPath = (*BatchGetSitesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetSitesResponse_FieldTerminalPath) Selector() BatchGetSitesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetSitesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetSitesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetSitesResponse
func (fp *BatchGetSitesResponse_FieldTerminalPath) Get(source *BatchGetSitesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetSitesResponse_FieldPathSelectorSites:
			for _, value := range source.GetSites() {
				values = append(values, value)
			}
		case BatchGetSitesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetSitesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetSitesResponse
func (fp *BatchGetSitesResponse_FieldTerminalPath) GetSingle(source *BatchGetSitesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		res := source.GetSites()
		return res, res != nil
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetSitesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetSitesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return ([]*site.Site)(nil)
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return ([]*site.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) ClearValue(item *BatchGetSitesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetSitesResponse_FieldPathSelectorSites:
			item.Sites = nil
		case BatchGetSitesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetSitesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetSitesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetSitesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return &BatchGetSitesResponse_FieldTerminalPathValue{BatchGetSitesResponse_FieldTerminalPath: *fp, value: value.([]*site.Site)}
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return &BatchGetSitesResponse_FieldTerminalPathValue{BatchGetSitesResponse_FieldTerminalPath: *fp, value: value.([]*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetSitesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetSitesResponse_FieldTerminalPathArrayOfValues{BatchGetSitesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return &BatchGetSitesResponse_FieldTerminalPathArrayOfValues{BatchGetSitesResponse_FieldTerminalPath: *fp, values: values.([][]*site.Site)}
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return &BatchGetSitesResponse_FieldTerminalPathArrayOfValues{BatchGetSitesResponse_FieldTerminalPath: *fp, values: values.([][]*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetSitesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return &BatchGetSitesResponse_FieldTerminalPathArrayItemValue{BatchGetSitesResponse_FieldTerminalPath: *fp, value: value.(*site.Site)}
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return &BatchGetSitesResponse_FieldTerminalPathArrayItemValue{BatchGetSitesResponse_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSitesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetSitesResponse_FieldSubPath struct {
	selector BatchGetSitesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetSitesResponse_FieldPath = (*BatchGetSitesResponse_FieldSubPath)(nil)

func (fps *BatchGetSitesResponse_FieldSubPath) Selector() BatchGetSitesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetSitesResponse_FieldSubPath) AsSitesSubPath() (site.Site_FieldPath, bool) {
	res, ok := fps.subPath.(site.Site_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetSitesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetSitesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetSitesResponse
func (fps *BatchGetSitesResponse_FieldSubPath) Get(source *BatchGetSitesResponse) (values []interface{}) {
	if asSiteFieldPath, ok := fps.AsSitesSubPath(); ok {
		for _, item := range source.GetSites() {
			values = append(values, asSiteFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetSitesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetSitesResponse))
}

// GetSingle returns value of selected field from source BatchGetSitesResponse
func (fps *BatchGetSitesResponse_FieldSubPath) GetSingle(source *BatchGetSitesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		if len(source.GetSites()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSites()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetSitesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetSitesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetSitesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetSitesResponse_FieldSubPath) ClearValue(item *BatchGetSitesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetSitesResponse_FieldPathSelectorSites:
			for _, subItem := range item.Sites {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetSitesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetSitesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetSitesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetSitesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetSitesResponse_FieldPathValue {
	return &BatchGetSitesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetSitesResponse_FieldPathArrayOfValues {
	return &BatchGetSitesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetSitesResponse_FieldPathArrayItemValue {
	return &BatchGetSitesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetSitesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetSitesResponse_FieldPathValue allows storing values for BatchGetSitesResponse fields according to their type
type BatchGetSitesResponse_FieldPathValue interface {
	BatchGetSitesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetSitesResponse)
	CompareWith(*BatchGetSitesResponse) (cmp int, comparable bool)
}

func ParseBatchGetSitesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetSitesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetSitesResponse_FieldPathValue), nil
}

func MustParseBatchGetSitesResponse_FieldPathValue(pathStr, valueStr string) BatchGetSitesResponse_FieldPathValue {
	fpv, err := ParseBatchGetSitesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetSitesResponse_FieldTerminalPathValue struct {
	BatchGetSitesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetSitesResponse_FieldPathValue = (*BatchGetSitesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetSitesResponse' as interface{}
func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) AsSitesValue() ([]*site.Site, bool) {
	res, ok := fpv.value.([]*site.Site)
	return res, ok
}
func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) AsMissingValue() ([]*site.Reference, bool) {
	res, ok := fpv.value.([]*site.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetSitesResponse
func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) SetTo(target **BatchGetSitesResponse) {
	if *target == nil {
		*target = new(BatchGetSitesResponse)
	}
	switch fpv.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		(*target).Sites = fpv.value.([]*site.Site)
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*site.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSitesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetSitesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetSitesResponse'.
func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetSitesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return 0, false
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetSitesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetSitesResponse))
}

type BatchGetSitesResponse_FieldSubPathValue struct {
	BatchGetSitesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetSitesResponse_FieldPathValue = (*BatchGetSitesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) AsSitesPathValue() (site.Site_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(site.Site_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) SetTo(target **BatchGetSitesResponse) {
	if *target == nil {
		*target = new(BatchGetSitesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSitesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) CompareWith(source *BatchGetSitesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetSitesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetSitesResponse))
}

// BatchGetSitesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetSitesResponse according to their type
// Present only for array (repeated) types.
type BatchGetSitesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetSitesResponse_FieldPath
	ContainsValue(*BatchGetSitesResponse) bool
}

// ParseBatchGetSitesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetSitesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetSitesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetSitesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetSitesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetSitesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetSitesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetSitesResponse_FieldPathArrayItemValue = (*BatchGetSitesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetSitesResponse as interface{}
func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) AsSitesItemValue() (*site.Site, bool) {
	res, ok := fpaiv.value.(*site.Site)
	return res, ok
}
func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*site.Reference, bool) {
	res, ok := fpaiv.value.(*site.Reference)
	return res, ok
}

func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetSitesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetSitesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSitesResponse'
func (fpaiv *BatchGetSitesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetSitesResponse) bool {
	slice := fpaiv.BatchGetSitesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetSitesResponse_FieldSubPathArrayItemValue struct {
	BatchGetSitesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetSitesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetSitesResponse_FieldSubPathArrayItemValue) AsSitesPathItemValue() (site.Site_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSitesResponse'
func (fpaivs *BatchGetSitesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetSitesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSitesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetSitesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetSitesResponse fields according to their type
type BatchGetSitesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetSitesResponse_FieldPath
}

func ParseBatchGetSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetSitesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSitesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetSitesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetSitesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetSitesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetSitesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetSitesResponse_FieldPathArrayOfValues = (*BatchGetSitesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetSitesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetSitesResponse_FieldPathSelectorSites:
		for _, v := range fpaov.values.([][]*site.Site) {
			values = append(values, v)
		}
	case BatchGetSitesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*site.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetSitesResponse_FieldTerminalPathArrayOfValues) AsSitesArrayOfValues() ([][]*site.Site, bool) {
	res, ok := fpaov.values.([][]*site.Site)
	return res, ok
}
func (fpaov *BatchGetSitesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*site.Reference, bool) {
	res, ok := fpaov.values.([][]*site.Reference)
	return res, ok
}

type BatchGetSitesResponse_FieldSubPathArrayOfValues struct {
	BatchGetSitesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetSitesResponse_FieldPathArrayOfValues = (*BatchGetSitesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetSitesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetSitesResponse_FieldSubPathArrayOfValues) AsSitesPathArrayOfValues() (site.Site_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(site.Site_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListSitesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListSitesRequest_FieldPathSelector
	Get(source *ListSitesRequest) []interface{}
	GetSingle(source *ListSitesRequest) (interface{}, bool)
	ClearValue(item *ListSitesRequest)

	// Those methods build corresponding ListSitesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListSitesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListSitesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListSitesRequest_FieldPathArrayItemValue
}

type ListSitesRequest_FieldPathSelector int32

const (
	ListSitesRequest_FieldPathSelectorParent    ListSitesRequest_FieldPathSelector = 0
	ListSitesRequest_FieldPathSelectorPageSize  ListSitesRequest_FieldPathSelector = 1
	ListSitesRequest_FieldPathSelectorPageToken ListSitesRequest_FieldPathSelector = 2
	ListSitesRequest_FieldPathSelectorOrderBy   ListSitesRequest_FieldPathSelector = 3
	ListSitesRequest_FieldPathSelectorFilter    ListSitesRequest_FieldPathSelector = 4
	ListSitesRequest_FieldPathSelectorFieldMask ListSitesRequest_FieldPathSelector = 5
	ListSitesRequest_FieldPathSelectorView      ListSitesRequest_FieldPathSelector = 6
)

func (s ListSitesRequest_FieldPathSelector) String() string {
	switch s {
	case ListSitesRequest_FieldPathSelectorParent:
		return "parent"
	case ListSitesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListSitesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListSitesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListSitesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListSitesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListSitesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", s))
	}
}

func BuildListSitesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListSitesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListSitesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListSitesRequest", fp)
}

func ParseListSitesRequest_FieldPath(rawField string) (ListSitesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListSitesRequest_FieldPath(fp)
}

func MustParseListSitesRequest_FieldPath(rawField string) ListSitesRequest_FieldPath {
	fp, err := ParseListSitesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListSitesRequest_FieldTerminalPath struct {
	selector ListSitesRequest_FieldPathSelector
}

var _ ListSitesRequest_FieldPath = (*ListSitesRequest_FieldTerminalPath)(nil)

func (fp *ListSitesRequest_FieldTerminalPath) Selector() ListSitesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListSitesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListSitesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListSitesRequest
func (fp *ListSitesRequest_FieldTerminalPath) Get(source *ListSitesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListSitesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListSitesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListSitesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListSitesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListSitesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListSitesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListSitesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListSitesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListSitesRequest))
}

// GetSingle returns value pointed by specific field of from source ListSitesRequest
func (fp *ListSitesRequest_FieldTerminalPath) GetSingle(source *ListSitesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListSitesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListSitesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListSitesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListSitesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListSitesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListSitesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
	}
}

func (fp *ListSitesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListSitesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListSitesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		return (*site.ParentName)(nil)
	case ListSitesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListSitesRequest_FieldPathSelectorPageToken:
		return (*site.PagerCursor)(nil)
	case ListSitesRequest_FieldPathSelectorOrderBy:
		return (*site.OrderBy)(nil)
	case ListSitesRequest_FieldPathSelectorFilter:
		return (*site.Filter)(nil)
	case ListSitesRequest_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	case ListSitesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
	}
}

func (fp *ListSitesRequest_FieldTerminalPath) ClearValue(item *ListSitesRequest) {
	if item != nil {
		switch fp.selector {
		case ListSitesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListSitesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListSitesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListSitesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListSitesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListSitesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListSitesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListSitesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListSitesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListSitesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListSitesRequest_FieldPathSelectorParent ||
		fp.selector == ListSitesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListSitesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListSitesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListSitesRequest_FieldPathSelectorFilter ||
		fp.selector == ListSitesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListSitesRequest_FieldPathSelectorView
}

func (fp *ListSitesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListSitesRequest_FieldTerminalPath) WithIValue(value interface{}) ListSitesRequest_FieldPathValue {
	switch fp.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(*site.ParentName)}
	case ListSitesRequest_FieldPathSelectorPageSize:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListSitesRequest_FieldPathSelectorPageToken:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	case ListSitesRequest_FieldPathSelectorOrderBy:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(*site.OrderBy)}
	case ListSitesRequest_FieldPathSelectorFilter:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Filter)}
	case ListSitesRequest_FieldPathSelectorFieldMask:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case ListSitesRequest_FieldPathSelectorView:
		return &ListSitesRequest_FieldTerminalPathValue{ListSitesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
	}
}

func (fp *ListSitesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListSitesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListSitesRequest_FieldPathArrayOfValues {
	fpaov := &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.ParentName)}
	case ListSitesRequest_FieldPathSelectorPageSize:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListSitesRequest_FieldPathSelectorPageToken:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	case ListSitesRequest_FieldPathSelectorOrderBy:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.OrderBy)}
	case ListSitesRequest_FieldPathSelectorFilter:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.Filter)}
	case ListSitesRequest_FieldPathSelectorFieldMask:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case ListSitesRequest_FieldPathSelectorView:
		return &ListSitesRequest_FieldTerminalPathArrayOfValues{ListSitesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListSitesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListSitesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListSitesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fp.selector))
	}
}

func (fp *ListSitesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListSitesRequest_FieldPathValue allows storing values for ListSitesRequest fields according to their type
type ListSitesRequest_FieldPathValue interface {
	ListSitesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListSitesRequest)
	CompareWith(*ListSitesRequest) (cmp int, comparable bool)
}

func ParseListSitesRequest_FieldPathValue(pathStr, valueStr string) (ListSitesRequest_FieldPathValue, error) {
	fp, err := ParseListSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListSitesRequest_FieldPathValue), nil
}

func MustParseListSitesRequest_FieldPathValue(pathStr, valueStr string) ListSitesRequest_FieldPathValue {
	fpv, err := ParseListSitesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListSitesRequest_FieldTerminalPathValue struct {
	ListSitesRequest_FieldTerminalPath
	value interface{}
}

var _ ListSitesRequest_FieldPathValue = (*ListSitesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListSitesRequest' as interface{}
func (fpv *ListSitesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsParentValue() (*site.ParentName, bool) {
	res, ok := fpv.value.(*site.ParentName)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsOrderByValue() (*site.OrderBy, bool) {
	res, ok := fpv.value.(*site.OrderBy)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsFilterValue() (*site.Filter, bool) {
	res, ok := fpv.value.(*site.Filter)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *ListSitesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListSitesRequest
func (fpv *ListSitesRequest_FieldTerminalPathValue) SetTo(target **ListSitesRequest) {
	if *target == nil {
		*target = new(ListSitesRequest)
	}
	switch fpv.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*site.ParentName)
	case ListSitesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListSitesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*site.PagerCursor)
	case ListSitesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*site.OrderBy)
	case ListSitesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*site.Filter)
	case ListSitesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	case ListSitesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fpv.selector))
	}
}

func (fpv *ListSitesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSitesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListSitesRequest_FieldTerminalPathValue' with the value under path in 'ListSitesRequest'.
func (fpv *ListSitesRequest_FieldTerminalPathValue) CompareWith(source *ListSitesRequest) (int, bool) {
	switch fpv.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*site.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListSitesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListSitesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListSitesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListSitesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListSitesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListSitesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesRequest: %d", fpv.selector))
	}
}

func (fpv *ListSitesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListSitesRequest))
}

// ListSitesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListSitesRequest according to their type
// Present only for array (repeated) types.
type ListSitesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListSitesRequest_FieldPath
	ContainsValue(*ListSitesRequest) bool
}

// ParseListSitesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListSitesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListSitesRequest_FieldPathArrayItemValue), nil
}

func MustParseListSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListSitesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListSitesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListSitesRequest_FieldTerminalPathArrayItemValue struct {
	ListSitesRequest_FieldTerminalPath
	value interface{}
}

var _ ListSitesRequest_FieldPathArrayItemValue = (*ListSitesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListSitesRequest as interface{}
func (fpaiv *ListSitesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListSitesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListSitesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListSitesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListSitesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSitesRequest'
func (fpaiv *ListSitesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListSitesRequest) bool {
	slice := fpaiv.ListSitesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListSitesRequest_FieldPathArrayOfValues allows storing slice of values for ListSitesRequest fields according to their type
type ListSitesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListSitesRequest_FieldPath
}

func ParseListSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListSitesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListSitesRequest_FieldPathArrayOfValues), nil
}

func MustParseListSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListSitesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListSitesRequest_FieldTerminalPathArrayOfValues struct {
	ListSitesRequest_FieldTerminalPath
	values interface{}
}

var _ ListSitesRequest_FieldPathArrayOfValues = (*ListSitesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListSitesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*site.ParentName) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*site.OrderBy) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*site.Filter) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case ListSitesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*site.ParentName, bool) {
	res, ok := fpaov.values.([]*site.ParentName)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*site.OrderBy, bool) {
	res, ok := fpaov.values.([]*site.OrderBy)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*site.Filter, bool) {
	res, ok := fpaov.values.([]*site.Filter)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *ListSitesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListSitesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListSitesResponse_FieldPathSelector
	Get(source *ListSitesResponse) []interface{}
	GetSingle(source *ListSitesResponse) (interface{}, bool)
	ClearValue(item *ListSitesResponse)

	// Those methods build corresponding ListSitesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListSitesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListSitesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListSitesResponse_FieldPathArrayItemValue
}

type ListSitesResponse_FieldPathSelector int32

const (
	ListSitesResponse_FieldPathSelectorSites         ListSitesResponse_FieldPathSelector = 0
	ListSitesResponse_FieldPathSelectorPrevPageToken ListSitesResponse_FieldPathSelector = 1
	ListSitesResponse_FieldPathSelectorNextPageToken ListSitesResponse_FieldPathSelector = 2
)

func (s ListSitesResponse_FieldPathSelector) String() string {
	switch s {
	case ListSitesResponse_FieldPathSelectorSites:
		return "sites"
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", s))
	}
}

func BuildListSitesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListSitesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListSitesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "sites":
			return &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorSites}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "sites":
			if subpath, err := site.BuildSite_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListSitesResponse_FieldSubPath{selector: ListSitesResponse_FieldPathSelectorSites, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListSitesResponse", fp)
}

func ParseListSitesResponse_FieldPath(rawField string) (ListSitesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListSitesResponse_FieldPath(fp)
}

func MustParseListSitesResponse_FieldPath(rawField string) ListSitesResponse_FieldPath {
	fp, err := ParseListSitesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListSitesResponse_FieldTerminalPath struct {
	selector ListSitesResponse_FieldPathSelector
}

var _ ListSitesResponse_FieldPath = (*ListSitesResponse_FieldTerminalPath)(nil)

func (fp *ListSitesResponse_FieldTerminalPath) Selector() ListSitesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListSitesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListSitesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListSitesResponse
func (fp *ListSitesResponse_FieldTerminalPath) Get(source *ListSitesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListSitesResponse_FieldPathSelectorSites:
			for _, value := range source.GetSites() {
				values = append(values, value)
			}
		case ListSitesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListSitesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListSitesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListSitesResponse))
}

// GetSingle returns value pointed by specific field of from source ListSitesResponse
func (fp *ListSitesResponse_FieldTerminalPath) GetSingle(source *ListSitesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		res := source.GetSites()
		return res, res != nil
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
	}
}

func (fp *ListSitesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListSitesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListSitesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		return ([]*site.Site)(nil)
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		return (*site.PagerCursor)(nil)
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		return (*site.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
	}
}

func (fp *ListSitesResponse_FieldTerminalPath) ClearValue(item *ListSitesResponse) {
	if item != nil {
		switch fp.selector {
		case ListSitesResponse_FieldPathSelectorSites:
			item.Sites = nil
		case ListSitesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListSitesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListSitesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListSitesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListSitesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListSitesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListSitesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListSitesResponse_FieldTerminalPath) WithIValue(value interface{}) ListSitesResponse_FieldPathValue {
	switch fp.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		return &ListSitesResponse_FieldTerminalPathValue{ListSitesResponse_FieldTerminalPath: *fp, value: value.([]*site.Site)}
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		return &ListSitesResponse_FieldTerminalPathValue{ListSitesResponse_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		return &ListSitesResponse_FieldTerminalPathValue{ListSitesResponse_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
	}
}

func (fp *ListSitesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListSitesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListSitesResponse_FieldPathArrayOfValues {
	fpaov := &ListSitesResponse_FieldTerminalPathArrayOfValues{ListSitesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		return &ListSitesResponse_FieldTerminalPathArrayOfValues{ListSitesResponse_FieldTerminalPath: *fp, values: values.([][]*site.Site)}
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		return &ListSitesResponse_FieldTerminalPathArrayOfValues{ListSitesResponse_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		return &ListSitesResponse_FieldTerminalPathArrayOfValues{ListSitesResponse_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListSitesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListSitesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListSitesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		return &ListSitesResponse_FieldTerminalPathArrayItemValue{ListSitesResponse_FieldTerminalPath: *fp, value: value.(*site.Site)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fp.selector))
	}
}

func (fp *ListSitesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListSitesResponse_FieldSubPath struct {
	selector ListSitesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListSitesResponse_FieldPath = (*ListSitesResponse_FieldSubPath)(nil)

func (fps *ListSitesResponse_FieldSubPath) Selector() ListSitesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListSitesResponse_FieldSubPath) AsSitesSubPath() (site.Site_FieldPath, bool) {
	res, ok := fps.subPath.(site.Site_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListSitesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListSitesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListSitesResponse
func (fps *ListSitesResponse_FieldSubPath) Get(source *ListSitesResponse) (values []interface{}) {
	if asSiteFieldPath, ok := fps.AsSitesSubPath(); ok {
		for _, item := range source.GetSites() {
			values = append(values, asSiteFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListSitesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListSitesResponse))
}

// GetSingle returns value of selected field from source ListSitesResponse
func (fps *ListSitesResponse_FieldSubPath) GetSingle(source *ListSitesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		if len(source.GetSites()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSites()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fps.selector))
	}
}

func (fps *ListSitesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListSitesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListSitesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListSitesResponse_FieldSubPath) ClearValue(item *ListSitesResponse) {
	if item != nil {
		switch fps.selector {
		case ListSitesResponse_FieldPathSelectorSites:
			for _, subItem := range item.Sites {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListSitesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListSitesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListSitesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListSitesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListSitesResponse_FieldSubPath) WithIValue(value interface{}) ListSitesResponse_FieldPathValue {
	return &ListSitesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListSitesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListSitesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListSitesResponse_FieldPathArrayOfValues {
	return &ListSitesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListSitesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListSitesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListSitesResponse_FieldPathArrayItemValue {
	return &ListSitesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListSitesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListSitesResponse_FieldPathValue allows storing values for ListSitesResponse fields according to their type
type ListSitesResponse_FieldPathValue interface {
	ListSitesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListSitesResponse)
	CompareWith(*ListSitesResponse) (cmp int, comparable bool)
}

func ParseListSitesResponse_FieldPathValue(pathStr, valueStr string) (ListSitesResponse_FieldPathValue, error) {
	fp, err := ParseListSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListSitesResponse_FieldPathValue), nil
}

func MustParseListSitesResponse_FieldPathValue(pathStr, valueStr string) ListSitesResponse_FieldPathValue {
	fpv, err := ParseListSitesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListSitesResponse_FieldTerminalPathValue struct {
	ListSitesResponse_FieldTerminalPath
	value interface{}
}

var _ ListSitesResponse_FieldPathValue = (*ListSitesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListSitesResponse' as interface{}
func (fpv *ListSitesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListSitesResponse_FieldTerminalPathValue) AsSitesValue() ([]*site.Site, bool) {
	res, ok := fpv.value.([]*site.Site)
	return res, ok
}
func (fpv *ListSitesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}
func (fpv *ListSitesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListSitesResponse
func (fpv *ListSitesResponse_FieldTerminalPathValue) SetTo(target **ListSitesResponse) {
	if *target == nil {
		*target = new(ListSitesResponse)
	}
	switch fpv.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		(*target).Sites = fpv.value.([]*site.Site)
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*site.PagerCursor)
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*site.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fpv.selector))
	}
}

func (fpv *ListSitesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSitesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListSitesResponse_FieldTerminalPathValue' with the value under path in 'ListSitesResponse'.
func (fpv *ListSitesResponse_FieldTerminalPathValue) CompareWith(source *ListSitesResponse) (int, bool) {
	switch fpv.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		return 0, false
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fpv.selector))
	}
}

func (fpv *ListSitesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListSitesResponse))
}

type ListSitesResponse_FieldSubPathValue struct {
	ListSitesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListSitesResponse_FieldPathValue = (*ListSitesResponse_FieldSubPathValue)(nil)

func (fpvs *ListSitesResponse_FieldSubPathValue) AsSitesPathValue() (site.Site_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(site.Site_FieldPathValue)
	return res, ok
}

func (fpvs *ListSitesResponse_FieldSubPathValue) SetTo(target **ListSitesResponse) {
	if *target == nil {
		*target = new(ListSitesResponse)
	}
	switch fpvs.Selector() {
	case ListSitesResponse_FieldPathSelectorSites:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListSitesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSitesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListSitesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListSitesResponse_FieldSubPathValue) CompareWith(source *ListSitesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListSitesResponse_FieldPathSelectorSites:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListSitesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListSitesResponse))
}

// ListSitesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListSitesResponse according to their type
// Present only for array (repeated) types.
type ListSitesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListSitesResponse_FieldPath
	ContainsValue(*ListSitesResponse) bool
}

// ParseListSitesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListSitesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListSitesResponse_FieldPathArrayItemValue), nil
}

func MustParseListSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListSitesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListSitesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListSitesResponse_FieldTerminalPathArrayItemValue struct {
	ListSitesResponse_FieldTerminalPath
	value interface{}
}

var _ ListSitesResponse_FieldPathArrayItemValue = (*ListSitesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListSitesResponse as interface{}
func (fpaiv *ListSitesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListSitesResponse_FieldTerminalPathArrayItemValue) AsSitesItemValue() (*site.Site, bool) {
	res, ok := fpaiv.value.(*site.Site)
	return res, ok
}

func (fpaiv *ListSitesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListSitesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListSitesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListSitesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSitesResponse'
func (fpaiv *ListSitesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListSitesResponse) bool {
	slice := fpaiv.ListSitesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListSitesResponse_FieldSubPathArrayItemValue struct {
	ListSitesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListSitesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListSitesResponse_FieldSubPathArrayItemValue) AsSitesPathItemValue() (site.Site_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSitesResponse'
func (fpaivs *ListSitesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListSitesResponse) bool {
	switch fpaivs.Selector() {
	case ListSitesResponse_FieldPathSelectorSites:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListSitesResponse: %d", fpaivs.Selector()))
	}
}

// ListSitesResponse_FieldPathArrayOfValues allows storing slice of values for ListSitesResponse fields according to their type
type ListSitesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListSitesResponse_FieldPath
}

func ParseListSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListSitesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSitesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListSitesResponse_FieldPathArrayOfValues), nil
}

func MustParseListSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListSitesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListSitesResponse_FieldTerminalPathArrayOfValues struct {
	ListSitesResponse_FieldTerminalPath
	values interface{}
}

var _ ListSitesResponse_FieldPathArrayOfValues = (*ListSitesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListSitesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListSitesResponse_FieldPathSelectorSites:
		for _, v := range fpaov.values.([][]*site.Site) {
			values = append(values, v)
		}
	case ListSitesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	case ListSitesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListSitesResponse_FieldTerminalPathArrayOfValues) AsSitesArrayOfValues() ([][]*site.Site, bool) {
	res, ok := fpaov.values.([][]*site.Site)
	return res, ok
}
func (fpaov *ListSitesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}
func (fpaov *ListSitesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}

type ListSitesResponse_FieldSubPathArrayOfValues struct {
	ListSitesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListSitesResponse_FieldPathArrayOfValues = (*ListSitesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListSitesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListSitesResponse_FieldSubPathArrayOfValues) AsSitesPathArrayOfValues() (site.Site_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(site.Site_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSiteRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSiteRequest_FieldPathSelector
	Get(source *WatchSiteRequest) []interface{}
	GetSingle(source *WatchSiteRequest) (interface{}, bool)
	ClearValue(item *WatchSiteRequest)

	// Those methods build corresponding WatchSiteRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSiteRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSiteRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSiteRequest_FieldPathArrayItemValue
}

type WatchSiteRequest_FieldPathSelector int32

const (
	WatchSiteRequest_FieldPathSelectorName      WatchSiteRequest_FieldPathSelector = 0
	WatchSiteRequest_FieldPathSelectorFieldMask WatchSiteRequest_FieldPathSelector = 1
	WatchSiteRequest_FieldPathSelectorView      WatchSiteRequest_FieldPathSelector = 2
)

func (s WatchSiteRequest_FieldPathSelector) String() string {
	switch s {
	case WatchSiteRequest_FieldPathSelectorName:
		return "name"
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchSiteRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", s))
	}
}

func BuildWatchSiteRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchSiteRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSiteRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSiteRequest", fp)
}

func ParseWatchSiteRequest_FieldPath(rawField string) (WatchSiteRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSiteRequest_FieldPath(fp)
}

func MustParseWatchSiteRequest_FieldPath(rawField string) WatchSiteRequest_FieldPath {
	fp, err := ParseWatchSiteRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSiteRequest_FieldTerminalPath struct {
	selector WatchSiteRequest_FieldPathSelector
}

var _ WatchSiteRequest_FieldPath = (*WatchSiteRequest_FieldTerminalPath)(nil)

func (fp *WatchSiteRequest_FieldTerminalPath) Selector() WatchSiteRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSiteRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSiteRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSiteRequest
func (fp *WatchSiteRequest_FieldTerminalPath) Get(source *WatchSiteRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSiteRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchSiteRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchSiteRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSiteRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSiteRequest))
}

// GetSingle returns value pointed by specific field of from source WatchSiteRequest
func (fp *WatchSiteRequest_FieldTerminalPath) GetSingle(source *WatchSiteRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchSiteRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
	}
}

func (fp *WatchSiteRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSiteRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchSiteRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		return (*site.Reference)(nil)
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	case WatchSiteRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
	}
}

func (fp *WatchSiteRequest_FieldTerminalPath) ClearValue(item *WatchSiteRequest) {
	if item != nil {
		switch fp.selector {
		case WatchSiteRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchSiteRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchSiteRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchSiteRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSiteRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSiteRequest_FieldPathSelectorName ||
		fp.selector == WatchSiteRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchSiteRequest_FieldPathSelectorView
}

func (fp *WatchSiteRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithIValue(value interface{}) WatchSiteRequest_FieldPathValue {
	switch fp.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		return &WatchSiteRequest_FieldTerminalPathValue{WatchSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		return &WatchSiteRequest_FieldTerminalPathValue{WatchSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case WatchSiteRequest_FieldPathSelectorView:
		return &WatchSiteRequest_FieldTerminalPathValue{WatchSiteRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
	}
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSiteRequest_FieldPathArrayOfValues {
	fpaov := &WatchSiteRequest_FieldTerminalPathArrayOfValues{WatchSiteRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		return &WatchSiteRequest_FieldTerminalPathArrayOfValues{WatchSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Reference)}
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		return &WatchSiteRequest_FieldTerminalPathArrayOfValues{WatchSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case WatchSiteRequest_FieldPathSelectorView:
		return &WatchSiteRequest_FieldTerminalPathArrayOfValues{WatchSiteRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSiteRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fp.selector))
	}
}

func (fp *WatchSiteRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSiteRequest_FieldPathValue allows storing values for WatchSiteRequest fields according to their type
type WatchSiteRequest_FieldPathValue interface {
	WatchSiteRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSiteRequest)
	CompareWith(*WatchSiteRequest) (cmp int, comparable bool)
}

func ParseWatchSiteRequest_FieldPathValue(pathStr, valueStr string) (WatchSiteRequest_FieldPathValue, error) {
	fp, err := ParseWatchSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSiteRequest_FieldPathValue), nil
}

func MustParseWatchSiteRequest_FieldPathValue(pathStr, valueStr string) WatchSiteRequest_FieldPathValue {
	fpv, err := ParseWatchSiteRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSiteRequest_FieldTerminalPathValue struct {
	WatchSiteRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSiteRequest_FieldPathValue = (*WatchSiteRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSiteRequest' as interface{}
func (fpv *WatchSiteRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSiteRequest_FieldTerminalPathValue) AsNameValue() (*site.Reference, bool) {
	res, ok := fpv.value.(*site.Reference)
	return res, ok
}
func (fpv *WatchSiteRequest_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *WatchSiteRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchSiteRequest
func (fpv *WatchSiteRequest_FieldTerminalPathValue) SetTo(target **WatchSiteRequest) {
	if *target == nil {
		*target = new(WatchSiteRequest)
	}
	switch fpv.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*site.Reference)
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	case WatchSiteRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSiteRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSiteRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSiteRequest_FieldTerminalPathValue' with the value under path in 'WatchSiteRequest'.
func (fpv *WatchSiteRequest_FieldTerminalPathValue) CompareWith(source *WatchSiteRequest) (int, bool) {
	switch fpv.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*site.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchSiteRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSiteRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSiteRequest))
}

// WatchSiteRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSiteRequest according to their type
// Present only for array (repeated) types.
type WatchSiteRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSiteRequest_FieldPath
	ContainsValue(*WatchSiteRequest) bool
}

// ParseWatchSiteRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSiteRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSiteRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchSiteRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSiteRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSiteRequest_FieldTerminalPathArrayItemValue struct {
	WatchSiteRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSiteRequest_FieldPathArrayItemValue = (*WatchSiteRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSiteRequest as interface{}
func (fpaiv *WatchSiteRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSiteRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSiteRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSiteRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSiteRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSiteRequest'
func (fpaiv *WatchSiteRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSiteRequest) bool {
	slice := fpaiv.WatchSiteRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSiteRequest_FieldPathArrayOfValues allows storing slice of values for WatchSiteRequest fields according to their type
type WatchSiteRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSiteRequest_FieldPath
}

func ParseWatchSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSiteRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSiteRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSiteRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSiteRequest_FieldTerminalPathArrayOfValues struct {
	WatchSiteRequest_FieldTerminalPath
	values interface{}
}

var _ WatchSiteRequest_FieldPathArrayOfValues = (*WatchSiteRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSiteRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSiteRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*site.Reference) {
			values = append(values, v)
		}
	case WatchSiteRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case WatchSiteRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSiteRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*site.Reference, bool) {
	res, ok := fpaov.values.([]*site.Reference)
	return res, ok
}
func (fpaov *WatchSiteRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *WatchSiteRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSiteResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSiteResponse_FieldPathSelector
	Get(source *WatchSiteResponse) []interface{}
	GetSingle(source *WatchSiteResponse) (interface{}, bool)
	ClearValue(item *WatchSiteResponse)

	// Those methods build corresponding WatchSiteResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSiteResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSiteResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSiteResponse_FieldPathArrayItemValue
}

type WatchSiteResponse_FieldPathSelector int32

const (
	WatchSiteResponse_FieldPathSelectorChange WatchSiteResponse_FieldPathSelector = 0
)

func (s WatchSiteResponse_FieldPathSelector) String() string {
	switch s {
	case WatchSiteResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", s))
	}
}

func BuildWatchSiteResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchSiteResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSiteResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchSiteResponse_FieldTerminalPath{selector: WatchSiteResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSiteResponse", fp)
}

func ParseWatchSiteResponse_FieldPath(rawField string) (WatchSiteResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSiteResponse_FieldPath(fp)
}

func MustParseWatchSiteResponse_FieldPath(rawField string) WatchSiteResponse_FieldPath {
	fp, err := ParseWatchSiteResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSiteResponse_FieldTerminalPath struct {
	selector WatchSiteResponse_FieldPathSelector
}

var _ WatchSiteResponse_FieldPath = (*WatchSiteResponse_FieldTerminalPath)(nil)

func (fp *WatchSiteResponse_FieldTerminalPath) Selector() WatchSiteResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSiteResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSiteResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSiteResponse
func (fp *WatchSiteResponse_FieldTerminalPath) Get(source *WatchSiteResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSiteResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSiteResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSiteResponse))
}

// GetSingle returns value pointed by specific field of from source WatchSiteResponse
func (fp *WatchSiteResponse_FieldTerminalPath) GetSingle(source *WatchSiteResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
	}
}

func (fp *WatchSiteResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSiteResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchSiteResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		return (*site.SiteChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
	}
}

func (fp *WatchSiteResponse_FieldTerminalPath) ClearValue(item *WatchSiteResponse) {
	if item != nil {
		switch fp.selector {
		case WatchSiteResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchSiteResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSiteResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSiteResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSiteResponse_FieldPathSelectorChange
}

func (fp *WatchSiteResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithIValue(value interface{}) WatchSiteResponse_FieldPathValue {
	switch fp.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		return &WatchSiteResponse_FieldTerminalPathValue{WatchSiteResponse_FieldTerminalPath: *fp, value: value.(*site.SiteChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
	}
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSiteResponse_FieldPathArrayOfValues {
	fpaov := &WatchSiteResponse_FieldTerminalPathArrayOfValues{WatchSiteResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		return &WatchSiteResponse_FieldTerminalPathArrayOfValues{WatchSiteResponse_FieldTerminalPath: *fp, values: values.([]*site.SiteChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSiteResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fp.selector))
	}
}

func (fp *WatchSiteResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSiteResponse_FieldPathValue allows storing values for WatchSiteResponse fields according to their type
type WatchSiteResponse_FieldPathValue interface {
	WatchSiteResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSiteResponse)
	CompareWith(*WatchSiteResponse) (cmp int, comparable bool)
}

func ParseWatchSiteResponse_FieldPathValue(pathStr, valueStr string) (WatchSiteResponse_FieldPathValue, error) {
	fp, err := ParseWatchSiteResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSiteResponse_FieldPathValue), nil
}

func MustParseWatchSiteResponse_FieldPathValue(pathStr, valueStr string) WatchSiteResponse_FieldPathValue {
	fpv, err := ParseWatchSiteResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSiteResponse_FieldTerminalPathValue struct {
	WatchSiteResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSiteResponse_FieldPathValue = (*WatchSiteResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSiteResponse' as interface{}
func (fpv *WatchSiteResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSiteResponse_FieldTerminalPathValue) AsChangeValue() (*site.SiteChange, bool) {
	res, ok := fpv.value.(*site.SiteChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchSiteResponse
func (fpv *WatchSiteResponse_FieldTerminalPathValue) SetTo(target **WatchSiteResponse) {
	if *target == nil {
		*target = new(WatchSiteResponse)
	}
	switch fpv.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*site.SiteChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSiteResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSiteResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSiteResponse_FieldTerminalPathValue' with the value under path in 'WatchSiteResponse'.
func (fpv *WatchSiteResponse_FieldTerminalPathValue) CompareWith(source *WatchSiteResponse) (int, bool) {
	switch fpv.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSiteResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSiteResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSiteResponse))
}

// WatchSiteResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSiteResponse according to their type
// Present only for array (repeated) types.
type WatchSiteResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSiteResponse_FieldPath
	ContainsValue(*WatchSiteResponse) bool
}

// ParseWatchSiteResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSiteResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSiteResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSiteResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSiteResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchSiteResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchSiteResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSiteResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSiteResponse_FieldTerminalPathArrayItemValue struct {
	WatchSiteResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSiteResponse_FieldPathArrayItemValue = (*WatchSiteResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSiteResponse as interface{}
func (fpaiv *WatchSiteResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSiteResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSiteResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSiteResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSiteResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSiteResponse'
func (fpaiv *WatchSiteResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSiteResponse) bool {
	slice := fpaiv.WatchSiteResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSiteResponse_FieldPathArrayOfValues allows storing slice of values for WatchSiteResponse fields according to their type
type WatchSiteResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSiteResponse_FieldPath
}

func ParseWatchSiteResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSiteResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSiteResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSiteResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSiteResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchSiteResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSiteResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSiteResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSiteResponse_FieldTerminalPathArrayOfValues struct {
	WatchSiteResponse_FieldTerminalPath
	values interface{}
}

var _ WatchSiteResponse_FieldPathArrayOfValues = (*WatchSiteResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSiteResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSiteResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*site.SiteChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSiteResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*site.SiteChange, bool) {
	res, ok := fpaov.values.([]*site.SiteChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSitesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSitesRequest_FieldPathSelector
	Get(source *WatchSitesRequest) []interface{}
	GetSingle(source *WatchSitesRequest) (interface{}, bool)
	ClearValue(item *WatchSitesRequest)

	// Those methods build corresponding WatchSitesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSitesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSitesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSitesRequest_FieldPathArrayItemValue
}

type WatchSitesRequest_FieldPathSelector int32

const (
	WatchSitesRequest_FieldPathSelectorType         WatchSitesRequest_FieldPathSelector = 0
	WatchSitesRequest_FieldPathSelectorParent       WatchSitesRequest_FieldPathSelector = 1
	WatchSitesRequest_FieldPathSelectorPageSize     WatchSitesRequest_FieldPathSelector = 2
	WatchSitesRequest_FieldPathSelectorPageToken    WatchSitesRequest_FieldPathSelector = 3
	WatchSitesRequest_FieldPathSelectorOrderBy      WatchSitesRequest_FieldPathSelector = 4
	WatchSitesRequest_FieldPathSelectorResumeToken  WatchSitesRequest_FieldPathSelector = 5
	WatchSitesRequest_FieldPathSelectorStartingTime WatchSitesRequest_FieldPathSelector = 6
	WatchSitesRequest_FieldPathSelectorFilter       WatchSitesRequest_FieldPathSelector = 7
	WatchSitesRequest_FieldPathSelectorFieldMask    WatchSitesRequest_FieldPathSelector = 8
	WatchSitesRequest_FieldPathSelectorView         WatchSitesRequest_FieldPathSelector = 9
	WatchSitesRequest_FieldPathSelectorMaxChunkSize WatchSitesRequest_FieldPathSelector = 10
)

func (s WatchSitesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchSitesRequest_FieldPathSelectorType:
		return "type"
	case WatchSitesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchSitesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchSitesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchSitesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchSitesRequest_FieldPathSelectorView:
		return "view"
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", s))
	}
}

func BuildWatchSitesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchSitesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSitesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSitesRequest", fp)
}

func ParseWatchSitesRequest_FieldPath(rawField string) (WatchSitesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSitesRequest_FieldPath(fp)
}

func MustParseWatchSitesRequest_FieldPath(rawField string) WatchSitesRequest_FieldPath {
	fp, err := ParseWatchSitesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSitesRequest_FieldTerminalPath struct {
	selector WatchSitesRequest_FieldPathSelector
}

var _ WatchSitesRequest_FieldPath = (*WatchSitesRequest_FieldTerminalPath)(nil)

func (fp *WatchSitesRequest_FieldTerminalPath) Selector() WatchSitesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSitesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSitesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSitesRequest
func (fp *WatchSitesRequest_FieldTerminalPath) Get(source *WatchSitesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSitesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchSitesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchSitesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchSitesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchSitesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchSitesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchSitesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchSitesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchSitesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchSitesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSitesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSitesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchSitesRequest
func (fp *WatchSitesRequest_FieldTerminalPath) GetSingle(source *WatchSitesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchSitesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchSitesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchSitesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
	}
}

func (fp *WatchSitesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSitesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchSitesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchSitesRequest_FieldPathSelectorParent:
		return (*site.ParentReference)(nil)
	case WatchSitesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchSitesRequest_FieldPathSelectorPageToken:
		return (*site.PagerCursor)(nil)
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		return (*site.OrderBy)(nil)
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchSitesRequest_FieldPathSelectorFilter:
		return (*site.Filter)(nil)
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	case WatchSitesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
	}
}

func (fp *WatchSitesRequest_FieldTerminalPath) ClearValue(item *WatchSitesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchSitesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchSitesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchSitesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchSitesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchSitesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchSitesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchSitesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchSitesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchSitesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchSitesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchSitesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSitesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSitesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSitesRequest_FieldPathSelectorType ||
		fp.selector == WatchSitesRequest_FieldPathSelectorParent ||
		fp.selector == WatchSitesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchSitesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchSitesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchSitesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchSitesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchSitesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchSitesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchSitesRequest_FieldPathSelectorView ||
		fp.selector == WatchSitesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchSitesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchSitesRequest_FieldPathValue {
	switch fp.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchSitesRequest_FieldPathSelectorParent:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*site.ParentReference)}
	case WatchSitesRequest_FieldPathSelectorPageSize:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchSitesRequest_FieldPathSelectorPageToken:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*site.OrderBy)}
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchSitesRequest_FieldPathSelectorFilter:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Filter)}
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case WatchSitesRequest_FieldPathSelectorView:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchSitesRequest_FieldTerminalPathValue{WatchSitesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
	}
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSitesRequest_FieldPathArrayOfValues {
	fpaov := &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchSitesRequest_FieldPathSelectorParent:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.ParentReference)}
	case WatchSitesRequest_FieldPathSelectorPageSize:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchSitesRequest_FieldPathSelectorPageToken:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.OrderBy)}
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchSitesRequest_FieldPathSelectorFilter:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.Filter)}
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case WatchSitesRequest_FieldPathSelectorView:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchSitesRequest_FieldTerminalPathArrayOfValues{WatchSitesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSitesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fp.selector))
	}
}

func (fp *WatchSitesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSitesRequest_FieldPathValue allows storing values for WatchSitesRequest fields according to their type
type WatchSitesRequest_FieldPathValue interface {
	WatchSitesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSitesRequest)
	CompareWith(*WatchSitesRequest) (cmp int, comparable bool)
}

func ParseWatchSitesRequest_FieldPathValue(pathStr, valueStr string) (WatchSitesRequest_FieldPathValue, error) {
	fp, err := ParseWatchSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSitesRequest_FieldPathValue), nil
}

func MustParseWatchSitesRequest_FieldPathValue(pathStr, valueStr string) WatchSitesRequest_FieldPathValue {
	fpv, err := ParseWatchSitesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSitesRequest_FieldTerminalPathValue struct {
	WatchSitesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSitesRequest_FieldPathValue = (*WatchSitesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSitesRequest' as interface{}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsParentValue() (*site.ParentReference, bool) {
	res, ok := fpv.value.(*site.ParentReference)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsOrderByValue() (*site.OrderBy, bool) {
	res, ok := fpv.value.(*site.OrderBy)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsFilterValue() (*site.Filter, bool) {
	res, ok := fpv.value.(*site.Filter)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchSitesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchSitesRequest
func (fpv *WatchSitesRequest_FieldTerminalPathValue) SetTo(target **WatchSitesRequest) {
	if *target == nil {
		*target = new(WatchSitesRequest)
	}
	switch fpv.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchSitesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*site.ParentReference)
	case WatchSitesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchSitesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*site.PagerCursor)
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*site.OrderBy)
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchSitesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*site.Filter)
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	case WatchSitesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSitesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSitesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSitesRequest_FieldTerminalPathValue' with the value under path in 'WatchSitesRequest'.
func (fpv *WatchSitesRequest_FieldTerminalPathValue) CompareWith(source *WatchSitesRequest) (int, bool) {
	switch fpv.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*site.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchSitesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSitesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSitesRequest))
}

// WatchSitesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSitesRequest according to their type
// Present only for array (repeated) types.
type WatchSitesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSitesRequest_FieldPath
	ContainsValue(*WatchSitesRequest) bool
}

// ParseWatchSitesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSitesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSitesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchSitesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchSitesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSitesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSitesRequest_FieldTerminalPathArrayItemValue struct {
	WatchSitesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSitesRequest_FieldPathArrayItemValue = (*WatchSitesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSitesRequest as interface{}
func (fpaiv *WatchSitesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSitesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSitesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSitesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSitesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSitesRequest'
func (fpaiv *WatchSitesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSitesRequest) bool {
	slice := fpaiv.WatchSitesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSitesRequest_FieldPathArrayOfValues allows storing slice of values for WatchSitesRequest fields according to their type
type WatchSitesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSitesRequest_FieldPath
}

func ParseWatchSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSitesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSitesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSitesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSitesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSitesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSitesRequest_FieldTerminalPathArrayOfValues struct {
	WatchSitesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchSitesRequest_FieldPathArrayOfValues = (*WatchSitesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSitesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*site.ParentReference) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*site.OrderBy) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*site.Filter) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchSitesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*site.ParentReference, bool) {
	res, ok := fpaov.values.([]*site.ParentReference)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*site.OrderBy, bool) {
	res, ok := fpaov.values.([]*site.OrderBy)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*site.Filter, bool) {
	res, ok := fpaov.values.([]*site.Filter)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchSitesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSitesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSitesResponse_FieldPathSelector
	Get(source *WatchSitesResponse) []interface{}
	GetSingle(source *WatchSitesResponse) (interface{}, bool)
	ClearValue(item *WatchSitesResponse)

	// Those methods build corresponding WatchSitesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSitesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSitesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSitesResponse_FieldPathArrayItemValue
}

type WatchSitesResponse_FieldPathSelector int32

const (
	WatchSitesResponse_FieldPathSelectorSiteChanges     WatchSitesResponse_FieldPathSelector = 0
	WatchSitesResponse_FieldPathSelectorIsCurrent       WatchSitesResponse_FieldPathSelector = 1
	WatchSitesResponse_FieldPathSelectorPageTokenChange WatchSitesResponse_FieldPathSelector = 2
	WatchSitesResponse_FieldPathSelectorResumeToken     WatchSitesResponse_FieldPathSelector = 3
	WatchSitesResponse_FieldPathSelectorSnapshotSize    WatchSitesResponse_FieldPathSelector = 4
	WatchSitesResponse_FieldPathSelectorIsSoftReset     WatchSitesResponse_FieldPathSelector = 5
	WatchSitesResponse_FieldPathSelectorIsHardReset     WatchSitesResponse_FieldPathSelector = 6
)

func (s WatchSitesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return "site_changes"
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", s))
	}
}

func BuildWatchSitesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchSitesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSitesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "site_changes", "siteChanges", "site-changes":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorSiteChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchSitesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchSitesResponse_FieldSubPath{selector: WatchSitesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSitesResponse", fp)
}

func ParseWatchSitesResponse_FieldPath(rawField string) (WatchSitesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSitesResponse_FieldPath(fp)
}

func MustParseWatchSitesResponse_FieldPath(rawField string) WatchSitesResponse_FieldPath {
	fp, err := ParseWatchSitesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSitesResponse_FieldTerminalPath struct {
	selector WatchSitesResponse_FieldPathSelector
}

var _ WatchSitesResponse_FieldPath = (*WatchSitesResponse_FieldTerminalPath)(nil)

func (fp *WatchSitesResponse_FieldTerminalPath) Selector() WatchSitesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSitesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSitesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSitesResponse
func (fp *WatchSitesResponse_FieldTerminalPath) Get(source *WatchSitesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSitesResponse_FieldPathSelectorSiteChanges:
			for _, value := range source.GetSiteChanges() {
				values = append(values, value)
			}
		case WatchSitesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchSitesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchSitesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchSitesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchSitesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchSitesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSitesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSitesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchSitesResponse
func (fp *WatchSitesResponse_FieldTerminalPath) GetSingle(source *WatchSitesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		res := source.GetSiteChanges()
		return res, res != nil
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
	}
}

func (fp *WatchSitesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSitesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchSitesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return ([]*site.SiteChange)(nil)
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchSitesResponse_PageTokenChange)(nil)
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
	}
}

func (fp *WatchSitesResponse_FieldTerminalPath) ClearValue(item *WatchSitesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchSitesResponse_FieldPathSelectorSiteChanges:
			item.SiteChanges = nil
		case WatchSitesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchSitesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchSitesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchSitesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchSitesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchSitesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchSitesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSitesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSitesResponse_FieldPathSelectorSiteChanges ||
		fp.selector == WatchSitesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchSitesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchSitesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchSitesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchSitesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchSitesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchSitesResponse_FieldPathValue {
	switch fp.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.([]*site.SiteChange)}
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(*WatchSitesResponse_PageTokenChange)}
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		return &WatchSitesResponse_FieldTerminalPathValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
	}
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSitesResponse_FieldPathArrayOfValues {
	fpaov := &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([][]*site.SiteChange)}
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]*WatchSitesResponse_PageTokenChange)}
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		return &WatchSitesResponse_FieldTerminalPathArrayOfValues{WatchSitesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSitesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return &WatchSitesResponse_FieldTerminalPathArrayItemValue{WatchSitesResponse_FieldTerminalPath: *fp, value: value.(*site.SiteChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fp.selector))
	}
}

func (fp *WatchSitesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchSitesResponse_FieldSubPath struct {
	selector WatchSitesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchSitesResponse_FieldPath = (*WatchSitesResponse_FieldSubPath)(nil)

func (fps *WatchSitesResponse_FieldSubPath) Selector() WatchSitesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchSitesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchSitesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchSitesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchSitesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchSitesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchSitesResponse
func (fps *WatchSitesResponse_FieldSubPath) Get(source *WatchSitesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchSitesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchSitesResponse))
}

// GetSingle returns value of selected field from source WatchSitesResponse
func (fps *WatchSitesResponse_FieldSubPath) GetSingle(source *WatchSitesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fps.selector))
	}
}

func (fps *WatchSitesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchSitesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchSitesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchSitesResponse_FieldSubPath) ClearValue(item *WatchSitesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchSitesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchSitesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchSitesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchSitesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchSitesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchSitesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchSitesResponse_FieldSubPath) WithIValue(value interface{}) WatchSitesResponse_FieldPathValue {
	return &WatchSitesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchSitesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchSitesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchSitesResponse_FieldPathArrayOfValues {
	return &WatchSitesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchSitesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchSitesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchSitesResponse_FieldPathArrayItemValue {
	return &WatchSitesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchSitesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchSitesResponse_FieldPathValue allows storing values for WatchSitesResponse fields according to their type
type WatchSitesResponse_FieldPathValue interface {
	WatchSitesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSitesResponse)
	CompareWith(*WatchSitesResponse) (cmp int, comparable bool)
}

func ParseWatchSitesResponse_FieldPathValue(pathStr, valueStr string) (WatchSitesResponse_FieldPathValue, error) {
	fp, err := ParseWatchSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSitesResponse_FieldPathValue), nil
}

func MustParseWatchSitesResponse_FieldPathValue(pathStr, valueStr string) WatchSitesResponse_FieldPathValue {
	fpv, err := ParseWatchSitesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSitesResponse_FieldTerminalPathValue struct {
	WatchSitesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSitesResponse_FieldPathValue = (*WatchSitesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSitesResponse' as interface{}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsSiteChangesValue() ([]*site.SiteChange, bool) {
	res, ok := fpv.value.([]*site.SiteChange)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchSitesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchSitesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchSitesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchSitesResponse
func (fpv *WatchSitesResponse_FieldTerminalPathValue) SetTo(target **WatchSitesResponse) {
	if *target == nil {
		*target = new(WatchSitesResponse)
	}
	switch fpv.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		(*target).SiteChanges = fpv.value.([]*site.SiteChange)
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchSitesResponse_PageTokenChange)
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSitesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSitesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSitesResponse_FieldTerminalPathValue' with the value under path in 'WatchSitesResponse'.
func (fpv *WatchSitesResponse_FieldTerminalPathValue) CompareWith(source *WatchSitesResponse) (int, bool) {
	switch fpv.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		return 0, false
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSitesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSitesResponse))
}

type WatchSitesResponse_FieldSubPathValue struct {
	WatchSitesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchSitesResponse_FieldPathValue = (*WatchSitesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchSitesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchSitesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchSitesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchSitesResponse_FieldSubPathValue) SetTo(target **WatchSitesResponse) {
	if *target == nil {
		*target = new(WatchSitesResponse)
	}
	switch fpvs.Selector() {
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchSitesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchSitesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSitesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchSitesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchSitesResponse_FieldSubPathValue) CompareWith(source *WatchSitesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchSitesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchSitesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchSitesResponse))
}

// WatchSitesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSitesResponse according to their type
// Present only for array (repeated) types.
type WatchSitesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSitesResponse_FieldPath
	ContainsValue(*WatchSitesResponse) bool
}

// ParseWatchSitesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSitesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSitesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchSitesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchSitesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSitesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSitesResponse_FieldTerminalPathArrayItemValue struct {
	WatchSitesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSitesResponse_FieldPathArrayItemValue = (*WatchSitesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSitesResponse as interface{}
func (fpaiv *WatchSitesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchSitesResponse_FieldTerminalPathArrayItemValue) AsSiteChangesItemValue() (*site.SiteChange, bool) {
	res, ok := fpaiv.value.(*site.SiteChange)
	return res, ok
}

func (fpaiv *WatchSitesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSitesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSitesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSitesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSitesResponse'
func (fpaiv *WatchSitesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSitesResponse) bool {
	slice := fpaiv.WatchSitesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchSitesResponse_FieldSubPathArrayItemValue struct {
	WatchSitesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchSitesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchSitesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchSitesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchSitesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSitesResponse'
func (fpaivs *WatchSitesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchSitesResponse) bool {
	switch fpaivs.Selector() {
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchSitesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse: %d", fpaivs.Selector()))
	}
}

// WatchSitesResponse_FieldPathArrayOfValues allows storing slice of values for WatchSitesResponse fields according to their type
type WatchSitesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSitesResponse_FieldPath
}

func ParseWatchSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSitesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSitesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSitesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSitesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSitesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSitesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSitesResponse_FieldTerminalPathArrayOfValues struct {
	WatchSitesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchSitesResponse_FieldPathArrayOfValues = (*WatchSitesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSitesResponse_FieldPathSelectorSiteChanges:
		for _, v := range fpaov.values.([][]*site.SiteChange) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchSitesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchSitesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsSiteChangesArrayOfValues() ([][]*site.SiteChange, bool) {
	res, ok := fpaov.values.([][]*site.SiteChange)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchSitesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchSitesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchSitesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchSitesResponse_FieldSubPathArrayOfValues struct {
	WatchSitesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchSitesResponse_FieldPathArrayOfValues = (*WatchSitesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchSitesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchSitesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchSitesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchSitesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSitesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSitesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchSitesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchSitesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchSitesResponse_PageTokenChange)

	// Those methods build corresponding WatchSitesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSitesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSitesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSitesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchSitesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchSitesResponsePageTokenChange_FieldPathSelector = 0
	WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchSitesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchSitesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchSitesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchSitesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSitesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchSitesResponsePageTokenChange_FieldTerminalPath{selector: WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchSitesResponsePageTokenChange_FieldTerminalPath{selector: WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSitesResponse_PageTokenChange", fp)
}

func ParseWatchSitesResponsePageTokenChange_FieldPath(rawField string) (WatchSitesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSitesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchSitesResponsePageTokenChange_FieldPath(rawField string) WatchSitesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchSitesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSitesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchSitesResponsePageTokenChange_FieldPathSelector
}

var _ WatchSitesResponsePageTokenChange_FieldPath = (*WatchSitesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) Selector() WatchSitesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSitesResponse_PageTokenChange
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchSitesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSitesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchSitesResponse_PageTokenChange
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchSitesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSitesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*site.PagerCursor)(nil)
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*site.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchSitesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSitesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchSitesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchSitesResponsePageTokenChange_FieldTerminalPathValue{WatchSitesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchSitesResponsePageTokenChange_FieldTerminalPathValue{WatchSitesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*site.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSitesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSitesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSitesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSitesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*site.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSitesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSitesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSitesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchSitesResponsePageTokenChange_FieldPathValue interface {
	WatchSitesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSitesResponse_PageTokenChange)
	CompareWith(*WatchSitesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchSitesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchSitesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchSitesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSitesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchSitesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchSitesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchSitesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSitesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchSitesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchSitesResponsePageTokenChange_FieldPathValue = (*WatchSitesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}
func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*site.PagerCursor, bool) {
	res, ok := fpv.value.(*site.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchSitesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchSitesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*site.PagerCursor)
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*site.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSitesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSitesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchSitesResponse_PageTokenChange'.
func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchSitesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSitesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchSitesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSitesResponse_PageTokenChange))
}

// WatchSitesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchSitesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSitesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchSitesResponse_PageTokenChange) bool
}

// ParseWatchSitesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSitesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSitesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSitesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSitesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchSitesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchSitesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSitesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchSitesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchSitesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSitesResponse_PageTokenChange as interface{}
func (fpaiv *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSitesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSitesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSitesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchSitesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSitesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchSitesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSitesResponsePageTokenChange_FieldPath
}

func ParseWatchSitesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSitesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSitesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSitesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchSitesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSitesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSitesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchSitesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchSitesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	case WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*site.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}
func (fpaov *WatchSitesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*site.PagerCursor, bool) {
	res, ok := fpaov.values.([]*site.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateSiteRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateSiteRequest_FieldPathSelector
	Get(source *CreateSiteRequest) []interface{}
	GetSingle(source *CreateSiteRequest) (interface{}, bool)
	ClearValue(item *CreateSiteRequest)

	// Those methods build corresponding CreateSiteRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateSiteRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateSiteRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateSiteRequest_FieldPathArrayItemValue
}

type CreateSiteRequest_FieldPathSelector int32

const (
	CreateSiteRequest_FieldPathSelectorParent CreateSiteRequest_FieldPathSelector = 0
	CreateSiteRequest_FieldPathSelectorSite   CreateSiteRequest_FieldPathSelector = 1
)

func (s CreateSiteRequest_FieldPathSelector) String() string {
	switch s {
	case CreateSiteRequest_FieldPathSelectorParent:
		return "parent"
	case CreateSiteRequest_FieldPathSelectorSite:
		return "site"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", s))
	}
}

func BuildCreateSiteRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateSiteRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateSiteRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateSiteRequest_FieldTerminalPath{selector: CreateSiteRequest_FieldPathSelectorParent}, nil
		case "site":
			return &CreateSiteRequest_FieldTerminalPath{selector: CreateSiteRequest_FieldPathSelectorSite}, nil
		}
	} else {
		switch fp[0] {
		case "site":
			if subpath, err := site.BuildSite_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateSiteRequest_FieldSubPath{selector: CreateSiteRequest_FieldPathSelectorSite, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateSiteRequest", fp)
}

func ParseCreateSiteRequest_FieldPath(rawField string) (CreateSiteRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateSiteRequest_FieldPath(fp)
}

func MustParseCreateSiteRequest_FieldPath(rawField string) CreateSiteRequest_FieldPath {
	fp, err := ParseCreateSiteRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateSiteRequest_FieldTerminalPath struct {
	selector CreateSiteRequest_FieldPathSelector
}

var _ CreateSiteRequest_FieldPath = (*CreateSiteRequest_FieldTerminalPath)(nil)

func (fp *CreateSiteRequest_FieldTerminalPath) Selector() CreateSiteRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateSiteRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateSiteRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateSiteRequest
func (fp *CreateSiteRequest_FieldTerminalPath) Get(source *CreateSiteRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateSiteRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateSiteRequest_FieldPathSelectorSite:
			if source.Site != nil {
				values = append(values, source.Site)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateSiteRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateSiteRequest))
}

// GetSingle returns value pointed by specific field of from source CreateSiteRequest
func (fp *CreateSiteRequest_FieldTerminalPath) GetSingle(source *CreateSiteRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateSiteRequest_FieldPathSelectorSite:
		res := source.GetSite()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
	}
}

func (fp *CreateSiteRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateSiteRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateSiteRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		return (*site.ParentReference)(nil)
	case CreateSiteRequest_FieldPathSelectorSite:
		return (*site.Site)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
	}
}

func (fp *CreateSiteRequest_FieldTerminalPath) ClearValue(item *CreateSiteRequest) {
	if item != nil {
		switch fp.selector {
		case CreateSiteRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateSiteRequest_FieldPathSelectorSite:
			item.Site = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateSiteRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateSiteRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateSiteRequest_FieldPathSelectorParent
}

func (fp *CreateSiteRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithIValue(value interface{}) CreateSiteRequest_FieldPathValue {
	switch fp.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		return &CreateSiteRequest_FieldTerminalPathValue{CreateSiteRequest_FieldTerminalPath: *fp, value: value.(*site.ParentReference)}
	case CreateSiteRequest_FieldPathSelectorSite:
		return &CreateSiteRequest_FieldTerminalPathValue{CreateSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Site)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
	}
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateSiteRequest_FieldPathArrayOfValues {
	fpaov := &CreateSiteRequest_FieldTerminalPathArrayOfValues{CreateSiteRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		return &CreateSiteRequest_FieldTerminalPathArrayOfValues{CreateSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.ParentReference)}
	case CreateSiteRequest_FieldPathSelectorSite:
		return &CreateSiteRequest_FieldTerminalPathArrayOfValues{CreateSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Site)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateSiteRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fp.selector))
	}
}

func (fp *CreateSiteRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateSiteRequest_FieldSubPath struct {
	selector CreateSiteRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateSiteRequest_FieldPath = (*CreateSiteRequest_FieldSubPath)(nil)

func (fps *CreateSiteRequest_FieldSubPath) Selector() CreateSiteRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateSiteRequest_FieldSubPath) AsSiteSubPath() (site.Site_FieldPath, bool) {
	res, ok := fps.subPath.(site.Site_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateSiteRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateSiteRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateSiteRequest
func (fps *CreateSiteRequest_FieldSubPath) Get(source *CreateSiteRequest) (values []interface{}) {
	if asSiteFieldPath, ok := fps.AsSiteSubPath(); ok {
		values = append(values, asSiteFieldPath.Get(source.GetSite())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateSiteRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateSiteRequest))
}

// GetSingle returns value of selected field from source CreateSiteRequest
func (fps *CreateSiteRequest_FieldSubPath) GetSingle(source *CreateSiteRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateSiteRequest_FieldPathSelectorSite:
		if source.GetSite() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSite())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fps.selector))
	}
}

func (fps *CreateSiteRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateSiteRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateSiteRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateSiteRequest_FieldSubPath) ClearValue(item *CreateSiteRequest) {
	if item != nil {
		switch fps.selector {
		case CreateSiteRequest_FieldPathSelectorSite:
			fps.subPath.ClearValueRaw(item.Site)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateSiteRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateSiteRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateSiteRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateSiteRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateSiteRequest_FieldSubPath) WithIValue(value interface{}) CreateSiteRequest_FieldPathValue {
	return &CreateSiteRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateSiteRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateSiteRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateSiteRequest_FieldPathArrayOfValues {
	return &CreateSiteRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateSiteRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateSiteRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateSiteRequest_FieldPathArrayItemValue {
	return &CreateSiteRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateSiteRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateSiteRequest_FieldPathValue allows storing values for CreateSiteRequest fields according to their type
type CreateSiteRequest_FieldPathValue interface {
	CreateSiteRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateSiteRequest)
	CompareWith(*CreateSiteRequest) (cmp int, comparable bool)
}

func ParseCreateSiteRequest_FieldPathValue(pathStr, valueStr string) (CreateSiteRequest_FieldPathValue, error) {
	fp, err := ParseCreateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSiteRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateSiteRequest_FieldPathValue), nil
}

func MustParseCreateSiteRequest_FieldPathValue(pathStr, valueStr string) CreateSiteRequest_FieldPathValue {
	fpv, err := ParseCreateSiteRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateSiteRequest_FieldTerminalPathValue struct {
	CreateSiteRequest_FieldTerminalPath
	value interface{}
}

var _ CreateSiteRequest_FieldPathValue = (*CreateSiteRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateSiteRequest' as interface{}
func (fpv *CreateSiteRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateSiteRequest_FieldTerminalPathValue) AsParentValue() (*site.ParentReference, bool) {
	res, ok := fpv.value.(*site.ParentReference)
	return res, ok
}
func (fpv *CreateSiteRequest_FieldTerminalPathValue) AsSiteValue() (*site.Site, bool) {
	res, ok := fpv.value.(*site.Site)
	return res, ok
}

// SetTo stores value for selected field for object CreateSiteRequest
func (fpv *CreateSiteRequest_FieldTerminalPathValue) SetTo(target **CreateSiteRequest) {
	if *target == nil {
		*target = new(CreateSiteRequest)
	}
	switch fpv.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*site.ParentReference)
	case CreateSiteRequest_FieldPathSelectorSite:
		(*target).Site = fpv.value.(*site.Site)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fpv.selector))
	}
}

func (fpv *CreateSiteRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateSiteRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateSiteRequest_FieldTerminalPathValue' with the value under path in 'CreateSiteRequest'.
func (fpv *CreateSiteRequest_FieldTerminalPathValue) CompareWith(source *CreateSiteRequest) (int, bool) {
	switch fpv.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*site.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateSiteRequest_FieldPathSelectorSite:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fpv.selector))
	}
}

func (fpv *CreateSiteRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateSiteRequest))
}

type CreateSiteRequest_FieldSubPathValue struct {
	CreateSiteRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateSiteRequest_FieldPathValue = (*CreateSiteRequest_FieldSubPathValue)(nil)

func (fpvs *CreateSiteRequest_FieldSubPathValue) AsSitePathValue() (site.Site_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(site.Site_FieldPathValue)
	return res, ok
}

func (fpvs *CreateSiteRequest_FieldSubPathValue) SetTo(target **CreateSiteRequest) {
	if *target == nil {
		*target = new(CreateSiteRequest)
	}
	switch fpvs.Selector() {
	case CreateSiteRequest_FieldPathSelectorSite:
		fpvs.subPathValue.(site.Site_FieldPathValue).SetTo(&(*target).Site)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateSiteRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateSiteRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateSiteRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateSiteRequest_FieldSubPathValue) CompareWith(source *CreateSiteRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateSiteRequest_FieldPathSelectorSite:
		return fpvs.subPathValue.(site.Site_FieldPathValue).CompareWith(source.GetSite())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateSiteRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateSiteRequest))
}

// CreateSiteRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateSiteRequest according to their type
// Present only for array (repeated) types.
type CreateSiteRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateSiteRequest_FieldPath
	ContainsValue(*CreateSiteRequest) bool
}

// ParseCreateSiteRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateSiteRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSiteRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateSiteRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateSiteRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateSiteRequest_FieldTerminalPathArrayItemValue struct {
	CreateSiteRequest_FieldTerminalPath
	value interface{}
}

var _ CreateSiteRequest_FieldPathArrayItemValue = (*CreateSiteRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateSiteRequest as interface{}
func (fpaiv *CreateSiteRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateSiteRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateSiteRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateSiteRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateSiteRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateSiteRequest'
func (fpaiv *CreateSiteRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateSiteRequest) bool {
	slice := fpaiv.CreateSiteRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateSiteRequest_FieldSubPathArrayItemValue struct {
	CreateSiteRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateSiteRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateSiteRequest_FieldSubPathArrayItemValue) AsSitePathItemValue() (site.Site_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateSiteRequest'
func (fpaivs *CreateSiteRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateSiteRequest) bool {
	switch fpaivs.Selector() {
	case CreateSiteRequest_FieldPathSelectorSite:
		return fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue).ContainsValue(source.GetSite())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSiteRequest: %d", fpaivs.Selector()))
	}
}

// CreateSiteRequest_FieldPathArrayOfValues allows storing slice of values for CreateSiteRequest fields according to their type
type CreateSiteRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateSiteRequest_FieldPath
}

func ParseCreateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateSiteRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSiteRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateSiteRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateSiteRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateSiteRequest_FieldTerminalPathArrayOfValues struct {
	CreateSiteRequest_FieldTerminalPath
	values interface{}
}

var _ CreateSiteRequest_FieldPathArrayOfValues = (*CreateSiteRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateSiteRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateSiteRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*site.ParentReference) {
			values = append(values, v)
		}
	case CreateSiteRequest_FieldPathSelectorSite:
		for _, v := range fpaov.values.([]*site.Site) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateSiteRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*site.ParentReference, bool) {
	res, ok := fpaov.values.([]*site.ParentReference)
	return res, ok
}
func (fpaov *CreateSiteRequest_FieldTerminalPathArrayOfValues) AsSiteArrayOfValues() ([]*site.Site, bool) {
	res, ok := fpaov.values.([]*site.Site)
	return res, ok
}

type CreateSiteRequest_FieldSubPathArrayOfValues struct {
	CreateSiteRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateSiteRequest_FieldPathArrayOfValues = (*CreateSiteRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateSiteRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateSiteRequest_FieldSubPathArrayOfValues) AsSitePathArrayOfValues() (site.Site_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(site.Site_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateSiteRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateSiteRequest_FieldPathSelector
	Get(source *UpdateSiteRequest) []interface{}
	GetSingle(source *UpdateSiteRequest) (interface{}, bool)
	ClearValue(item *UpdateSiteRequest)

	// Those methods build corresponding UpdateSiteRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateSiteRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateSiteRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateSiteRequest_FieldPathArrayItemValue
}

type UpdateSiteRequest_FieldPathSelector int32

const (
	UpdateSiteRequest_FieldPathSelectorSite       UpdateSiteRequest_FieldPathSelector = 0
	UpdateSiteRequest_FieldPathSelectorUpdateMask UpdateSiteRequest_FieldPathSelector = 1
	UpdateSiteRequest_FieldPathSelectorCas        UpdateSiteRequest_FieldPathSelector = 2
)

func (s UpdateSiteRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return "site"
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateSiteRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", s))
	}
}

func BuildUpdateSiteRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateSiteRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateSiteRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "site":
			return &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorSite}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "site":
			if subpath, err := site.BuildSite_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSiteRequest_FieldSubPath{selector: UpdateSiteRequest_FieldPathSelectorSite, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateSiteRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSiteRequest_FieldSubPath{selector: UpdateSiteRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateSiteRequest", fp)
}

func ParseUpdateSiteRequest_FieldPath(rawField string) (UpdateSiteRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateSiteRequest_FieldPath(fp)
}

func MustParseUpdateSiteRequest_FieldPath(rawField string) UpdateSiteRequest_FieldPath {
	fp, err := ParseUpdateSiteRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateSiteRequest_FieldTerminalPath struct {
	selector UpdateSiteRequest_FieldPathSelector
}

var _ UpdateSiteRequest_FieldPath = (*UpdateSiteRequest_FieldTerminalPath)(nil)

func (fp *UpdateSiteRequest_FieldTerminalPath) Selector() UpdateSiteRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateSiteRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateSiteRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateSiteRequest
func (fp *UpdateSiteRequest_FieldTerminalPath) Get(source *UpdateSiteRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateSiteRequest_FieldPathSelectorSite:
			if source.Site != nil {
				values = append(values, source.Site)
			}
		case UpdateSiteRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateSiteRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateSiteRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateSiteRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateSiteRequest
func (fp *UpdateSiteRequest_FieldTerminalPath) GetSingle(source *UpdateSiteRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		res := source.GetSite()
		return res, res != nil
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateSiteRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateSiteRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateSiteRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return (*site.Site)(nil)
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		return (*site.Site_FieldMask)(nil)
	case UpdateSiteRequest_FieldPathSelectorCas:
		return (*UpdateSiteRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) ClearValue(item *UpdateSiteRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateSiteRequest_FieldPathSelectorSite:
			item.Site = nil
		case UpdateSiteRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateSiteRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateSiteRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateSiteRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateSiteRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateSiteRequest_FieldPathValue {
	switch fp.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return &UpdateSiteRequest_FieldTerminalPathValue{UpdateSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Site)}
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		return &UpdateSiteRequest_FieldTerminalPathValue{UpdateSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	case UpdateSiteRequest_FieldPathSelectorCas:
		return &UpdateSiteRequest_FieldTerminalPathValue{UpdateSiteRequest_FieldTerminalPath: *fp, value: value.(*UpdateSiteRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateSiteRequest_FieldPathArrayOfValues {
	fpaov := &UpdateSiteRequest_FieldTerminalPathArrayOfValues{UpdateSiteRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return &UpdateSiteRequest_FieldTerminalPathArrayOfValues{UpdateSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Site)}
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		return &UpdateSiteRequest_FieldTerminalPathArrayOfValues{UpdateSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	case UpdateSiteRequest_FieldPathSelectorCas:
		return &UpdateSiteRequest_FieldTerminalPathArrayOfValues{UpdateSiteRequest_FieldTerminalPath: *fp, values: values.([]*UpdateSiteRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateSiteRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateSiteRequest_FieldSubPath struct {
	selector UpdateSiteRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateSiteRequest_FieldPath = (*UpdateSiteRequest_FieldSubPath)(nil)

func (fps *UpdateSiteRequest_FieldSubPath) Selector() UpdateSiteRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateSiteRequest_FieldSubPath) AsSiteSubPath() (site.Site_FieldPath, bool) {
	res, ok := fps.subPath.(site.Site_FieldPath)
	return res, ok
}
func (fps *UpdateSiteRequest_FieldSubPath) AsCasSubPath() (UpdateSiteRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateSiteRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateSiteRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateSiteRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateSiteRequest
func (fps *UpdateSiteRequest_FieldSubPath) Get(source *UpdateSiteRequest) (values []interface{}) {
	if asSiteFieldPath, ok := fps.AsSiteSubPath(); ok {
		values = append(values, asSiteFieldPath.Get(source.GetSite())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateSiteRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateSiteRequest))
}

// GetSingle returns value of selected field from source UpdateSiteRequest
func (fps *UpdateSiteRequest_FieldSubPath) GetSingle(source *UpdateSiteRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		if source.GetSite() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSite())
	case UpdateSiteRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fps.selector))
	}
}

func (fps *UpdateSiteRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateSiteRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateSiteRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateSiteRequest_FieldSubPath) ClearValue(item *UpdateSiteRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateSiteRequest_FieldPathSelectorSite:
			fps.subPath.ClearValueRaw(item.Site)
		case UpdateSiteRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateSiteRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateSiteRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateSiteRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateSiteRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateSiteRequest_FieldSubPath) WithIValue(value interface{}) UpdateSiteRequest_FieldPathValue {
	return &UpdateSiteRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateSiteRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateSiteRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateSiteRequest_FieldPathArrayOfValues {
	return &UpdateSiteRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateSiteRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateSiteRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateSiteRequest_FieldPathArrayItemValue {
	return &UpdateSiteRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateSiteRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateSiteRequest_FieldPathValue allows storing values for UpdateSiteRequest fields according to their type
type UpdateSiteRequest_FieldPathValue interface {
	UpdateSiteRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateSiteRequest)
	CompareWith(*UpdateSiteRequest) (cmp int, comparable bool)
}

func ParseUpdateSiteRequest_FieldPathValue(pathStr, valueStr string) (UpdateSiteRequest_FieldPathValue, error) {
	fp, err := ParseUpdateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSiteRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateSiteRequest_FieldPathValue), nil
}

func MustParseUpdateSiteRequest_FieldPathValue(pathStr, valueStr string) UpdateSiteRequest_FieldPathValue {
	fpv, err := ParseUpdateSiteRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateSiteRequest_FieldTerminalPathValue struct {
	UpdateSiteRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateSiteRequest_FieldPathValue = (*UpdateSiteRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateSiteRequest' as interface{}
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) AsSiteValue() (*site.Site, bool) {
	res, ok := fpv.value.(*site.Site)
	return res, ok
}
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) AsCasValue() (*UpdateSiteRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateSiteRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateSiteRequest
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) SetTo(target **UpdateSiteRequest) {
	if *target == nil {
		*target = new(UpdateSiteRequest)
	}
	switch fpv.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		(*target).Site = fpv.value.(*site.Site)
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*site.Site_FieldMask)
	case UpdateSiteRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateSiteRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateSiteRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSiteRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateSiteRequest_FieldTerminalPathValue' with the value under path in 'UpdateSiteRequest'.
func (fpv *UpdateSiteRequest_FieldTerminalPathValue) CompareWith(source *UpdateSiteRequest) (int, bool) {
	switch fpv.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return 0, false
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateSiteRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateSiteRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateSiteRequest))
}

type UpdateSiteRequest_FieldSubPathValue struct {
	UpdateSiteRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateSiteRequest_FieldPathValue = (*UpdateSiteRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateSiteRequest_FieldSubPathValue) AsSitePathValue() (site.Site_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(site.Site_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateSiteRequest_FieldSubPathValue) AsCasPathValue() (UpdateSiteRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateSiteRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateSiteRequest_FieldSubPathValue) SetTo(target **UpdateSiteRequest) {
	if *target == nil {
		*target = new(UpdateSiteRequest)
	}
	switch fpvs.Selector() {
	case UpdateSiteRequest_FieldPathSelectorSite:
		fpvs.subPathValue.(site.Site_FieldPathValue).SetTo(&(*target).Site)
	case UpdateSiteRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateSiteRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSiteRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSiteRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateSiteRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateSiteRequest_FieldSubPathValue) CompareWith(source *UpdateSiteRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return fpvs.subPathValue.(site.Site_FieldPathValue).CompareWith(source.GetSite())
	case UpdateSiteRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateSiteRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSiteRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateSiteRequest))
}

// UpdateSiteRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateSiteRequest according to their type
// Present only for array (repeated) types.
type UpdateSiteRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateSiteRequest_FieldPath
	ContainsValue(*UpdateSiteRequest) bool
}

// ParseUpdateSiteRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateSiteRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSiteRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateSiteRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateSiteRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateSiteRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateSiteRequest_FieldTerminalPathArrayItemValue struct {
	UpdateSiteRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateSiteRequest_FieldPathArrayItemValue = (*UpdateSiteRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateSiteRequest as interface{}
func (fpaiv *UpdateSiteRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateSiteRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateSiteRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateSiteRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateSiteRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateSiteRequest'
func (fpaiv *UpdateSiteRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateSiteRequest) bool {
	slice := fpaiv.UpdateSiteRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateSiteRequest_FieldSubPathArrayItemValue struct {
	UpdateSiteRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateSiteRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateSiteRequest_FieldSubPathArrayItemValue) AsSitePathItemValue() (site.Site_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateSiteRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateSiteRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateSiteRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateSiteRequest'
func (fpaivs *UpdateSiteRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateSiteRequest) bool {
	switch fpaivs.Selector() {
	case UpdateSiteRequest_FieldPathSelectorSite:
		return fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue).ContainsValue(source.GetSite())
	case UpdateSiteRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateSiteRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest: %d", fpaivs.Selector()))
	}
}

// UpdateSiteRequest_FieldPathArrayOfValues allows storing slice of values for UpdateSiteRequest fields according to their type
type UpdateSiteRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateSiteRequest_FieldPath
}

func ParseUpdateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateSiteRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSiteRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateSiteRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateSiteRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateSiteRequest_FieldTerminalPathArrayOfValues struct {
	UpdateSiteRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateSiteRequest_FieldPathArrayOfValues = (*UpdateSiteRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateSiteRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateSiteRequest_FieldPathSelectorSite:
		for _, v := range fpaov.values.([]*site.Site) {
			values = append(values, v)
		}
	case UpdateSiteRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	case UpdateSiteRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateSiteRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateSiteRequest_FieldTerminalPathArrayOfValues) AsSiteArrayOfValues() ([]*site.Site, bool) {
	res, ok := fpaov.values.([]*site.Site)
	return res, ok
}
func (fpaov *UpdateSiteRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}
func (fpaov *UpdateSiteRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateSiteRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateSiteRequest_CAS)
	return res, ok
}

type UpdateSiteRequest_FieldSubPathArrayOfValues struct {
	UpdateSiteRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateSiteRequest_FieldPathArrayOfValues = (*UpdateSiteRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateSiteRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateSiteRequest_FieldSubPathArrayOfValues) AsSitePathArrayOfValues() (site.Site_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(site.Site_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateSiteRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateSiteRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateSiteRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateSiteRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateSiteRequestCAS_FieldPathSelector
	Get(source *UpdateSiteRequest_CAS) []interface{}
	GetSingle(source *UpdateSiteRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateSiteRequest_CAS)

	// Those methods build corresponding UpdateSiteRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateSiteRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateSiteRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateSiteRequestCAS_FieldPathArrayItemValue
}

type UpdateSiteRequestCAS_FieldPathSelector int32

const (
	UpdateSiteRequestCAS_FieldPathSelectorConditionalState UpdateSiteRequestCAS_FieldPathSelector = 0
	UpdateSiteRequestCAS_FieldPathSelectorFieldMask        UpdateSiteRequestCAS_FieldPathSelector = 1
)

func (s UpdateSiteRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", s))
	}
}

func BuildUpdateSiteRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateSiteRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateSiteRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateSiteRequestCAS_FieldTerminalPath{selector: UpdateSiteRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateSiteRequestCAS_FieldTerminalPath{selector: UpdateSiteRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := site.BuildSite_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSiteRequestCAS_FieldSubPath{selector: UpdateSiteRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateSiteRequest_CAS", fp)
}

func ParseUpdateSiteRequestCAS_FieldPath(rawField string) (UpdateSiteRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateSiteRequestCAS_FieldPath(fp)
}

func MustParseUpdateSiteRequestCAS_FieldPath(rawField string) UpdateSiteRequestCAS_FieldPath {
	fp, err := ParseUpdateSiteRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateSiteRequestCAS_FieldTerminalPath struct {
	selector UpdateSiteRequestCAS_FieldPathSelector
}

var _ UpdateSiteRequestCAS_FieldPath = (*UpdateSiteRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) Selector() UpdateSiteRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateSiteRequest_CAS
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) Get(source *UpdateSiteRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateSiteRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateSiteRequest_CAS
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) GetSingle(source *UpdateSiteRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateSiteRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return (*site.Site)(nil)
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		return (*site.Site_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) ClearValue(item *UpdateSiteRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateSiteRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateSiteRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateSiteRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateSiteRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateSiteRequestCAS_FieldTerminalPathValue{UpdateSiteRequestCAS_FieldTerminalPath: *fp, value: value.(*site.Site)}
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateSiteRequestCAS_FieldTerminalPathValue{UpdateSiteRequestCAS_FieldTerminalPath: *fp, value: value.(*site.Site_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateSiteRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues{UpdateSiteRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues{UpdateSiteRequestCAS_FieldTerminalPath: *fp, values: values.([]*site.Site)}
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues{UpdateSiteRequestCAS_FieldTerminalPath: *fp, values: values.([]*site.Site_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateSiteRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSiteRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateSiteRequestCAS_FieldSubPath struct {
	selector UpdateSiteRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateSiteRequestCAS_FieldPath = (*UpdateSiteRequestCAS_FieldSubPath)(nil)

func (fps *UpdateSiteRequestCAS_FieldSubPath) Selector() UpdateSiteRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateSiteRequestCAS_FieldSubPath) AsConditionalStateSubPath() (site.Site_FieldPath, bool) {
	res, ok := fps.subPath.(site.Site_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateSiteRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateSiteRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateSiteRequest_CAS
func (fps *UpdateSiteRequestCAS_FieldSubPath) Get(source *UpdateSiteRequest_CAS) (values []interface{}) {
	if asSiteFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asSiteFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateSiteRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateSiteRequest_CAS
func (fps *UpdateSiteRequestCAS_FieldSubPath) GetSingle(source *UpdateSiteRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateSiteRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateSiteRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) ClearValue(item *UpdateSiteRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateSiteRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateSiteRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateSiteRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateSiteRequestCAS_FieldPathValue {
	return &UpdateSiteRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateSiteRequestCAS_FieldPathArrayOfValues {
	return &UpdateSiteRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateSiteRequestCAS_FieldPathArrayItemValue {
	return &UpdateSiteRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateSiteRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateSiteRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateSiteRequestCAS_FieldPathValue interface {
	UpdateSiteRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateSiteRequest_CAS)
	CompareWith(*UpdateSiteRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateSiteRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateSiteRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateSiteRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateSiteRequestCAS_FieldPathValue), nil
}

func MustParseUpdateSiteRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateSiteRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateSiteRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateSiteRequestCAS_FieldTerminalPathValue struct {
	UpdateSiteRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateSiteRequestCAS_FieldPathValue = (*UpdateSiteRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*site.Site, bool) {
	res, ok := fpv.value.(*site.Site)
	return res, ok
}
func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*site.Site_FieldMask, bool) {
	res, ok := fpv.value.(*site.Site_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateSiteRequest_CAS) {
	if *target == nil {
		*target = new(UpdateSiteRequest_CAS)
	}
	switch fpv.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*site.Site)
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*site.Site_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSiteRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateSiteRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateSiteRequest_CAS'.
func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateSiteRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateSiteRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateSiteRequest_CAS))
}

type UpdateSiteRequestCAS_FieldSubPathValue struct {
	UpdateSiteRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateSiteRequestCAS_FieldPathValue = (*UpdateSiteRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (site.Site_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(site.Site_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) SetTo(target **UpdateSiteRequest_CAS) {
	if *target == nil {
		*target = new(UpdateSiteRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(site.Site_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSiteRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) CompareWith(source *UpdateSiteRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(site.Site_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSiteRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateSiteRequest_CAS))
}

// UpdateSiteRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateSiteRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateSiteRequestCAS_FieldPath
	ContainsValue(*UpdateSiteRequest_CAS) bool
}

// ParseUpdateSiteRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateSiteRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateSiteRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateSiteRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateSiteRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateSiteRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateSiteRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateSiteRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateSiteRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateSiteRequestCAS_FieldPathArrayItemValue = (*UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateSiteRequest_CAS as interface{}
func (fpaiv *UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateSiteRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateSiteRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateSiteRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateSiteRequest_CAS) bool {
	slice := fpaiv.UpdateSiteRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateSiteRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateSiteRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateSiteRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateSiteRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (site.Site_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateSiteRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateSiteRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(site.Site_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSiteRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateSiteRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateSiteRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateSiteRequestCAS_FieldPath
}

func ParseUpdateSiteRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateSiteRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateSiteRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateSiteRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateSiteRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateSiteRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateSiteRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateSiteRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateSiteRequestCAS_FieldPathArrayOfValues = (*UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateSiteRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*site.Site) {
			values = append(values, v)
		}
	case UpdateSiteRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*site.Site_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*site.Site, bool) {
	res, ok := fpaov.values.([]*site.Site)
	return res, ok
}
func (fpaov *UpdateSiteRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*site.Site_FieldMask, bool) {
	res, ok := fpaov.values.([]*site.Site_FieldMask)
	return res, ok
}

type UpdateSiteRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateSiteRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateSiteRequestCAS_FieldPathArrayOfValues = (*UpdateSiteRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateSiteRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateSiteRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (site.Site_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(site.Site_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteSiteRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteSiteRequest_FieldPathSelector
	Get(source *DeleteSiteRequest) []interface{}
	GetSingle(source *DeleteSiteRequest) (interface{}, bool)
	ClearValue(item *DeleteSiteRequest)

	// Those methods build corresponding DeleteSiteRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteSiteRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteSiteRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteSiteRequest_FieldPathArrayItemValue
}

type DeleteSiteRequest_FieldPathSelector int32

const (
	DeleteSiteRequest_FieldPathSelectorName DeleteSiteRequest_FieldPathSelector = 0
)

func (s DeleteSiteRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteSiteRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", s))
	}
}

func BuildDeleteSiteRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteSiteRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteSiteRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteSiteRequest_FieldTerminalPath{selector: DeleteSiteRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteSiteRequest", fp)
}

func ParseDeleteSiteRequest_FieldPath(rawField string) (DeleteSiteRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteSiteRequest_FieldPath(fp)
}

func MustParseDeleteSiteRequest_FieldPath(rawField string) DeleteSiteRequest_FieldPath {
	fp, err := ParseDeleteSiteRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteSiteRequest_FieldTerminalPath struct {
	selector DeleteSiteRequest_FieldPathSelector
}

var _ DeleteSiteRequest_FieldPath = (*DeleteSiteRequest_FieldTerminalPath)(nil)

func (fp *DeleteSiteRequest_FieldTerminalPath) Selector() DeleteSiteRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteSiteRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteSiteRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteSiteRequest
func (fp *DeleteSiteRequest_FieldTerminalPath) Get(source *DeleteSiteRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteSiteRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteSiteRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteSiteRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteSiteRequest
func (fp *DeleteSiteRequest_FieldTerminalPath) GetSingle(source *DeleteSiteRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
	}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteSiteRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteSiteRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		return (*site.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
	}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) ClearValue(item *DeleteSiteRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteSiteRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteSiteRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteSiteRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteSiteRequest_FieldPathSelectorName
}

func (fp *DeleteSiteRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteSiteRequest_FieldPathValue {
	switch fp.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		return &DeleteSiteRequest_FieldTerminalPathValue{DeleteSiteRequest_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
	}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteSiteRequest_FieldPathArrayOfValues {
	fpaov := &DeleteSiteRequest_FieldTerminalPathArrayOfValues{DeleteSiteRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		return &DeleteSiteRequest_FieldTerminalPathArrayOfValues{DeleteSiteRequest_FieldTerminalPath: *fp, values: values.([]*site.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteSiteRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fp.selector))
	}
}

func (fp *DeleteSiteRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteSiteRequest_FieldPathValue allows storing values for DeleteSiteRequest fields according to their type
type DeleteSiteRequest_FieldPathValue interface {
	DeleteSiteRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteSiteRequest)
	CompareWith(*DeleteSiteRequest) (cmp int, comparable bool)
}

func ParseDeleteSiteRequest_FieldPathValue(pathStr, valueStr string) (DeleteSiteRequest_FieldPathValue, error) {
	fp, err := ParseDeleteSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSiteRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteSiteRequest_FieldPathValue), nil
}

func MustParseDeleteSiteRequest_FieldPathValue(pathStr, valueStr string) DeleteSiteRequest_FieldPathValue {
	fpv, err := ParseDeleteSiteRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteSiteRequest_FieldTerminalPathValue struct {
	DeleteSiteRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteSiteRequest_FieldPathValue = (*DeleteSiteRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteSiteRequest' as interface{}
func (fpv *DeleteSiteRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteSiteRequest_FieldTerminalPathValue) AsNameValue() (*site.Reference, bool) {
	res, ok := fpv.value.(*site.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteSiteRequest
func (fpv *DeleteSiteRequest_FieldTerminalPathValue) SetTo(target **DeleteSiteRequest) {
	if *target == nil {
		*target = new(DeleteSiteRequest)
	}
	switch fpv.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*site.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteSiteRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteSiteRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteSiteRequest_FieldTerminalPathValue' with the value under path in 'DeleteSiteRequest'.
func (fpv *DeleteSiteRequest_FieldTerminalPathValue) CompareWith(source *DeleteSiteRequest) (int, bool) {
	switch fpv.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*site.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSiteRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteSiteRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteSiteRequest))
}

// DeleteSiteRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteSiteRequest according to their type
// Present only for array (repeated) types.
type DeleteSiteRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteSiteRequest_FieldPath
	ContainsValue(*DeleteSiteRequest) bool
}

// ParseDeleteSiteRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteSiteRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSiteRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteSiteRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteSiteRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteSiteRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteSiteRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteSiteRequest_FieldTerminalPathArrayItemValue struct {
	DeleteSiteRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteSiteRequest_FieldPathArrayItemValue = (*DeleteSiteRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteSiteRequest as interface{}
func (fpaiv *DeleteSiteRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteSiteRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteSiteRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteSiteRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteSiteRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteSiteRequest'
func (fpaiv *DeleteSiteRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteSiteRequest) bool {
	slice := fpaiv.DeleteSiteRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteSiteRequest_FieldPathArrayOfValues allows storing slice of values for DeleteSiteRequest fields according to their type
type DeleteSiteRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteSiteRequest_FieldPath
}

func ParseDeleteSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteSiteRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteSiteRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSiteRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteSiteRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteSiteRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteSiteRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteSiteRequest_FieldTerminalPathArrayOfValues struct {
	DeleteSiteRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteSiteRequest_FieldPathArrayOfValues = (*DeleteSiteRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteSiteRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteSiteRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*site.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteSiteRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*site.Reference, bool) {
	res, ok := fpaov.values.([]*site.Reference)
	return res, ok
}
