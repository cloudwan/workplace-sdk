// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha2/site_service.proto
// DO NOT EDIT!!!

package site_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &site.Site{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetSite][ntt.workplace.v1alpha2.GetSite]
type GetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.Site
	Name *site.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *site.Site_FieldMask `protobuf:"bytes,3,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetSiteRequest) Reset() {
	*m = GetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetSiteRequest) ProtoMessage() {}

func (m *GetSiteRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetSiteRequest) GotenMessage() {}

// Deprecated, Use GetSiteRequest.ProtoReflect.Descriptor instead.
func (*GetSiteRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetSiteRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetSiteRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetSiteRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetSiteRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetSiteRequest) GetName() *site.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetSiteRequest) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetSiteRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetSiteRequest) SetName(fv *site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetSiteRequest"))
	}
	m.Name = fv
}

func (m *GetSiteRequest) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetSiteRequest"))
	}
	m.FieldMask = fv
}

func (m *GetSiteRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetSiteRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetSites][ntt.workplace.v1alpha2.BatchGetSites]
type BatchGetSitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of Sites
	Names []*site.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *site.Site_FieldMask `protobuf:"bytes,3,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetSitesRequest) Reset() {
	*m = BatchGetSitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetSitesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetSitesRequest) ProtoMessage() {}

func (m *BatchGetSitesRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetSitesRequest) GotenMessage() {}

// Deprecated, Use BatchGetSitesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetSitesRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetSitesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetSitesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetSitesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetSitesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetSitesRequest) GetNames() []*site.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetSitesRequest) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetSitesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetSitesRequest) SetNames(fv []*site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetSitesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetSitesRequest) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetSitesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetSitesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetSitesRequest"))
	}
	m.View = fv
}

// BatchGetSitesResponse
type BatchGetSitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found Sites
	Sites []*site.Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty" firestore:"sites"`
	// list of not found Sites
	Missing []*site.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetSitesResponse) Reset() {
	*m = BatchGetSitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetSitesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetSitesResponse) ProtoMessage() {}

func (m *BatchGetSitesResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetSitesResponse) GotenMessage() {}

// Deprecated, Use BatchGetSitesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetSitesResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetSitesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetSitesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetSitesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetSitesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetSitesResponse) GetSites() []*site.Site {
	if m != nil {
		return m.Sites
	}
	return nil
}

func (m *BatchGetSitesResponse) GetMissing() []*site.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetSitesResponse) SetSites(fv []*site.Site) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sites", "BatchGetSitesResponse"))
	}
	m.Sites = fv
}

func (m *BatchGetSitesResponse) SetMissing(fv []*site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetSitesResponse"))
	}
	m.Missing = fv
}

// Request message for method [ListSites][ntt.workplace.v1alpha2.ListSites]
type ListSitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.workplace.v1alpha2.Site
	Parent *site.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Sites than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListSitesResponse.next_page_token][ntt.workplace.v1alpha2.ListSitesResponse.next_page_token]
	PageToken *site.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *site.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *site.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *site.Site_FieldMask `protobuf:"bytes,6,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListSitesRequest) Reset() {
	*m = ListSitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListSitesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListSitesRequest) ProtoMessage() {}

func (m *ListSitesRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListSitesRequest) GotenMessage() {}

// Deprecated, Use ListSitesRequest.ProtoReflect.Descriptor instead.
func (*ListSitesRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListSitesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListSitesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListSitesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListSitesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListSitesRequest) GetParent() *site.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListSitesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListSitesRequest) GetPageToken() *site.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListSitesRequest) GetOrderBy() *site.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListSitesRequest) GetFilter() *site.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListSitesRequest) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListSitesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListSitesRequest) SetParent(fv *site.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListSitesRequest"))
	}
	m.Parent = fv
}

func (m *ListSitesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListSitesRequest"))
	}
	m.PageSize = fv
}

func (m *ListSitesRequest) SetPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListSitesRequest"))
	}
	m.PageToken = fv
}

func (m *ListSitesRequest) SetOrderBy(fv *site.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListSitesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListSitesRequest) SetFilter(fv *site.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListSitesRequest"))
	}
	m.Filter = fv
}

func (m *ListSitesRequest) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListSitesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListSitesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListSitesRequest"))
	}
	m.View = fv
}

// Request message for method [ListSites][ntt.workplace.v1alpha2.ListSites]
type ListSitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Sites
	Sites []*site.Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty" firestore:"sites"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListSitesRequest.page_token][ntt.workplace.v1alpha2.ListSitesRequest.page_token]
	PrevPageToken *site.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListSitesRequest.page_token][ntt.workplace.v1alpha2.ListSitesRequest.page_token]
	NextPageToken *site.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListSitesResponse) Reset() {
	*m = ListSitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListSitesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListSitesResponse) ProtoMessage() {}

func (m *ListSitesResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListSitesResponse) GotenMessage() {}

// Deprecated, Use ListSitesResponse.ProtoReflect.Descriptor instead.
func (*ListSitesResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListSitesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListSitesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListSitesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListSitesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListSitesResponse) GetSites() []*site.Site {
	if m != nil {
		return m.Sites
	}
	return nil
}

func (m *ListSitesResponse) GetPrevPageToken() *site.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListSitesResponse) GetNextPageToken() *site.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListSitesResponse) SetSites(fv []*site.Site) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sites", "ListSitesResponse"))
	}
	m.Sites = fv
}

func (m *ListSitesResponse) SetPrevPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListSitesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListSitesResponse) SetNextPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListSitesResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method [WatchSite][ntt.workplace.v1alpha2.WatchSite]
type WatchSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.workplace.v1alpha2.Site
	Name *site.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *site.Site_FieldMask `protobuf:"bytes,2,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchSiteRequest) Reset() {
	*m = WatchSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSiteRequest) ProtoMessage() {}

func (m *WatchSiteRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSiteRequest) GotenMessage() {}

// Deprecated, Use WatchSiteRequest.ProtoReflect.Descriptor instead.
func (*WatchSiteRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchSiteRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSiteRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSiteRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSiteRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSiteRequest) GetName() *site.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchSiteRequest) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchSiteRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchSiteRequest) SetName(fv *site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchSiteRequest"))
	}
	m.Name = fv
}

func (m *WatchSiteRequest) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchSiteRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchSiteRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchSiteRequest"))
	}
	m.View = fv
}

// WatchSiteResponse
type WatchSiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *site.SiteChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchSiteResponse) Reset() {
	*m = WatchSiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSiteResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSiteResponse) ProtoMessage() {}

func (m *WatchSiteResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSiteResponse) GotenMessage() {}

// Deprecated, Use WatchSiteResponse.ProtoReflect.Descriptor instead.
func (*WatchSiteResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchSiteResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSiteResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSiteResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSiteResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSiteResponse) GetChange() *site.SiteChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchSiteResponse) SetChange(fv *site.SiteChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchSiteResponse"))
	}
	m.Change = fv
}

// Request message for method [WatchSites][ntt.workplace.v1alpha2.WatchSites]
type WatchSitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.workplace.v1alpha2.Site
	Parent *site.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Sites than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *site.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *site.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *site.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to Site that don't affect any
	// of masked fields won't be sent back.
	FieldMask *site.Site_FieldMask `protobuf:"bytes,6,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// Site that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchSitesRequest) Reset() {
	*m = WatchSitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSitesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSitesRequest) ProtoMessage() {}

func (m *WatchSitesRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSitesRequest) GotenMessage() {}

// Deprecated, Use WatchSitesRequest.ProtoReflect.Descriptor instead.
func (*WatchSitesRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchSitesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSitesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSitesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSitesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSitesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchSitesRequest) GetParent() *site.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchSitesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchSitesRequest) GetPageToken() *site.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchSitesRequest) GetOrderBy() *site.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchSitesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchSitesRequest) GetStartingTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchSitesRequest) GetFilter() *site.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchSitesRequest) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchSitesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchSitesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchSitesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchSitesRequest"))
	}
	m.Type = fv
}

func (m *WatchSitesRequest) SetParent(fv *site.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchSitesRequest"))
	}
	m.Parent = fv
}

func (m *WatchSitesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchSitesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchSitesRequest) SetPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchSitesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchSitesRequest) SetOrderBy(fv *site.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchSitesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchSitesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchSitesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchSitesRequest) SetStartingTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchSitesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchSitesRequest) SetFilter(fv *site.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchSitesRequest"))
	}
	m.Filter = fv
}

func (m *WatchSitesRequest) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchSitesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchSitesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchSitesRequest"))
	}
	m.View = fv
}

func (m *WatchSitesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchSitesRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchSitesResponse
type WatchSitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of Sites
	SiteChanges []*site.SiteChange `protobuf:"bytes,2,rep,name=site_changes,json=siteChanges,proto3" json:"site_changes,omitempty" firestore:"siteChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All Sites will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchSitesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (Sites will contains changes of
	// type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchSitesResponse) Reset() {
	*m = WatchSitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSitesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSitesResponse) ProtoMessage() {}

func (m *WatchSitesResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSitesResponse) GotenMessage() {}

// Deprecated, Use WatchSitesResponse.ProtoReflect.Descriptor instead.
func (*WatchSitesResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchSitesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSitesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSitesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSitesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSitesResponse) GetSiteChanges() []*site.SiteChange {
	if m != nil {
		return m.SiteChanges
	}
	return nil
}

func (m *WatchSitesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchSitesResponse) GetPageTokenChange() *WatchSitesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchSitesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchSitesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchSitesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchSitesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchSitesResponse) SetSiteChanges(fv []*site.SiteChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SiteChanges", "WatchSitesResponse"))
	}
	m.SiteChanges = fv
}

func (m *WatchSitesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchSitesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchSitesResponse) SetPageTokenChange(fv *WatchSitesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchSitesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchSitesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchSitesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchSitesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchSitesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchSitesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchSitesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchSitesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchSitesResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method [CreateSite][ntt.workplace.v1alpha2.CreateSite]
type CreateSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.workplace.v1alpha2.Site
	Parent *site.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Site resource body
	Site *site.Site `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty" firestore:"site"`
}

func (m *CreateSiteRequest) Reset() {
	*m = CreateSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateSiteRequest) ProtoMessage() {}

func (m *CreateSiteRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateSiteRequest) GotenMessage() {}

// Deprecated, Use CreateSiteRequest.ProtoReflect.Descriptor instead.
func (*CreateSiteRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateSiteRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateSiteRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateSiteRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateSiteRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateSiteRequest) GetParent() *site.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateSiteRequest) GetSite() *site.Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *CreateSiteRequest) SetParent(fv *site.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateSiteRequest"))
	}
	m.Parent = fv
}

func (m *CreateSiteRequest) SetSite(fv *site.Site) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Site", "CreateSiteRequest"))
	}
	m.Site = fv
}

// Request message for method [UpdateSite][ntt.workplace.v1alpha2.UpdateSite]
type UpdateSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Site resource body
	Site *site.Site `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty" firestore:"site"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *site.Site_FieldMask `protobuf:"bytes,3,opt,customtype=Site_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateSiteRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateSiteRequest) Reset() {
	*m = UpdateSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateSiteRequest) ProtoMessage() {}

func (m *UpdateSiteRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateSiteRequest) GotenMessage() {}

// Deprecated, Use UpdateSiteRequest.ProtoReflect.Descriptor instead.
func (*UpdateSiteRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateSiteRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateSiteRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateSiteRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateSiteRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateSiteRequest) GetSite() *site.Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *UpdateSiteRequest) GetUpdateMask() *site.Site_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateSiteRequest) GetCas() *UpdateSiteRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateSiteRequest) SetSite(fv *site.Site) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Site", "UpdateSiteRequest"))
	}
	m.Site = fv
}

func (m *UpdateSiteRequest) SetUpdateMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateSiteRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateSiteRequest) SetCas(fv *UpdateSiteRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateSiteRequest"))
	}
	m.Cas = fv
}

// Request message for method [DeleteSite][ntt.workplace.v1alpha2.DeleteSite]
type DeleteSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.Site
	Name *site.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteSiteRequest) Reset() {
	*m = DeleteSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteSiteRequest) ProtoMessage() {}

func (m *DeleteSiteRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteSiteRequest) GotenMessage() {}

// Deprecated, Use DeleteSiteRequest.ProtoReflect.Descriptor instead.
func (*DeleteSiteRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteSiteRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteSiteRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteSiteRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteSiteRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteSiteRequest) GetName() *site.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteSiteRequest) SetName(fv *site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteSiteRequest"))
	}
	m.Name = fv
}

type WatchSitesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *site.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *site.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchSitesResponse_PageTokenChange) Reset() {
	*m = WatchSitesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSitesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSitesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchSitesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSitesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchSitesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchSitesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchSitesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSitesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSitesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSitesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSitesResponse_PageTokenChange) GetPrevPageToken() *site.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchSitesResponse_PageTokenChange) GetNextPageToken() *site.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchSitesResponse_PageTokenChange) SetPrevPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchSitesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchSitesResponse_PageTokenChange) SetNextPageToken(fv *site.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchSitesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateSiteRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *site.Site `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *site.Site_FieldMask `protobuf:"bytes,2,opt,customtype=Site_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateSiteRequest_CAS) Reset() {
	*m = UpdateSiteRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateSiteRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateSiteRequest_CAS) ProtoMessage() {}

func (m *UpdateSiteRequest_CAS) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_site_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateSiteRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateSiteRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateSiteRequest_CAS) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_site_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateSiteRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateSiteRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateSiteRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateSiteRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateSiteRequest_CAS) GetConditionalState() *site.Site {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateSiteRequest_CAS) GetFieldMask() *site.Site_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateSiteRequest_CAS) SetConditionalState(fv *site.Site) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateSiteRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateSiteRequest_CAS) SetFieldMask(fv *site.Site_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateSiteRequest_CAS"))
	}
	m.FieldMask = fv
}

var workplace_proto_v1alpha2_site_service_proto preflect.FileDescriptor

var workplace_proto_v1alpha2_site_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0xba, 0x9d, 0x22, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xb2,
	0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x73, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xd0, 0x02, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x3a, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06,
	0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x2a, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x1a, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0xb3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x34, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06,
	0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x4f, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xa2, 0x04, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x42, 0x06, 0x0a,
	0x04, 0x53, 0x69, 0x74, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x2a,
	0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x32, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27,
	0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x66, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x7d, 0x0a, 0x0f, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda,
	0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xda, 0x21, 0x08, 0x42, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0xba, 0x9d, 0x22,
	0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8,
	0xd5, 0x22, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x17, 0xc2, 0x85, 0x2c, 0x13, 0x32,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5,
	0x22, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32,
	0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52,
	0x03, 0x63, 0x61, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x49, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a,
	0x04, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x3a, 0x1a, 0xc2, 0x85, 0x2c, 0x16, 0x32, 0x09, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0xba, 0x9d, 0x22,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x93, 0x0f, 0x0a, 0x0b, 0x53, 0x69,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22, 0x7d, 0x82, 0xdb, 0x21,
	0x1b, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xe5, 0x01, 0x0a, 0x0d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xdb, 0x21, 0x24, 0x0a,
	0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20,
	0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x07, 0x12, 0x05, 0x73, 0x69,
	0x74, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x21, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5,
	0x22, 0x00, 0x12, 0xeb, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xdb, 0x21, 0x23, 0x0a, 0x04, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x07, 0x12, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0xa2,
	0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x92, 0x97, 0x22, 0x1e, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00,
	0x12, 0xee, 0x01, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xdb, 0x21, 0x1f, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30,
	0x01, 0x12, 0xff, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x04,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a,
	0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x0e, 0x12, 0x0c, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22,
	0x00, 0x30, 0x01, 0x12, 0xf1, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22, 0x99, 0x01, 0x82, 0xdb,
	0x21, 0x28, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x2a, 0x0e, 0x12, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x2d, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x92, 0x97, 0x22, 0x20, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xc8,
	0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xef, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22,
	0x97, 0x01, 0x82, 0xdb, 0x21, 0x1e, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2a, 0x06, 0x12, 0x04, 0x73, 0x69, 0x74, 0x65, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x3a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x32, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x23, 0x0a, 0x09,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7f, 0x82, 0xdb, 0x21,
	0x16, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x1a, 0x31, 0xca, 0x41,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42,
	0xcd, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x41, 0x0a, 0x0b, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x8a, 0xff, 0xd0, 0x02,
	0x41, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69,
	0x74, 0x65, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x42, 0x10, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x3b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x45, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha2_site_service_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha2_site_service_proto_rawDescData = workplace_proto_v1alpha2_site_service_proto_rawDesc
)

func workplace_proto_v1alpha2_site_service_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha2_site_service_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha2_site_service_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha2_site_service_proto_rawDescData)
	})
	return workplace_proto_v1alpha2_site_service_proto_rawDescData
}

var workplace_proto_v1alpha2_site_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var workplace_proto_v1alpha2_site_service_proto_goTypes = []interface{}{
	(*GetSiteRequest)(nil),                     // 0: ntt.workplace.v1alpha2.GetSiteRequest
	(*BatchGetSitesRequest)(nil),               // 1: ntt.workplace.v1alpha2.BatchGetSitesRequest
	(*BatchGetSitesResponse)(nil),              // 2: ntt.workplace.v1alpha2.BatchGetSitesResponse
	(*ListSitesRequest)(nil),                   // 3: ntt.workplace.v1alpha2.ListSitesRequest
	(*ListSitesResponse)(nil),                  // 4: ntt.workplace.v1alpha2.ListSitesResponse
	(*WatchSiteRequest)(nil),                   // 5: ntt.workplace.v1alpha2.WatchSiteRequest
	(*WatchSiteResponse)(nil),                  // 6: ntt.workplace.v1alpha2.WatchSiteResponse
	(*WatchSitesRequest)(nil),                  // 7: ntt.workplace.v1alpha2.WatchSitesRequest
	(*WatchSitesResponse)(nil),                 // 8: ntt.workplace.v1alpha2.WatchSitesResponse
	(*CreateSiteRequest)(nil),                  // 9: ntt.workplace.v1alpha2.CreateSiteRequest
	(*UpdateSiteRequest)(nil),                  // 10: ntt.workplace.v1alpha2.UpdateSiteRequest
	(*DeleteSiteRequest)(nil),                  // 11: ntt.workplace.v1alpha2.DeleteSiteRequest
	(*WatchSitesResponse_PageTokenChange)(nil), // 12: ntt.workplace.v1alpha2.WatchSitesResponse.PageTokenChange
	(*UpdateSiteRequest_CAS)(nil),              // 13: ntt.workplace.v1alpha2.UpdateSiteRequest.CAS
	(*site.Site_FieldMask)(nil),                // 14: ntt.workplace.v1alpha2.Site_FieldMask
	(view.View)(0),                             // 15: goten.view.View
	(*site.Site)(nil),                          // 16: ntt.workplace.v1alpha2.Site
	(*site.SiteChange)(nil),                    // 17: ntt.workplace.v1alpha2.SiteChange
	(watch_type.WatchType)(0),                  // 18: goten.watch_type.WatchType
	(*timestamp.Timestamp)(nil),                // 19: google.protobuf.Timestamp
	(*empty.Empty)(nil),                        // 20: google.protobuf.Empty
}
var workplace_proto_v1alpha2_site_service_proto_depIdxs = []int32{
	14, // 0: ntt.workplace.v1alpha2.GetSiteRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	15, // 1: ntt.workplace.v1alpha2.GetSiteRequest.view:type_name -> goten.view.View
	14, // 2: ntt.workplace.v1alpha2.BatchGetSitesRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	15, // 3: ntt.workplace.v1alpha2.BatchGetSitesRequest.view:type_name -> goten.view.View
	16, // 4: ntt.workplace.v1alpha2.BatchGetSitesResponse.sites:type_name -> ntt.workplace.v1alpha2.Site
	14, // 5: ntt.workplace.v1alpha2.ListSitesRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	15, // 6: ntt.workplace.v1alpha2.ListSitesRequest.view:type_name -> goten.view.View
	16, // 7: ntt.workplace.v1alpha2.ListSitesResponse.sites:type_name -> ntt.workplace.v1alpha2.Site
	14, // 8: ntt.workplace.v1alpha2.WatchSiteRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	15, // 9: ntt.workplace.v1alpha2.WatchSiteRequest.view:type_name -> goten.view.View
	17, // 10: ntt.workplace.v1alpha2.WatchSiteResponse.change:type_name -> ntt.workplace.v1alpha2.SiteChange
	18, // 11: ntt.workplace.v1alpha2.WatchSitesRequest.type:type_name -> goten.watch_type.WatchType
	19, // 12: ntt.workplace.v1alpha2.WatchSitesRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.workplace.v1alpha2.WatchSitesRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	15, // 14: ntt.workplace.v1alpha2.WatchSitesRequest.view:type_name -> goten.view.View
	17, // 15: ntt.workplace.v1alpha2.WatchSitesResponse.site_changes:type_name -> ntt.workplace.v1alpha2.SiteChange
	12, // 16: ntt.workplace.v1alpha2.WatchSitesResponse.page_token_change:type_name -> ntt.workplace.v1alpha2.WatchSitesResponse.PageTokenChange
	16, // 17: ntt.workplace.v1alpha2.CreateSiteRequest.site:type_name -> ntt.workplace.v1alpha2.Site
	16, // 18: ntt.workplace.v1alpha2.UpdateSiteRequest.site:type_name -> ntt.workplace.v1alpha2.Site
	14, // 19: ntt.workplace.v1alpha2.UpdateSiteRequest.update_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	13, // 20: ntt.workplace.v1alpha2.UpdateSiteRequest.cas:type_name -> ntt.workplace.v1alpha2.UpdateSiteRequest.CAS
	16, // 21: ntt.workplace.v1alpha2.UpdateSiteRequest.CAS.conditional_state:type_name -> ntt.workplace.v1alpha2.Site
	14, // 22: ntt.workplace.v1alpha2.UpdateSiteRequest.CAS.field_mask:type_name -> ntt.workplace.v1alpha2.Site_FieldMask
	0,  // 23: ntt.workplace.v1alpha2.SiteService.GetSite:input_type -> ntt.workplace.v1alpha2.GetSiteRequest
	1,  // 24: ntt.workplace.v1alpha2.SiteService.BatchGetSites:input_type -> ntt.workplace.v1alpha2.BatchGetSitesRequest
	3,  // 25: ntt.workplace.v1alpha2.SiteService.ListSites:input_type -> ntt.workplace.v1alpha2.ListSitesRequest
	5,  // 26: ntt.workplace.v1alpha2.SiteService.WatchSite:input_type -> ntt.workplace.v1alpha2.WatchSiteRequest
	7,  // 27: ntt.workplace.v1alpha2.SiteService.WatchSites:input_type -> ntt.workplace.v1alpha2.WatchSitesRequest
	9,  // 28: ntt.workplace.v1alpha2.SiteService.CreateSite:input_type -> ntt.workplace.v1alpha2.CreateSiteRequest
	10, // 29: ntt.workplace.v1alpha2.SiteService.UpdateSite:input_type -> ntt.workplace.v1alpha2.UpdateSiteRequest
	11, // 30: ntt.workplace.v1alpha2.SiteService.DeleteSite:input_type -> ntt.workplace.v1alpha2.DeleteSiteRequest
	16, // 31: ntt.workplace.v1alpha2.SiteService.GetSite:output_type -> ntt.workplace.v1alpha2.Site
	2,  // 32: ntt.workplace.v1alpha2.SiteService.BatchGetSites:output_type -> ntt.workplace.v1alpha2.BatchGetSitesResponse
	4,  // 33: ntt.workplace.v1alpha2.SiteService.ListSites:output_type -> ntt.workplace.v1alpha2.ListSitesResponse
	6,  // 34: ntt.workplace.v1alpha2.SiteService.WatchSite:output_type -> ntt.workplace.v1alpha2.WatchSiteResponse
	8,  // 35: ntt.workplace.v1alpha2.SiteService.WatchSites:output_type -> ntt.workplace.v1alpha2.WatchSitesResponse
	16, // 36: ntt.workplace.v1alpha2.SiteService.CreateSite:output_type -> ntt.workplace.v1alpha2.Site
	16, // 37: ntt.workplace.v1alpha2.SiteService.UpdateSite:output_type -> ntt.workplace.v1alpha2.Site
	20, // 38: ntt.workplace.v1alpha2.SiteService.DeleteSite:output_type -> google.protobuf.Empty
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha2_site_service_proto_init() }
func workplace_proto_v1alpha2_site_service_proto_init() {
	if workplace_proto_v1alpha2_site_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha2_site_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSitesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_site_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha2_site_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           workplace_proto_v1alpha2_site_service_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha2_site_service_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha2_site_service_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha2_site_service_proto = out.File
	workplace_proto_v1alpha2_site_service_proto_rawDesc = nil
	workplace_proto_v1alpha2_site_service_proto_goTypes = nil
	workplace_proto_v1alpha2_site_service_proto_depIdxs = nil
}
