// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/site_service.proto
// DO NOT EDIT!!!

package site_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &site.Site{}
)

func (o *GetSiteRequest) GotenObjectExt() {}

func (o *GetSiteRequest) MakeFullFieldMask() *GetSiteRequest_FieldMask {
	return FullGetSiteRequest_FieldMask()
}

func (o *GetSiteRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetSiteRequest_FieldMask()
}

func (o *GetSiteRequest) MakeDiffFieldMask(other *GetSiteRequest) *GetSiteRequest_FieldMask {
	if o == nil && other == nil {
		return &GetSiteRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetSiteRequest_FieldMask()
	}

	res := &GetSiteRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetSiteRequest_FieldTerminalPath{selector: GetSiteRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetSiteRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetSiteRequest))
}

func (o *GetSiteRequest) Clone() *GetSiteRequest {
	if o == nil {
		return nil
	}
	result := &GetSiteRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &site.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	result.View = o.View
	return result
}

func (o *GetSiteRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetSiteRequest) Merge(source *GetSiteRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &site.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetSiteRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetSiteRequest))
}

func (o *BatchGetSitesRequest) GotenObjectExt() {}

func (o *BatchGetSitesRequest) MakeFullFieldMask() *BatchGetSitesRequest_FieldMask {
	return FullBatchGetSitesRequest_FieldMask()
}

func (o *BatchGetSitesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSitesRequest_FieldMask()
}

func (o *BatchGetSitesRequest) MakeDiffFieldMask(other *BatchGetSitesRequest) *BatchGetSitesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSitesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSitesRequest_FieldMask()
	}

	res := &BatchGetSitesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetSitesRequest_FieldTerminalPath{selector: BatchGetSitesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetSitesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSitesRequest))
}

func (o *BatchGetSitesRequest) Clone() *BatchGetSitesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetSitesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &site.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*site.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &site.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetSitesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSitesRequest) Merge(source *BatchGetSitesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &site.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *site.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &site.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetSitesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSitesRequest))
}

func (o *BatchGetSitesResponse) GotenObjectExt() {}

func (o *BatchGetSitesResponse) MakeFullFieldMask() *BatchGetSitesResponse_FieldMask {
	return FullBatchGetSitesResponse_FieldMask()
}

func (o *BatchGetSitesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSitesResponse_FieldMask()
}

func (o *BatchGetSitesResponse) MakeDiffFieldMask(other *BatchGetSitesResponse) *BatchGetSitesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSitesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSitesResponse_FieldMask()
	}

	res := &BatchGetSitesResponse_FieldMask{}

	if len(o.GetSites()) == len(other.GetSites()) {
		for i, lValue := range o.GetSites() {
			rValue := other.GetSites()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorSites})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorSites})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSitesResponse_FieldTerminalPath{selector: BatchGetSitesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetSitesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSitesResponse))
}

func (o *BatchGetSitesResponse) Clone() *BatchGetSitesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetSitesResponse{}
	result.Sites = make([]*site.Site, len(o.Sites))
	for i, sourceValue := range o.Sites {
		result.Sites[i] = sourceValue.Clone()
	}
	result.Missing = make([]*site.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &site.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetSitesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSitesResponse) Merge(source *BatchGetSitesResponse) {
	for _, sourceValue := range source.GetSites() {
		exists := false
		for _, currentValue := range o.Sites {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *site.Site
			if sourceValue != nil {
				newDstElement = new(site.Site)
				newDstElement.Merge(sourceValue)
			}
			o.Sites = append(o.Sites, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *site.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &site.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetSitesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSitesResponse))
}

func (o *ListSitesRequest) GotenObjectExt() {}

func (o *ListSitesRequest) MakeFullFieldMask() *ListSitesRequest_FieldMask {
	return FullListSitesRequest_FieldMask()
}

func (o *ListSitesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSitesRequest_FieldMask()
}

func (o *ListSitesRequest) MakeDiffFieldMask(other *ListSitesRequest) *ListSitesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListSitesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSitesRequest_FieldMask()
	}

	res := &ListSitesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListSitesRequest_FieldTerminalPath{selector: ListSitesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListSitesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSitesRequest))
}

func (o *ListSitesRequest) Clone() *ListSitesRequest {
	if o == nil {
		return nil
	}
	result := &ListSitesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &site.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &site.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &site.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &site.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	result.View = o.View
	return result
}

func (o *ListSitesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSitesRequest) Merge(source *ListSitesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &site.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &site.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &site.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &site.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListSitesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSitesRequest))
}

func (o *ListSitesResponse) GotenObjectExt() {}

func (o *ListSitesResponse) MakeFullFieldMask() *ListSitesResponse_FieldMask {
	return FullListSitesResponse_FieldMask()
}

func (o *ListSitesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSitesResponse_FieldMask()
}

func (o *ListSitesResponse) MakeDiffFieldMask(other *ListSitesResponse) *ListSitesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListSitesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSitesResponse_FieldMask()
	}

	res := &ListSitesResponse_FieldMask{}

	if len(o.GetSites()) == len(other.GetSites()) {
		for i, lValue := range o.GetSites() {
			rValue := other.GetSites()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorSites})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorSites})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListSitesResponse_FieldTerminalPath{selector: ListSitesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListSitesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSitesResponse))
}

func (o *ListSitesResponse) Clone() *ListSitesResponse {
	if o == nil {
		return nil
	}
	result := &ListSitesResponse{}
	result.Sites = make([]*site.Site, len(o.Sites))
	for i, sourceValue := range o.Sites {
		result.Sites[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &site.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &site.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListSitesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSitesResponse) Merge(source *ListSitesResponse) {
	for _, sourceValue := range source.GetSites() {
		exists := false
		for _, currentValue := range o.Sites {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *site.Site
			if sourceValue != nil {
				newDstElement = new(site.Site)
				newDstElement.Merge(sourceValue)
			}
			o.Sites = append(o.Sites, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &site.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &site.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListSitesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSitesResponse))
}

func (o *WatchSiteRequest) GotenObjectExt() {}

func (o *WatchSiteRequest) MakeFullFieldMask() *WatchSiteRequest_FieldMask {
	return FullWatchSiteRequest_FieldMask()
}

func (o *WatchSiteRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSiteRequest_FieldMask()
}

func (o *WatchSiteRequest) MakeDiffFieldMask(other *WatchSiteRequest) *WatchSiteRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSiteRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSiteRequest_FieldMask()
	}

	res := &WatchSiteRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSiteRequest_FieldTerminalPath{selector: WatchSiteRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchSiteRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSiteRequest))
}

func (o *WatchSiteRequest) Clone() *WatchSiteRequest {
	if o == nil {
		return nil
	}
	result := &WatchSiteRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &site.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchSiteRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSiteRequest) Merge(source *WatchSiteRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &site.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchSiteRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSiteRequest))
}

func (o *WatchSiteResponse) GotenObjectExt() {}

func (o *WatchSiteResponse) MakeFullFieldMask() *WatchSiteResponse_FieldMask {
	return FullWatchSiteResponse_FieldMask()
}

func (o *WatchSiteResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSiteResponse_FieldMask()
}

func (o *WatchSiteResponse) MakeDiffFieldMask(other *WatchSiteResponse) *WatchSiteResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSiteResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSiteResponse_FieldMask()
	}

	res := &WatchSiteResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchSiteResponse_FieldTerminalPath{selector: WatchSiteResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchSiteResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSiteResponse))
}

func (o *WatchSiteResponse) Clone() *WatchSiteResponse {
	if o == nil {
		return nil
	}
	result := &WatchSiteResponse{}
	result.Change = proto.Clone(o.Change).(*site.SiteChange)
	return result
}

func (o *WatchSiteResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSiteResponse) Merge(source *WatchSiteResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(site.SiteChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchSiteResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSiteResponse))
}

func (o *WatchSitesRequest) GotenObjectExt() {}

func (o *WatchSitesRequest) MakeFullFieldMask() *WatchSitesRequest_FieldMask {
	return FullWatchSitesRequest_FieldMask()
}

func (o *WatchSitesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSitesRequest_FieldMask()
}

func (o *WatchSitesRequest) MakeDiffFieldMask(other *WatchSitesRequest) *WatchSitesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSitesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSitesRequest_FieldMask()
	}

	res := &WatchSitesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchSitesRequest_FieldTerminalPath{selector: WatchSitesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchSitesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSitesRequest))
}

func (o *WatchSitesRequest) Clone() *WatchSitesRequest {
	if o == nil {
		return nil
	}
	result := &WatchSitesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &site.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &site.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &site.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &site.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchSitesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSitesRequest) Merge(source *WatchSitesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &site.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &site.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &site.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &site.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchSitesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSitesRequest))
}

func (o *WatchSitesResponse) GotenObjectExt() {}

func (o *WatchSitesResponse) MakeFullFieldMask() *WatchSitesResponse_FieldMask {
	return FullWatchSitesResponse_FieldMask()
}

func (o *WatchSitesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSitesResponse_FieldMask()
}

func (o *WatchSitesResponse) MakeDiffFieldMask(other *WatchSitesResponse) *WatchSitesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSitesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSitesResponse_FieldMask()
	}

	res := &WatchSitesResponse_FieldMask{}

	if len(o.GetSiteChanges()) == len(other.GetSiteChanges()) {
		for i, lValue := range o.GetSiteChanges() {
			rValue := other.GetSiteChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorSiteChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorSiteChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchSitesResponse_FieldSubPath{selector: WatchSitesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchSitesResponse_FieldTerminalPath{selector: WatchSitesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchSitesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSitesResponse))
}

func (o *WatchSitesResponse) Clone() *WatchSitesResponse {
	if o == nil {
		return nil
	}
	result := &WatchSitesResponse{}
	result.SiteChanges = make([]*site.SiteChange, len(o.SiteChanges))
	for i, sourceValue := range o.SiteChanges {
		result.SiteChanges[i] = proto.Clone(sourceValue).(*site.SiteChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchSitesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSitesResponse) Merge(source *WatchSitesResponse) {
	for _, sourceValue := range source.GetSiteChanges() {
		exists := false
		for _, currentValue := range o.SiteChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *site.SiteChange
			if sourceValue != nil {
				newDstElement = new(site.SiteChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.SiteChanges = append(o.SiteChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchSitesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchSitesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSitesResponse))
}

func (o *WatchSitesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchSitesResponse_PageTokenChange) MakeFullFieldMask() *WatchSitesResponse_PageTokenChange_FieldMask {
	return FullWatchSitesResponse_PageTokenChange_FieldMask()
}

func (o *WatchSitesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSitesResponse_PageTokenChange_FieldMask()
}

func (o *WatchSitesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchSitesResponse_PageTokenChange) *WatchSitesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchSitesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSitesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchSitesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchSitesResponsePageTokenChange_FieldTerminalPath{selector: WatchSitesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchSitesResponsePageTokenChange_FieldTerminalPath{selector: WatchSitesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchSitesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSitesResponse_PageTokenChange))
}

func (o *WatchSitesResponse_PageTokenChange) Clone() *WatchSitesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchSitesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &site.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &site.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchSitesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSitesResponse_PageTokenChange) Merge(source *WatchSitesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &site.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &site.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchSitesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSitesResponse_PageTokenChange))
}

func (o *CreateSiteRequest) GotenObjectExt() {}

func (o *CreateSiteRequest) MakeFullFieldMask() *CreateSiteRequest_FieldMask {
	return FullCreateSiteRequest_FieldMask()
}

func (o *CreateSiteRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateSiteRequest_FieldMask()
}

func (o *CreateSiteRequest) MakeDiffFieldMask(other *CreateSiteRequest) *CreateSiteRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateSiteRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateSiteRequest_FieldMask()
	}

	res := &CreateSiteRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateSiteRequest_FieldTerminalPath{selector: CreateSiteRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetSite().MakeDiffFieldMask(other.GetSite())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateSiteRequest_FieldTerminalPath{selector: CreateSiteRequest_FieldPathSelectorSite})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateSiteRequest_FieldSubPath{selector: CreateSiteRequest_FieldPathSelectorSite, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateSiteRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateSiteRequest))
}

func (o *CreateSiteRequest) Clone() *CreateSiteRequest {
	if o == nil {
		return nil
	}
	result := &CreateSiteRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &site.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Site = o.Site.Clone()
	return result
}

func (o *CreateSiteRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateSiteRequest) Merge(source *CreateSiteRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &site.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetSite() != nil {
		if o.Site == nil {
			o.Site = new(site.Site)
		}
		o.Site.Merge(source.GetSite())
	}
}

func (o *CreateSiteRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateSiteRequest))
}

func (o *UpdateSiteRequest) GotenObjectExt() {}

func (o *UpdateSiteRequest) MakeFullFieldMask() *UpdateSiteRequest_FieldMask {
	return FullUpdateSiteRequest_FieldMask()
}

func (o *UpdateSiteRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSiteRequest_FieldMask()
}

func (o *UpdateSiteRequest) MakeDiffFieldMask(other *UpdateSiteRequest) *UpdateSiteRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateSiteRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSiteRequest_FieldMask()
	}

	res := &UpdateSiteRequest_FieldMask{}
	{
		subMask := o.GetSite().MakeDiffFieldMask(other.GetSite())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorSite})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSiteRequest_FieldSubPath{selector: UpdateSiteRequest_FieldPathSelectorSite, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSiteRequest_FieldTerminalPath{selector: UpdateSiteRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSiteRequest_FieldSubPath{selector: UpdateSiteRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateSiteRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSiteRequest))
}

func (o *UpdateSiteRequest) Clone() *UpdateSiteRequest {
	if o == nil {
		return nil
	}
	result := &UpdateSiteRequest{}
	result.Site = o.Site.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*site.Site_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateSiteRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSiteRequest) Merge(source *UpdateSiteRequest) {
	if source.GetSite() != nil {
		if o.Site == nil {
			o.Site = new(site.Site)
		}
		o.Site.Merge(source.GetSite())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateSiteRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateSiteRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSiteRequest))
}

func (o *UpdateSiteRequest_CAS) GotenObjectExt() {}

func (o *UpdateSiteRequest_CAS) MakeFullFieldMask() *UpdateSiteRequest_CAS_FieldMask {
	return FullUpdateSiteRequest_CAS_FieldMask()
}

func (o *UpdateSiteRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSiteRequest_CAS_FieldMask()
}

func (o *UpdateSiteRequest_CAS) MakeDiffFieldMask(other *UpdateSiteRequest_CAS) *UpdateSiteRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateSiteRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSiteRequest_CAS_FieldMask()
	}

	res := &UpdateSiteRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSiteRequestCAS_FieldTerminalPath{selector: UpdateSiteRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSiteRequestCAS_FieldSubPath{selector: UpdateSiteRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateSiteRequestCAS_FieldTerminalPath{selector: UpdateSiteRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateSiteRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSiteRequest_CAS))
}

func (o *UpdateSiteRequest_CAS) Clone() *UpdateSiteRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateSiteRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*site.Site_FieldMask)
	return result
}

func (o *UpdateSiteRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSiteRequest_CAS) Merge(source *UpdateSiteRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(site.Site)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(site.Site_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateSiteRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSiteRequest_CAS))
}

func (o *DeleteSiteRequest) GotenObjectExt() {}

func (o *DeleteSiteRequest) MakeFullFieldMask() *DeleteSiteRequest_FieldMask {
	return FullDeleteSiteRequest_FieldMask()
}

func (o *DeleteSiteRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteSiteRequest_FieldMask()
}

func (o *DeleteSiteRequest) MakeDiffFieldMask(other *DeleteSiteRequest) *DeleteSiteRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteSiteRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteSiteRequest_FieldMask()
	}

	res := &DeleteSiteRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteSiteRequest_FieldTerminalPath{selector: DeleteSiteRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteSiteRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteSiteRequest))
}

func (o *DeleteSiteRequest) Clone() *DeleteSiteRequest {
	if o == nil {
		return nil
	}
	result := &DeleteSiteRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &site.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteSiteRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteSiteRequest) Merge(source *DeleteSiteRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &site.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteSiteRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteSiteRequest))
}
