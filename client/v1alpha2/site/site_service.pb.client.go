// Code generated by protoc-gen-goten-client
// API: SiteService
// DO NOT EDIT!!!

package site_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &site.Site{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SiteServiceClient is the client API for SiteService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiteServiceClient interface {
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*site.Site, error)
	BatchGetSites(ctx context.Context, in *BatchGetSitesRequest, opts ...grpc.CallOption) (*BatchGetSitesResponse, error)
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
	WatchSite(ctx context.Context, in *WatchSiteRequest, opts ...grpc.CallOption) (WatchSiteClientStream, error)
	WatchSites(ctx context.Context, in *WatchSitesRequest, opts ...grpc.CallOption) (WatchSitesClientStream, error)
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*site.Site, error)
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*site.Site, error)
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSiteServiceClient(cc grpc.ClientConnInterface) SiteServiceClient {
	return &client{cc}
}

func (c *client) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*site.Site, error) {
	out := new(site.Site)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSites(ctx context.Context, in *BatchGetSitesRequest, opts ...grpc.CallOption) (*BatchGetSitesResponse, error) {
	out := new(BatchGetSitesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/BatchGetSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSite(ctx context.Context, in *WatchSiteRequest, opts ...grpc.CallOption) (WatchSiteClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSite",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.SiteService/WatchSite", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSiteWatchSiteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSiteClientStream interface {
	Recv() (*WatchSiteResponse, error)
	grpc.ClientStream
}

type watchSiteWatchSiteClient struct {
	grpc.ClientStream
}

func (x *watchSiteWatchSiteClient) Recv() (*WatchSiteResponse, error) {
	m := new(WatchSiteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSites(ctx context.Context, in *WatchSitesRequest, opts ...grpc.CallOption) (WatchSitesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSites",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.SiteService/WatchSites", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSitesWatchSitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSitesClientStream interface {
	Recv() (*WatchSitesResponse, error)
	grpc.ClientStream
}

type watchSitesWatchSitesClient struct {
	grpc.ClientStream
}

func (x *watchSitesWatchSitesClient) Recv() (*WatchSitesResponse, error) {
	m := new(WatchSitesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*site.Site, error) {
	out := new(site.Site)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/CreateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*site.Site, error) {
	out := new(site.Site)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/UpdateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.SiteService/DeleteSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
