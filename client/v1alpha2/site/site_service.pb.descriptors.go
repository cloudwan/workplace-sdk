// Code generated by protoc-gen-goten-client
// API: SiteService
// DO NOT EDIT!!!

package site_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &site.Site{}
)

var (
	descriptorsInitialized  bool
	siteServiceDescriptor   *SiteServiceDescriptor
	getSiteDescriptor       *GetSiteDescriptor
	batchGetSitesDescriptor *BatchGetSitesDescriptor
	listSitesDescriptor     *ListSitesDescriptor
	watchSiteDescriptor     *WatchSiteDescriptor
	watchSitesDescriptor    *WatchSitesDescriptor
	createSiteDescriptor    *CreateSiteDescriptor
	updateSiteDescriptor    *UpdateSiteDescriptor
	deleteSiteDescriptor    *DeleteSiteDescriptor
)

type GetSiteDescriptor struct{}

type GetSiteDescriptorClientMsgHandle struct{}

type GetSiteDescriptorServerMsgHandle struct{}

func (d *GetSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSiteRequest{}
}

func (d *GetSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *GetSiteDescriptor) IsUnary() bool {
	return true
}

func (d *GetSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSiteDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetSiteDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetSiteDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSiteDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSiteDescriptor) GetMethodName() string {
	return "GetSite"
}

func (d *GetSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/GetSite"
}

func (d *GetSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *GetSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *GetSiteDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *GetSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSiteDescriptorClientMsgHandle{}
}

func (d *GetSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSiteDescriptorServerMsgHandle{}
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*site.Name)(nil)
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetSiteDescriptor() *GetSiteDescriptor {
	return getSiteDescriptor
}

type BatchGetSitesDescriptor struct{}

type BatchGetSitesDescriptorClientMsgHandle struct{}

type BatchGetSitesDescriptorServerMsgHandle struct{}

func (d *BatchGetSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSitesRequest{}
}

func (d *BatchGetSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSitesResponse{}
}

func (d *BatchGetSitesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSitesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSitesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetSitesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetSitesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSitesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSitesDescriptor) GetMethodName() string {
	return "BatchGetSites"
}

func (d *BatchGetSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/BatchGetSites"
}

func (d *BatchGetSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *BatchGetSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *BatchGetSitesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *BatchGetSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSitesDescriptorClientMsgHandle{}
}

func (d *BatchGetSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSitesDescriptorServerMsgHandle{}
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(site.SiteNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (site.SiteNameList)(nil)
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetSites()
	list := make(site.SiteNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetSitesDescriptor() *BatchGetSitesDescriptor {
	return batchGetSitesDescriptor
}

type ListSitesDescriptor struct{}

type ListSitesDescriptorClientMsgHandle struct{}

type ListSitesDescriptorServerMsgHandle struct{}

func (d *ListSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSitesRequest{}
}

func (d *ListSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSitesResponse{}
}

func (d *ListSitesDescriptor) IsUnary() bool {
	return true
}

func (d *ListSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSitesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSitesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListSitesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListSitesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSitesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSitesDescriptor) GetMethodName() string {
	return "ListSites"
}

func (d *ListSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/ListSites"
}

func (d *ListSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *ListSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *ListSitesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *ListSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSitesDescriptorClientMsgHandle{}
}

func (d *ListSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSitesDescriptorServerMsgHandle{}
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetSites()
	list := make(site.SiteNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListSitesDescriptor() *ListSitesDescriptor {
	return listSitesDescriptor
}

type WatchSiteDescriptor struct{}

type WatchSiteDescriptorClientMsgHandle struct{}

type WatchSiteDescriptorServerMsgHandle struct{}

func (d *WatchSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSiteRequest{}
}

func (d *WatchSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSiteResponse{}
}

func (d *WatchSiteDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSiteDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSiteDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchSiteDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchSiteDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSiteDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSiteDescriptor) GetMethodName() string {
	return "WatchSite"
}

func (d *WatchSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/WatchSite"
}

func (d *WatchSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *WatchSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *WatchSiteDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *WatchSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSiteDescriptorClientMsgHandle{}
}

func (d *WatchSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSiteDescriptorServerMsgHandle{}
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*site.Name)(nil)
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchSiteResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *site.SiteChange_Added_:
			return tResChange.Added.GetSite().GetName()
		case *site.SiteChange_Modified_:
			return tResChange.Modified.GetName()
		case *site.SiteChange_Removed_:
			return tResChange.Removed.GetName()
		case *site.SiteChange_Current_:
			return tResChange.Current.GetSite().GetName()
		}
	}
	return (*site.Name)(nil)
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchSiteResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchSiteResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSiteDescriptor() *WatchSiteDescriptor {
	return watchSiteDescriptor
}

type WatchSitesDescriptor struct{}

type WatchSitesDescriptorClientMsgHandle struct{}

type WatchSitesDescriptorServerMsgHandle struct{}

func (d *WatchSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSitesRequest{}
}

func (d *WatchSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSitesResponse{}
}

func (d *WatchSitesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSitesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSitesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchSitesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchSitesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSitesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSitesDescriptor) GetMethodName() string {
	return "WatchSites"
}

func (d *WatchSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/WatchSites"
}

func (d *WatchSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *WatchSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *WatchSitesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *WatchSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSitesDescriptorClientMsgHandle{}
}

func (d *WatchSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSitesDescriptorServerMsgHandle{}
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*site.ParentName)(nil)
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetSiteChanges()
	list := make(site.SiteNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *site.SiteChange_Added_:
			list = append(list, tResChange.Added.GetSite().GetName())
		case *site.SiteChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *site.SiteChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *site.SiteChange_Current_:
			list = append(list, tResChange.Current.GetSite().GetName())
		}
	}
	return list
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSitesDescriptor() *WatchSitesDescriptor {
	return watchSitesDescriptor
}

type CreateSiteDescriptor struct{}

type CreateSiteDescriptorClientMsgHandle struct{}

type CreateSiteDescriptorServerMsgHandle struct{}

func (d *CreateSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSiteRequest{}
}

func (d *CreateSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *CreateSiteDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSiteDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateSiteDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateSiteDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateSiteDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSiteDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSiteDescriptor) GetMethodName() string {
	return "CreateSite"
}

func (d *CreateSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/CreateSite"
}

func (d *CreateSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *CreateSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *CreateSiteDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *CreateSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSiteDescriptorClientMsgHandle{}
}

func (d *CreateSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSiteDescriptorServerMsgHandle{}
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetSite().GetName()
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*site.ParentName)(nil)
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateSiteDescriptor() *CreateSiteDescriptor {
	return createSiteDescriptor
}

type UpdateSiteDescriptor struct{}

type UpdateSiteDescriptorClientMsgHandle struct{}

type UpdateSiteDescriptorServerMsgHandle struct{}

func (d *UpdateSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSiteRequest{}
}

func (d *UpdateSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *UpdateSiteDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateSiteDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateSiteDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSiteDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSiteDescriptor) GetMethodName() string {
	return "UpdateSite"
}

func (d *UpdateSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/UpdateSite"
}

func (d *UpdateSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *UpdateSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *UpdateSiteDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *UpdateSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSiteDescriptorClientMsgHandle{}
}

func (d *UpdateSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSiteDescriptorServerMsgHandle{}
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetSite().GetName()
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateSiteDescriptor() *UpdateSiteDescriptor {
	return updateSiteDescriptor
}

type DeleteSiteDescriptor struct{}

type DeleteSiteDescriptorClientMsgHandle struct{}

type DeleteSiteDescriptorServerMsgHandle struct{}

func (d *DeleteSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSiteRequest{}
}

func (d *DeleteSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteSiteDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteSiteDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSiteDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSiteDescriptor) GetMethodName() string {
	return "DeleteSite"
}

func (d *DeleteSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/DeleteSite"
}

func (d *DeleteSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *DeleteSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *DeleteSiteDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *DeleteSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSiteDescriptorClientMsgHandle{}
}

func (d *DeleteSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSiteDescriptorServerMsgHandle{}
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*site.Name)(nil)
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *site.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *site.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteSiteDescriptor() *DeleteSiteDescriptor {
	return deleteSiteDescriptor
}

type SiteServiceDescriptor struct{}

func (d *SiteServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSiteDescriptor,
		batchGetSitesDescriptor,
		listSitesDescriptor,
		watchSiteDescriptor,
		watchSitesDescriptor,
		createSiteDescriptor,
		updateSiteDescriptor,
		deleteSiteDescriptor,
	}
}

func (d *SiteServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.SiteService"
}

func (d *SiteServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *SiteServiceDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *SiteServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *SiteServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetSiteServiceDescriptor() *SiteServiceDescriptor {
	return siteServiceDescriptor
}

func initDescriptors() {
	siteServiceDescriptor = &SiteServiceDescriptor{}
	getSiteDescriptor = &GetSiteDescriptor{}
	batchGetSitesDescriptor = &BatchGetSitesDescriptor{}
	listSitesDescriptor = &ListSitesDescriptor{}
	watchSiteDescriptor = &WatchSiteDescriptor{}
	watchSitesDescriptor = &WatchSitesDescriptor{}
	createSiteDescriptor = &CreateSiteDescriptor{}
	updateSiteDescriptor = &UpdateSiteDescriptor{}
	deleteSiteDescriptor = &DeleteSiteDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(siteServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSiteDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
