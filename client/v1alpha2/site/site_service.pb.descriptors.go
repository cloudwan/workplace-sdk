// Code generated by protoc-gen-goten-client
// API: SiteService
// DO NOT EDIT!!!

package site_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &site.Site{}
)

var (
	descriptorsInitialized  bool
	siteServiceDescriptor   *SiteServiceDescriptor
	getSiteDescriptor       *GetSiteDescriptor
	batchGetSitesDescriptor *BatchGetSitesDescriptor
	listSitesDescriptor     *ListSitesDescriptor
	watchSiteDescriptor     *WatchSiteDescriptor
	watchSitesDescriptor    *WatchSitesDescriptor
	createSiteDescriptor    *CreateSiteDescriptor
	updateSiteDescriptor    *UpdateSiteDescriptor
	deleteSiteDescriptor    *DeleteSiteDescriptor
)

type GetSiteDescriptor struct{}

type GetSiteDescriptorClientMsgHandle struct{}

type GetSiteDescriptorServerMsgHandle struct{}

func (d *GetSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSiteRequest{}
}

func (d *GetSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *GetSiteDescriptor) IsUnary() bool {
	return true
}

func (d *GetSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSiteDescriptor) IsCollection() bool {
	return false
}

func (d *GetSiteDescriptor) IsPlural() bool {
	return false
}

func (d *GetSiteDescriptor) HasResource() bool {
	return true
}

func (d *GetSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSiteDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSiteDescriptor) GetMethodName() string {
	return "GetSite"
}

func (d *GetSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/GetSite"
}

func (d *GetSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *GetSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *GetSiteDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *GetSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSiteDescriptorClientMsgHandle{}
}

func (d *GetSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSiteDescriptorServerMsgHandle{}
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*site.Name)(nil)
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSiteDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*site.Name)(nil)
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSiteDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetSiteDescriptor() *GetSiteDescriptor {
	return getSiteDescriptor
}

type BatchGetSitesDescriptor struct{}

type BatchGetSitesDescriptorClientMsgHandle struct{}

type BatchGetSitesDescriptorServerMsgHandle struct{}

func (d *BatchGetSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSitesRequest{}
}

func (d *BatchGetSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSitesResponse{}
}

func (d *BatchGetSitesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSitesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSitesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetSitesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetSitesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSitesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSitesDescriptor) GetMethodName() string {
	return "BatchGetSites"
}

func (d *BatchGetSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/BatchGetSites"
}

func (d *BatchGetSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *BatchGetSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *BatchGetSitesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *BatchGetSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSitesDescriptorClientMsgHandle{}
}

func (d *BatchGetSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSitesDescriptorServerMsgHandle{}
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(site.SiteNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (site.SiteNameList)(nil)
}

func (h *BatchGetSitesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSites(); len(resources) > 0 {
			list := make(site.SiteNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (site.SiteNameList)(nil)
}

func (h *BatchGetSitesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetSitesDescriptor() *BatchGetSitesDescriptor {
	return batchGetSitesDescriptor
}

type ListSitesDescriptor struct{}

type ListSitesDescriptorClientMsgHandle struct{}

type ListSitesDescriptorServerMsgHandle struct{}

func (d *ListSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSitesRequest{}
}

func (d *ListSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSitesResponse{}
}

func (d *ListSitesDescriptor) IsUnary() bool {
	return true
}

func (d *ListSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSitesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSitesDescriptor) IsCollection() bool {
	return true
}

func (d *ListSitesDescriptor) IsPlural() bool {
	return true
}

func (d *ListSitesDescriptor) HasResource() bool {
	return true
}

func (d *ListSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSitesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSitesDescriptor) GetMethodName() string {
	return "ListSites"
}

func (d *ListSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/ListSites"
}

func (d *ListSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *ListSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *ListSitesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *ListSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSitesDescriptorClientMsgHandle{}
}

func (d *ListSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSitesDescriptorServerMsgHandle{}
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSitesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*site.ParentName)(nil)
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSites(); len(resources) > 0 {
			list := make(site.SiteNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (site.SiteNameList)(nil)
}

func (h *ListSitesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListSitesDescriptor() *ListSitesDescriptor {
	return listSitesDescriptor
}

type WatchSiteDescriptor struct{}

type WatchSiteDescriptorClientMsgHandle struct{}

type WatchSiteDescriptorServerMsgHandle struct{}

func (d *WatchSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSiteRequest{}
}

func (d *WatchSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSiteResponse{}
}

func (d *WatchSiteDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSiteDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSiteDescriptor) IsCollection() bool {
	return false
}

func (d *WatchSiteDescriptor) IsPlural() bool {
	return false
}

func (d *WatchSiteDescriptor) HasResource() bool {
	return true
}

func (d *WatchSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSiteDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSiteDescriptor) GetMethodName() string {
	return "WatchSite"
}

func (d *WatchSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/WatchSite"
}

func (d *WatchSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *WatchSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *WatchSiteDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *WatchSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSiteDescriptorClientMsgHandle{}
}

func (d *WatchSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSiteDescriptorServerMsgHandle{}
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*site.Name)(nil)
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSiteDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSiteResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *site.SiteChange_Added_:
				return tResChange.Added.GetSite().GetName()
			case *site.SiteChange_Modified_:
				return tResChange.Modified.GetName()
			case *site.SiteChange_Removed_:
				return tResChange.Removed.GetName()
			case *site.SiteChange_Current_:
				return tResChange.Current.GetSite().GetName()
			}
		}
	}
	return (*site.Name)(nil)
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSiteResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSiteDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSiteResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSiteResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSiteDescriptor() *WatchSiteDescriptor {
	return watchSiteDescriptor
}

type WatchSitesDescriptor struct{}

type WatchSitesDescriptorClientMsgHandle struct{}

type WatchSitesDescriptorServerMsgHandle struct{}

func (d *WatchSitesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSitesRequest{}
}

func (d *WatchSitesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSitesResponse{}
}

func (d *WatchSitesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSitesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSitesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSitesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchSitesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchSitesDescriptor) HasResource() bool {
	return true
}

func (d *WatchSitesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSitesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSitesDescriptor) GetMethodName() string {
	return "WatchSites"
}

func (d *WatchSitesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/WatchSites"
}

func (d *WatchSitesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchSitesDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *WatchSitesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchSitesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSitesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *WatchSitesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *WatchSitesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSitesDescriptorClientMsgHandle{}
}

func (d *WatchSitesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSitesDescriptorServerMsgHandle{}
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSitesRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSitesRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSitesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSitesRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*site.ParentName)(nil)
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSitesResponse) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSitesResponse) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSiteChanges(); len(resChanges) > 0 {
			list := make(site.SiteNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *site.SiteChange_Added_:
					list = append(list, tResChange.Added.GetSite().GetName())
				case *site.SiteChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *site.SiteChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *site.SiteChange_Current_:
					list = append(list, tResChange.Current.GetSite().GetName())
				}
			}
			return list
		}
	}
	return (site.SiteNameList)(nil)
}

func (h *WatchSitesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSitesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSitesResponse) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSitesDescriptor() *WatchSitesDescriptor {
	return watchSitesDescriptor
}

type CreateSiteDescriptor struct{}

type CreateSiteDescriptorClientMsgHandle struct{}

type CreateSiteDescriptorServerMsgHandle struct{}

func (d *CreateSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSiteRequest{}
}

func (d *CreateSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *CreateSiteDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSiteDescriptor) IsCollection() bool {
	return true
}

func (d *CreateSiteDescriptor) IsPlural() bool {
	return false
}

func (d *CreateSiteDescriptor) HasResource() bool {
	return true
}

func (d *CreateSiteDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSiteDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSiteDescriptor) GetMethodName() string {
	return "CreateSite"
}

func (d *CreateSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/CreateSite"
}

func (d *CreateSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *CreateSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *CreateSiteDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *CreateSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSiteDescriptorClientMsgHandle{}
}

func (d *CreateSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSiteDescriptorServerMsgHandle{}
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSite()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*site.Name)(nil)
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSiteDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*site.ParentName)(nil)
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*site.Name)(nil)
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSiteDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateSiteDescriptor() *CreateSiteDescriptor {
	return createSiteDescriptor
}

type UpdateSiteDescriptor struct{}

type UpdateSiteDescriptorClientMsgHandle struct{}

type UpdateSiteDescriptorServerMsgHandle struct{}

func (d *UpdateSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSiteRequest{}
}

func (d *UpdateSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &site.Site{}
}

func (d *UpdateSiteDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateSiteDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateSiteDescriptor) HasResource() bool {
	return true
}

func (d *UpdateSiteDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSiteDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSiteDescriptor) GetMethodName() string {
	return "UpdateSite"
}

func (d *UpdateSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/UpdateSite"
}

func (d *UpdateSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *UpdateSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *UpdateSiteDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *UpdateSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSiteDescriptorClientMsgHandle{}
}

func (d *UpdateSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSiteDescriptorServerMsgHandle{}
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSite()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*site.Name)(nil)
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSiteDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*site.Site) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*site.Name)(nil)
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*site.Site) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSiteDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*site.Site)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*site.Site) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateSiteDescriptor() *UpdateSiteDescriptor {
	return updateSiteDescriptor
}

type DeleteSiteDescriptor struct{}

type DeleteSiteDescriptorClientMsgHandle struct{}

type DeleteSiteDescriptorServerMsgHandle struct{}

func (d *DeleteSiteDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSiteRequest{}
}

func (d *DeleteSiteDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteSiteDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSiteDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteSiteDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteSiteDescriptor) HasResource() bool {
	return true
}

func (d *DeleteSiteDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSiteDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSiteDescriptor) GetMethodName() string {
	return "DeleteSite"
}

func (d *DeleteSiteDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.SiteService/DeleteSite"
}

func (d *DeleteSiteDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteSiteDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *DeleteSiteDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteSiteDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteSiteDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return siteServiceDescriptor
}

func (d *DeleteSiteDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return site.GetDescriptor()
}

func (d *DeleteSiteDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSiteDescriptorClientMsgHandle{}
}

func (d *DeleteSiteDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSiteDescriptorServerMsgHandle{}
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteSiteRequest) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*site.Name)(nil)
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteSiteRequest) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSiteDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSiteRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteSiteRequest) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *site.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*site.Name
	})
	if ok {
		return site.SiteNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSiteDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *site.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteSiteDescriptor() *DeleteSiteDescriptor {
	return deleteSiteDescriptor
}

type SiteServiceDescriptor struct{}

func (d *SiteServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSiteDescriptor,
		batchGetSitesDescriptor,
		listSitesDescriptor,
		watchSiteDescriptor,
		watchSitesDescriptor,
		createSiteDescriptor,
		updateSiteDescriptor,
		deleteSiteDescriptor,
	}
}

func (d *SiteServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.SiteService"
}

func (d *SiteServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *SiteServiceDescriptor) GetApiName() string {
	return "SiteService"
}

func (d *SiteServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *SiteServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetSiteServiceDescriptor() *SiteServiceDescriptor {
	return siteServiceDescriptor
}

func initDescriptors() {
	siteServiceDescriptor = &SiteServiceDescriptor{}
	getSiteDescriptor = &GetSiteDescriptor{}
	batchGetSitesDescriptor = &BatchGetSitesDescriptor{}
	listSitesDescriptor = &ListSitesDescriptor{}
	watchSiteDescriptor = &WatchSiteDescriptor{}
	watchSitesDescriptor = &WatchSitesDescriptor{}
	createSiteDescriptor = &CreateSiteDescriptor{}
	updateSiteDescriptor = &UpdateSiteDescriptor{}
	deleteSiteDescriptor = &DeleteSiteDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(siteServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSitesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSiteDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSiteDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
