// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/agent_service.proto
// DO NOT EDIT!!!

package agent_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &agent.Agent{}
)

func (o *GetAgentRequest) GotenObjectExt() {}

func (o *GetAgentRequest) MakeFullFieldMask() *GetAgentRequest_FieldMask {
	return FullGetAgentRequest_FieldMask()
}

func (o *GetAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAgentRequest_FieldMask()
}

func (o *GetAgentRequest) MakeDiffFieldMask(other *GetAgentRequest) *GetAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAgentRequest_FieldMask()
	}

	res := &GetAgentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAgentRequest))
}

func (o *GetAgentRequest) Clone() *GetAgentRequest {
	if o == nil {
		return nil
	}
	result := &GetAgentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAgentRequest) Merge(source *GetAgentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAgentRequest))
}

func (o *BatchGetAgentsRequest) GotenObjectExt() {}

func (o *BatchGetAgentsRequest) MakeFullFieldMask() *BatchGetAgentsRequest_FieldMask {
	return FullBatchGetAgentsRequest_FieldMask()
}

func (o *BatchGetAgentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAgentsRequest_FieldMask()
}

func (o *BatchGetAgentsRequest) MakeDiffFieldMask(other *BatchGetAgentsRequest) *BatchGetAgentsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAgentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAgentsRequest_FieldMask()
	}

	res := &BatchGetAgentsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAgentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAgentsRequest))
}

func (o *BatchGetAgentsRequest) Clone() *BatchGetAgentsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAgentsRequest{}
	result.Names = make([]*agent.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &agent.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAgentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAgentsRequest) Merge(source *BatchGetAgentsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &agent.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAgentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAgentsRequest))
}

func (o *BatchGetAgentsResponse) GotenObjectExt() {}

func (o *BatchGetAgentsResponse) MakeFullFieldMask() *BatchGetAgentsResponse_FieldMask {
	return FullBatchGetAgentsResponse_FieldMask()
}

func (o *BatchGetAgentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAgentsResponse_FieldMask()
}

func (o *BatchGetAgentsResponse) MakeDiffFieldMask(other *BatchGetAgentsResponse) *BatchGetAgentsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAgentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAgentsResponse_FieldMask()
	}

	res := &BatchGetAgentsResponse_FieldMask{}

	if len(o.GetAgents()) == len(other.GetAgents()) {
		for i, lValue := range o.GetAgents() {
			rValue := other.GetAgents()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorAgents})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorAgents})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAgentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAgentsResponse))
}

func (o *BatchGetAgentsResponse) Clone() *BatchGetAgentsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAgentsResponse{}
	result.Agents = make([]*agent.Agent, len(o.Agents))
	for i, sourceValue := range o.Agents {
		result.Agents[i] = sourceValue.Clone()
	}
	result.Missing = make([]*agent.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &agent.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAgentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAgentsResponse) Merge(source *BatchGetAgentsResponse) {
	for _, sourceValue := range source.GetAgents() {
		exists := false
		for _, currentValue := range o.Agents {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent.Agent
			if sourceValue != nil {
				newDstElement = new(agent.Agent)
				newDstElement.Merge(sourceValue)
			}
			o.Agents = append(o.Agents, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &agent.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAgentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAgentsResponse))
}

func (o *ListAgentsRequest) GotenObjectExt() {}

func (o *ListAgentsRequest) MakeFullFieldMask() *ListAgentsRequest_FieldMask {
	return FullListAgentsRequest_FieldMask()
}

func (o *ListAgentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAgentsRequest_FieldMask()
}

func (o *ListAgentsRequest) MakeDiffFieldMask(other *ListAgentsRequest) *ListAgentsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAgentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAgentsRequest_FieldMask()
	}

	res := &ListAgentsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListAgentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAgentsRequest))
}

func (o *ListAgentsRequest) Clone() *ListAgentsRequest {
	if o == nil {
		return nil
	}
	result := &ListAgentsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &agent.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &agent.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &agent.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &agent.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListAgentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAgentsRequest) Merge(source *ListAgentsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &agent.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &agent.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &agent.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &agent.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListAgentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAgentsRequest))
}

func (o *ListAgentsResponse) GotenObjectExt() {}

func (o *ListAgentsResponse) MakeFullFieldMask() *ListAgentsResponse_FieldMask {
	return FullListAgentsResponse_FieldMask()
}

func (o *ListAgentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAgentsResponse_FieldMask()
}

func (o *ListAgentsResponse) MakeDiffFieldMask(other *ListAgentsResponse) *ListAgentsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAgentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAgentsResponse_FieldMask()
	}

	res := &ListAgentsResponse_FieldMask{}

	if len(o.GetAgents()) == len(other.GetAgents()) {
		for i, lValue := range o.GetAgents() {
			rValue := other.GetAgents()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorAgents})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorAgents})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListAgentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAgentsResponse))
}

func (o *ListAgentsResponse) Clone() *ListAgentsResponse {
	if o == nil {
		return nil
	}
	result := &ListAgentsResponse{}
	result.Agents = make([]*agent.Agent, len(o.Agents))
	for i, sourceValue := range o.Agents {
		result.Agents[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &agent.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &agent.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListAgentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAgentsResponse) Merge(source *ListAgentsResponse) {
	for _, sourceValue := range source.GetAgents() {
		exists := false
		for _, currentValue := range o.Agents {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent.Agent
			if sourceValue != nil {
				newDstElement = new(agent.Agent)
				newDstElement.Merge(sourceValue)
			}
			o.Agents = append(o.Agents, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &agent.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &agent.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListAgentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAgentsResponse))
}

func (o *WatchAgentRequest) GotenObjectExt() {}

func (o *WatchAgentRequest) MakeFullFieldMask() *WatchAgentRequest_FieldMask {
	return FullWatchAgentRequest_FieldMask()
}

func (o *WatchAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentRequest_FieldMask()
}

func (o *WatchAgentRequest) MakeDiffFieldMask(other *WatchAgentRequest) *WatchAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentRequest_FieldMask()
	}

	res := &WatchAgentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentRequest))
}

func (o *WatchAgentRequest) Clone() *WatchAgentRequest {
	if o == nil {
		return nil
	}
	result := &WatchAgentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentRequest) Merge(source *WatchAgentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentRequest))
}

func (o *WatchAgentResponse) GotenObjectExt() {}

func (o *WatchAgentResponse) MakeFullFieldMask() *WatchAgentResponse_FieldMask {
	return FullWatchAgentResponse_FieldMask()
}

func (o *WatchAgentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentResponse_FieldMask()
}

func (o *WatchAgentResponse) MakeDiffFieldMask(other *WatchAgentResponse) *WatchAgentResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentResponse_FieldMask()
	}

	res := &WatchAgentResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAgentResponse_FieldTerminalPath{selector: WatchAgentResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAgentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentResponse))
}

func (o *WatchAgentResponse) Clone() *WatchAgentResponse {
	if o == nil {
		return nil
	}
	result := &WatchAgentResponse{}
	result.Change = proto.Clone(o.Change).(*agent.AgentChange)
	return result
}

func (o *WatchAgentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentResponse) Merge(source *WatchAgentResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(agent.AgentChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAgentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentResponse))
}

func (o *WatchAgentsRequest) GotenObjectExt() {}

func (o *WatchAgentsRequest) MakeFullFieldMask() *WatchAgentsRequest_FieldMask {
	return FullWatchAgentsRequest_FieldMask()
}

func (o *WatchAgentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentsRequest_FieldMask()
}

func (o *WatchAgentsRequest) MakeDiffFieldMask(other *WatchAgentsRequest) *WatchAgentsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentsRequest_FieldMask()
	}

	res := &WatchAgentsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAgentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentsRequest))
}

func (o *WatchAgentsRequest) Clone() *WatchAgentsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAgentsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &agent.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &agent.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &agent.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &agent.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAgentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentsRequest) Merge(source *WatchAgentsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &agent.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &agent.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &agent.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &agent.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAgentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentsRequest))
}

func (o *WatchAgentsResponse) GotenObjectExt() {}

func (o *WatchAgentsResponse) MakeFullFieldMask() *WatchAgentsResponse_FieldMask {
	return FullWatchAgentsResponse_FieldMask()
}

func (o *WatchAgentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentsResponse_FieldMask()
}

func (o *WatchAgentsResponse) MakeDiffFieldMask(other *WatchAgentsResponse) *WatchAgentsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentsResponse_FieldMask()
	}

	res := &WatchAgentsResponse_FieldMask{}

	if len(o.GetAgentChanges()) == len(other.GetAgentChanges()) {
		for i, lValue := range o.GetAgentChanges() {
			rValue := other.GetAgentChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorAgentChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorAgentChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAgentsResponse_FieldSubPath{selector: WatchAgentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAgentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentsResponse))
}

func (o *WatchAgentsResponse) Clone() *WatchAgentsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAgentsResponse{}
	result.AgentChanges = make([]*agent.AgentChange, len(o.AgentChanges))
	for i, sourceValue := range o.AgentChanges {
		result.AgentChanges[i] = proto.Clone(sourceValue).(*agent.AgentChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAgentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentsResponse) Merge(source *WatchAgentsResponse) {
	for _, sourceValue := range source.GetAgentChanges() {
		exists := false
		for _, currentValue := range o.AgentChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent.AgentChange
			if sourceValue != nil {
				newDstElement = new(agent.AgentChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AgentChanges = append(o.AgentChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAgentsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAgentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentsResponse))
}

func (o *WatchAgentsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAgentsResponse_PageTokenChange) MakeFullFieldMask() *WatchAgentsResponse_PageTokenChange_FieldMask {
	return FullWatchAgentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAgentsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAgentsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAgentsResponse_PageTokenChange) *WatchAgentsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAgentsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAgentsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentsResponse_PageTokenChange))
}

func (o *WatchAgentsResponse_PageTokenChange) Clone() *WatchAgentsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAgentsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &agent.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &agent.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAgentsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentsResponse_PageTokenChange) Merge(source *WatchAgentsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &agent.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &agent.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAgentsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentsResponse_PageTokenChange))
}

func (o *CreateAgentRequest) GotenObjectExt() {}

func (o *CreateAgentRequest) MakeFullFieldMask() *CreateAgentRequest_FieldMask {
	return FullCreateAgentRequest_FieldMask()
}

func (o *CreateAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAgentRequest_FieldMask()
}

func (o *CreateAgentRequest) MakeDiffFieldMask(other *CreateAgentRequest) *CreateAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAgentRequest_FieldMask()
	}

	res := &CreateAgentRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAgentRequest_FieldTerminalPath{selector: CreateAgentRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAgent().MakeDiffFieldMask(other.GetAgent())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAgentRequest_FieldTerminalPath{selector: CreateAgentRequest_FieldPathSelectorAgent})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAgentRequest_FieldSubPath{selector: CreateAgentRequest_FieldPathSelectorAgent, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAgentRequest))
}

func (o *CreateAgentRequest) Clone() *CreateAgentRequest {
	if o == nil {
		return nil
	}
	result := &CreateAgentRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &agent.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Agent = o.Agent.Clone()
	return result
}

func (o *CreateAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAgentRequest) Merge(source *CreateAgentRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &agent.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAgent() != nil {
		if o.Agent == nil {
			o.Agent = new(agent.Agent)
		}
		o.Agent.Merge(source.GetAgent())
	}
}

func (o *CreateAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAgentRequest))
}

func (o *UpdateAgentRequest) GotenObjectExt() {}

func (o *UpdateAgentRequest) MakeFullFieldMask() *UpdateAgentRequest_FieldMask {
	return FullUpdateAgentRequest_FieldMask()
}

func (o *UpdateAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAgentRequest_FieldMask()
}

func (o *UpdateAgentRequest) MakeDiffFieldMask(other *UpdateAgentRequest) *UpdateAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAgentRequest_FieldMask()
	}

	res := &UpdateAgentRequest_FieldMask{}
	{
		subMask := o.GetAgent().MakeDiffFieldMask(other.GetAgent())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorAgent})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentRequest_FieldSubPath{selector: UpdateAgentRequest_FieldPathSelectorAgent, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentRequest_FieldSubPath{selector: UpdateAgentRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAgentRequest))
}

func (o *UpdateAgentRequest) Clone() *UpdateAgentRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAgentRequest{}
	result.Agent = o.Agent.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*agent.Agent_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAgentRequest) Merge(source *UpdateAgentRequest) {
	if source.GetAgent() != nil {
		if o.Agent == nil {
			o.Agent = new(agent.Agent)
		}
		o.Agent.Merge(source.GetAgent())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAgentRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAgentRequest))
}

func (o *UpdateAgentRequest_CAS) GotenObjectExt() {}

func (o *UpdateAgentRequest_CAS) MakeFullFieldMask() *UpdateAgentRequest_CAS_FieldMask {
	return FullUpdateAgentRequest_CAS_FieldMask()
}

func (o *UpdateAgentRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAgentRequest_CAS_FieldMask()
}

func (o *UpdateAgentRequest_CAS) MakeDiffFieldMask(other *UpdateAgentRequest_CAS) *UpdateAgentRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAgentRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAgentRequest_CAS_FieldMask()
	}

	res := &UpdateAgentRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentRequestCAS_FieldTerminalPath{selector: UpdateAgentRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentRequestCAS_FieldSubPath{selector: UpdateAgentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAgentRequestCAS_FieldTerminalPath{selector: UpdateAgentRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAgentRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAgentRequest_CAS))
}

func (o *UpdateAgentRequest_CAS) Clone() *UpdateAgentRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAgentRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*agent.Agent_FieldMask)
	return result
}

func (o *UpdateAgentRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAgentRequest_CAS) Merge(source *UpdateAgentRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(agent.Agent)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent.Agent_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAgentRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAgentRequest_CAS))
}

func (o *DeleteAgentRequest) GotenObjectExt() {}

func (o *DeleteAgentRequest) MakeFullFieldMask() *DeleteAgentRequest_FieldMask {
	return FullDeleteAgentRequest_FieldMask()
}

func (o *DeleteAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAgentRequest_FieldMask()
}

func (o *DeleteAgentRequest) MakeDiffFieldMask(other *DeleteAgentRequest) *DeleteAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAgentRequest_FieldMask()
	}

	res := &DeleteAgentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAgentRequest_FieldTerminalPath{selector: DeleteAgentRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAgentRequest))
}

func (o *DeleteAgentRequest) Clone() *DeleteAgentRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAgentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAgentRequest) Merge(source *DeleteAgentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAgentRequest))
}
