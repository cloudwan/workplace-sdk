// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/agent_service.proto
// DO NOT EDIT!!!

package agent_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &agent.Agent{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAgentRequest_FieldPathSelector
	Get(source *GetAgentRequest) []interface{}
	GetSingle(source *GetAgentRequest) (interface{}, bool)
	ClearValue(item *GetAgentRequest)

	// Those methods build corresponding GetAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAgentRequest_FieldPathArrayItemValue
}

type GetAgentRequest_FieldPathSelector int32

const (
	GetAgentRequest_FieldPathSelectorName      GetAgentRequest_FieldPathSelector = 0
	GetAgentRequest_FieldPathSelectorFieldMask GetAgentRequest_FieldPathSelector = 1
	GetAgentRequest_FieldPathSelectorView      GetAgentRequest_FieldPathSelector = 2
)

func (s GetAgentRequest_FieldPathSelector) String() string {
	switch s {
	case GetAgentRequest_FieldPathSelectorName:
		return "name"
	case GetAgentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAgentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", s))
	}
}

func BuildGetAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAgentRequest_FieldTerminalPath{selector: GetAgentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAgentRequest", fp)
}

func ParseGetAgentRequest_FieldPath(rawField string) (GetAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAgentRequest_FieldPath(fp)
}

func MustParseGetAgentRequest_FieldPath(rawField string) GetAgentRequest_FieldPath {
	fp, err := ParseGetAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAgentRequest_FieldTerminalPath struct {
	selector GetAgentRequest_FieldPathSelector
}

var _ GetAgentRequest_FieldPath = (*GetAgentRequest_FieldTerminalPath)(nil)

func (fp *GetAgentRequest_FieldTerminalPath) Selector() GetAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAgentRequest
func (fp *GetAgentRequest_FieldTerminalPath) Get(source *GetAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAgentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAgentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAgentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAgentRequest))
}

// GetSingle returns value pointed by specific field of from source GetAgentRequest
func (fp *GetAgentRequest_FieldTerminalPath) GetSingle(source *GetAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAgentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAgentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAgentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
	}
}

func (fp *GetAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAgentRequest_FieldPathSelectorName:
		return (*agent.Reference)(nil)
	case GetAgentRequest_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	case GetAgentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
	}
}

func (fp *GetAgentRequest_FieldTerminalPath) ClearValue(item *GetAgentRequest) {
	if item != nil {
		switch fp.selector {
		case GetAgentRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAgentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAgentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAgentRequest_FieldPathSelectorName ||
		fp.selector == GetAgentRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAgentRequest_FieldPathSelectorView
}

func (fp *GetAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAgentRequest_FieldTerminalPath) WithIValue(value interface{}) GetAgentRequest_FieldPathValue {
	switch fp.selector {
	case GetAgentRequest_FieldPathSelectorName:
		return &GetAgentRequest_FieldTerminalPathValue{GetAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	case GetAgentRequest_FieldPathSelectorFieldMask:
		return &GetAgentRequest_FieldTerminalPathValue{GetAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case GetAgentRequest_FieldPathSelectorView:
		return &GetAgentRequest_FieldTerminalPathValue{GetAgentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
	}
}

func (fp *GetAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAgentRequest_FieldPathArrayOfValues {
	fpaov := &GetAgentRequest_FieldTerminalPathArrayOfValues{GetAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAgentRequest_FieldPathSelectorName:
		return &GetAgentRequest_FieldTerminalPathArrayOfValues{GetAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Reference)}
	case GetAgentRequest_FieldPathSelectorFieldMask:
		return &GetAgentRequest_FieldTerminalPathArrayOfValues{GetAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case GetAgentRequest_FieldPathSelectorView:
		return &GetAgentRequest_FieldTerminalPathArrayOfValues{GetAgentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fp.selector))
	}
}

func (fp *GetAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAgentRequest_FieldPathValue allows storing values for GetAgentRequest fields according to their type
type GetAgentRequest_FieldPathValue interface {
	GetAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAgentRequest)
	CompareWith(*GetAgentRequest) (cmp int, comparable bool)
}

func ParseGetAgentRequest_FieldPathValue(pathStr, valueStr string) (GetAgentRequest_FieldPathValue, error) {
	fp, err := ParseGetAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAgentRequest_FieldPathValue), nil
}

func MustParseGetAgentRequest_FieldPathValue(pathStr, valueStr string) GetAgentRequest_FieldPathValue {
	fpv, err := ParseGetAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAgentRequest_FieldTerminalPathValue struct {
	GetAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentRequest_FieldPathValue = (*GetAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAgentRequest' as interface{}
func (fpv *GetAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAgentRequest_FieldTerminalPathValue) AsNameValue() (*agent.Reference, bool) {
	res, ok := fpv.value.(*agent.Reference)
	return res, ok
}
func (fpv *GetAgentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *GetAgentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAgentRequest
func (fpv *GetAgentRequest_FieldTerminalPathValue) SetTo(target **GetAgentRequest) {
	if *target == nil {
		*target = new(GetAgentRequest)
	}
	switch fpv.selector {
	case GetAgentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent.Reference)
	case GetAgentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	case GetAgentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAgentRequest_FieldTerminalPathValue' with the value under path in 'GetAgentRequest'.
func (fpv *GetAgentRequest_FieldTerminalPathValue) CompareWith(source *GetAgentRequest) (int, bool) {
	switch fpv.selector {
	case GetAgentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAgentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAgentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAgentRequest))
}

// GetAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAgentRequest according to their type
// Present only for array (repeated) types.
type GetAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAgentRequest_FieldPath
	ContainsValue(*GetAgentRequest) bool
}

// ParseGetAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAgentRequest_FieldTerminalPathArrayItemValue struct {
	GetAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentRequest_FieldPathArrayItemValue = (*GetAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAgentRequest as interface{}
func (fpaiv *GetAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentRequest'
func (fpaiv *GetAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAgentRequest) bool {
	slice := fpaiv.GetAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAgentRequest_FieldPathArrayOfValues allows storing slice of values for GetAgentRequest fields according to their type
type GetAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAgentRequest_FieldPath
}

func ParseGetAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAgentRequest_FieldTerminalPathArrayOfValues struct {
	GetAgentRequest_FieldTerminalPath
	values interface{}
}

var _ GetAgentRequest_FieldPathArrayOfValues = (*GetAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAgentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent.Reference) {
			values = append(values, v)
		}
	case GetAgentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case GetAgentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAgentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent.Reference, bool) {
	res, ok := fpaov.values.([]*agent.Reference)
	return res, ok
}
func (fpaov *GetAgentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *GetAgentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAgentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAgentsRequest_FieldPathSelector
	Get(source *BatchGetAgentsRequest) []interface{}
	GetSingle(source *BatchGetAgentsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAgentsRequest)

	// Those methods build corresponding BatchGetAgentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAgentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAgentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAgentsRequest_FieldPathArrayItemValue
}

type BatchGetAgentsRequest_FieldPathSelector int32

const (
	BatchGetAgentsRequest_FieldPathSelectorNames     BatchGetAgentsRequest_FieldPathSelector = 0
	BatchGetAgentsRequest_FieldPathSelectorFieldMask BatchGetAgentsRequest_FieldPathSelector = 1
	BatchGetAgentsRequest_FieldPathSelectorView      BatchGetAgentsRequest_FieldPathSelector = 2
)

func (s BatchGetAgentsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAgentsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", s))
	}
}

func BuildBatchGetAgentsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAgentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAgentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAgentsRequest_FieldTerminalPath{selector: BatchGetAgentsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAgentsRequest", fp)
}

func ParseBatchGetAgentsRequest_FieldPath(rawField string) (BatchGetAgentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAgentsRequest_FieldPath(fp)
}

func MustParseBatchGetAgentsRequest_FieldPath(rawField string) BatchGetAgentsRequest_FieldPath {
	fp, err := ParseBatchGetAgentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAgentsRequest_FieldTerminalPath struct {
	selector BatchGetAgentsRequest_FieldPathSelector
}

var _ BatchGetAgentsRequest_FieldPath = (*BatchGetAgentsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAgentsRequest_FieldTerminalPath) Selector() BatchGetAgentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAgentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAgentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAgentsRequest
func (fp *BatchGetAgentsRequest_FieldTerminalPath) Get(source *BatchGetAgentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAgentsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAgentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAgentsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAgentsRequest
func (fp *BatchGetAgentsRequest_FieldTerminalPath) GetSingle(source *BatchGetAgentsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAgentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAgentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAgentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return ([]*agent.Reference)(nil)
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	case BatchGetAgentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) ClearValue(item *BatchGetAgentsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAgentsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAgentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAgentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAgentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAgentsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAgentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAgentsRequest_FieldPathSelectorView
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAgentsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return &BatchGetAgentsRequest_FieldTerminalPathValue{BatchGetAgentsRequest_FieldTerminalPath: *fp, value: value.([]*agent.Reference)}
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAgentsRequest_FieldTerminalPathValue{BatchGetAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case BatchGetAgentsRequest_FieldPathSelectorView:
		return &BatchGetAgentsRequest_FieldTerminalPathValue{BatchGetAgentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAgentsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAgentsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return &BatchGetAgentsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentsRequest_FieldTerminalPath: *fp, values: values.([][]*agent.Reference)}
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAgentsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case BatchGetAgentsRequest_FieldPathSelectorView:
		return &BatchGetAgentsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAgentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return &BatchGetAgentsRequest_FieldTerminalPathArrayItemValue{BatchGetAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAgentsRequest_FieldPathValue allows storing values for BatchGetAgentsRequest fields according to their type
type BatchGetAgentsRequest_FieldPathValue interface {
	BatchGetAgentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAgentsRequest)
	CompareWith(*BatchGetAgentsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAgentsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAgentsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAgentsRequest_FieldPathValue), nil
}

func MustParseBatchGetAgentsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAgentsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAgentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAgentsRequest_FieldTerminalPathValue struct {
	BatchGetAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentsRequest_FieldPathValue = (*BatchGetAgentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAgentsRequest' as interface{}
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) AsNamesValue() ([]*agent.Reference, bool) {
	res, ok := fpv.value.([]*agent.Reference)
	return res, ok
}
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAgentsRequest
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAgentsRequest) {
	if *target == nil {
		*target = new(BatchGetAgentsRequest)
	}
	switch fpv.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*agent.Reference)
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	case BatchGetAgentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAgentsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAgentsRequest'.
func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAgentsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAgentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAgentsRequest))
}

// BatchGetAgentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAgentsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAgentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAgentsRequest_FieldPath
	ContainsValue(*BatchGetAgentsRequest) bool
}

// ParseBatchGetAgentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAgentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAgentsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAgentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAgentsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentsRequest_FieldPathArrayItemValue = (*BatchGetAgentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAgentsRequest as interface{}
func (fpaiv *BatchGetAgentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAgentsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*agent.Reference, bool) {
	res, ok := fpaiv.value.(*agent.Reference)
	return res, ok
}

func (fpaiv *BatchGetAgentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAgentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAgentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAgentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentsRequest'
func (fpaiv *BatchGetAgentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAgentsRequest) bool {
	slice := fpaiv.BatchGetAgentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAgentsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAgentsRequest fields according to their type
type BatchGetAgentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAgentsRequest_FieldPath
}

func ParseBatchGetAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAgentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAgentsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAgentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAgentsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAgentsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAgentsRequest_FieldPathArrayOfValues = (*BatchGetAgentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAgentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAgentsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*agent.Reference) {
			values = append(values, v)
		}
	case BatchGetAgentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAgentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAgentsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*agent.Reference, bool) {
	res, ok := fpaov.values.([][]*agent.Reference)
	return res, ok
}
func (fpaov *BatchGetAgentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAgentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAgentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAgentsResponse_FieldPathSelector
	Get(source *BatchGetAgentsResponse) []interface{}
	GetSingle(source *BatchGetAgentsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAgentsResponse)

	// Those methods build corresponding BatchGetAgentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAgentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAgentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAgentsResponse_FieldPathArrayItemValue
}

type BatchGetAgentsResponse_FieldPathSelector int32

const (
	BatchGetAgentsResponse_FieldPathSelectorAgents  BatchGetAgentsResponse_FieldPathSelector = 0
	BatchGetAgentsResponse_FieldPathSelectorMissing BatchGetAgentsResponse_FieldPathSelector = 1
)

func (s BatchGetAgentsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return "agents"
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", s))
	}
}

func BuildBatchGetAgentsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAgentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAgentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agents":
			return &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorAgents}, nil
		case "missing":
			return &BatchGetAgentsResponse_FieldTerminalPath{selector: BatchGetAgentsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "agents":
			if subpath, err := agent.BuildAgent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAgentsResponse_FieldSubPath{selector: BatchGetAgentsResponse_FieldPathSelectorAgents, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAgentsResponse", fp)
}

func ParseBatchGetAgentsResponse_FieldPath(rawField string) (BatchGetAgentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAgentsResponse_FieldPath(fp)
}

func MustParseBatchGetAgentsResponse_FieldPath(rawField string) BatchGetAgentsResponse_FieldPath {
	fp, err := ParseBatchGetAgentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAgentsResponse_FieldTerminalPath struct {
	selector BatchGetAgentsResponse_FieldPathSelector
}

var _ BatchGetAgentsResponse_FieldPath = (*BatchGetAgentsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAgentsResponse_FieldTerminalPath) Selector() BatchGetAgentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAgentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAgentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAgentsResponse
func (fp *BatchGetAgentsResponse_FieldTerminalPath) Get(source *BatchGetAgentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAgentsResponse_FieldPathSelectorAgents:
			for _, value := range source.GetAgents() {
				values = append(values, value)
			}
		case BatchGetAgentsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAgentsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAgentsResponse
func (fp *BatchGetAgentsResponse_FieldTerminalPath) GetSingle(source *BatchGetAgentsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		res := source.GetAgents()
		return res, res != nil
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAgentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return ([]*agent.Agent)(nil)
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return ([]*agent.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) ClearValue(item *BatchGetAgentsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAgentsResponse_FieldPathSelectorAgents:
			item.Agents = nil
		case BatchGetAgentsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAgentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAgentsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAgentsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return &BatchGetAgentsResponse_FieldTerminalPathValue{BatchGetAgentsResponse_FieldTerminalPath: *fp, value: value.([]*agent.Agent)}
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentsResponse_FieldTerminalPathValue{BatchGetAgentsResponse_FieldTerminalPath: *fp, value: value.([]*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAgentsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAgentsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return &BatchGetAgentsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentsResponse_FieldTerminalPath: *fp, values: values.([][]*agent.Agent)}
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentsResponse_FieldTerminalPath: *fp, values: values.([][]*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAgentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return &BatchGetAgentsResponse_FieldTerminalPathArrayItemValue{BatchGetAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.Agent)}
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentsResponse_FieldTerminalPathArrayItemValue{BatchGetAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAgentsResponse_FieldSubPath struct {
	selector BatchGetAgentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAgentsResponse_FieldPath = (*BatchGetAgentsResponse_FieldSubPath)(nil)

func (fps *BatchGetAgentsResponse_FieldSubPath) Selector() BatchGetAgentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAgentsResponse_FieldSubPath) AsAgentsSubPath() (agent.Agent_FieldPath, bool) {
	res, ok := fps.subPath.(agent.Agent_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAgentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAgentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAgentsResponse
func (fps *BatchGetAgentsResponse_FieldSubPath) Get(source *BatchGetAgentsResponse) (values []interface{}) {
	if asAgentFieldPath, ok := fps.AsAgentsSubPath(); ok {
		for _, item := range source.GetAgents() {
			values = append(values, asAgentFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAgentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAgentsResponse))
}

// GetSingle returns value of selected field from source BatchGetAgentsResponse
func (fps *BatchGetAgentsResponse_FieldSubPath) GetSingle(source *BatchGetAgentsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		if len(source.GetAgents()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgents()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAgentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAgentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAgentsResponse_FieldSubPath) ClearValue(item *BatchGetAgentsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAgentsResponse_FieldPathSelectorAgents:
			for _, subItem := range item.Agents {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAgentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAgentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAgentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetAgentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAgentsResponse_FieldPathValue {
	return &BatchGetAgentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAgentsResponse_FieldPathArrayOfValues {
	return &BatchGetAgentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAgentsResponse_FieldPathArrayItemValue {
	return &BatchGetAgentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAgentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAgentsResponse_FieldPathValue allows storing values for BatchGetAgentsResponse fields according to their type
type BatchGetAgentsResponse_FieldPathValue interface {
	BatchGetAgentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAgentsResponse)
	CompareWith(*BatchGetAgentsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAgentsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAgentsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAgentsResponse_FieldPathValue), nil
}

func MustParseBatchGetAgentsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAgentsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAgentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAgentsResponse_FieldTerminalPathValue struct {
	BatchGetAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentsResponse_FieldPathValue = (*BatchGetAgentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAgentsResponse' as interface{}
func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) AsAgentsValue() ([]*agent.Agent, bool) {
	res, ok := fpv.value.([]*agent.Agent)
	return res, ok
}
func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) AsMissingValue() ([]*agent.Reference, bool) {
	res, ok := fpv.value.([]*agent.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAgentsResponse
func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAgentsResponse) {
	if *target == nil {
		*target = new(BatchGetAgentsResponse)
	}
	switch fpv.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		(*target).Agents = fpv.value.([]*agent.Agent)
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*agent.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAgentsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAgentsResponse'.
func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAgentsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return 0, false
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAgentsResponse))
}

type BatchGetAgentsResponse_FieldSubPathValue struct {
	BatchGetAgentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAgentsResponse_FieldPathValue = (*BatchGetAgentsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) AsAgentsPathValue() (agent.Agent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent.Agent_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) SetTo(target **BatchGetAgentsResponse) {
	if *target == nil {
		*target = new(BatchGetAgentsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) CompareWith(source *BatchGetAgentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAgentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAgentsResponse))
}

// BatchGetAgentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAgentsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAgentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAgentsResponse_FieldPath
	ContainsValue(*BatchGetAgentsResponse) bool
}

// ParseBatchGetAgentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAgentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAgentsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAgentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAgentsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentsResponse_FieldPathArrayItemValue = (*BatchGetAgentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAgentsResponse as interface{}
func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) AsAgentsItemValue() (*agent.Agent, bool) {
	res, ok := fpaiv.value.(*agent.Agent)
	return res, ok
}
func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*agent.Reference, bool) {
	res, ok := fpaiv.value.(*agent.Reference)
	return res, ok
}

func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAgentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAgentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentsResponse'
func (fpaiv *BatchGetAgentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAgentsResponse) bool {
	slice := fpaiv.BatchGetAgentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAgentsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAgentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAgentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAgentsResponse_FieldSubPathArrayItemValue) AsAgentsPathItemValue() (agent.Agent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentsResponse'
func (fpaivs *BatchGetAgentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAgentsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAgentsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAgentsResponse fields according to their type
type BatchGetAgentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAgentsResponse_FieldPath
}

func ParseBatchGetAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAgentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAgentsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAgentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAgentsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAgentsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAgentsResponse_FieldPathArrayOfValues = (*BatchGetAgentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAgentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAgentsResponse_FieldPathSelectorAgents:
		for _, v := range fpaov.values.([][]*agent.Agent) {
			values = append(values, v)
		}
	case BatchGetAgentsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*agent.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAgentsResponse_FieldTerminalPathArrayOfValues) AsAgentsArrayOfValues() ([][]*agent.Agent, bool) {
	res, ok := fpaov.values.([][]*agent.Agent)
	return res, ok
}
func (fpaov *BatchGetAgentsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*agent.Reference, bool) {
	res, ok := fpaov.values.([][]*agent.Reference)
	return res, ok
}

type BatchGetAgentsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAgentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAgentsResponse_FieldPathArrayOfValues = (*BatchGetAgentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAgentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAgentsResponse_FieldSubPathArrayOfValues) AsAgentsPathArrayOfValues() (agent.Agent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent.Agent_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAgentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAgentsRequest_FieldPathSelector
	Get(source *ListAgentsRequest) []interface{}
	GetSingle(source *ListAgentsRequest) (interface{}, bool)
	ClearValue(item *ListAgentsRequest)

	// Those methods build corresponding ListAgentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAgentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAgentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAgentsRequest_FieldPathArrayItemValue
}

type ListAgentsRequest_FieldPathSelector int32

const (
	ListAgentsRequest_FieldPathSelectorParent    ListAgentsRequest_FieldPathSelector = 0
	ListAgentsRequest_FieldPathSelectorPageSize  ListAgentsRequest_FieldPathSelector = 1
	ListAgentsRequest_FieldPathSelectorPageToken ListAgentsRequest_FieldPathSelector = 2
	ListAgentsRequest_FieldPathSelectorOrderBy   ListAgentsRequest_FieldPathSelector = 3
	ListAgentsRequest_FieldPathSelectorFilter    ListAgentsRequest_FieldPathSelector = 4
	ListAgentsRequest_FieldPathSelectorFieldMask ListAgentsRequest_FieldPathSelector = 5
	ListAgentsRequest_FieldPathSelectorView      ListAgentsRequest_FieldPathSelector = 6
)

func (s ListAgentsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAgentsRequest_FieldPathSelectorParent:
		return "parent"
	case ListAgentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAgentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAgentsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAgentsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", s))
	}
}

func BuildListAgentsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAgentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAgentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAgentsRequest_FieldTerminalPath{selector: ListAgentsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAgentsRequest", fp)
}

func ParseListAgentsRequest_FieldPath(rawField string) (ListAgentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAgentsRequest_FieldPath(fp)
}

func MustParseListAgentsRequest_FieldPath(rawField string) ListAgentsRequest_FieldPath {
	fp, err := ParseListAgentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAgentsRequest_FieldTerminalPath struct {
	selector ListAgentsRequest_FieldPathSelector
}

var _ ListAgentsRequest_FieldPath = (*ListAgentsRequest_FieldTerminalPath)(nil)

func (fp *ListAgentsRequest_FieldTerminalPath) Selector() ListAgentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAgentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAgentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAgentsRequest
func (fp *ListAgentsRequest_FieldTerminalPath) Get(source *ListAgentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAgentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAgentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAgentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAgentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAgentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAgentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAgentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAgentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAgentsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAgentsRequest
func (fp *ListAgentsRequest_FieldTerminalPath) GetSingle(source *ListAgentsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAgentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAgentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAgentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAgentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAgentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAgentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		return (*agent.ParentName)(nil)
	case ListAgentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAgentsRequest_FieldPathSelectorPageToken:
		return (*agent.PagerCursor)(nil)
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		return (*agent.OrderBy)(nil)
	case ListAgentsRequest_FieldPathSelectorFilter:
		return (*agent.Filter)(nil)
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	case ListAgentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentsRequest_FieldTerminalPath) ClearValue(item *ListAgentsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAgentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAgentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAgentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAgentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAgentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAgentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAgentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAgentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAgentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAgentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAgentsRequest_FieldPathSelectorParent ||
		fp.selector == ListAgentsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAgentsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAgentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAgentsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAgentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAgentsRequest_FieldPathSelectorView
}

func (fp *ListAgentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAgentsRequest_FieldPathValue {
	switch fp.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.ParentName)}
	case ListAgentsRequest_FieldPathSelectorPageSize:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAgentsRequest_FieldPathSelectorPageToken:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.OrderBy)}
	case ListAgentsRequest_FieldPathSelectorFilter:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Filter)}
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case ListAgentsRequest_FieldPathSelectorView:
		return &ListAgentsRequest_FieldTerminalPathValue{ListAgentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAgentsRequest_FieldPathArrayOfValues {
	fpaov := &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.ParentName)}
	case ListAgentsRequest_FieldPathSelectorPageSize:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAgentsRequest_FieldPathSelectorPageToken:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.OrderBy)}
	case ListAgentsRequest_FieldPathSelectorFilter:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.Filter)}
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case ListAgentsRequest_FieldPathSelectorView:
		return &ListAgentsRequest_FieldTerminalPathArrayOfValues{ListAgentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAgentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAgentsRequest_FieldPathValue allows storing values for ListAgentsRequest fields according to their type
type ListAgentsRequest_FieldPathValue interface {
	ListAgentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAgentsRequest)
	CompareWith(*ListAgentsRequest) (cmp int, comparable bool)
}

func ParseListAgentsRequest_FieldPathValue(pathStr, valueStr string) (ListAgentsRequest_FieldPathValue, error) {
	fp, err := ParseListAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAgentsRequest_FieldPathValue), nil
}

func MustParseListAgentsRequest_FieldPathValue(pathStr, valueStr string) ListAgentsRequest_FieldPathValue {
	fpv, err := ParseListAgentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAgentsRequest_FieldTerminalPathValue struct {
	ListAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAgentsRequest_FieldPathValue = (*ListAgentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAgentsRequest' as interface{}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsParentValue() (*agent.ParentName, bool) {
	res, ok := fpv.value.(*agent.ParentName)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsOrderByValue() (*agent.OrderBy, bool) {
	res, ok := fpv.value.(*agent.OrderBy)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsFilterValue() (*agent.Filter, bool) {
	res, ok := fpv.value.(*agent.Filter)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *ListAgentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAgentsRequest
func (fpv *ListAgentsRequest_FieldTerminalPathValue) SetTo(target **ListAgentsRequest) {
	if *target == nil {
		*target = new(ListAgentsRequest)
	}
	switch fpv.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*agent.ParentName)
	case ListAgentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAgentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*agent.PagerCursor)
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*agent.OrderBy)
	case ListAgentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*agent.Filter)
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	case ListAgentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAgentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAgentsRequest_FieldTerminalPathValue' with the value under path in 'ListAgentsRequest'.
func (fpv *ListAgentsRequest_FieldTerminalPathValue) CompareWith(source *ListAgentsRequest) (int, bool) {
	switch fpv.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*agent.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAgentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAgentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAgentsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAgentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAgentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAgentsRequest))
}

// ListAgentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAgentsRequest according to their type
// Present only for array (repeated) types.
type ListAgentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAgentsRequest_FieldPath
	ContainsValue(*ListAgentsRequest) bool
}

// ParseListAgentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAgentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAgentsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAgentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAgentsRequest_FieldTerminalPathArrayItemValue struct {
	ListAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAgentsRequest_FieldPathArrayItemValue = (*ListAgentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAgentsRequest as interface{}
func (fpaiv *ListAgentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAgentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAgentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAgentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAgentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentsRequest'
func (fpaiv *ListAgentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAgentsRequest) bool {
	slice := fpaiv.ListAgentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAgentsRequest_FieldPathArrayOfValues allows storing slice of values for ListAgentsRequest fields according to their type
type ListAgentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAgentsRequest_FieldPath
}

func ParseListAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAgentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAgentsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAgentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAgentsRequest_FieldTerminalPathArrayOfValues struct {
	ListAgentsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAgentsRequest_FieldPathArrayOfValues = (*ListAgentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAgentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*agent.ParentName) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*agent.OrderBy) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*agent.Filter) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case ListAgentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*agent.ParentName, bool) {
	res, ok := fpaov.values.([]*agent.ParentName)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*agent.OrderBy, bool) {
	res, ok := fpaov.values.([]*agent.OrderBy)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*agent.Filter, bool) {
	res, ok := fpaov.values.([]*agent.Filter)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *ListAgentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAgentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAgentsResponse_FieldPathSelector
	Get(source *ListAgentsResponse) []interface{}
	GetSingle(source *ListAgentsResponse) (interface{}, bool)
	ClearValue(item *ListAgentsResponse)

	// Those methods build corresponding ListAgentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAgentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAgentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAgentsResponse_FieldPathArrayItemValue
}

type ListAgentsResponse_FieldPathSelector int32

const (
	ListAgentsResponse_FieldPathSelectorAgents        ListAgentsResponse_FieldPathSelector = 0
	ListAgentsResponse_FieldPathSelectorPrevPageToken ListAgentsResponse_FieldPathSelector = 1
	ListAgentsResponse_FieldPathSelectorNextPageToken ListAgentsResponse_FieldPathSelector = 2
)

func (s ListAgentsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return "agents"
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", s))
	}
}

func BuildListAgentsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAgentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAgentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agents":
			return &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorAgents}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAgentsResponse_FieldTerminalPath{selector: ListAgentsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "agents":
			if subpath, err := agent.BuildAgent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAgentsResponse_FieldSubPath{selector: ListAgentsResponse_FieldPathSelectorAgents, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAgentsResponse", fp)
}

func ParseListAgentsResponse_FieldPath(rawField string) (ListAgentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAgentsResponse_FieldPath(fp)
}

func MustParseListAgentsResponse_FieldPath(rawField string) ListAgentsResponse_FieldPath {
	fp, err := ParseListAgentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAgentsResponse_FieldTerminalPath struct {
	selector ListAgentsResponse_FieldPathSelector
}

var _ ListAgentsResponse_FieldPath = (*ListAgentsResponse_FieldTerminalPath)(nil)

func (fp *ListAgentsResponse_FieldTerminalPath) Selector() ListAgentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAgentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAgentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAgentsResponse
func (fp *ListAgentsResponse_FieldTerminalPath) Get(source *ListAgentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAgentsResponse_FieldPathSelectorAgents:
			for _, value := range source.GetAgents() {
				values = append(values, value)
			}
		case ListAgentsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAgentsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAgentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAgentsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAgentsResponse
func (fp *ListAgentsResponse_FieldTerminalPath) GetSingle(source *ListAgentsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		res := source.GetAgents()
		return res, res != nil
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAgentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return ([]*agent.Agent)(nil)
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		return (*agent.PagerCursor)(nil)
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		return (*agent.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentsResponse_FieldTerminalPath) ClearValue(item *ListAgentsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAgentsResponse_FieldPathSelectorAgents:
			item.Agents = nil
		case ListAgentsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAgentsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAgentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAgentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAgentsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAgentsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAgentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAgentsResponse_FieldPathValue {
	switch fp.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return &ListAgentsResponse_FieldTerminalPathValue{ListAgentsResponse_FieldTerminalPath: *fp, value: value.([]*agent.Agent)}
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		return &ListAgentsResponse_FieldTerminalPathValue{ListAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		return &ListAgentsResponse_FieldTerminalPathValue{ListAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAgentsResponse_FieldPathArrayOfValues {
	fpaov := &ListAgentsResponse_FieldTerminalPathArrayOfValues{ListAgentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return &ListAgentsResponse_FieldTerminalPathArrayOfValues{ListAgentsResponse_FieldTerminalPath: *fp, values: values.([][]*agent.Agent)}
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		return &ListAgentsResponse_FieldTerminalPathArrayOfValues{ListAgentsResponse_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		return &ListAgentsResponse_FieldTerminalPathArrayOfValues{ListAgentsResponse_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAgentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return &ListAgentsResponse_FieldTerminalPathArrayItemValue{ListAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.Agent)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAgentsResponse_FieldSubPath struct {
	selector ListAgentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAgentsResponse_FieldPath = (*ListAgentsResponse_FieldSubPath)(nil)

func (fps *ListAgentsResponse_FieldSubPath) Selector() ListAgentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAgentsResponse_FieldSubPath) AsAgentsSubPath() (agent.Agent_FieldPath, bool) {
	res, ok := fps.subPath.(agent.Agent_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAgentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAgentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAgentsResponse
func (fps *ListAgentsResponse_FieldSubPath) Get(source *ListAgentsResponse) (values []interface{}) {
	if asAgentFieldPath, ok := fps.AsAgentsSubPath(); ok {
		for _, item := range source.GetAgents() {
			values = append(values, asAgentFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAgentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAgentsResponse))
}

// GetSingle returns value of selected field from source ListAgentsResponse
func (fps *ListAgentsResponse_FieldSubPath) GetSingle(source *ListAgentsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		if len(source.GetAgents()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgents()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fps.selector))
	}
}

func (fps *ListAgentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAgentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAgentsResponse_FieldSubPath) ClearValue(item *ListAgentsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAgentsResponse_FieldPathSelectorAgents:
			for _, subItem := range item.Agents {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAgentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAgentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAgentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListAgentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListAgentsResponse_FieldSubPath) WithIValue(value interface{}) ListAgentsResponse_FieldPathValue {
	return &ListAgentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAgentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAgentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAgentsResponse_FieldPathArrayOfValues {
	return &ListAgentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAgentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAgentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAgentsResponse_FieldPathArrayItemValue {
	return &ListAgentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAgentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAgentsResponse_FieldPathValue allows storing values for ListAgentsResponse fields according to their type
type ListAgentsResponse_FieldPathValue interface {
	ListAgentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAgentsResponse)
	CompareWith(*ListAgentsResponse) (cmp int, comparable bool)
}

func ParseListAgentsResponse_FieldPathValue(pathStr, valueStr string) (ListAgentsResponse_FieldPathValue, error) {
	fp, err := ParseListAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAgentsResponse_FieldPathValue), nil
}

func MustParseListAgentsResponse_FieldPathValue(pathStr, valueStr string) ListAgentsResponse_FieldPathValue {
	fpv, err := ParseListAgentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAgentsResponse_FieldTerminalPathValue struct {
	ListAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAgentsResponse_FieldPathValue = (*ListAgentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAgentsResponse' as interface{}
func (fpv *ListAgentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAgentsResponse_FieldTerminalPathValue) AsAgentsValue() ([]*agent.Agent, bool) {
	res, ok := fpv.value.([]*agent.Agent)
	return res, ok
}
func (fpv *ListAgentsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}
func (fpv *ListAgentsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAgentsResponse
func (fpv *ListAgentsResponse_FieldTerminalPathValue) SetTo(target **ListAgentsResponse) {
	if *target == nil {
		*target = new(ListAgentsResponse)
	}
	switch fpv.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		(*target).Agents = fpv.value.([]*agent.Agent)
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*agent.PagerCursor)
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*agent.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAgentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAgentsResponse_FieldTerminalPathValue' with the value under path in 'ListAgentsResponse'.
func (fpv *ListAgentsResponse_FieldTerminalPathValue) CompareWith(source *ListAgentsResponse) (int, bool) {
	switch fpv.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return 0, false
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAgentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAgentsResponse))
}

type ListAgentsResponse_FieldSubPathValue struct {
	ListAgentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAgentsResponse_FieldPathValue = (*ListAgentsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAgentsResponse_FieldSubPathValue) AsAgentsPathValue() (agent.Agent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent.Agent_FieldPathValue)
	return res, ok
}

func (fpvs *ListAgentsResponse_FieldSubPathValue) SetTo(target **ListAgentsResponse) {
	if *target == nil {
		*target = new(ListAgentsResponse)
	}
	switch fpvs.Selector() {
	case ListAgentsResponse_FieldPathSelectorAgents:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAgentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAgentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAgentsResponse_FieldSubPathValue) CompareWith(source *ListAgentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAgentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAgentsResponse))
}

// ListAgentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAgentsResponse according to their type
// Present only for array (repeated) types.
type ListAgentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAgentsResponse_FieldPath
	ContainsValue(*ListAgentsResponse) bool
}

// ParseListAgentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAgentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAgentsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAgentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAgentsResponse_FieldTerminalPathArrayItemValue struct {
	ListAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAgentsResponse_FieldPathArrayItemValue = (*ListAgentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAgentsResponse as interface{}
func (fpaiv *ListAgentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAgentsResponse_FieldTerminalPathArrayItemValue) AsAgentsItemValue() (*agent.Agent, bool) {
	res, ok := fpaiv.value.(*agent.Agent)
	return res, ok
}

func (fpaiv *ListAgentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAgentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAgentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAgentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentsResponse'
func (fpaiv *ListAgentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAgentsResponse) bool {
	slice := fpaiv.ListAgentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAgentsResponse_FieldSubPathArrayItemValue struct {
	ListAgentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAgentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAgentsResponse_FieldSubPathArrayItemValue) AsAgentsPathItemValue() (agent.Agent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentsResponse'
func (fpaivs *ListAgentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAgentsResponse) bool {
	switch fpaivs.Selector() {
	case ListAgentsResponse_FieldPathSelectorAgents:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentsResponse: %d", fpaivs.Selector()))
	}
}

// ListAgentsResponse_FieldPathArrayOfValues allows storing slice of values for ListAgentsResponse fields according to their type
type ListAgentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAgentsResponse_FieldPath
}

func ParseListAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAgentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAgentsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAgentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAgentsResponse_FieldTerminalPathArrayOfValues struct {
	ListAgentsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAgentsResponse_FieldPathArrayOfValues = (*ListAgentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAgentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAgentsResponse_FieldPathSelectorAgents:
		for _, v := range fpaov.values.([][]*agent.Agent) {
			values = append(values, v)
		}
	case ListAgentsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	case ListAgentsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAgentsResponse_FieldTerminalPathArrayOfValues) AsAgentsArrayOfValues() ([][]*agent.Agent, bool) {
	res, ok := fpaov.values.([][]*agent.Agent)
	return res, ok
}
func (fpaov *ListAgentsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}
func (fpaov *ListAgentsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}

type ListAgentsResponse_FieldSubPathArrayOfValues struct {
	ListAgentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAgentsResponse_FieldPathArrayOfValues = (*ListAgentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAgentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAgentsResponse_FieldSubPathArrayOfValues) AsAgentsPathArrayOfValues() (agent.Agent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent.Agent_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentRequest_FieldPathSelector
	Get(source *WatchAgentRequest) []interface{}
	GetSingle(source *WatchAgentRequest) (interface{}, bool)
	ClearValue(item *WatchAgentRequest)

	// Those methods build corresponding WatchAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentRequest_FieldPathArrayItemValue
}

type WatchAgentRequest_FieldPathSelector int32

const (
	WatchAgentRequest_FieldPathSelectorName      WatchAgentRequest_FieldPathSelector = 0
	WatchAgentRequest_FieldPathSelectorFieldMask WatchAgentRequest_FieldPathSelector = 1
	WatchAgentRequest_FieldPathSelectorView      WatchAgentRequest_FieldPathSelector = 2
)

func (s WatchAgentRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAgentRequest_FieldPathSelectorName:
		return "name"
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAgentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", s))
	}
}

func BuildWatchAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAgentRequest_FieldTerminalPath{selector: WatchAgentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentRequest", fp)
}

func ParseWatchAgentRequest_FieldPath(rawField string) (WatchAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentRequest_FieldPath(fp)
}

func MustParseWatchAgentRequest_FieldPath(rawField string) WatchAgentRequest_FieldPath {
	fp, err := ParseWatchAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentRequest_FieldTerminalPath struct {
	selector WatchAgentRequest_FieldPathSelector
}

var _ WatchAgentRequest_FieldPath = (*WatchAgentRequest_FieldTerminalPath)(nil)

func (fp *WatchAgentRequest_FieldTerminalPath) Selector() WatchAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentRequest
func (fp *WatchAgentRequest_FieldTerminalPath) Get(source *WatchAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAgentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAgentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAgentRequest
func (fp *WatchAgentRequest_FieldTerminalPath) GetSingle(source *WatchAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAgentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		return (*agent.Reference)(nil)
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	case WatchAgentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentRequest_FieldTerminalPath) ClearValue(item *WatchAgentRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAgentRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAgentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAgentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentRequest_FieldPathSelectorName ||
		fp.selector == WatchAgentRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAgentRequest_FieldPathSelectorView
}

func (fp *WatchAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAgentRequest_FieldPathValue {
	switch fp.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		return &WatchAgentRequest_FieldTerminalPathValue{WatchAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		return &WatchAgentRequest_FieldTerminalPathValue{WatchAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case WatchAgentRequest_FieldPathSelectorView:
		return &WatchAgentRequest_FieldTerminalPathValue{WatchAgentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentRequest_FieldPathArrayOfValues {
	fpaov := &WatchAgentRequest_FieldTerminalPathArrayOfValues{WatchAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		return &WatchAgentRequest_FieldTerminalPathArrayOfValues{WatchAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Reference)}
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		return &WatchAgentRequest_FieldTerminalPathArrayOfValues{WatchAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case WatchAgentRequest_FieldPathSelectorView:
		return &WatchAgentRequest_FieldTerminalPathArrayOfValues{WatchAgentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentRequest_FieldPathValue allows storing values for WatchAgentRequest fields according to their type
type WatchAgentRequest_FieldPathValue interface {
	WatchAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentRequest)
	CompareWith(*WatchAgentRequest) (cmp int, comparable bool)
}

func ParseWatchAgentRequest_FieldPathValue(pathStr, valueStr string) (WatchAgentRequest_FieldPathValue, error) {
	fp, err := ParseWatchAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentRequest_FieldPathValue), nil
}

func MustParseWatchAgentRequest_FieldPathValue(pathStr, valueStr string) WatchAgentRequest_FieldPathValue {
	fpv, err := ParseWatchAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentRequest_FieldTerminalPathValue struct {
	WatchAgentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentRequest_FieldPathValue = (*WatchAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentRequest' as interface{}
func (fpv *WatchAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentRequest_FieldTerminalPathValue) AsNameValue() (*agent.Reference, bool) {
	res, ok := fpv.value.(*agent.Reference)
	return res, ok
}
func (fpv *WatchAgentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *WatchAgentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentRequest
func (fpv *WatchAgentRequest_FieldTerminalPathValue) SetTo(target **WatchAgentRequest) {
	if *target == nil {
		*target = new(WatchAgentRequest)
	}
	switch fpv.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent.Reference)
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	case WatchAgentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentRequest_FieldTerminalPathValue' with the value under path in 'WatchAgentRequest'.
func (fpv *WatchAgentRequest_FieldTerminalPathValue) CompareWith(source *WatchAgentRequest) (int, bool) {
	switch fpv.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAgentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentRequest))
}

// WatchAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentRequest according to their type
// Present only for array (repeated) types.
type WatchAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentRequest_FieldPath
	ContainsValue(*WatchAgentRequest) bool
}

// ParseWatchAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentRequest_FieldTerminalPathArrayItemValue struct {
	WatchAgentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentRequest_FieldPathArrayItemValue = (*WatchAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentRequest as interface{}
func (fpaiv *WatchAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentRequest'
func (fpaiv *WatchAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentRequest) bool {
	slice := fpaiv.WatchAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentRequest_FieldPathArrayOfValues allows storing slice of values for WatchAgentRequest fields according to their type
type WatchAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentRequest_FieldPath
}

func ParseWatchAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentRequest_FieldTerminalPathArrayOfValues struct {
	WatchAgentRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAgentRequest_FieldPathArrayOfValues = (*WatchAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent.Reference) {
			values = append(values, v)
		}
	case WatchAgentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case WatchAgentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent.Reference, bool) {
	res, ok := fpaov.values.([]*agent.Reference)
	return res, ok
}
func (fpaov *WatchAgentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *WatchAgentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentResponse_FieldPathSelector
	Get(source *WatchAgentResponse) []interface{}
	GetSingle(source *WatchAgentResponse) (interface{}, bool)
	ClearValue(item *WatchAgentResponse)

	// Those methods build corresponding WatchAgentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentResponse_FieldPathArrayItemValue
}

type WatchAgentResponse_FieldPathSelector int32

const (
	WatchAgentResponse_FieldPathSelectorChange WatchAgentResponse_FieldPathSelector = 0
)

func (s WatchAgentResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAgentResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", s))
	}
}

func BuildWatchAgentResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAgentResponse_FieldTerminalPath{selector: WatchAgentResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentResponse", fp)
}

func ParseWatchAgentResponse_FieldPath(rawField string) (WatchAgentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentResponse_FieldPath(fp)
}

func MustParseWatchAgentResponse_FieldPath(rawField string) WatchAgentResponse_FieldPath {
	fp, err := ParseWatchAgentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentResponse_FieldTerminalPath struct {
	selector WatchAgentResponse_FieldPathSelector
}

var _ WatchAgentResponse_FieldPath = (*WatchAgentResponse_FieldTerminalPath)(nil)

func (fp *WatchAgentResponse_FieldTerminalPath) Selector() WatchAgentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentResponse
func (fp *WatchAgentResponse_FieldTerminalPath) Get(source *WatchAgentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAgentResponse
func (fp *WatchAgentResponse_FieldTerminalPath) GetSingle(source *WatchAgentResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		return (*agent.AgentChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentResponse_FieldTerminalPath) ClearValue(item *WatchAgentResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAgentResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentResponse_FieldPathSelectorChange
}

func (fp *WatchAgentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAgentResponse_FieldPathValue {
	switch fp.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		return &WatchAgentResponse_FieldTerminalPathValue{WatchAgentResponse_FieldTerminalPath: *fp, value: value.(*agent.AgentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentResponse_FieldPathArrayOfValues {
	fpaov := &WatchAgentResponse_FieldTerminalPathArrayOfValues{WatchAgentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		return &WatchAgentResponse_FieldTerminalPathArrayOfValues{WatchAgentResponse_FieldTerminalPath: *fp, values: values.([]*agent.AgentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentResponse_FieldPathValue allows storing values for WatchAgentResponse fields according to their type
type WatchAgentResponse_FieldPathValue interface {
	WatchAgentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentResponse)
	CompareWith(*WatchAgentResponse) (cmp int, comparable bool)
}

func ParseWatchAgentResponse_FieldPathValue(pathStr, valueStr string) (WatchAgentResponse_FieldPathValue, error) {
	fp, err := ParseWatchAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentResponse_FieldPathValue), nil
}

func MustParseWatchAgentResponse_FieldPathValue(pathStr, valueStr string) WatchAgentResponse_FieldPathValue {
	fpv, err := ParseWatchAgentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentResponse_FieldTerminalPathValue struct {
	WatchAgentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentResponse_FieldPathValue = (*WatchAgentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentResponse' as interface{}
func (fpv *WatchAgentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentResponse_FieldTerminalPathValue) AsChangeValue() (*agent.AgentChange, bool) {
	res, ok := fpv.value.(*agent.AgentChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentResponse
func (fpv *WatchAgentResponse_FieldTerminalPathValue) SetTo(target **WatchAgentResponse) {
	if *target == nil {
		*target = new(WatchAgentResponse)
	}
	switch fpv.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*agent.AgentChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentResponse_FieldTerminalPathValue' with the value under path in 'WatchAgentResponse'.
func (fpv *WatchAgentResponse_FieldTerminalPathValue) CompareWith(source *WatchAgentResponse) (int, bool) {
	switch fpv.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentResponse))
}

// WatchAgentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentResponse according to their type
// Present only for array (repeated) types.
type WatchAgentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentResponse_FieldPath
	ContainsValue(*WatchAgentResponse) bool
}

// ParseWatchAgentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentResponse_FieldTerminalPathArrayItemValue struct {
	WatchAgentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentResponse_FieldPathArrayItemValue = (*WatchAgentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentResponse as interface{}
func (fpaiv *WatchAgentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentResponse'
func (fpaiv *WatchAgentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentResponse) bool {
	slice := fpaiv.WatchAgentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentResponse_FieldPathArrayOfValues allows storing slice of values for WatchAgentResponse fields according to their type
type WatchAgentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentResponse_FieldPath
}

func ParseWatchAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentResponse_FieldTerminalPathArrayOfValues struct {
	WatchAgentResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAgentResponse_FieldPathArrayOfValues = (*WatchAgentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*agent.AgentChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*agent.AgentChange, bool) {
	res, ok := fpaov.values.([]*agent.AgentChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentsRequest_FieldPathSelector
	Get(source *WatchAgentsRequest) []interface{}
	GetSingle(source *WatchAgentsRequest) (interface{}, bool)
	ClearValue(item *WatchAgentsRequest)

	// Those methods build corresponding WatchAgentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentsRequest_FieldPathArrayItemValue
}

type WatchAgentsRequest_FieldPathSelector int32

const (
	WatchAgentsRequest_FieldPathSelectorType         WatchAgentsRequest_FieldPathSelector = 0
	WatchAgentsRequest_FieldPathSelectorParent       WatchAgentsRequest_FieldPathSelector = 1
	WatchAgentsRequest_FieldPathSelectorPageSize     WatchAgentsRequest_FieldPathSelector = 2
	WatchAgentsRequest_FieldPathSelectorPageToken    WatchAgentsRequest_FieldPathSelector = 3
	WatchAgentsRequest_FieldPathSelectorOrderBy      WatchAgentsRequest_FieldPathSelector = 4
	WatchAgentsRequest_FieldPathSelectorResumeToken  WatchAgentsRequest_FieldPathSelector = 5
	WatchAgentsRequest_FieldPathSelectorStartingTime WatchAgentsRequest_FieldPathSelector = 6
	WatchAgentsRequest_FieldPathSelectorFilter       WatchAgentsRequest_FieldPathSelector = 7
	WatchAgentsRequest_FieldPathSelectorFieldMask    WatchAgentsRequest_FieldPathSelector = 8
	WatchAgentsRequest_FieldPathSelectorView         WatchAgentsRequest_FieldPathSelector = 9
	WatchAgentsRequest_FieldPathSelectorMaxChunkSize WatchAgentsRequest_FieldPathSelector = 10
)

func (s WatchAgentsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAgentsRequest_FieldPathSelectorType:
		return "type"
	case WatchAgentsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchAgentsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAgentsRequest_FieldPathSelectorView:
		return "view"
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", s))
	}
}

func BuildWatchAgentsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAgentsRequest_FieldTerminalPath{selector: WatchAgentsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentsRequest", fp)
}

func ParseWatchAgentsRequest_FieldPath(rawField string) (WatchAgentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentsRequest_FieldPath(fp)
}

func MustParseWatchAgentsRequest_FieldPath(rawField string) WatchAgentsRequest_FieldPath {
	fp, err := ParseWatchAgentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentsRequest_FieldTerminalPath struct {
	selector WatchAgentsRequest_FieldPathSelector
}

var _ WatchAgentsRequest_FieldPath = (*WatchAgentsRequest_FieldTerminalPath)(nil)

func (fp *WatchAgentsRequest_FieldTerminalPath) Selector() WatchAgentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentsRequest
func (fp *WatchAgentsRequest_FieldTerminalPath) Get(source *WatchAgentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAgentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAgentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAgentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAgentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAgentsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAgentsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchAgentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAgentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAgentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAgentsRequest
func (fp *WatchAgentsRequest_FieldTerminalPath) GetSingle(source *WatchAgentsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAgentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAgentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAgentsRequest_FieldPathSelectorParent:
		return (*agent.ParentReference)(nil)
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		return (*agent.PagerCursor)(nil)
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		return (*agent.OrderBy)(nil)
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchAgentsRequest_FieldPathSelectorFilter:
		return (*agent.Filter)(nil)
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	case WatchAgentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) ClearValue(item *WatchAgentsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAgentsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAgentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAgentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAgentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAgentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAgentsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAgentsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchAgentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAgentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAgentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentsRequest_FieldPathSelectorType ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorParent ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorView ||
		fp.selector == WatchAgentsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAgentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAgentsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAgentsRequest_FieldPathSelectorParent:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.ParentReference)}
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.OrderBy)}
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchAgentsRequest_FieldPathSelectorFilter:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Filter)}
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case WatchAgentsRequest_FieldPathSelectorView:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAgentsRequest_FieldTerminalPathValue{WatchAgentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAgentsRequest_FieldPathSelectorParent:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.ParentReference)}
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.OrderBy)}
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchAgentsRequest_FieldPathSelectorFilter:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.Filter)}
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case WatchAgentsRequest_FieldPathSelectorView:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAgentsRequest_FieldTerminalPathArrayOfValues{WatchAgentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentsRequest_FieldPathValue allows storing values for WatchAgentsRequest fields according to their type
type WatchAgentsRequest_FieldPathValue interface {
	WatchAgentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentsRequest)
	CompareWith(*WatchAgentsRequest) (cmp int, comparable bool)
}

func ParseWatchAgentsRequest_FieldPathValue(pathStr, valueStr string) (WatchAgentsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentsRequest_FieldPathValue), nil
}

func MustParseWatchAgentsRequest_FieldPathValue(pathStr, valueStr string) WatchAgentsRequest_FieldPathValue {
	fpv, err := ParseWatchAgentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentsRequest_FieldTerminalPathValue struct {
	WatchAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsRequest_FieldPathValue = (*WatchAgentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentsRequest' as interface{}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsParentValue() (*agent.ParentReference, bool) {
	res, ok := fpv.value.(*agent.ParentReference)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsOrderByValue() (*agent.OrderBy, bool) {
	res, ok := fpv.value.(*agent.OrderBy)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsFilterValue() (*agent.Filter, bool) {
	res, ok := fpv.value.(*agent.Filter)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentsRequest
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) SetTo(target **WatchAgentsRequest) {
	if *target == nil {
		*target = new(WatchAgentsRequest)
	}
	switch fpv.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAgentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*agent.ParentReference)
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*agent.PagerCursor)
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*agent.OrderBy)
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchAgentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*agent.Filter)
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	case WatchAgentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentsRequest_FieldTerminalPathValue' with the value under path in 'WatchAgentsRequest'.
func (fpv *WatchAgentsRequest_FieldTerminalPathValue) CompareWith(source *WatchAgentsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*agent.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAgentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentsRequest))
}

// WatchAgentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentsRequest according to their type
// Present only for array (repeated) types.
type WatchAgentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentsRequest_FieldPath
	ContainsValue(*WatchAgentsRequest) bool
}

// ParseWatchAgentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAgentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsRequest_FieldPathArrayItemValue = (*WatchAgentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentsRequest as interface{}
func (fpaiv *WatchAgentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentsRequest'
func (fpaiv *WatchAgentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentsRequest) bool {
	slice := fpaiv.WatchAgentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAgentsRequest fields according to their type
type WatchAgentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentsRequest_FieldPath
}

func ParseWatchAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAgentsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAgentsRequest_FieldPathArrayOfValues = (*WatchAgentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*agent.ParentReference) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*agent.OrderBy) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*agent.Filter) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAgentsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*agent.ParentReference, bool) {
	res, ok := fpaov.values.([]*agent.ParentReference)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*agent.OrderBy, bool) {
	res, ok := fpaov.values.([]*agent.OrderBy)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*agent.Filter, bool) {
	res, ok := fpaov.values.([]*agent.Filter)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAgentsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentsResponse_FieldPathSelector
	Get(source *WatchAgentsResponse) []interface{}
	GetSingle(source *WatchAgentsResponse) (interface{}, bool)
	ClearValue(item *WatchAgentsResponse)

	// Those methods build corresponding WatchAgentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentsResponse_FieldPathArrayItemValue
}

type WatchAgentsResponse_FieldPathSelector int32

const (
	WatchAgentsResponse_FieldPathSelectorAgentChanges    WatchAgentsResponse_FieldPathSelector = 0
	WatchAgentsResponse_FieldPathSelectorIsCurrent       WatchAgentsResponse_FieldPathSelector = 1
	WatchAgentsResponse_FieldPathSelectorPageTokenChange WatchAgentsResponse_FieldPathSelector = 2
	WatchAgentsResponse_FieldPathSelectorResumeToken     WatchAgentsResponse_FieldPathSelector = 3
	WatchAgentsResponse_FieldPathSelectorSnapshotSize    WatchAgentsResponse_FieldPathSelector = 4
	WatchAgentsResponse_FieldPathSelectorIsSoftReset     WatchAgentsResponse_FieldPathSelector = 5
	WatchAgentsResponse_FieldPathSelectorIsHardReset     WatchAgentsResponse_FieldPathSelector = 6
)

func (s WatchAgentsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return "agent_changes"
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", s))
	}
}

func BuildWatchAgentsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_changes", "agentChanges", "agent-changes":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorAgentChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAgentsResponse_FieldTerminalPath{selector: WatchAgentsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAgentsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAgentsResponse_FieldSubPath{selector: WatchAgentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentsResponse", fp)
}

func ParseWatchAgentsResponse_FieldPath(rawField string) (WatchAgentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentsResponse_FieldPath(fp)
}

func MustParseWatchAgentsResponse_FieldPath(rawField string) WatchAgentsResponse_FieldPath {
	fp, err := ParseWatchAgentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentsResponse_FieldTerminalPath struct {
	selector WatchAgentsResponse_FieldPathSelector
}

var _ WatchAgentsResponse_FieldPath = (*WatchAgentsResponse_FieldTerminalPath)(nil)

func (fp *WatchAgentsResponse_FieldTerminalPath) Selector() WatchAgentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentsResponse
func (fp *WatchAgentsResponse_FieldTerminalPath) Get(source *WatchAgentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentsResponse_FieldPathSelectorAgentChanges:
			for _, value := range source.GetAgentChanges() {
				values = append(values, value)
			}
		case WatchAgentsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAgentsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAgentsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAgentsResponse
func (fp *WatchAgentsResponse_FieldTerminalPath) GetSingle(source *WatchAgentsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		res := source.GetAgentChanges()
		return res, res != nil
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return ([]*agent.AgentChange)(nil)
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAgentsResponse_PageTokenChange)(nil)
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) ClearValue(item *WatchAgentsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAgentsResponse_FieldPathSelectorAgentChanges:
			item.AgentChanges = nil
		case WatchAgentsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAgentsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAgentsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentsResponse_FieldPathSelectorAgentChanges ||
		fp.selector == WatchAgentsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAgentsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAgentsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAgentsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAgentsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAgentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAgentsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.([]*agent.AgentChange)}
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(*WatchAgentsResponse_PageTokenChange)}
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		return &WatchAgentsResponse_FieldTerminalPathValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([][]*agent.AgentChange)}
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAgentsResponse_PageTokenChange)}
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		return &WatchAgentsResponse_FieldTerminalPathArrayOfValues{WatchAgentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return &WatchAgentsResponse_FieldTerminalPathArrayItemValue{WatchAgentsResponse_FieldTerminalPath: *fp, value: value.(*agent.AgentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAgentsResponse_FieldSubPath struct {
	selector WatchAgentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAgentsResponse_FieldPath = (*WatchAgentsResponse_FieldSubPath)(nil)

func (fps *WatchAgentsResponse_FieldSubPath) Selector() WatchAgentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAgentsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAgentsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAgentsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAgentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAgentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAgentsResponse
func (fps *WatchAgentsResponse_FieldSubPath) Get(source *WatchAgentsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAgentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAgentsResponse))
}

// GetSingle returns value of selected field from source WatchAgentsResponse
func (fps *WatchAgentsResponse_FieldSubPath) GetSingle(source *WatchAgentsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fps.selector))
	}
}

func (fps *WatchAgentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAgentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAgentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAgentsResponse_FieldSubPath) ClearValue(item *WatchAgentsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAgentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAgentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAgentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAgentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchAgentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchAgentsResponse_FieldSubPath) WithIValue(value interface{}) WatchAgentsResponse_FieldPathValue {
	return &WatchAgentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAgentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAgentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAgentsResponse_FieldPathArrayOfValues {
	return &WatchAgentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAgentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAgentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAgentsResponse_FieldPathArrayItemValue {
	return &WatchAgentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAgentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAgentsResponse_FieldPathValue allows storing values for WatchAgentsResponse fields according to their type
type WatchAgentsResponse_FieldPathValue interface {
	WatchAgentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentsResponse)
	CompareWith(*WatchAgentsResponse) (cmp int, comparable bool)
}

func ParseWatchAgentsResponse_FieldPathValue(pathStr, valueStr string) (WatchAgentsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentsResponse_FieldPathValue), nil
}

func MustParseWatchAgentsResponse_FieldPathValue(pathStr, valueStr string) WatchAgentsResponse_FieldPathValue {
	fpv, err := ParseWatchAgentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentsResponse_FieldTerminalPathValue struct {
	WatchAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsResponse_FieldPathValue = (*WatchAgentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentsResponse' as interface{}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsAgentChangesValue() ([]*agent.AgentChange, bool) {
	res, ok := fpv.value.([]*agent.AgentChange)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAgentsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAgentsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentsResponse
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) SetTo(target **WatchAgentsResponse) {
	if *target == nil {
		*target = new(WatchAgentsResponse)
	}
	switch fpv.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		(*target).AgentChanges = fpv.value.([]*agent.AgentChange)
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAgentsResponse_PageTokenChange)
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentsResponse_FieldTerminalPathValue' with the value under path in 'WatchAgentsResponse'.
func (fpv *WatchAgentsResponse_FieldTerminalPathValue) CompareWith(source *WatchAgentsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		return 0, false
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentsResponse))
}

type WatchAgentsResponse_FieldSubPathValue struct {
	WatchAgentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAgentsResponse_FieldPathValue = (*WatchAgentsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAgentsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAgentsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAgentsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAgentsResponse_FieldSubPathValue) SetTo(target **WatchAgentsResponse) {
	if *target == nil {
		*target = new(WatchAgentsResponse)
	}
	switch fpvs.Selector() {
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAgentsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAgentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAgentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAgentsResponse_FieldSubPathValue) CompareWith(source *WatchAgentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAgentsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAgentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAgentsResponse))
}

// WatchAgentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentsResponse according to their type
// Present only for array (repeated) types.
type WatchAgentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentsResponse_FieldPath
	ContainsValue(*WatchAgentsResponse) bool
}

// ParseWatchAgentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAgentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsResponse_FieldPathArrayItemValue = (*WatchAgentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentsResponse as interface{}
func (fpaiv *WatchAgentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAgentsResponse_FieldTerminalPathArrayItemValue) AsAgentChangesItemValue() (*agent.AgentChange, bool) {
	res, ok := fpaiv.value.(*agent.AgentChange)
	return res, ok
}

func (fpaiv *WatchAgentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentsResponse'
func (fpaiv *WatchAgentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentsResponse) bool {
	slice := fpaiv.WatchAgentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAgentsResponse_FieldSubPathArrayItemValue struct {
	WatchAgentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAgentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAgentsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentsResponse'
func (fpaivs *WatchAgentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAgentsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAgentsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAgentsResponse fields according to their type
type WatchAgentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentsResponse_FieldPath
}

func ParseWatchAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAgentsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAgentsResponse_FieldPathArrayOfValues = (*WatchAgentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentsResponse_FieldPathSelectorAgentChanges:
		for _, v := range fpaov.values.([][]*agent.AgentChange) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAgentsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAgentsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsAgentChangesArrayOfValues() ([][]*agent.AgentChange, bool) {
	res, ok := fpaov.values.([][]*agent.AgentChange)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAgentsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAgentsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAgentsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAgentsResponse_FieldSubPathArrayOfValues struct {
	WatchAgentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAgentsResponse_FieldPathArrayOfValues = (*WatchAgentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAgentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAgentsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAgentsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAgentsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAgentsResponse_PageTokenChange)

	// Those methods build corresponding WatchAgentsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAgentsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAgentsResponsePageTokenChange_FieldPathSelector = 0
	WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAgentsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAgentsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAgentsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAgentsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAgentsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentsResponse_PageTokenChange", fp)
}

func ParseWatchAgentsResponsePageTokenChange_FieldPath(rawField string) (WatchAgentsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAgentsResponsePageTokenChange_FieldPath(rawField string) WatchAgentsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAgentsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAgentsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAgentsResponsePageTokenChange_FieldPath = (*WatchAgentsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAgentsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentsResponse_PageTokenChange
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAgentsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAgentsResponse_PageTokenChange
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAgentsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*agent.PagerCursor)(nil)
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*agent.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAgentsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAgentsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAgentsResponsePageTokenChange_FieldTerminalPathValue{WatchAgentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAgentsResponsePageTokenChange_FieldTerminalPathValue{WatchAgentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*agent.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*agent.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAgentsResponsePageTokenChange_FieldPathValue interface {
	WatchAgentsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentsResponse_PageTokenChange)
	CompareWith(*WatchAgentsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAgentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAgentsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAgentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAgentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAgentsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAgentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAgentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsResponsePageTokenChange_FieldPathValue = (*WatchAgentsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}
func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*agent.PagerCursor, bool) {
	res, ok := fpv.value.(*agent.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAgentsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAgentsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*agent.PagerCursor)
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*agent.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAgentsResponse_PageTokenChange'.
func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAgentsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAgentsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentsResponse_PageTokenChange))
}

// WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAgentsResponse_PageTokenChange) bool
}

// ParseWatchAgentsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAgentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAgentsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAgentsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentsResponsePageTokenChange_FieldPath
}

func ParseWatchAgentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAgentsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAgentsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	case WatchAgentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*agent.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}
func (fpaov *WatchAgentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*agent.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAgentRequest_FieldPathSelector
	Get(source *CreateAgentRequest) []interface{}
	GetSingle(source *CreateAgentRequest) (interface{}, bool)
	ClearValue(item *CreateAgentRequest)

	// Those methods build corresponding CreateAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAgentRequest_FieldPathArrayItemValue
}

type CreateAgentRequest_FieldPathSelector int32

const (
	CreateAgentRequest_FieldPathSelectorParent CreateAgentRequest_FieldPathSelector = 0
	CreateAgentRequest_FieldPathSelectorAgent  CreateAgentRequest_FieldPathSelector = 1
)

func (s CreateAgentRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAgentRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAgentRequest_FieldPathSelectorAgent:
		return "agent"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", s))
	}
}

func BuildCreateAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAgentRequest_FieldTerminalPath{selector: CreateAgentRequest_FieldPathSelectorParent}, nil
		case "agent":
			return &CreateAgentRequest_FieldTerminalPath{selector: CreateAgentRequest_FieldPathSelectorAgent}, nil
		}
	} else {
		switch fp[0] {
		case "agent":
			if subpath, err := agent.BuildAgent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAgentRequest_FieldSubPath{selector: CreateAgentRequest_FieldPathSelectorAgent, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAgentRequest", fp)
}

func ParseCreateAgentRequest_FieldPath(rawField string) (CreateAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAgentRequest_FieldPath(fp)
}

func MustParseCreateAgentRequest_FieldPath(rawField string) CreateAgentRequest_FieldPath {
	fp, err := ParseCreateAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAgentRequest_FieldTerminalPath struct {
	selector CreateAgentRequest_FieldPathSelector
}

var _ CreateAgentRequest_FieldPath = (*CreateAgentRequest_FieldTerminalPath)(nil)

func (fp *CreateAgentRequest_FieldTerminalPath) Selector() CreateAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAgentRequest
func (fp *CreateAgentRequest_FieldTerminalPath) Get(source *CreateAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAgentRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAgentRequest_FieldPathSelectorAgent:
			if source.Agent != nil {
				values = append(values, source.Agent)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAgentRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAgentRequest
func (fp *CreateAgentRequest_FieldTerminalPath) GetSingle(source *CreateAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAgentRequest_FieldPathSelectorAgent:
		res := source.GetAgent()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		return (*agent.ParentReference)(nil)
	case CreateAgentRequest_FieldPathSelectorAgent:
		return (*agent.Agent)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentRequest_FieldTerminalPath) ClearValue(item *CreateAgentRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAgentRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAgentRequest_FieldPathSelectorAgent:
			item.Agent = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAgentRequest_FieldPathSelectorParent
}

func (fp *CreateAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAgentRequest_FieldPathValue {
	switch fp.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		return &CreateAgentRequest_FieldTerminalPathValue{CreateAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.ParentReference)}
	case CreateAgentRequest_FieldPathSelectorAgent:
		return &CreateAgentRequest_FieldTerminalPathValue{CreateAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAgentRequest_FieldPathArrayOfValues {
	fpaov := &CreateAgentRequest_FieldTerminalPathArrayOfValues{CreateAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		return &CreateAgentRequest_FieldTerminalPathArrayOfValues{CreateAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.ParentReference)}
	case CreateAgentRequest_FieldPathSelectorAgent:
		return &CreateAgentRequest_FieldTerminalPathArrayOfValues{CreateAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAgentRequest_FieldSubPath struct {
	selector CreateAgentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAgentRequest_FieldPath = (*CreateAgentRequest_FieldSubPath)(nil)

func (fps *CreateAgentRequest_FieldSubPath) Selector() CreateAgentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAgentRequest_FieldSubPath) AsAgentSubPath() (agent.Agent_FieldPath, bool) {
	res, ok := fps.subPath.(agent.Agent_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAgentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAgentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAgentRequest
func (fps *CreateAgentRequest_FieldSubPath) Get(source *CreateAgentRequest) (values []interface{}) {
	if asAgentFieldPath, ok := fps.AsAgentSubPath(); ok {
		values = append(values, asAgentFieldPath.Get(source.GetAgent())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAgentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAgentRequest))
}

// GetSingle returns value of selected field from source CreateAgentRequest
func (fps *CreateAgentRequest_FieldSubPath) GetSingle(source *CreateAgentRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAgentRequest_FieldPathSelectorAgent:
		if source.GetAgent() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgent())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fps.selector))
	}
}

func (fps *CreateAgentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAgentRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAgentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAgentRequest_FieldSubPath) ClearValue(item *CreateAgentRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAgentRequest_FieldPathSelectorAgent:
			fps.subPath.ClearValueRaw(item.Agent)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAgentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAgentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAgentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateAgentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateAgentRequest_FieldSubPath) WithIValue(value interface{}) CreateAgentRequest_FieldPathValue {
	return &CreateAgentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAgentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAgentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAgentRequest_FieldPathArrayOfValues {
	return &CreateAgentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAgentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAgentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAgentRequest_FieldPathArrayItemValue {
	return &CreateAgentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAgentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAgentRequest_FieldPathValue allows storing values for CreateAgentRequest fields according to their type
type CreateAgentRequest_FieldPathValue interface {
	CreateAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAgentRequest)
	CompareWith(*CreateAgentRequest) (cmp int, comparable bool)
}

func ParseCreateAgentRequest_FieldPathValue(pathStr, valueStr string) (CreateAgentRequest_FieldPathValue, error) {
	fp, err := ParseCreateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAgentRequest_FieldPathValue), nil
}

func MustParseCreateAgentRequest_FieldPathValue(pathStr, valueStr string) CreateAgentRequest_FieldPathValue {
	fpv, err := ParseCreateAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAgentRequest_FieldTerminalPathValue struct {
	CreateAgentRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAgentRequest_FieldPathValue = (*CreateAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAgentRequest' as interface{}
func (fpv *CreateAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAgentRequest_FieldTerminalPathValue) AsParentValue() (*agent.ParentReference, bool) {
	res, ok := fpv.value.(*agent.ParentReference)
	return res, ok
}
func (fpv *CreateAgentRequest_FieldTerminalPathValue) AsAgentValue() (*agent.Agent, bool) {
	res, ok := fpv.value.(*agent.Agent)
	return res, ok
}

// SetTo stores value for selected field for object CreateAgentRequest
func (fpv *CreateAgentRequest_FieldTerminalPathValue) SetTo(target **CreateAgentRequest) {
	if *target == nil {
		*target = new(CreateAgentRequest)
	}
	switch fpv.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*agent.ParentReference)
	case CreateAgentRequest_FieldPathSelectorAgent:
		(*target).Agent = fpv.value.(*agent.Agent)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAgentRequest_FieldTerminalPathValue' with the value under path in 'CreateAgentRequest'.
func (fpv *CreateAgentRequest_FieldTerminalPathValue) CompareWith(source *CreateAgentRequest) (int, bool) {
	switch fpv.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*agent.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAgentRequest_FieldPathSelectorAgent:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAgentRequest))
}

type CreateAgentRequest_FieldSubPathValue struct {
	CreateAgentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAgentRequest_FieldPathValue = (*CreateAgentRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAgentRequest_FieldSubPathValue) AsAgentPathValue() (agent.Agent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent.Agent_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAgentRequest_FieldSubPathValue) SetTo(target **CreateAgentRequest) {
	if *target == nil {
		*target = new(CreateAgentRequest)
	}
	switch fpvs.Selector() {
	case CreateAgentRequest_FieldPathSelectorAgent:
		fpvs.subPathValue.(agent.Agent_FieldPathValue).SetTo(&(*target).Agent)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAgentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAgentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAgentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAgentRequest_FieldSubPathValue) CompareWith(source *CreateAgentRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAgentRequest_FieldPathSelectorAgent:
		return fpvs.subPathValue.(agent.Agent_FieldPathValue).CompareWith(source.GetAgent())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAgentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAgentRequest))
}

// CreateAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAgentRequest according to their type
// Present only for array (repeated) types.
type CreateAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAgentRequest_FieldPath
	ContainsValue(*CreateAgentRequest) bool
}

// ParseCreateAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAgentRequest_FieldTerminalPathArrayItemValue struct {
	CreateAgentRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAgentRequest_FieldPathArrayItemValue = (*CreateAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAgentRequest as interface{}
func (fpaiv *CreateAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAgentRequest'
func (fpaiv *CreateAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAgentRequest) bool {
	slice := fpaiv.CreateAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAgentRequest_FieldSubPathArrayItemValue struct {
	CreateAgentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAgentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAgentRequest_FieldSubPathArrayItemValue) AsAgentPathItemValue() (agent.Agent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAgentRequest'
func (fpaivs *CreateAgentRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAgentRequest) bool {
	switch fpaivs.Selector() {
	case CreateAgentRequest_FieldPathSelectorAgent:
		return fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue).ContainsValue(source.GetAgent())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentRequest: %d", fpaivs.Selector()))
	}
}

// CreateAgentRequest_FieldPathArrayOfValues allows storing slice of values for CreateAgentRequest fields according to their type
type CreateAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAgentRequest_FieldPath
}

func ParseCreateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAgentRequest_FieldTerminalPathArrayOfValues struct {
	CreateAgentRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAgentRequest_FieldPathArrayOfValues = (*CreateAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAgentRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*agent.ParentReference) {
			values = append(values, v)
		}
	case CreateAgentRequest_FieldPathSelectorAgent:
		for _, v := range fpaov.values.([]*agent.Agent) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAgentRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*agent.ParentReference, bool) {
	res, ok := fpaov.values.([]*agent.ParentReference)
	return res, ok
}
func (fpaov *CreateAgentRequest_FieldTerminalPathArrayOfValues) AsAgentArrayOfValues() ([]*agent.Agent, bool) {
	res, ok := fpaov.values.([]*agent.Agent)
	return res, ok
}

type CreateAgentRequest_FieldSubPathArrayOfValues struct {
	CreateAgentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAgentRequest_FieldPathArrayOfValues = (*CreateAgentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAgentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAgentRequest_FieldSubPathArrayOfValues) AsAgentPathArrayOfValues() (agent.Agent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent.Agent_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAgentRequest_FieldPathSelector
	Get(source *UpdateAgentRequest) []interface{}
	GetSingle(source *UpdateAgentRequest) (interface{}, bool)
	ClearValue(item *UpdateAgentRequest)

	// Those methods build corresponding UpdateAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAgentRequest_FieldPathArrayItemValue
}

type UpdateAgentRequest_FieldPathSelector int32

const (
	UpdateAgentRequest_FieldPathSelectorAgent      UpdateAgentRequest_FieldPathSelector = 0
	UpdateAgentRequest_FieldPathSelectorUpdateMask UpdateAgentRequest_FieldPathSelector = 1
	UpdateAgentRequest_FieldPathSelectorCas        UpdateAgentRequest_FieldPathSelector = 2
)

func (s UpdateAgentRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return "agent"
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAgentRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", s))
	}
}

func BuildUpdateAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent":
			return &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorAgent}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAgentRequest_FieldTerminalPath{selector: UpdateAgentRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "agent":
			if subpath, err := agent.BuildAgent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentRequest_FieldSubPath{selector: UpdateAgentRequest_FieldPathSelectorAgent, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAgentRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentRequest_FieldSubPath{selector: UpdateAgentRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAgentRequest", fp)
}

func ParseUpdateAgentRequest_FieldPath(rawField string) (UpdateAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAgentRequest_FieldPath(fp)
}

func MustParseUpdateAgentRequest_FieldPath(rawField string) UpdateAgentRequest_FieldPath {
	fp, err := ParseUpdateAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAgentRequest_FieldTerminalPath struct {
	selector UpdateAgentRequest_FieldPathSelector
}

var _ UpdateAgentRequest_FieldPath = (*UpdateAgentRequest_FieldTerminalPath)(nil)

func (fp *UpdateAgentRequest_FieldTerminalPath) Selector() UpdateAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAgentRequest
func (fp *UpdateAgentRequest_FieldTerminalPath) Get(source *UpdateAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAgentRequest_FieldPathSelectorAgent:
			if source.Agent != nil {
				values = append(values, source.Agent)
			}
		case UpdateAgentRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAgentRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAgentRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAgentRequest
func (fp *UpdateAgentRequest_FieldTerminalPath) GetSingle(source *UpdateAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		res := source.GetAgent()
		return res, res != nil
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAgentRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return (*agent.Agent)(nil)
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		return (*agent.Agent_FieldMask)(nil)
	case UpdateAgentRequest_FieldPathSelectorCas:
		return (*UpdateAgentRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) ClearValue(item *UpdateAgentRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAgentRequest_FieldPathSelectorAgent:
			item.Agent = nil
		case UpdateAgentRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAgentRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAgentRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAgentRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return &UpdateAgentRequest_FieldTerminalPathValue{UpdateAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent)}
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		return &UpdateAgentRequest_FieldTerminalPathValue{UpdateAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	case UpdateAgentRequest_FieldPathSelectorCas:
		return &UpdateAgentRequest_FieldTerminalPathValue{UpdateAgentRequest_FieldTerminalPath: *fp, value: value.(*UpdateAgentRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAgentRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAgentRequest_FieldTerminalPathArrayOfValues{UpdateAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return &UpdateAgentRequest_FieldTerminalPathArrayOfValues{UpdateAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent)}
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		return &UpdateAgentRequest_FieldTerminalPathArrayOfValues{UpdateAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	case UpdateAgentRequest_FieldPathSelectorCas:
		return &UpdateAgentRequest_FieldTerminalPathArrayOfValues{UpdateAgentRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAgentRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAgentRequest_FieldSubPath struct {
	selector UpdateAgentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAgentRequest_FieldPath = (*UpdateAgentRequest_FieldSubPath)(nil)

func (fps *UpdateAgentRequest_FieldSubPath) Selector() UpdateAgentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAgentRequest_FieldSubPath) AsAgentSubPath() (agent.Agent_FieldPath, bool) {
	res, ok := fps.subPath.(agent.Agent_FieldPath)
	return res, ok
}
func (fps *UpdateAgentRequest_FieldSubPath) AsCasSubPath() (UpdateAgentRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAgentRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAgentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAgentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAgentRequest
func (fps *UpdateAgentRequest_FieldSubPath) Get(source *UpdateAgentRequest) (values []interface{}) {
	if asAgentFieldPath, ok := fps.AsAgentSubPath(); ok {
		values = append(values, asAgentFieldPath.Get(source.GetAgent())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAgentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAgentRequest))
}

// GetSingle returns value of selected field from source UpdateAgentRequest
func (fps *UpdateAgentRequest_FieldSubPath) GetSingle(source *UpdateAgentRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		if source.GetAgent() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgent())
	case UpdateAgentRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fps.selector))
	}
}

func (fps *UpdateAgentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAgentRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAgentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAgentRequest_FieldSubPath) ClearValue(item *UpdateAgentRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAgentRequest_FieldPathSelectorAgent:
			fps.subPath.ClearValueRaw(item.Agent)
		case UpdateAgentRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAgentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAgentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAgentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAgentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAgentRequest_FieldSubPath) WithIValue(value interface{}) UpdateAgentRequest_FieldPathValue {
	return &UpdateAgentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAgentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAgentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAgentRequest_FieldPathArrayOfValues {
	return &UpdateAgentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAgentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAgentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAgentRequest_FieldPathArrayItemValue {
	return &UpdateAgentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAgentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAgentRequest_FieldPathValue allows storing values for UpdateAgentRequest fields according to their type
type UpdateAgentRequest_FieldPathValue interface {
	UpdateAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAgentRequest)
	CompareWith(*UpdateAgentRequest) (cmp int, comparable bool)
}

func ParseUpdateAgentRequest_FieldPathValue(pathStr, valueStr string) (UpdateAgentRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAgentRequest_FieldPathValue), nil
}

func MustParseUpdateAgentRequest_FieldPathValue(pathStr, valueStr string) UpdateAgentRequest_FieldPathValue {
	fpv, err := ParseUpdateAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAgentRequest_FieldTerminalPathValue struct {
	UpdateAgentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentRequest_FieldPathValue = (*UpdateAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAgentRequest' as interface{}
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) AsAgentValue() (*agent.Agent, bool) {
	res, ok := fpv.value.(*agent.Agent)
	return res, ok
}
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAgentRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAgentRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAgentRequest
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) SetTo(target **UpdateAgentRequest) {
	if *target == nil {
		*target = new(UpdateAgentRequest)
	}
	switch fpv.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		(*target).Agent = fpv.value.(*agent.Agent)
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*agent.Agent_FieldMask)
	case UpdateAgentRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAgentRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAgentRequest_FieldTerminalPathValue' with the value under path in 'UpdateAgentRequest'.
func (fpv *UpdateAgentRequest_FieldTerminalPathValue) CompareWith(source *UpdateAgentRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return 0, false
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAgentRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAgentRequest))
}

type UpdateAgentRequest_FieldSubPathValue struct {
	UpdateAgentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAgentRequest_FieldPathValue = (*UpdateAgentRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAgentRequest_FieldSubPathValue) AsAgentPathValue() (agent.Agent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent.Agent_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAgentRequest_FieldSubPathValue) AsCasPathValue() (UpdateAgentRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAgentRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAgentRequest_FieldSubPathValue) SetTo(target **UpdateAgentRequest) {
	if *target == nil {
		*target = new(UpdateAgentRequest)
	}
	switch fpvs.Selector() {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		fpvs.subPathValue.(agent.Agent_FieldPathValue).SetTo(&(*target).Agent)
	case UpdateAgentRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAgentRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAgentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAgentRequest_FieldSubPathValue) CompareWith(source *UpdateAgentRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return fpvs.subPathValue.(agent.Agent_FieldPathValue).CompareWith(source.GetAgent())
	case UpdateAgentRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAgentRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAgentRequest))
}

// UpdateAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAgentRequest according to their type
// Present only for array (repeated) types.
type UpdateAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAgentRequest_FieldPath
	ContainsValue(*UpdateAgentRequest) bool
}

// ParseUpdateAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAgentRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAgentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentRequest_FieldPathArrayItemValue = (*UpdateAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAgentRequest as interface{}
func (fpaiv *UpdateAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAgentRequest'
func (fpaiv *UpdateAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAgentRequest) bool {
	slice := fpaiv.UpdateAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAgentRequest_FieldSubPathArrayItemValue struct {
	UpdateAgentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAgentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAgentRequest_FieldSubPathArrayItemValue) AsAgentPathItemValue() (agent.Agent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAgentRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAgentRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAgentRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAgentRequest'
func (fpaivs *UpdateAgentRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAgentRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		return fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue).ContainsValue(source.GetAgent())
	case UpdateAgentRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAgentRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAgentRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAgentRequest fields according to their type
type UpdateAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAgentRequest_FieldPath
}

func ParseUpdateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAgentRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAgentRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAgentRequest_FieldPathArrayOfValues = (*UpdateAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAgentRequest_FieldPathSelectorAgent:
		for _, v := range fpaov.values.([]*agent.Agent) {
			values = append(values, v)
		}
	case UpdateAgentRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	case UpdateAgentRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAgentRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAgentRequest_FieldTerminalPathArrayOfValues) AsAgentArrayOfValues() ([]*agent.Agent, bool) {
	res, ok := fpaov.values.([]*agent.Agent)
	return res, ok
}
func (fpaov *UpdateAgentRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}
func (fpaov *UpdateAgentRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAgentRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAgentRequest_CAS)
	return res, ok
}

type UpdateAgentRequest_FieldSubPathArrayOfValues struct {
	UpdateAgentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAgentRequest_FieldPathArrayOfValues = (*UpdateAgentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAgentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAgentRequest_FieldSubPathArrayOfValues) AsAgentPathArrayOfValues() (agent.Agent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent.Agent_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAgentRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAgentRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAgentRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAgentRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAgentRequestCAS_FieldPathSelector
	Get(source *UpdateAgentRequest_CAS) []interface{}
	GetSingle(source *UpdateAgentRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAgentRequest_CAS)

	// Those methods build corresponding UpdateAgentRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAgentRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAgentRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAgentRequestCAS_FieldPathArrayItemValue
}

type UpdateAgentRequestCAS_FieldPathSelector int32

const (
	UpdateAgentRequestCAS_FieldPathSelectorConditionalState UpdateAgentRequestCAS_FieldPathSelector = 0
	UpdateAgentRequestCAS_FieldPathSelectorFieldMask        UpdateAgentRequestCAS_FieldPathSelector = 1
)

func (s UpdateAgentRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", s))
	}
}

func BuildUpdateAgentRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAgentRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAgentRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAgentRequestCAS_FieldTerminalPath{selector: UpdateAgentRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAgentRequestCAS_FieldTerminalPath{selector: UpdateAgentRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := agent.BuildAgent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentRequestCAS_FieldSubPath{selector: UpdateAgentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAgentRequest_CAS", fp)
}

func ParseUpdateAgentRequestCAS_FieldPath(rawField string) (UpdateAgentRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAgentRequestCAS_FieldPath(fp)
}

func MustParseUpdateAgentRequestCAS_FieldPath(rawField string) UpdateAgentRequestCAS_FieldPath {
	fp, err := ParseUpdateAgentRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAgentRequestCAS_FieldTerminalPath struct {
	selector UpdateAgentRequestCAS_FieldPathSelector
}

var _ UpdateAgentRequestCAS_FieldPath = (*UpdateAgentRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) Selector() UpdateAgentRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAgentRequest_CAS
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) Get(source *UpdateAgentRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAgentRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAgentRequest_CAS
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAgentRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAgentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return (*agent.Agent)(nil)
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		return (*agent.Agent_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAgentRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAgentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAgentRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAgentRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAgentRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAgentRequestCAS_FieldTerminalPathValue{UpdateAgentRequestCAS_FieldTerminalPath: *fp, value: value.(*agent.Agent)}
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAgentRequestCAS_FieldTerminalPathValue{UpdateAgentRequestCAS_FieldTerminalPath: *fp, value: value.(*agent.Agent_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAgentRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentRequestCAS_FieldTerminalPath: *fp, values: values.([]*agent.Agent)}
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentRequestCAS_FieldTerminalPath: *fp, values: values.([]*agent.Agent_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAgentRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAgentRequestCAS_FieldSubPath struct {
	selector UpdateAgentRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAgentRequestCAS_FieldPath = (*UpdateAgentRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAgentRequestCAS_FieldSubPath) Selector() UpdateAgentRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAgentRequestCAS_FieldSubPath) AsConditionalStateSubPath() (agent.Agent_FieldPath, bool) {
	res, ok := fps.subPath.(agent.Agent_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAgentRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAgentRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAgentRequest_CAS
func (fps *UpdateAgentRequestCAS_FieldSubPath) Get(source *UpdateAgentRequest_CAS) (values []interface{}) {
	if asAgentFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAgentFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAgentRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAgentRequest_CAS
func (fps *UpdateAgentRequestCAS_FieldSubPath) GetSingle(source *UpdateAgentRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAgentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAgentRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) ClearValue(item *UpdateAgentRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAgentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAgentRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAgentRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAgentRequestCAS_FieldPathValue {
	return &UpdateAgentRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAgentRequestCAS_FieldPathArrayOfValues {
	return &UpdateAgentRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAgentRequestCAS_FieldPathArrayItemValue {
	return &UpdateAgentRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAgentRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAgentRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAgentRequestCAS_FieldPathValue interface {
	UpdateAgentRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAgentRequest_CAS)
	CompareWith(*UpdateAgentRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAgentRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAgentRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAgentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAgentRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAgentRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAgentRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAgentRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAgentRequestCAS_FieldTerminalPathValue struct {
	UpdateAgentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentRequestCAS_FieldPathValue = (*UpdateAgentRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*agent.Agent, bool) {
	res, ok := fpv.value.(*agent.Agent)
	return res, ok
}
func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*agent.Agent_FieldMask, bool) {
	res, ok := fpv.value.(*agent.Agent_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAgentRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAgentRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*agent.Agent)
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent.Agent_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAgentRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAgentRequest_CAS'.
func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAgentRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAgentRequest_CAS))
}

type UpdateAgentRequestCAS_FieldSubPathValue struct {
	UpdateAgentRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAgentRequestCAS_FieldPathValue = (*UpdateAgentRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (agent.Agent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent.Agent_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) SetTo(target **UpdateAgentRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAgentRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(agent.Agent_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAgentRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(agent.Agent_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAgentRequest_CAS))
}

// UpdateAgentRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAgentRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAgentRequestCAS_FieldPath
	ContainsValue(*UpdateAgentRequest_CAS) bool
}

// ParseUpdateAgentRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAgentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAgentRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAgentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAgentRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAgentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAgentRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAgentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAgentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentRequestCAS_FieldPathArrayItemValue = (*UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAgentRequest_CAS as interface{}
func (fpaiv *UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAgentRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAgentRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAgentRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAgentRequest_CAS) bool {
	slice := fpaiv.UpdateAgentRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAgentRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAgentRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAgentRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAgentRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (agent.Agent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAgentRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAgentRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(agent.Agent_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAgentRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAgentRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAgentRequestCAS_FieldPath
}

func ParseUpdateAgentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAgentRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAgentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAgentRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAgentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAgentRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAgentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAgentRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAgentRequestCAS_FieldPathArrayOfValues = (*UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAgentRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*agent.Agent) {
			values = append(values, v)
		}
	case UpdateAgentRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent.Agent_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*agent.Agent, bool) {
	res, ok := fpaov.values.([]*agent.Agent)
	return res, ok
}
func (fpaov *UpdateAgentRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent.Agent_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent.Agent_FieldMask)
	return res, ok
}

type UpdateAgentRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAgentRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAgentRequestCAS_FieldPathArrayOfValues = (*UpdateAgentRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAgentRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAgentRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (agent.Agent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent.Agent_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAgentRequest_FieldPathSelector
	Get(source *DeleteAgentRequest) []interface{}
	GetSingle(source *DeleteAgentRequest) (interface{}, bool)
	ClearValue(item *DeleteAgentRequest)

	// Those methods build corresponding DeleteAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAgentRequest_FieldPathArrayItemValue
}

type DeleteAgentRequest_FieldPathSelector int32

const (
	DeleteAgentRequest_FieldPathSelectorName DeleteAgentRequest_FieldPathSelector = 0
)

func (s DeleteAgentRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAgentRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", s))
	}
}

func BuildDeleteAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAgentRequest_FieldTerminalPath{selector: DeleteAgentRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAgentRequest", fp)
}

func ParseDeleteAgentRequest_FieldPath(rawField string) (DeleteAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAgentRequest_FieldPath(fp)
}

func MustParseDeleteAgentRequest_FieldPath(rawField string) DeleteAgentRequest_FieldPath {
	fp, err := ParseDeleteAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAgentRequest_FieldTerminalPath struct {
	selector DeleteAgentRequest_FieldPathSelector
}

var _ DeleteAgentRequest_FieldPath = (*DeleteAgentRequest_FieldTerminalPath)(nil)

func (fp *DeleteAgentRequest_FieldTerminalPath) Selector() DeleteAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAgentRequest
func (fp *DeleteAgentRequest_FieldTerminalPath) Get(source *DeleteAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAgentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAgentRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAgentRequest
func (fp *DeleteAgentRequest_FieldTerminalPath) GetSingle(source *DeleteAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		return (*agent.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) ClearValue(item *DeleteAgentRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAgentRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAgentRequest_FieldPathSelectorName
}

func (fp *DeleteAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAgentRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		return &DeleteAgentRequest_FieldTerminalPathValue{DeleteAgentRequest_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAgentRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAgentRequest_FieldTerminalPathArrayOfValues{DeleteAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		return &DeleteAgentRequest_FieldTerminalPathArrayOfValues{DeleteAgentRequest_FieldTerminalPath: *fp, values: values.([]*agent.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAgentRequest_FieldPathValue allows storing values for DeleteAgentRequest fields according to their type
type DeleteAgentRequest_FieldPathValue interface {
	DeleteAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAgentRequest)
	CompareWith(*DeleteAgentRequest) (cmp int, comparable bool)
}

func ParseDeleteAgentRequest_FieldPathValue(pathStr, valueStr string) (DeleteAgentRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAgentRequest_FieldPathValue), nil
}

func MustParseDeleteAgentRequest_FieldPathValue(pathStr, valueStr string) DeleteAgentRequest_FieldPathValue {
	fpv, err := ParseDeleteAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAgentRequest_FieldTerminalPathValue struct {
	DeleteAgentRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAgentRequest_FieldPathValue = (*DeleteAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAgentRequest' as interface{}
func (fpv *DeleteAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAgentRequest_FieldTerminalPathValue) AsNameValue() (*agent.Reference, bool) {
	res, ok := fpv.value.(*agent.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAgentRequest
func (fpv *DeleteAgentRequest_FieldTerminalPathValue) SetTo(target **DeleteAgentRequest) {
	if *target == nil {
		*target = new(DeleteAgentRequest)
	}
	switch fpv.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAgentRequest_FieldTerminalPathValue' with the value under path in 'DeleteAgentRequest'.
func (fpv *DeleteAgentRequest_FieldTerminalPathValue) CompareWith(source *DeleteAgentRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAgentRequest))
}

// DeleteAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAgentRequest according to their type
// Present only for array (repeated) types.
type DeleteAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAgentRequest_FieldPath
	ContainsValue(*DeleteAgentRequest) bool
}

// ParseDeleteAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAgentRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAgentRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAgentRequest_FieldPathArrayItemValue = (*DeleteAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAgentRequest as interface{}
func (fpaiv *DeleteAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAgentRequest'
func (fpaiv *DeleteAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAgentRequest) bool {
	slice := fpaiv.DeleteAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAgentRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAgentRequest fields according to their type
type DeleteAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAgentRequest_FieldPath
}

func ParseDeleteAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAgentRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAgentRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAgentRequest_FieldPathArrayOfValues = (*DeleteAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAgentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAgentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent.Reference, bool) {
	res, ok := fpaov.values.([]*agent.Reference)
	return res, ok
}
