// Code generated by protoc-gen-goten-client
// API: AgentService
// DO NOT EDIT!!!

package agent_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &agent.Agent{}
)

var (
	descriptorsInitialized   bool
	agentServiceDescriptor   *AgentServiceDescriptor
	getAgentDescriptor       *GetAgentDescriptor
	batchGetAgentsDescriptor *BatchGetAgentsDescriptor
	listAgentsDescriptor     *ListAgentsDescriptor
	watchAgentDescriptor     *WatchAgentDescriptor
	watchAgentsDescriptor    *WatchAgentsDescriptor
	createAgentDescriptor    *CreateAgentDescriptor
	updateAgentDescriptor    *UpdateAgentDescriptor
	deleteAgentDescriptor    *DeleteAgentDescriptor
	activationDescriptor     *ActivationDescriptor
)

type GetAgentDescriptor struct{}

type GetAgentDescriptorClientMsgHandle struct{}

type GetAgentDescriptorServerMsgHandle struct{}

func (d *GetAgentDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAgentRequest{}
}

func (d *GetAgentDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent.Agent{}
}

func (d *GetAgentDescriptor) IsUnary() bool {
	return true
}

func (d *GetAgentDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAgentDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAgentDescriptor) IsCollection() bool {
	return false
}

func (d *GetAgentDescriptor) IsPlural() bool {
	return false
}

func (d *GetAgentDescriptor) HasResource() bool {
	return true
}

func (d *GetAgentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAgentDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAgentDescriptor) GetMethodName() string {
	return "GetAgent"
}

func (d *GetAgentDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/GetAgent"
}

func (d *GetAgentDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetAgentDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *GetAgentDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetAgentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetAgentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *GetAgentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *GetAgentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAgentDescriptorClientMsgHandle{}
}

func (d *GetAgentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAgentDescriptorServerMsgHandle{}
}

func (h *GetAgentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetAgentRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent.Name)(nil)
}

func (h *GetAgentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetAgentRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAgentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetAgentRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAgentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent.Agent) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent.Name)(nil)
}

func (h *GetAgentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent.Agent) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAgentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*agent.Agent) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetAgentDescriptor() *GetAgentDescriptor {
	return getAgentDescriptor
}

type BatchGetAgentsDescriptor struct{}

type BatchGetAgentsDescriptorClientMsgHandle struct{}

type BatchGetAgentsDescriptorServerMsgHandle struct{}

func (d *BatchGetAgentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAgentsRequest{}
}

func (d *BatchGetAgentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAgentsResponse{}
}

func (d *BatchGetAgentsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAgentsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAgentsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAgentsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetAgentsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetAgentsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetAgentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAgentsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAgentsDescriptor) GetMethodName() string {
	return "BatchGetAgents"
}

func (d *BatchGetAgentsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/BatchGetAgents"
}

func (d *BatchGetAgentsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetAgentsDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *BatchGetAgentsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetAgentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetAgentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *BatchGetAgentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *BatchGetAgentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAgentsDescriptorClientMsgHandle{}
}

func (d *BatchGetAgentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAgentsDescriptorServerMsgHandle{}
}

func (h *BatchGetAgentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAgentsRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAgentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAgentsRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(agent.AgentNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (agent.AgentNameList)(nil)
}

func (h *BatchGetAgentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetAgentsRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAgentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAgentsResponse) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAgentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAgentsResponse) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAgents(); len(resources) > 0 {
			list := make(agent.AgentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (agent.AgentNameList)(nil)
}

func (h *BatchGetAgentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetAgentsResponse) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAgentsDescriptor() *BatchGetAgentsDescriptor {
	return batchGetAgentsDescriptor
}

type ListAgentsDescriptor struct{}

type ListAgentsDescriptorClientMsgHandle struct{}

type ListAgentsDescriptorServerMsgHandle struct{}

func (d *ListAgentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAgentsRequest{}
}

func (d *ListAgentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAgentsResponse{}
}

func (d *ListAgentsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAgentsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAgentsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAgentsDescriptor) IsCollection() bool {
	return true
}

func (d *ListAgentsDescriptor) IsPlural() bool {
	return true
}

func (d *ListAgentsDescriptor) HasResource() bool {
	return true
}

func (d *ListAgentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAgentsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAgentsDescriptor) GetMethodName() string {
	return "ListAgents"
}

func (d *ListAgentsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/ListAgents"
}

func (d *ListAgentsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListAgentsDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *ListAgentsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListAgentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListAgentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *ListAgentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *ListAgentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAgentsDescriptorClientMsgHandle{}
}

func (d *ListAgentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAgentsDescriptorServerMsgHandle{}
}

func (h *ListAgentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAgentsRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAgentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAgentsRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAgentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListAgentsRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*agent.ParentName)(nil)
}

func (h *ListAgentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAgentsResponse) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAgentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAgentsResponse) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAgents(); len(resources) > 0 {
			list := make(agent.AgentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (agent.AgentNameList)(nil)
}

func (h *ListAgentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListAgentsResponse) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListAgentsDescriptor() *ListAgentsDescriptor {
	return listAgentsDescriptor
}

type WatchAgentDescriptor struct{}

type WatchAgentDescriptorClientMsgHandle struct{}

type WatchAgentDescriptorServerMsgHandle struct{}

func (d *WatchAgentDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAgentRequest{}
}

func (d *WatchAgentDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAgentResponse{}
}

func (d *WatchAgentDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAgentDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAgentDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAgentDescriptor) IsCollection() bool {
	return false
}

func (d *WatchAgentDescriptor) IsPlural() bool {
	return false
}

func (d *WatchAgentDescriptor) HasResource() bool {
	return true
}

func (d *WatchAgentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAgentDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAgentDescriptor) GetMethodName() string {
	return "WatchAgent"
}

func (d *WatchAgentDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/WatchAgent"
}

func (d *WatchAgentDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchAgentDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *WatchAgentDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchAgentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAgentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *WatchAgentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *WatchAgentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentDescriptorClientMsgHandle{}
}

func (d *WatchAgentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentDescriptorServerMsgHandle{}
}

func (h *WatchAgentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent.Name)(nil)
}

func (h *WatchAgentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAgentRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAgentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentResponse) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *agent.AgentChange_Added_:
				return tResChange.Added.GetAgent().GetName()
			case *agent.AgentChange_Modified_:
				return tResChange.Modified.GetName()
			case *agent.AgentChange_Removed_:
				return tResChange.Removed.GetName()
			case *agent.AgentChange_Current_:
				return tResChange.Current.GetAgent().GetName()
			}
		}
	}
	return (*agent.Name)(nil)
}

func (h *WatchAgentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentResponse) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAgentResponse) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAgentDescriptor() *WatchAgentDescriptor {
	return watchAgentDescriptor
}

type WatchAgentsDescriptor struct{}

type WatchAgentsDescriptorClientMsgHandle struct{}

type WatchAgentsDescriptorServerMsgHandle struct{}

func (d *WatchAgentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAgentsRequest{}
}

func (d *WatchAgentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAgentsResponse{}
}

func (d *WatchAgentsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAgentsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAgentsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAgentsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchAgentsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchAgentsDescriptor) HasResource() bool {
	return true
}

func (d *WatchAgentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAgentsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAgentsDescriptor) GetMethodName() string {
	return "WatchAgents"
}

func (d *WatchAgentsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/WatchAgents"
}

func (d *WatchAgentsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchAgentsDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *WatchAgentsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchAgentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAgentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *WatchAgentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *WatchAgentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentsDescriptorClientMsgHandle{}
}

func (d *WatchAgentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentsDescriptorServerMsgHandle{}
}

func (h *WatchAgentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentsRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAgentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentsRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAgentsRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*agent.ParentName)(nil)
}

func (h *WatchAgentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentsResponse) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAgentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentsResponse) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetAgentChanges(); len(resChanges) > 0 {
			list := make(agent.AgentNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *agent.AgentChange_Added_:
					list = append(list, tResChange.Added.GetAgent().GetName())
				case *agent.AgentChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *agent.AgentChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *agent.AgentChange_Current_:
					list = append(list, tResChange.Current.GetAgent().GetName())
				}
			}
			return list
		}
	}
	return (agent.AgentNameList)(nil)
}

func (h *WatchAgentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAgentsResponse) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAgentsDescriptor() *WatchAgentsDescriptor {
	return watchAgentsDescriptor
}

type CreateAgentDescriptor struct{}

type CreateAgentDescriptorClientMsgHandle struct{}

type CreateAgentDescriptorServerMsgHandle struct{}

func (d *CreateAgentDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAgentRequest{}
}

func (d *CreateAgentDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent.Agent{}
}

func (d *CreateAgentDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAgentDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAgentDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAgentDescriptor) IsCollection() bool {
	return true
}

func (d *CreateAgentDescriptor) IsPlural() bool {
	return false
}

func (d *CreateAgentDescriptor) HasResource() bool {
	return true
}

func (d *CreateAgentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAgentDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAgentDescriptor) GetMethodName() string {
	return "CreateAgent"
}

func (d *CreateAgentDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/CreateAgent"
}

func (d *CreateAgentDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateAgentDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *CreateAgentDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateAgentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateAgentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *CreateAgentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *CreateAgentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAgentDescriptorClientMsgHandle{}
}

func (d *CreateAgentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAgentDescriptorServerMsgHandle{}
}

func (h *CreateAgentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateAgentRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAgent()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*agent.Name)(nil)
}

func (h *CreateAgentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateAgentRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAgentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateAgentRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*agent.ParentName)(nil)
}

func (h *CreateAgentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent.Agent) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent.Name)(nil)
}

func (h *CreateAgentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent.Agent) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAgentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*agent.Agent) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAgentDescriptor() *CreateAgentDescriptor {
	return createAgentDescriptor
}

type UpdateAgentDescriptor struct{}

type UpdateAgentDescriptorClientMsgHandle struct{}

type UpdateAgentDescriptorServerMsgHandle struct{}

func (d *UpdateAgentDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAgentRequest{}
}

func (d *UpdateAgentDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent.Agent{}
}

func (d *UpdateAgentDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAgentDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAgentDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAgentDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateAgentDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateAgentDescriptor) HasResource() bool {
	return true
}

func (d *UpdateAgentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAgentDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAgentDescriptor) GetMethodName() string {
	return "UpdateAgent"
}

func (d *UpdateAgentDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/UpdateAgent"
}

func (d *UpdateAgentDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateAgentDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *UpdateAgentDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateAgentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateAgentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *UpdateAgentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *UpdateAgentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAgentDescriptorClientMsgHandle{}
}

func (d *UpdateAgentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAgentDescriptorServerMsgHandle{}
}

func (h *UpdateAgentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateAgentRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAgent()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*agent.Name)(nil)
}

func (h *UpdateAgentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateAgentRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAgentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateAgentRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAgentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent.Agent) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent.Name)(nil)
}

func (h *UpdateAgentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent.Agent) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAgentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent.Agent)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*agent.Agent) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAgentDescriptor() *UpdateAgentDescriptor {
	return updateAgentDescriptor
}

type DeleteAgentDescriptor struct{}

type DeleteAgentDescriptorClientMsgHandle struct{}

type DeleteAgentDescriptorServerMsgHandle struct{}

func (d *DeleteAgentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAgentRequest{}
}

func (d *DeleteAgentDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAgentDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAgentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAgentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAgentDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteAgentDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteAgentDescriptor) HasResource() bool {
	return true
}

func (d *DeleteAgentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAgentDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAgentDescriptor) GetMethodName() string {
	return "DeleteAgent"
}

func (d *DeleteAgentDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/DeleteAgent"
}

func (d *DeleteAgentDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteAgentDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *DeleteAgentDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteAgentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteAgentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *DeleteAgentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *DeleteAgentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAgentDescriptorClientMsgHandle{}
}

func (d *DeleteAgentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAgentDescriptorServerMsgHandle{}
}

func (h *DeleteAgentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteAgentRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent.Name)(nil)
}

func (h *DeleteAgentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteAgentRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAgentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAgentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteAgentRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAgentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAgentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAgentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAgentDescriptor() *DeleteAgentDescriptor {
	return deleteAgentDescriptor
}

type ActivationDescriptor struct{}

type ActivationDescriptorClientMsgHandle struct{}

type ActivationDescriptorServerMsgHandle struct{}

func (d *ActivationDescriptor) NewEmptyClientMsg() proto.Message {
	return &ActivationRequest{}
}

func (d *ActivationDescriptor) NewEmptyServerMsg() proto.Message {
	return &ActivationResponse{}
}

func (d *ActivationDescriptor) IsUnary() bool {
	return false
}

func (d *ActivationDescriptor) IsClientStream() bool {
	return true
}

func (d *ActivationDescriptor) IsServerStream() bool {
	return true
}

func (d *ActivationDescriptor) IsCollection() bool {
	return true
}

func (d *ActivationDescriptor) IsPlural() bool {
	return false
}

func (d *ActivationDescriptor) HasResource() bool {
	return true
}

func (d *ActivationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ActivationDescriptor) GetVerb() string {
	return "activation"
}

func (d *ActivationDescriptor) GetMethodName() string {
	return "Activation"
}

func (d *ActivationDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AgentService/Activation"
}

func (d *ActivationDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ActivationDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *ActivationDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ActivationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ActivationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentServiceDescriptor
}

func (d *ActivationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent.GetDescriptor()
}

func (d *ActivationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ActivationDescriptorClientMsgHandle{}
}

func (d *ActivationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ActivationDescriptorServerMsgHandle{}
}

func (h *ActivationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ActivationRequest) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ActivationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ActivationRequest) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ActivationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ActivationRequest) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ActivationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ActivationResponse) *agent.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ActivationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ActivationResponse) []*agent.Name
	})
	if ok {
		return agent.AgentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ActivationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ActivationResponse) *agent.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetActivationDescriptor() *ActivationDescriptor {
	return activationDescriptor
}

type AgentServiceDescriptor struct{}

func (d *AgentServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAgentDescriptor,
		batchGetAgentsDescriptor,
		listAgentsDescriptor,
		watchAgentDescriptor,
		watchAgentsDescriptor,
		createAgentDescriptor,
		updateAgentDescriptor,
		deleteAgentDescriptor,
		activationDescriptor,
	}
}

func (d *AgentServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.AgentService"
}

func (d *AgentServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *AgentServiceDescriptor) GetApiName() string {
	return "AgentService"
}

func (d *AgentServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *AgentServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAgentServiceDescriptor() *AgentServiceDescriptor {
	return agentServiceDescriptor
}

func initDescriptors() {
	agentServiceDescriptor = &AgentServiceDescriptor{}
	getAgentDescriptor = &GetAgentDescriptor{}
	batchGetAgentsDescriptor = &BatchGetAgentsDescriptor{}
	listAgentsDescriptor = &ListAgentsDescriptor{}
	watchAgentDescriptor = &WatchAgentDescriptor{}
	watchAgentsDescriptor = &WatchAgentsDescriptor{}
	createAgentDescriptor = &CreateAgentDescriptor{}
	updateAgentDescriptor = &UpdateAgentDescriptor{}
	deleteAgentDescriptor = &DeleteAgentDescriptor{}
	activationDescriptor = &ActivationDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(agentServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAgentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAgentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAgentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAgentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAgentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAgentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAgentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAgentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(activationDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
