// Code generated by protoc-gen-goten-client
// API: AgentService
// DO NOT EDIT!!!

package agent_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &agent.Agent{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentServiceClient is the client API for AgentService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentServiceClient interface {
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error)
	BatchGetAgents(ctx context.Context, in *BatchGetAgentsRequest, opts ...grpc.CallOption) (*BatchGetAgentsResponse, error)
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	WatchAgent(ctx context.Context, in *WatchAgentRequest, opts ...grpc.CallOption) (WatchAgentClientStream, error)
	WatchAgents(ctx context.Context, in *WatchAgentsRequest, opts ...grpc.CallOption) (WatchAgentsClientStream, error)
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error)
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error)
	DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Activation(ctx context.Context, opts ...grpc.CallOption) (ActivationClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &client{cc}
}

func (c *client) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error) {
	out := new(agent.Agent)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAgents(ctx context.Context, in *BatchGetAgentsRequest, opts ...grpc.CallOption) (*BatchGetAgentsResponse, error) {
	out := new(BatchGetAgentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/BatchGetAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAgent(ctx context.Context, in *WatchAgentRequest, opts ...grpc.CallOption) (WatchAgentClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAgent",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.AgentService/WatchAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAgentWatchAgentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAgentClientStream interface {
	Recv() (*WatchAgentResponse, error)
	grpc.ClientStream
}

type watchAgentWatchAgentClient struct {
	grpc.ClientStream
}

func (x *watchAgentWatchAgentClient) Recv() (*WatchAgentResponse, error) {
	m := new(WatchAgentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAgents(ctx context.Context, in *WatchAgentsRequest, opts ...grpc.CallOption) (WatchAgentsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAgents",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.AgentService/WatchAgents", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAgentsWatchAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAgentsClientStream interface {
	Recv() (*WatchAgentsResponse, error)
	grpc.ClientStream
}

type watchAgentsWatchAgentsClient struct {
	grpc.ClientStream
}

func (x *watchAgentsWatchAgentsClient) Recv() (*WatchAgentsResponse, error) {
	m := new(WatchAgentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error) {
	out := new(agent.Agent)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/CreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error) {
	out := new(agent.Agent)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AgentService/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Activation(ctx context.Context, opts ...grpc.CallOption) (ActivationClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "Activation",
			ServerStreams: true,
			ClientStreams: true,
		},
		"/ntt.workplace.v1alpha2.AgentService/Activation", opts...)
	if err != nil {
		return nil, err
	}
	x := &activationActivationClient{stream}
	return x, nil
}

type ActivationClientStream interface {
	Send(*ActivationRequest) error
	Recv() (*ActivationResponse, error)
	grpc.ClientStream
}

type activationActivationClient struct {
	grpc.ClientStream
}

func (x *activationActivationClient) Send(m *ActivationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *activationActivationClient) Recv() (*ActivationResponse, error) {
	m := new(ActivationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
