// Code generated by protoc-gen-goten-client
// API: ZoneService
// DO NOT EDIT!!!

package zone_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &zone.Zone{}
)

var (
	descriptorsInitialized  bool
	zoneServiceDescriptor   *ZoneServiceDescriptor
	getZoneDescriptor       *GetZoneDescriptor
	batchGetZonesDescriptor *BatchGetZonesDescriptor
	listZonesDescriptor     *ListZonesDescriptor
	watchZoneDescriptor     *WatchZoneDescriptor
	watchZonesDescriptor    *WatchZonesDescriptor
	createZoneDescriptor    *CreateZoneDescriptor
	updateZoneDescriptor    *UpdateZoneDescriptor
	deleteZoneDescriptor    *DeleteZoneDescriptor
)

type GetZoneDescriptor struct{}

type GetZoneDescriptorClientMsgHandle struct{}

type GetZoneDescriptorServerMsgHandle struct{}

func (d *GetZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetZoneRequest{}
}

func (d *GetZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *GetZoneDescriptor) IsUnary() bool {
	return true
}

func (d *GetZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *GetZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *GetZoneDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetZoneDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetZoneDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetZoneDescriptor) GetVerb() string {
	return "get"
}

func (d *GetZoneDescriptor) GetMethodName() string {
	return "GetZone"
}

func (d *GetZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/GetZone"
}

func (d *GetZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *GetZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *GetZoneDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *GetZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetZoneDescriptorClientMsgHandle{}
}

func (d *GetZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetZoneDescriptorServerMsgHandle{}
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*zone.Name)(nil)
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetZoneDescriptor() *GetZoneDescriptor {
	return getZoneDescriptor
}

type BatchGetZonesDescriptor struct{}

type BatchGetZonesDescriptorClientMsgHandle struct{}

type BatchGetZonesDescriptorServerMsgHandle struct{}

func (d *BatchGetZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetZonesRequest{}
}

func (d *BatchGetZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetZonesResponse{}
}

func (d *BatchGetZonesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetZonesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetZonesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetZonesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetZonesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetZonesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetZonesDescriptor) GetMethodName() string {
	return "BatchGetZones"
}

func (d *BatchGetZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/BatchGetZones"
}

func (d *BatchGetZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *BatchGetZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *BatchGetZonesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *BatchGetZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetZonesDescriptorClientMsgHandle{}
}

func (d *BatchGetZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetZonesDescriptorServerMsgHandle{}
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(zone.ZoneNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (zone.ZoneNameList)(nil)
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetZones()
	list := make(zone.ZoneNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetZonesDescriptor() *BatchGetZonesDescriptor {
	return batchGetZonesDescriptor
}

type ListZonesDescriptor struct{}

type ListZonesDescriptorClientMsgHandle struct{}

type ListZonesDescriptorServerMsgHandle struct{}

func (d *ListZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListZonesRequest{}
}

func (d *ListZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListZonesResponse{}
}

func (d *ListZonesDescriptor) IsUnary() bool {
	return true
}

func (d *ListZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListZonesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListZonesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListZonesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListZonesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListZonesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListZonesDescriptor) GetMethodName() string {
	return "ListZones"
}

func (d *ListZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/ListZones"
}

func (d *ListZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *ListZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *ListZonesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *ListZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListZonesDescriptorClientMsgHandle{}
}

func (d *ListZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListZonesDescriptorServerMsgHandle{}
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetZones()
	list := make(zone.ZoneNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListZonesDescriptor() *ListZonesDescriptor {
	return listZonesDescriptor
}

type WatchZoneDescriptor struct{}

type WatchZoneDescriptorClientMsgHandle struct{}

type WatchZoneDescriptorServerMsgHandle struct{}

func (d *WatchZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchZoneRequest{}
}

func (d *WatchZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchZoneResponse{}
}

func (d *WatchZoneDescriptor) IsUnary() bool {
	return false
}

func (d *WatchZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchZoneDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchZoneDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchZoneDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchZoneDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchZoneDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchZoneDescriptor) GetMethodName() string {
	return "WatchZone"
}

func (d *WatchZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/WatchZone"
}

func (d *WatchZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *WatchZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *WatchZoneDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *WatchZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZoneDescriptorClientMsgHandle{}
}

func (d *WatchZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZoneDescriptorServerMsgHandle{}
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*zone.Name)(nil)
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchZoneResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *zone.ZoneChange_Added_:
			return tResChange.Added.GetZone().GetName()
		case *zone.ZoneChange_Modified_:
			return tResChange.Modified.GetName()
		case *zone.ZoneChange_Removed_:
			return tResChange.Removed.GetName()
		case *zone.ZoneChange_Current_:
			return tResChange.Current.GetZone().GetName()
		}
	}
	return (*zone.Name)(nil)
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchZoneResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchZoneResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchZoneDescriptor() *WatchZoneDescriptor {
	return watchZoneDescriptor
}

type WatchZonesDescriptor struct{}

type WatchZonesDescriptorClientMsgHandle struct{}

type WatchZonesDescriptorServerMsgHandle struct{}

func (d *WatchZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchZonesRequest{}
}

func (d *WatchZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchZonesResponse{}
}

func (d *WatchZonesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchZonesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchZonesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchZonesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchZonesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchZonesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchZonesDescriptor) GetMethodName() string {
	return "WatchZones"
}

func (d *WatchZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/WatchZones"
}

func (d *WatchZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *WatchZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *WatchZonesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *WatchZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZonesDescriptorClientMsgHandle{}
}

func (d *WatchZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZonesDescriptorServerMsgHandle{}
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*zone.ParentName)(nil)
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetZoneChanges()
	list := make(zone.ZoneNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *zone.ZoneChange_Added_:
			list = append(list, tResChange.Added.GetZone().GetName())
		case *zone.ZoneChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *zone.ZoneChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *zone.ZoneChange_Current_:
			list = append(list, tResChange.Current.GetZone().GetName())
		}
	}
	return list
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchZonesDescriptor() *WatchZonesDescriptor {
	return watchZonesDescriptor
}

type CreateZoneDescriptor struct{}

type CreateZoneDescriptorClientMsgHandle struct{}

type CreateZoneDescriptorServerMsgHandle struct{}

func (d *CreateZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateZoneRequest{}
}

func (d *CreateZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *CreateZoneDescriptor) IsUnary() bool {
	return true
}

func (d *CreateZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateZoneDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateZoneDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateZoneDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateZoneDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateZoneDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateZoneDescriptor) GetMethodName() string {
	return "CreateZone"
}

func (d *CreateZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/CreateZone"
}

func (d *CreateZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *CreateZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *CreateZoneDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *CreateZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateZoneDescriptorClientMsgHandle{}
}

func (d *CreateZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateZoneDescriptorServerMsgHandle{}
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetZone().GetName()
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*zone.ParentName)(nil)
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateZoneDescriptor() *CreateZoneDescriptor {
	return createZoneDescriptor
}

type UpdateZoneDescriptor struct{}

type UpdateZoneDescriptorClientMsgHandle struct{}

type UpdateZoneDescriptorServerMsgHandle struct{}

func (d *UpdateZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateZoneRequest{}
}

func (d *UpdateZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *UpdateZoneDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateZoneDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateZoneDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateZoneDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateZoneDescriptor) GetMethodName() string {
	return "UpdateZone"
}

func (d *UpdateZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/UpdateZone"
}

func (d *UpdateZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *UpdateZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *UpdateZoneDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *UpdateZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateZoneDescriptorClientMsgHandle{}
}

func (d *UpdateZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateZoneDescriptorServerMsgHandle{}
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetZone().GetName()
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateZoneDescriptor() *UpdateZoneDescriptor {
	return updateZoneDescriptor
}

type DeleteZoneDescriptor struct{}

type DeleteZoneDescriptorClientMsgHandle struct{}

type DeleteZoneDescriptorServerMsgHandle struct{}

func (d *DeleteZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteZoneRequest{}
}

func (d *DeleteZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteZoneDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteZoneDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteZoneDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteZoneDescriptor) GetMethodName() string {
	return "DeleteZone"
}

func (d *DeleteZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/DeleteZone"
}

func (d *DeleteZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *DeleteZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *DeleteZoneDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *DeleteZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteZoneDescriptorClientMsgHandle{}
}

func (d *DeleteZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteZoneDescriptorServerMsgHandle{}
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*zone.Name)(nil)
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *zone.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteZoneDescriptor() *DeleteZoneDescriptor {
	return deleteZoneDescriptor
}

type ZoneServiceDescriptor struct{}

func (d *ZoneServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getZoneDescriptor,
		batchGetZonesDescriptor,
		listZonesDescriptor,
		watchZoneDescriptor,
		watchZonesDescriptor,
		createZoneDescriptor,
		updateZoneDescriptor,
		deleteZoneDescriptor,
	}
}

func (d *ZoneServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.ZoneService"
}

func (d *ZoneServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ZoneServiceDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *ZoneServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ZoneServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetZoneServiceDescriptor() *ZoneServiceDescriptor {
	return zoneServiceDescriptor
}

func initDescriptors() {
	zoneServiceDescriptor = &ZoneServiceDescriptor{}
	getZoneDescriptor = &GetZoneDescriptor{}
	batchGetZonesDescriptor = &BatchGetZonesDescriptor{}
	listZonesDescriptor = &ListZonesDescriptor{}
	watchZoneDescriptor = &WatchZoneDescriptor{}
	watchZonesDescriptor = &WatchZonesDescriptor{}
	createZoneDescriptor = &CreateZoneDescriptor{}
	updateZoneDescriptor = &UpdateZoneDescriptor{}
	deleteZoneDescriptor = &DeleteZoneDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(zoneServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteZoneDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
