// Code generated by protoc-gen-goten-client
// API: ZoneService
// DO NOT EDIT!!!

package zone_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &zone.Zone{}
)

var (
	descriptorsInitialized  bool
	zoneServiceDescriptor   *ZoneServiceDescriptor
	getZoneDescriptor       *GetZoneDescriptor
	batchGetZonesDescriptor *BatchGetZonesDescriptor
	listZonesDescriptor     *ListZonesDescriptor
	watchZoneDescriptor     *WatchZoneDescriptor
	watchZonesDescriptor    *WatchZonesDescriptor
	createZoneDescriptor    *CreateZoneDescriptor
	updateZoneDescriptor    *UpdateZoneDescriptor
	deleteZoneDescriptor    *DeleteZoneDescriptor
)

type GetZoneDescriptor struct{}

type GetZoneDescriptorClientMsgHandle struct{}

type GetZoneDescriptorServerMsgHandle struct{}

func (d *GetZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetZoneRequest{}
}

func (d *GetZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *GetZoneDescriptor) IsUnary() bool {
	return true
}

func (d *GetZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *GetZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *GetZoneDescriptor) IsCollection() bool {
	return false
}

func (d *GetZoneDescriptor) IsPlural() bool {
	return false
}

func (d *GetZoneDescriptor) HasResource() bool {
	return true
}

func (d *GetZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetZoneDescriptor) GetVerb() string {
	return "get"
}

func (d *GetZoneDescriptor) GetMethodName() string {
	return "GetZone"
}

func (d *GetZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/GetZone"
}

func (d *GetZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *GetZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *GetZoneDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *GetZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetZoneDescriptorClientMsgHandle{}
}

func (d *GetZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetZoneDescriptorServerMsgHandle{}
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*zone.Name)(nil)
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetZoneDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*zone.Name)(nil)
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetZoneDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetZoneDescriptor() *GetZoneDescriptor {
	return getZoneDescriptor
}

type BatchGetZonesDescriptor struct{}

type BatchGetZonesDescriptorClientMsgHandle struct{}

type BatchGetZonesDescriptorServerMsgHandle struct{}

func (d *BatchGetZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetZonesRequest{}
}

func (d *BatchGetZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetZonesResponse{}
}

func (d *BatchGetZonesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetZonesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetZonesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetZonesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetZonesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetZonesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetZonesDescriptor) GetMethodName() string {
	return "BatchGetZones"
}

func (d *BatchGetZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/BatchGetZones"
}

func (d *BatchGetZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *BatchGetZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *BatchGetZonesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *BatchGetZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetZonesDescriptorClientMsgHandle{}
}

func (d *BatchGetZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetZonesDescriptorServerMsgHandle{}
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(zone.ZoneNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (zone.ZoneNameList)(nil)
}

func (h *BatchGetZonesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetZones(); len(resources) > 0 {
			list := make(zone.ZoneNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (zone.ZoneNameList)(nil)
}

func (h *BatchGetZonesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetZonesDescriptor() *BatchGetZonesDescriptor {
	return batchGetZonesDescriptor
}

type ListZonesDescriptor struct{}

type ListZonesDescriptorClientMsgHandle struct{}

type ListZonesDescriptorServerMsgHandle struct{}

func (d *ListZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListZonesRequest{}
}

func (d *ListZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListZonesResponse{}
}

func (d *ListZonesDescriptor) IsUnary() bool {
	return true
}

func (d *ListZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListZonesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListZonesDescriptor) IsCollection() bool {
	return true
}

func (d *ListZonesDescriptor) IsPlural() bool {
	return true
}

func (d *ListZonesDescriptor) HasResource() bool {
	return true
}

func (d *ListZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListZonesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListZonesDescriptor) GetMethodName() string {
	return "ListZones"
}

func (d *ListZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/ListZones"
}

func (d *ListZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *ListZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *ListZonesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *ListZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListZonesDescriptorClientMsgHandle{}
}

func (d *ListZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListZonesDescriptorServerMsgHandle{}
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListZonesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*zone.ParentName)(nil)
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetZones(); len(resources) > 0 {
			list := make(zone.ZoneNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (zone.ZoneNameList)(nil)
}

func (h *ListZonesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListZonesDescriptor() *ListZonesDescriptor {
	return listZonesDescriptor
}

type WatchZoneDescriptor struct{}

type WatchZoneDescriptorClientMsgHandle struct{}

type WatchZoneDescriptorServerMsgHandle struct{}

func (d *WatchZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchZoneRequest{}
}

func (d *WatchZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchZoneResponse{}
}

func (d *WatchZoneDescriptor) IsUnary() bool {
	return false
}

func (d *WatchZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchZoneDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchZoneDescriptor) IsCollection() bool {
	return false
}

func (d *WatchZoneDescriptor) IsPlural() bool {
	return false
}

func (d *WatchZoneDescriptor) HasResource() bool {
	return true
}

func (d *WatchZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchZoneDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchZoneDescriptor) GetMethodName() string {
	return "WatchZone"
}

func (d *WatchZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/WatchZone"
}

func (d *WatchZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *WatchZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *WatchZoneDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *WatchZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZoneDescriptorClientMsgHandle{}
}

func (d *WatchZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZoneDescriptorServerMsgHandle{}
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*zone.Name)(nil)
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZoneDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchZoneResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *zone.ZoneChange_Added_:
				return tResChange.Added.GetZone().GetName()
			case *zone.ZoneChange_Modified_:
				return tResChange.Modified.GetName()
			case *zone.ZoneChange_Removed_:
				return tResChange.Removed.GetName()
			case *zone.ZoneChange_Current_:
				return tResChange.Current.GetZone().GetName()
			}
		}
	}
	return (*zone.Name)(nil)
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchZoneResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZoneDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZoneResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchZoneResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchZoneDescriptor() *WatchZoneDescriptor {
	return watchZoneDescriptor
}

type WatchZonesDescriptor struct{}

type WatchZonesDescriptorClientMsgHandle struct{}

type WatchZonesDescriptorServerMsgHandle struct{}

func (d *WatchZonesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchZonesRequest{}
}

func (d *WatchZonesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchZonesResponse{}
}

func (d *WatchZonesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchZonesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchZonesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchZonesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchZonesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchZonesDescriptor) HasResource() bool {
	return true
}

func (d *WatchZonesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchZonesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchZonesDescriptor) GetMethodName() string {
	return "WatchZones"
}

func (d *WatchZonesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/WatchZones"
}

func (d *WatchZonesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchZonesDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *WatchZonesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchZonesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchZonesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *WatchZonesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *WatchZonesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZonesDescriptorClientMsgHandle{}
}

func (d *WatchZonesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchZonesDescriptorServerMsgHandle{}
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchZonesRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchZonesRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchZonesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchZonesRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*zone.ParentName)(nil)
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchZonesResponse) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchZonesResponse) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetZoneChanges(); len(resChanges) > 0 {
			list := make(zone.ZoneNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *zone.ZoneChange_Added_:
					list = append(list, tResChange.Added.GetZone().GetName())
				case *zone.ZoneChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *zone.ZoneChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *zone.ZoneChange_Current_:
					list = append(list, tResChange.Current.GetZone().GetName())
				}
			}
			return list
		}
	}
	return (zone.ZoneNameList)(nil)
}

func (h *WatchZonesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchZonesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchZonesResponse) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchZonesDescriptor() *WatchZonesDescriptor {
	return watchZonesDescriptor
}

type CreateZoneDescriptor struct{}

type CreateZoneDescriptorClientMsgHandle struct{}

type CreateZoneDescriptorServerMsgHandle struct{}

func (d *CreateZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateZoneRequest{}
}

func (d *CreateZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *CreateZoneDescriptor) IsUnary() bool {
	return true
}

func (d *CreateZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateZoneDescriptor) IsCollection() bool {
	return true
}

func (d *CreateZoneDescriptor) IsPlural() bool {
	return false
}

func (d *CreateZoneDescriptor) HasResource() bool {
	return true
}

func (d *CreateZoneDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateZoneDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateZoneDescriptor) GetMethodName() string {
	return "CreateZone"
}

func (d *CreateZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/CreateZone"
}

func (d *CreateZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *CreateZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *CreateZoneDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *CreateZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateZoneDescriptorClientMsgHandle{}
}

func (d *CreateZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateZoneDescriptorServerMsgHandle{}
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetZone()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*zone.Name)(nil)
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateZoneDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*zone.ParentName)(nil)
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*zone.Name)(nil)
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateZoneDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateZoneDescriptor() *CreateZoneDescriptor {
	return createZoneDescriptor
}

type UpdateZoneDescriptor struct{}

type UpdateZoneDescriptorClientMsgHandle struct{}

type UpdateZoneDescriptorServerMsgHandle struct{}

func (d *UpdateZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateZoneRequest{}
}

func (d *UpdateZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &zone.Zone{}
}

func (d *UpdateZoneDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateZoneDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateZoneDescriptor) HasResource() bool {
	return true
}

func (d *UpdateZoneDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateZoneDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateZoneDescriptor) GetMethodName() string {
	return "UpdateZone"
}

func (d *UpdateZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/UpdateZone"
}

func (d *UpdateZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *UpdateZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *UpdateZoneDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *UpdateZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateZoneDescriptorClientMsgHandle{}
}

func (d *UpdateZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateZoneDescriptorServerMsgHandle{}
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetZone()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*zone.Name)(nil)
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateZoneDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*zone.Zone) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*zone.Name)(nil)
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*zone.Zone) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateZoneDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*zone.Zone)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*zone.Zone) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateZoneDescriptor() *UpdateZoneDescriptor {
	return updateZoneDescriptor
}

type DeleteZoneDescriptor struct{}

type DeleteZoneDescriptorClientMsgHandle struct{}

type DeleteZoneDescriptorServerMsgHandle struct{}

func (d *DeleteZoneDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteZoneRequest{}
}

func (d *DeleteZoneDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteZoneDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteZoneDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteZoneDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteZoneDescriptor) HasResource() bool {
	return true
}

func (d *DeleteZoneDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteZoneDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteZoneDescriptor) GetMethodName() string {
	return "DeleteZone"
}

func (d *DeleteZoneDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.ZoneService/DeleteZone"
}

func (d *DeleteZoneDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteZoneDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *DeleteZoneDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteZoneDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteZoneDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return zoneServiceDescriptor
}

func (d *DeleteZoneDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return zone.GetDescriptor()
}

func (d *DeleteZoneDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteZoneDescriptorClientMsgHandle{}
}

func (d *DeleteZoneDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteZoneDescriptorServerMsgHandle{}
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteZoneRequest) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*zone.Name)(nil)
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteZoneRequest) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteZoneDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteZoneRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteZoneRequest) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *zone.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*zone.Name
	})
	if ok {
		return zone.ZoneNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteZoneDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *zone.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteZoneDescriptor() *DeleteZoneDescriptor {
	return deleteZoneDescriptor
}

type ZoneServiceDescriptor struct{}

func (d *ZoneServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getZoneDescriptor,
		batchGetZonesDescriptor,
		listZonesDescriptor,
		watchZoneDescriptor,
		watchZonesDescriptor,
		createZoneDescriptor,
		updateZoneDescriptor,
		deleteZoneDescriptor,
	}
}

func (d *ZoneServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.ZoneService"
}

func (d *ZoneServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ZoneServiceDescriptor) GetApiName() string {
	return "ZoneService"
}

func (d *ZoneServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ZoneServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetZoneServiceDescriptor() *ZoneServiceDescriptor {
	return zoneServiceDescriptor
}

func initDescriptors() {
	zoneServiceDescriptor = &ZoneServiceDescriptor{}
	getZoneDescriptor = &GetZoneDescriptor{}
	batchGetZonesDescriptor = &BatchGetZonesDescriptor{}
	listZonesDescriptor = &ListZonesDescriptor{}
	watchZoneDescriptor = &WatchZoneDescriptor{}
	watchZonesDescriptor = &WatchZonesDescriptor{}
	createZoneDescriptor = &CreateZoneDescriptor{}
	updateZoneDescriptor = &UpdateZoneDescriptor{}
	deleteZoneDescriptor = &DeleteZoneDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(zoneServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchZonesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateZoneDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteZoneDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
