// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/zone_service.proto
// DO NOT EDIT!!!

package zone_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

func (o *GetZoneRequest) GotenObjectExt() {}

func (o *GetZoneRequest) MakeFullFieldMask() *GetZoneRequest_FieldMask {
	return FullGetZoneRequest_FieldMask()
}

func (o *GetZoneRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetZoneRequest_FieldMask()
}

func (o *GetZoneRequest) MakeDiffFieldMask(other *GetZoneRequest) *GetZoneRequest_FieldMask {
	if o == nil && other == nil {
		return &GetZoneRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetZoneRequest_FieldMask()
	}

	res := &GetZoneRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetZoneRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetZoneRequest))
}

func (o *GetZoneRequest) Clone() *GetZoneRequest {
	if o == nil {
		return nil
	}
	result := &GetZoneRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &zone.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	result.View = o.View
	return result
}

func (o *GetZoneRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetZoneRequest) Merge(source *GetZoneRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &zone.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetZoneRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetZoneRequest))
}

func (o *BatchGetZonesRequest) GotenObjectExt() {}

func (o *BatchGetZonesRequest) MakeFullFieldMask() *BatchGetZonesRequest_FieldMask {
	return FullBatchGetZonesRequest_FieldMask()
}

func (o *BatchGetZonesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetZonesRequest_FieldMask()
}

func (o *BatchGetZonesRequest) MakeDiffFieldMask(other *BatchGetZonesRequest) *BatchGetZonesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetZonesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetZonesRequest_FieldMask()
	}

	res := &BatchGetZonesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetZonesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetZonesRequest))
}

func (o *BatchGetZonesRequest) Clone() *BatchGetZonesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetZonesRequest{}
	result.Names = make([]*zone.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &zone.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetZonesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetZonesRequest) Merge(source *BatchGetZonesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *zone.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &zone.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetZonesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetZonesRequest))
}

func (o *BatchGetZonesResponse) GotenObjectExt() {}

func (o *BatchGetZonesResponse) MakeFullFieldMask() *BatchGetZonesResponse_FieldMask {
	return FullBatchGetZonesResponse_FieldMask()
}

func (o *BatchGetZonesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetZonesResponse_FieldMask()
}

func (o *BatchGetZonesResponse) MakeDiffFieldMask(other *BatchGetZonesResponse) *BatchGetZonesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetZonesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetZonesResponse_FieldMask()
	}

	res := &BatchGetZonesResponse_FieldMask{}

	if len(o.GetZones()) == len(other.GetZones()) {
		for i, lValue := range o.GetZones() {
			rValue := other.GetZones()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorZones})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorZones})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetZonesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetZonesResponse))
}

func (o *BatchGetZonesResponse) Clone() *BatchGetZonesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetZonesResponse{}
	result.Zones = make([]*zone.Zone, len(o.Zones))
	for i, sourceValue := range o.Zones {
		result.Zones[i] = sourceValue.Clone()
	}
	result.Missing = make([]*zone.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &zone.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetZonesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetZonesResponse) Merge(source *BatchGetZonesResponse) {
	for _, sourceValue := range source.GetZones() {
		exists := false
		for _, currentValue := range o.Zones {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *zone.Zone
			if sourceValue != nil {
				newDstElement = new(zone.Zone)
				newDstElement.Merge(sourceValue)
			}
			o.Zones = append(o.Zones, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *zone.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &zone.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetZonesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetZonesResponse))
}

func (o *ListZonesRequest) GotenObjectExt() {}

func (o *ListZonesRequest) MakeFullFieldMask() *ListZonesRequest_FieldMask {
	return FullListZonesRequest_FieldMask()
}

func (o *ListZonesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListZonesRequest_FieldMask()
}

func (o *ListZonesRequest) MakeDiffFieldMask(other *ListZonesRequest) *ListZonesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListZonesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListZonesRequest_FieldMask()
	}

	res := &ListZonesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListZonesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListZonesRequest))
}

func (o *ListZonesRequest) Clone() *ListZonesRequest {
	if o == nil {
		return nil
	}
	result := &ListZonesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &zone.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &zone.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &zone.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &zone.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListZonesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListZonesRequest) Merge(source *ListZonesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &zone.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &zone.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &zone.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &zone.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListZonesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListZonesRequest))
}

func (o *ListZonesResponse) GotenObjectExt() {}

func (o *ListZonesResponse) MakeFullFieldMask() *ListZonesResponse_FieldMask {
	return FullListZonesResponse_FieldMask()
}

func (o *ListZonesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListZonesResponse_FieldMask()
}

func (o *ListZonesResponse) MakeDiffFieldMask(other *ListZonesResponse) *ListZonesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListZonesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListZonesResponse_FieldMask()
	}

	res := &ListZonesResponse_FieldMask{}

	if len(o.GetZones()) == len(other.GetZones()) {
		for i, lValue := range o.GetZones() {
			rValue := other.GetZones()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorZones})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorZones})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListZonesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListZonesResponse))
}

func (o *ListZonesResponse) Clone() *ListZonesResponse {
	if o == nil {
		return nil
	}
	result := &ListZonesResponse{}
	result.Zones = make([]*zone.Zone, len(o.Zones))
	for i, sourceValue := range o.Zones {
		result.Zones[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &zone.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &zone.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListZonesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListZonesResponse) Merge(source *ListZonesResponse) {
	for _, sourceValue := range source.GetZones() {
		exists := false
		for _, currentValue := range o.Zones {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *zone.Zone
			if sourceValue != nil {
				newDstElement = new(zone.Zone)
				newDstElement.Merge(sourceValue)
			}
			o.Zones = append(o.Zones, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &zone.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &zone.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListZonesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListZonesResponse))
}

func (o *WatchZoneRequest) GotenObjectExt() {}

func (o *WatchZoneRequest) MakeFullFieldMask() *WatchZoneRequest_FieldMask {
	return FullWatchZoneRequest_FieldMask()
}

func (o *WatchZoneRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchZoneRequest_FieldMask()
}

func (o *WatchZoneRequest) MakeDiffFieldMask(other *WatchZoneRequest) *WatchZoneRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchZoneRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchZoneRequest_FieldMask()
	}

	res := &WatchZoneRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchZoneRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchZoneRequest))
}

func (o *WatchZoneRequest) Clone() *WatchZoneRequest {
	if o == nil {
		return nil
	}
	result := &WatchZoneRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &zone.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchZoneRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchZoneRequest) Merge(source *WatchZoneRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &zone.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchZoneRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchZoneRequest))
}

func (o *WatchZoneResponse) GotenObjectExt() {}

func (o *WatchZoneResponse) MakeFullFieldMask() *WatchZoneResponse_FieldMask {
	return FullWatchZoneResponse_FieldMask()
}

func (o *WatchZoneResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchZoneResponse_FieldMask()
}

func (o *WatchZoneResponse) MakeDiffFieldMask(other *WatchZoneResponse) *WatchZoneResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchZoneResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchZoneResponse_FieldMask()
	}

	res := &WatchZoneResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchZoneResponse_FieldTerminalPath{selector: WatchZoneResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchZoneResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchZoneResponse))
}

func (o *WatchZoneResponse) Clone() *WatchZoneResponse {
	if o == nil {
		return nil
	}
	result := &WatchZoneResponse{}
	result.Change = proto.Clone(o.Change).(*zone.ZoneChange)
	return result
}

func (o *WatchZoneResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchZoneResponse) Merge(source *WatchZoneResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(zone.ZoneChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchZoneResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchZoneResponse))
}

func (o *WatchZonesRequest) GotenObjectExt() {}

func (o *WatchZonesRequest) MakeFullFieldMask() *WatchZonesRequest_FieldMask {
	return FullWatchZonesRequest_FieldMask()
}

func (o *WatchZonesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchZonesRequest_FieldMask()
}

func (o *WatchZonesRequest) MakeDiffFieldMask(other *WatchZonesRequest) *WatchZonesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchZonesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchZonesRequest_FieldMask()
	}

	res := &WatchZonesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchZonesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchZonesRequest))
}

func (o *WatchZonesRequest) Clone() *WatchZonesRequest {
	if o == nil {
		return nil
	}
	result := &WatchZonesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &zone.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &zone.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &zone.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &zone.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchZonesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchZonesRequest) Merge(source *WatchZonesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &zone.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &zone.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &zone.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &zone.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchZonesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchZonesRequest))
}

func (o *WatchZonesResponse) GotenObjectExt() {}

func (o *WatchZonesResponse) MakeFullFieldMask() *WatchZonesResponse_FieldMask {
	return FullWatchZonesResponse_FieldMask()
}

func (o *WatchZonesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchZonesResponse_FieldMask()
}

func (o *WatchZonesResponse) MakeDiffFieldMask(other *WatchZonesResponse) *WatchZonesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchZonesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchZonesResponse_FieldMask()
	}

	res := &WatchZonesResponse_FieldMask{}

	if len(o.GetZoneChanges()) == len(other.GetZoneChanges()) {
		for i, lValue := range o.GetZoneChanges() {
			rValue := other.GetZoneChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorZoneChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorZoneChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchZonesResponse_FieldSubPath{selector: WatchZonesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchZonesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchZonesResponse))
}

func (o *WatchZonesResponse) Clone() *WatchZonesResponse {
	if o == nil {
		return nil
	}
	result := &WatchZonesResponse{}
	result.ZoneChanges = make([]*zone.ZoneChange, len(o.ZoneChanges))
	for i, sourceValue := range o.ZoneChanges {
		result.ZoneChanges[i] = proto.Clone(sourceValue).(*zone.ZoneChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchZonesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchZonesResponse) Merge(source *WatchZonesResponse) {
	for _, sourceValue := range source.GetZoneChanges() {
		exists := false
		for _, currentValue := range o.ZoneChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *zone.ZoneChange
			if sourceValue != nil {
				newDstElement = new(zone.ZoneChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ZoneChanges = append(o.ZoneChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchZonesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchZonesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchZonesResponse))
}

func (o *WatchZonesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchZonesResponse_PageTokenChange) MakeFullFieldMask() *WatchZonesResponse_PageTokenChange_FieldMask {
	return FullWatchZonesResponse_PageTokenChange_FieldMask()
}

func (o *WatchZonesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchZonesResponse_PageTokenChange_FieldMask()
}

func (o *WatchZonesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchZonesResponse_PageTokenChange) *WatchZonesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchZonesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchZonesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchZonesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchZonesResponsePageTokenChange_FieldTerminalPath{selector: WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchZonesResponsePageTokenChange_FieldTerminalPath{selector: WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchZonesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchZonesResponse_PageTokenChange))
}

func (o *WatchZonesResponse_PageTokenChange) Clone() *WatchZonesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchZonesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &zone.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &zone.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchZonesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchZonesResponse_PageTokenChange) Merge(source *WatchZonesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &zone.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &zone.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchZonesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchZonesResponse_PageTokenChange))
}

func (o *CreateZoneRequest) GotenObjectExt() {}

func (o *CreateZoneRequest) MakeFullFieldMask() *CreateZoneRequest_FieldMask {
	return FullCreateZoneRequest_FieldMask()
}

func (o *CreateZoneRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateZoneRequest_FieldMask()
}

func (o *CreateZoneRequest) MakeDiffFieldMask(other *CreateZoneRequest) *CreateZoneRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateZoneRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateZoneRequest_FieldMask()
	}

	res := &CreateZoneRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateZoneRequest_FieldTerminalPath{selector: CreateZoneRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetZone().MakeDiffFieldMask(other.GetZone())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateZoneRequest_FieldTerminalPath{selector: CreateZoneRequest_FieldPathSelectorZone})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateZoneRequest_FieldSubPath{selector: CreateZoneRequest_FieldPathSelectorZone, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateZoneRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateZoneRequest))
}

func (o *CreateZoneRequest) Clone() *CreateZoneRequest {
	if o == nil {
		return nil
	}
	result := &CreateZoneRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &zone.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Zone = o.Zone.Clone()
	return result
}

func (o *CreateZoneRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateZoneRequest) Merge(source *CreateZoneRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &zone.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetZone() != nil {
		if o.Zone == nil {
			o.Zone = new(zone.Zone)
		}
		o.Zone.Merge(source.GetZone())
	}
}

func (o *CreateZoneRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateZoneRequest))
}

func (o *UpdateZoneRequest) GotenObjectExt() {}

func (o *UpdateZoneRequest) MakeFullFieldMask() *UpdateZoneRequest_FieldMask {
	return FullUpdateZoneRequest_FieldMask()
}

func (o *UpdateZoneRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateZoneRequest_FieldMask()
}

func (o *UpdateZoneRequest) MakeDiffFieldMask(other *UpdateZoneRequest) *UpdateZoneRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateZoneRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateZoneRequest_FieldMask()
	}

	res := &UpdateZoneRequest_FieldMask{}
	{
		subMask := o.GetZone().MakeDiffFieldMask(other.GetZone())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorZone})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateZoneRequest_FieldSubPath{selector: UpdateZoneRequest_FieldPathSelectorZone, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateZoneRequest_FieldSubPath{selector: UpdateZoneRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateZoneRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateZoneRequest))
}

func (o *UpdateZoneRequest) Clone() *UpdateZoneRequest {
	if o == nil {
		return nil
	}
	result := &UpdateZoneRequest{}
	result.Zone = o.Zone.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*zone.Zone_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateZoneRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateZoneRequest) Merge(source *UpdateZoneRequest) {
	if source.GetZone() != nil {
		if o.Zone == nil {
			o.Zone = new(zone.Zone)
		}
		o.Zone.Merge(source.GetZone())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateZoneRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateZoneRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateZoneRequest))
}

func (o *UpdateZoneRequest_CAS) GotenObjectExt() {}

func (o *UpdateZoneRequest_CAS) MakeFullFieldMask() *UpdateZoneRequest_CAS_FieldMask {
	return FullUpdateZoneRequest_CAS_FieldMask()
}

func (o *UpdateZoneRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateZoneRequest_CAS_FieldMask()
}

func (o *UpdateZoneRequest_CAS) MakeDiffFieldMask(other *UpdateZoneRequest_CAS) *UpdateZoneRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateZoneRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateZoneRequest_CAS_FieldMask()
	}

	res := &UpdateZoneRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateZoneRequestCAS_FieldTerminalPath{selector: UpdateZoneRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateZoneRequestCAS_FieldSubPath{selector: UpdateZoneRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateZoneRequestCAS_FieldTerminalPath{selector: UpdateZoneRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateZoneRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateZoneRequest_CAS))
}

func (o *UpdateZoneRequest_CAS) Clone() *UpdateZoneRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateZoneRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*zone.Zone_FieldMask)
	return result
}

func (o *UpdateZoneRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateZoneRequest_CAS) Merge(source *UpdateZoneRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(zone.Zone)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(zone.Zone_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateZoneRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateZoneRequest_CAS))
}

func (o *DeleteZoneRequest) GotenObjectExt() {}

func (o *DeleteZoneRequest) MakeFullFieldMask() *DeleteZoneRequest_FieldMask {
	return FullDeleteZoneRequest_FieldMask()
}

func (o *DeleteZoneRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteZoneRequest_FieldMask()
}

func (o *DeleteZoneRequest) MakeDiffFieldMask(other *DeleteZoneRequest) *DeleteZoneRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteZoneRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteZoneRequest_FieldMask()
	}

	res := &DeleteZoneRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteZoneRequest_FieldTerminalPath{selector: DeleteZoneRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteZoneRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteZoneRequest))
}

func (o *DeleteZoneRequest) Clone() *DeleteZoneRequest {
	if o == nil {
		return nil
	}
	result := &DeleteZoneRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &zone.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteZoneRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteZoneRequest) Merge(source *DeleteZoneRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &zone.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteZoneRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteZoneRequest))
}
