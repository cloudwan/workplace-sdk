// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha2/area_service.proto
// DO NOT EDIT!!!

package area_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &floor.Floor{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetArea][ntt.workplace.v1alpha2.GetArea]
type GetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.Area
	Name *area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *area.Area_FieldMask `protobuf:"bytes,3,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetAreaRequest) Reset() {
	*m = GetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetAreaRequest) ProtoMessage() {}

func (m *GetAreaRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetAreaRequest) GotenMessage() {}

// Deprecated, Use GetAreaRequest.ProtoReflect.Descriptor instead.
func (*GetAreaRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetAreaRequest) GetName() *area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetAreaRequest) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetAreaRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetAreaRequest) SetName(fv *area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetAreaRequest"))
	}
	m.Name = fv
}

func (m *GetAreaRequest) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetAreaRequest"))
	}
	m.FieldMask = fv
}

func (m *GetAreaRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetAreaRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetAreas][ntt.workplace.v1alpha2.BatchGetAreas]
type BatchGetAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of Areas
	Names []*area.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *area.Area_FieldMask `protobuf:"bytes,3,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetAreasRequest) Reset() {
	*m = BatchGetAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAreasRequest) ProtoMessage() {}

func (m *BatchGetAreasRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAreasRequest) GotenMessage() {}

// Deprecated, Use BatchGetAreasRequest.ProtoReflect.Descriptor instead.
func (*BatchGetAreasRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAreasRequest) GetNames() []*area.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetAreasRequest) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetAreasRequest) SetNames(fv []*area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetAreasRequest"))
	}
	m.Names = fv
}

func (m *BatchGetAreasRequest) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetAreasRequest"))
	}
	m.View = fv
}

// BatchGetAreasResponse
type BatchGetAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found Areas
	Areas []*area.Area `protobuf:"bytes,1,rep,name=areas,proto3" json:"areas,omitempty" firestore:"areas"`
	// list of not found Areas
	Missing []*area.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetAreasResponse) Reset() {
	*m = BatchGetAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAreasResponse) ProtoMessage() {}

func (m *BatchGetAreasResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAreasResponse) GotenMessage() {}

// Deprecated, Use BatchGetAreasResponse.ProtoReflect.Descriptor instead.
func (*BatchGetAreasResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAreasResponse) GetAreas() []*area.Area {
	if m != nil {
		return m.Areas
	}
	return nil
}

func (m *BatchGetAreasResponse) GetMissing() []*area.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetAreasResponse) SetAreas(fv []*area.Area) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Areas", "BatchGetAreasResponse"))
	}
	m.Areas = fv
}

func (m *BatchGetAreasResponse) SetMissing(fv []*area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetAreasResponse"))
	}
	m.Missing = fv
}

// Request message for method [ListAreas][ntt.workplace.v1alpha2.ListAreas]
type ListAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.workplace.v1alpha2.Area
	Parent *area.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Areas than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListAreasResponse.next_page_token][ntt.workplace.v1alpha2.ListAreasResponse.next_page_token]
	PageToken *area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *area.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *area.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *area.Area_FieldMask `protobuf:"bytes,6,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListAreasRequest) Reset() {
	*m = ListAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAreasRequest) ProtoMessage() {}

func (m *ListAreasRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAreasRequest) GotenMessage() {}

// Deprecated, Use ListAreasRequest.ProtoReflect.Descriptor instead.
func (*ListAreasRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAreasRequest) GetParent() *area.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListAreasRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListAreasRequest) GetPageToken() *area.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListAreasRequest) GetOrderBy() *area.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAreasRequest) GetFilter() *area.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAreasRequest) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListAreasRequest) SetParent(fv *area.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListAreasRequest"))
	}
	m.Parent = fv
}

func (m *ListAreasRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListAreasRequest"))
	}
	m.PageSize = fv
}

func (m *ListAreasRequest) SetPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListAreasRequest"))
	}
	m.PageToken = fv
}

func (m *ListAreasRequest) SetOrderBy(fv *area.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListAreasRequest"))
	}
	m.OrderBy = fv
}

func (m *ListAreasRequest) SetFilter(fv *area.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListAreasRequest"))
	}
	m.Filter = fv
}

func (m *ListAreasRequest) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *ListAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListAreasRequest"))
	}
	m.View = fv
}

// Request message for method [ListAreas][ntt.workplace.v1alpha2.ListAreas]
type ListAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Areas
	Areas []*area.Area `protobuf:"bytes,1,rep,name=areas,proto3" json:"areas,omitempty" firestore:"areas"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListAreasRequest.page_token][ntt.workplace.v1alpha2.ListAreasRequest.page_token]
	PrevPageToken *area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListAreasRequest.page_token][ntt.workplace.v1alpha2.ListAreasRequest.page_token]
	NextPageToken *area.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListAreasResponse) Reset() {
	*m = ListAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAreasResponse) ProtoMessage() {}

func (m *ListAreasResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAreasResponse) GotenMessage() {}

// Deprecated, Use ListAreasResponse.ProtoReflect.Descriptor instead.
func (*ListAreasResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAreasResponse) GetAreas() []*area.Area {
	if m != nil {
		return m.Areas
	}
	return nil
}

func (m *ListAreasResponse) GetPrevPageToken() *area.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListAreasResponse) GetNextPageToken() *area.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListAreasResponse) SetAreas(fv []*area.Area) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Areas", "ListAreasResponse"))
	}
	m.Areas = fv
}

func (m *ListAreasResponse) SetPrevPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListAreasResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListAreasResponse) SetNextPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListAreasResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method [WatchArea][ntt.workplace.v1alpha2.WatchArea]
type WatchAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.workplace.v1alpha2.Area
	Name *area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *area.Area_FieldMask `protobuf:"bytes,2,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchAreaRequest) Reset() {
	*m = WatchAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAreaRequest) ProtoMessage() {}

func (m *WatchAreaRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAreaRequest) GotenMessage() {}

// Deprecated, Use WatchAreaRequest.ProtoReflect.Descriptor instead.
func (*WatchAreaRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAreaRequest) GetName() *area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchAreaRequest) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAreaRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAreaRequest) SetName(fv *area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchAreaRequest"))
	}
	m.Name = fv
}

func (m *WatchAreaRequest) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAreaRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAreaRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAreaRequest"))
	}
	m.View = fv
}

// WatchAreaResponse
type WatchAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *area.AreaChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchAreaResponse) Reset() {
	*m = WatchAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAreaResponse) ProtoMessage() {}

func (m *WatchAreaResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAreaResponse) GotenMessage() {}

// Deprecated, Use WatchAreaResponse.ProtoReflect.Descriptor instead.
func (*WatchAreaResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchAreaResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAreaResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAreaResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAreaResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAreaResponse) GetChange() *area.AreaChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchAreaResponse) SetChange(fv *area.AreaChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchAreaResponse"))
	}
	m.Change = fv
}

// Request message for method [WatchAreas][ntt.workplace.v1alpha2.WatchAreas]
type WatchAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.workplace.v1alpha2.Area
	Parent *area.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Areas than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *area.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *area.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to Area that don't affect any
	// of masked fields won't be sent back.
	FieldMask *area.Area_FieldMask `protobuf:"bytes,6,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// Area that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchAreasRequest) Reset() {
	*m = WatchAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAreasRequest) ProtoMessage() {}

func (m *WatchAreasRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAreasRequest) GotenMessage() {}

// Deprecated, Use WatchAreasRequest.ProtoReflect.Descriptor instead.
func (*WatchAreasRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAreasRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchAreasRequest) GetParent() *area.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchAreasRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchAreasRequest) GetPageToken() *area.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchAreasRequest) GetOrderBy() *area.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchAreasRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAreasRequest) GetFilter() *area.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchAreasRequest) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAreasRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchAreasRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchAreasRequest"))
	}
	m.Type = fv
}

func (m *WatchAreasRequest) SetParent(fv *area.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchAreasRequest"))
	}
	m.Parent = fv
}

func (m *WatchAreasRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchAreasRequest"))
	}
	m.PageSize = fv
}

func (m *WatchAreasRequest) SetPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchAreasRequest"))
	}
	m.PageToken = fv
}

func (m *WatchAreasRequest) SetOrderBy(fv *area.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchAreasRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchAreasRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAreasRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchAreasRequest) SetFilter(fv *area.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchAreasRequest"))
	}
	m.Filter = fv
}

func (m *WatchAreasRequest) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAreasRequest"))
	}
	m.View = fv
}

func (m *WatchAreasRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchAreasRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchAreasResponse
type WatchAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of Areas
	AreaChanges []*area.AreaChange `protobuf:"bytes,2,rep,name=area_changes,json=areaChanges,proto3" json:"area_changes,omitempty" firestore:"areaChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All Areas will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchAreasResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (Areas will contains changes of
	// type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchAreasResponse) Reset() {
	*m = WatchAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAreasResponse) ProtoMessage() {}

func (m *WatchAreasResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAreasResponse) GotenMessage() {}

// Deprecated, Use WatchAreasResponse.ProtoReflect.Descriptor instead.
func (*WatchAreasResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAreasResponse) GetAreaChanges() []*area.AreaChange {
	if m != nil {
		return m.AreaChanges
	}
	return nil
}

func (m *WatchAreasResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchAreasResponse) GetPageTokenChange() *WatchAreasResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchAreasResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAreasResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchAreasResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchAreasResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchAreasResponse) SetAreaChanges(fv []*area.AreaChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AreaChanges", "WatchAreasResponse"))
	}
	m.AreaChanges = fv
}

func (m *WatchAreasResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchAreasResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchAreasResponse) SetPageTokenChange(fv *WatchAreasResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchAreasResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchAreasResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAreasResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchAreasResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchAreasResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchAreasResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchAreasResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchAreasResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchAreasResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method [CreateArea][ntt.workplace.v1alpha2.CreateArea]
type CreateAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.workplace.v1alpha2.Area
	Parent *area.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Area resource body
	Area *area.Area `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty" firestore:"area"`
}

func (m *CreateAreaRequest) Reset() {
	*m = CreateAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAreaRequest) ProtoMessage() {}

func (m *CreateAreaRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAreaRequest) GotenMessage() {}

// Deprecated, Use CreateAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateAreaRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateAreaRequest) GetParent() *area.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateAreaRequest) GetArea() *area.Area {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *CreateAreaRequest) SetParent(fv *area.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateAreaRequest"))
	}
	m.Parent = fv
}

func (m *CreateAreaRequest) SetArea(fv *area.Area) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Area", "CreateAreaRequest"))
	}
	m.Area = fv
}

// Request message for method [UpdateArea][ntt.workplace.v1alpha2.UpdateArea]
type UpdateAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Area resource body
	Area *area.Area `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty" firestore:"area"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *area.Area_FieldMask `protobuf:"bytes,3,opt,customtype=Area_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateAreaRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateAreaRequest) Reset() {
	*m = UpdateAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAreaRequest) ProtoMessage() {}

func (m *UpdateAreaRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAreaRequest) GotenMessage() {}

// Deprecated, Use UpdateAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateAreaRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAreaRequest) GetArea() *area.Area {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *UpdateAreaRequest) GetUpdateMask() *area.Area_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateAreaRequest) GetCas() *UpdateAreaRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateAreaRequest) SetArea(fv *area.Area) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Area", "UpdateAreaRequest"))
	}
	m.Area = fv
}

func (m *UpdateAreaRequest) SetUpdateMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateAreaRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateAreaRequest) SetCas(fv *UpdateAreaRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateAreaRequest"))
	}
	m.Cas = fv
}

// Request message for method [DeleteArea][ntt.workplace.v1alpha2.DeleteArea]
type DeleteAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha2.Area
	Name *area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteAreaRequest) Reset() {
	*m = DeleteAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteAreaRequest) ProtoMessage() {}

func (m *DeleteAreaRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteAreaRequest) GotenMessage() {}

// Deprecated, Use DeleteAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteAreaRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteAreaRequest) GetName() *area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteAreaRequest) SetName(fv *area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteAreaRequest"))
	}
	m.Name = fv
}

type WatchAreasResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *area.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *area.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchAreasResponse_PageTokenChange) Reset() {
	*m = WatchAreasResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAreasResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAreasResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchAreasResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAreasResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchAreasResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchAreasResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchAreasResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAreasResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAreasResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAreasResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAreasResponse_PageTokenChange) GetPrevPageToken() *area.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchAreasResponse_PageTokenChange) GetNextPageToken() *area.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchAreasResponse_PageTokenChange) SetPrevPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchAreasResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchAreasResponse_PageTokenChange) SetNextPageToken(fv *area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchAreasResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateAreaRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *area.Area `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *area.Area_FieldMask `protobuf:"bytes,2,opt,customtype=Area_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateAreaRequest_CAS) Reset() {
	*m = UpdateAreaRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAreaRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAreaRequest_CAS) ProtoMessage() {}

func (m *UpdateAreaRequest_CAS) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_area_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAreaRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateAreaRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateAreaRequest_CAS) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_area_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateAreaRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAreaRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAreaRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAreaRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAreaRequest_CAS) GetConditionalState() *area.Area {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateAreaRequest_CAS) GetFieldMask() *area.Area_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateAreaRequest_CAS) SetConditionalState(fv *area.Area) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateAreaRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateAreaRequest_CAS) SetFieldMask(fv *area.Area_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateAreaRequest_CAS"))
	}
	m.FieldMask = fv
}

var workplace_proto_v1alpha2_area_service_proto preflect.FileDescriptor

var workplace_proto_v1alpha2_area_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0xaf, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2,
	0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x73, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xd0, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda,
	0x21, 0x08, 0x3a, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12,
	0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x2a, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x1a, 0x06, 0x0a, 0x04, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21,
	0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2,
	0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xa7, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21,
	0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4f, 0x0a, 0x11, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x11,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x42, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61,
	0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22,
	0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x2a, 0x06, 0x0a, 0x04, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x1a, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27,
	0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08,
	0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xf1, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x11,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x1a, 0x7d, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x42,
	0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42,
	0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x3a, 0x17, 0xc2, 0x85, 0x2c, 0x13, 0x32, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x03, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a,
	0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0x99,
	0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x1a, 0xc2, 0x85, 0x2c, 0x16,
	0x32, 0x09, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0xe0, 0x10, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xec, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x41, 0x72, 0x65, 0x61, 0x22, 0x9a, 0x01, 0x82, 0xdb, 0x21, 0x1b, 0x0a, 0x04, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x92,
	0x97, 0x22, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5,
	0x22, 0x00, 0x12, 0xe5, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x77, 0x82, 0xdb, 0x21, 0x24, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x32, 0x07, 0x12, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x92, 0x97, 0x22, 0x21, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x88, 0x02, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01,
	0x82, 0xdb, 0x21, 0x23, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x07,
	0x12, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x92,
	0x97, 0x22, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x8b, 0x02, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x82, 0xdb, 0x21, 0x1f, 0x0a,
	0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x50, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x9c, 0x02, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x82, 0xdb, 0x21, 0x2b,
	0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x0e, 0x12, 0x0c, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x50, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1f, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x8e, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x22, 0xb6, 0x01, 0x82, 0xdb, 0x21,
	0x28, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x2a, 0x0e, 0x12, 0x04, 0x61, 0x72, 0x65, 0x61, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x52, 0x3a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0x4a, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x92, 0x97, 0x22, 0x20, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0,
	0xd5, 0x22, 0x03, 0x12, 0x8c, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x22, 0xb4, 0x01, 0x82, 0xdb,
	0x21, 0x1e, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2a, 0x06, 0x12, 0x04, 0x61, 0x72, 0x65, 0x61, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x3a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x1a, 0x4f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x61,
	0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x23, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5,
	0x22, 0x03, 0x12, 0xee, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x9c, 0x01, 0x82, 0xdb, 0x21, 0x16, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x4a, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0,
	0xd5, 0x22, 0x03, 0x1a, 0x31, 0xca, 0x41, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xcd, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0,
	0x02, 0x41, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61,
	0x72, 0x65, 0x61, 0x8a, 0xff, 0xd0, 0x02, 0x41, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x10, 0x41, 0x72, 0x65, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61,
	0x3b, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02,
	0x45, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha2_area_service_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha2_area_service_proto_rawDescData = workplace_proto_v1alpha2_area_service_proto_rawDesc
)

func workplace_proto_v1alpha2_area_service_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha2_area_service_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha2_area_service_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha2_area_service_proto_rawDescData)
	})
	return workplace_proto_v1alpha2_area_service_proto_rawDescData
}

var workplace_proto_v1alpha2_area_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var workplace_proto_v1alpha2_area_service_proto_goTypes = []interface{}{
	(*GetAreaRequest)(nil),                     // 0: ntt.workplace.v1alpha2.GetAreaRequest
	(*BatchGetAreasRequest)(nil),               // 1: ntt.workplace.v1alpha2.BatchGetAreasRequest
	(*BatchGetAreasResponse)(nil),              // 2: ntt.workplace.v1alpha2.BatchGetAreasResponse
	(*ListAreasRequest)(nil),                   // 3: ntt.workplace.v1alpha2.ListAreasRequest
	(*ListAreasResponse)(nil),                  // 4: ntt.workplace.v1alpha2.ListAreasResponse
	(*WatchAreaRequest)(nil),                   // 5: ntt.workplace.v1alpha2.WatchAreaRequest
	(*WatchAreaResponse)(nil),                  // 6: ntt.workplace.v1alpha2.WatchAreaResponse
	(*WatchAreasRequest)(nil),                  // 7: ntt.workplace.v1alpha2.WatchAreasRequest
	(*WatchAreasResponse)(nil),                 // 8: ntt.workplace.v1alpha2.WatchAreasResponse
	(*CreateAreaRequest)(nil),                  // 9: ntt.workplace.v1alpha2.CreateAreaRequest
	(*UpdateAreaRequest)(nil),                  // 10: ntt.workplace.v1alpha2.UpdateAreaRequest
	(*DeleteAreaRequest)(nil),                  // 11: ntt.workplace.v1alpha2.DeleteAreaRequest
	(*WatchAreasResponse_PageTokenChange)(nil), // 12: ntt.workplace.v1alpha2.WatchAreasResponse.PageTokenChange
	(*UpdateAreaRequest_CAS)(nil),              // 13: ntt.workplace.v1alpha2.UpdateAreaRequest.CAS
	(*area.Area_FieldMask)(nil),                // 14: ntt.workplace.v1alpha2.Area_FieldMask
	(view.View)(0),                             // 15: goten.view.View
	(*area.Area)(nil),                          // 16: ntt.workplace.v1alpha2.Area
	(*area.AreaChange)(nil),                    // 17: ntt.workplace.v1alpha2.AreaChange
	(watch_type.WatchType)(0),                  // 18: goten.watch_type.WatchType
	(*empty.Empty)(nil),                        // 19: google.protobuf.Empty
}
var workplace_proto_v1alpha2_area_service_proto_depIdxs = []int32{
	14, // 0: ntt.workplace.v1alpha2.GetAreaRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	15, // 1: ntt.workplace.v1alpha2.GetAreaRequest.view:type_name -> goten.view.View
	14, // 2: ntt.workplace.v1alpha2.BatchGetAreasRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	15, // 3: ntt.workplace.v1alpha2.BatchGetAreasRequest.view:type_name -> goten.view.View
	16, // 4: ntt.workplace.v1alpha2.BatchGetAreasResponse.areas:type_name -> ntt.workplace.v1alpha2.Area
	14, // 5: ntt.workplace.v1alpha2.ListAreasRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	15, // 6: ntt.workplace.v1alpha2.ListAreasRequest.view:type_name -> goten.view.View
	16, // 7: ntt.workplace.v1alpha2.ListAreasResponse.areas:type_name -> ntt.workplace.v1alpha2.Area
	14, // 8: ntt.workplace.v1alpha2.WatchAreaRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	15, // 9: ntt.workplace.v1alpha2.WatchAreaRequest.view:type_name -> goten.view.View
	17, // 10: ntt.workplace.v1alpha2.WatchAreaResponse.change:type_name -> ntt.workplace.v1alpha2.AreaChange
	18, // 11: ntt.workplace.v1alpha2.WatchAreasRequest.type:type_name -> goten.watch_type.WatchType
	14, // 12: ntt.workplace.v1alpha2.WatchAreasRequest.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	15, // 13: ntt.workplace.v1alpha2.WatchAreasRequest.view:type_name -> goten.view.View
	17, // 14: ntt.workplace.v1alpha2.WatchAreasResponse.area_changes:type_name -> ntt.workplace.v1alpha2.AreaChange
	12, // 15: ntt.workplace.v1alpha2.WatchAreasResponse.page_token_change:type_name -> ntt.workplace.v1alpha2.WatchAreasResponse.PageTokenChange
	16, // 16: ntt.workplace.v1alpha2.CreateAreaRequest.area:type_name -> ntt.workplace.v1alpha2.Area
	16, // 17: ntt.workplace.v1alpha2.UpdateAreaRequest.area:type_name -> ntt.workplace.v1alpha2.Area
	14, // 18: ntt.workplace.v1alpha2.UpdateAreaRequest.update_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	13, // 19: ntt.workplace.v1alpha2.UpdateAreaRequest.cas:type_name -> ntt.workplace.v1alpha2.UpdateAreaRequest.CAS
	16, // 20: ntt.workplace.v1alpha2.UpdateAreaRequest.CAS.conditional_state:type_name -> ntt.workplace.v1alpha2.Area
	14, // 21: ntt.workplace.v1alpha2.UpdateAreaRequest.CAS.field_mask:type_name -> ntt.workplace.v1alpha2.Area_FieldMask
	0,  // 22: ntt.workplace.v1alpha2.AreaService.GetArea:input_type -> ntt.workplace.v1alpha2.GetAreaRequest
	1,  // 23: ntt.workplace.v1alpha2.AreaService.BatchGetAreas:input_type -> ntt.workplace.v1alpha2.BatchGetAreasRequest
	3,  // 24: ntt.workplace.v1alpha2.AreaService.ListAreas:input_type -> ntt.workplace.v1alpha2.ListAreasRequest
	5,  // 25: ntt.workplace.v1alpha2.AreaService.WatchArea:input_type -> ntt.workplace.v1alpha2.WatchAreaRequest
	7,  // 26: ntt.workplace.v1alpha2.AreaService.WatchAreas:input_type -> ntt.workplace.v1alpha2.WatchAreasRequest
	9,  // 27: ntt.workplace.v1alpha2.AreaService.CreateArea:input_type -> ntt.workplace.v1alpha2.CreateAreaRequest
	10, // 28: ntt.workplace.v1alpha2.AreaService.UpdateArea:input_type -> ntt.workplace.v1alpha2.UpdateAreaRequest
	11, // 29: ntt.workplace.v1alpha2.AreaService.DeleteArea:input_type -> ntt.workplace.v1alpha2.DeleteAreaRequest
	16, // 30: ntt.workplace.v1alpha2.AreaService.GetArea:output_type -> ntt.workplace.v1alpha2.Area
	2,  // 31: ntt.workplace.v1alpha2.AreaService.BatchGetAreas:output_type -> ntt.workplace.v1alpha2.BatchGetAreasResponse
	4,  // 32: ntt.workplace.v1alpha2.AreaService.ListAreas:output_type -> ntt.workplace.v1alpha2.ListAreasResponse
	6,  // 33: ntt.workplace.v1alpha2.AreaService.WatchArea:output_type -> ntt.workplace.v1alpha2.WatchAreaResponse
	8,  // 34: ntt.workplace.v1alpha2.AreaService.WatchAreas:output_type -> ntt.workplace.v1alpha2.WatchAreasResponse
	16, // 35: ntt.workplace.v1alpha2.AreaService.CreateArea:output_type -> ntt.workplace.v1alpha2.Area
	16, // 36: ntt.workplace.v1alpha2.AreaService.UpdateArea:output_type -> ntt.workplace.v1alpha2.Area
	19, // 37: ntt.workplace.v1alpha2.AreaService.DeleteArea:output_type -> google.protobuf.Empty
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha2_area_service_proto_init() }
func workplace_proto_v1alpha2_area_service_proto_init() {
	if workplace_proto_v1alpha2_area_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha2_area_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAreasResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_area_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAreaRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha2_area_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           workplace_proto_v1alpha2_area_service_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha2_area_service_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha2_area_service_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha2_area_service_proto = out.File
	workplace_proto_v1alpha2_area_service_proto_rawDesc = nil
	workplace_proto_v1alpha2_area_service_proto_goTypes = nil
	workplace_proto_v1alpha2_area_service_proto_depIdxs = nil
}
