// Code generated by protoc-gen-goten-client
// API: AreaService
// DO NOT EDIT!!!

package area_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &area.Area{}
)

var (
	descriptorsInitialized  bool
	areaServiceDescriptor   *AreaServiceDescriptor
	getAreaDescriptor       *GetAreaDescriptor
	batchGetAreasDescriptor *BatchGetAreasDescriptor
	listAreasDescriptor     *ListAreasDescriptor
	watchAreaDescriptor     *WatchAreaDescriptor
	watchAreasDescriptor    *WatchAreasDescriptor
	createAreaDescriptor    *CreateAreaDescriptor
	updateAreaDescriptor    *UpdateAreaDescriptor
	deleteAreaDescriptor    *DeleteAreaDescriptor
)

type GetAreaDescriptor struct{}

type GetAreaDescriptorClientMsgHandle struct{}

type GetAreaDescriptorServerMsgHandle struct{}

func (d *GetAreaDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAreaRequest{}
}

func (d *GetAreaDescriptor) NewEmptyServerMsg() proto.Message {
	return &area.Area{}
}

func (d *GetAreaDescriptor) IsUnary() bool {
	return true
}

func (d *GetAreaDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAreaDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAreaDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetAreaDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetAreaDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetAreaDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAreaDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAreaDescriptor) GetMethodName() string {
	return "GetArea"
}

func (d *GetAreaDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/GetArea"
}

func (d *GetAreaDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetAreaDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *GetAreaDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetAreaDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetAreaDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *GetAreaDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *GetAreaDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAreaDescriptorClientMsgHandle{}
}

func (d *GetAreaDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAreaDescriptorServerMsgHandle{}
}

func (h *GetAreaDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetAreaRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*area.Name)(nil)
}

func (h *GetAreaDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetAreaRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAreaDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetAreaRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAreaDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*area.Area) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetAreaDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*area.Area) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAreaDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*area.Area) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetAreaDescriptor() *GetAreaDescriptor {
	return getAreaDescriptor
}

type BatchGetAreasDescriptor struct{}

type BatchGetAreasDescriptorClientMsgHandle struct{}

type BatchGetAreasDescriptorServerMsgHandle struct{}

func (d *BatchGetAreasDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAreasRequest{}
}

func (d *BatchGetAreasDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAreasResponse{}
}

func (d *BatchGetAreasDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAreasDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAreasDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAreasDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetAreasDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetAreasDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetAreasDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAreasDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAreasDescriptor) GetMethodName() string {
	return "BatchGetAreas"
}

func (d *BatchGetAreasDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/BatchGetAreas"
}

func (d *BatchGetAreasDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetAreasDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *BatchGetAreasDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetAreasDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetAreasDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *BatchGetAreasDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *BatchGetAreasDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAreasDescriptorClientMsgHandle{}
}

func (d *BatchGetAreasDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAreasDescriptorServerMsgHandle{}
}

func (h *BatchGetAreasDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAreasRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAreasDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAreasRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(area.AreaNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (area.AreaNameList)(nil)
}

func (h *BatchGetAreasDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAreasRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAreasDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAreasResponse) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAreasDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAreasResponse) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAreas()
	list := make(area.AreaNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetAreasDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAreasResponse) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAreasDescriptor() *BatchGetAreasDescriptor {
	return batchGetAreasDescriptor
}

type ListAreasDescriptor struct{}

type ListAreasDescriptorClientMsgHandle struct{}

type ListAreasDescriptorServerMsgHandle struct{}

func (d *ListAreasDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAreasRequest{}
}

func (d *ListAreasDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAreasResponse{}
}

func (d *ListAreasDescriptor) IsUnary() bool {
	return true
}

func (d *ListAreasDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAreasDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAreasDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListAreasDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListAreasDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListAreasDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAreasDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAreasDescriptor) GetMethodName() string {
	return "ListAreas"
}

func (d *ListAreasDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/ListAreas"
}

func (d *ListAreasDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListAreasDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *ListAreasDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListAreasDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListAreasDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *ListAreasDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *ListAreasDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAreasDescriptorClientMsgHandle{}
}

func (d *ListAreasDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAreasDescriptorServerMsgHandle{}
}

func (h *ListAreasDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAreasRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAreasDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAreasRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAreasDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAreasRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListAreasDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAreasResponse) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAreasDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAreasResponse) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAreas()
	list := make(area.AreaNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListAreasDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAreasResponse) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListAreasDescriptor() *ListAreasDescriptor {
	return listAreasDescriptor
}

type WatchAreaDescriptor struct{}

type WatchAreaDescriptorClientMsgHandle struct{}

type WatchAreaDescriptorServerMsgHandle struct{}

func (d *WatchAreaDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAreaRequest{}
}

func (d *WatchAreaDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAreaResponse{}
}

func (d *WatchAreaDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAreaDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAreaDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAreaDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchAreaDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchAreaDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAreaDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAreaDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAreaDescriptor) GetMethodName() string {
	return "WatchArea"
}

func (d *WatchAreaDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/WatchArea"
}

func (d *WatchAreaDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchAreaDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *WatchAreaDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchAreaDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAreaDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *WatchAreaDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *WatchAreaDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAreaDescriptorClientMsgHandle{}
}

func (d *WatchAreaDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAreaDescriptorServerMsgHandle{}
}

func (h *WatchAreaDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAreaRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*area.Name)(nil)
}

func (h *WatchAreaDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAreaRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAreaDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAreaRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAreaDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreaResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAreaResponse) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *area.AreaChange_Added_:
			return tResChange.Added.GetArea().GetName()
		case *area.AreaChange_Modified_:
			return tResChange.Modified.GetName()
		case *area.AreaChange_Removed_:
			return tResChange.Removed.GetName()
		case *area.AreaChange_Current_:
			return tResChange.Current.GetArea().GetName()
		}
	}
	return (*area.Name)(nil)
}

func (h *WatchAreaDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAreaResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAreaResponse) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAreaDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreaResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAreaResponse) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAreaDescriptor() *WatchAreaDescriptor {
	return watchAreaDescriptor
}

type WatchAreasDescriptor struct{}

type WatchAreasDescriptorClientMsgHandle struct{}

type WatchAreasDescriptorServerMsgHandle struct{}

func (d *WatchAreasDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAreasRequest{}
}

func (d *WatchAreasDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAreasResponse{}
}

func (d *WatchAreasDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAreasDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAreasDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAreasDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchAreasDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchAreasDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAreasDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAreasDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAreasDescriptor) GetMethodName() string {
	return "WatchAreas"
}

func (d *WatchAreasDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/WatchAreas"
}

func (d *WatchAreasDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchAreasDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *WatchAreasDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchAreasDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAreasDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *WatchAreasDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *WatchAreasDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAreasDescriptorClientMsgHandle{}
}

func (d *WatchAreasDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAreasDescriptorServerMsgHandle{}
}

func (h *WatchAreasDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAreasRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAreasDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAreasRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAreasDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreasRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAreasRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*area.ParentName)(nil)
}

func (h *WatchAreasDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAreasResponse) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAreasDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAreasResponse) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetAreaChanges()
	list := make(area.AreaNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *area.AreaChange_Added_:
			list = append(list, tResChange.Added.GetArea().GetName())
		case *area.AreaChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *area.AreaChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *area.AreaChange_Current_:
			list = append(list, tResChange.Current.GetArea().GetName())
		}
	}
	return list
}

func (h *WatchAreasDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAreasResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAreasResponse) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAreasDescriptor() *WatchAreasDescriptor {
	return watchAreasDescriptor
}

type CreateAreaDescriptor struct{}

type CreateAreaDescriptorClientMsgHandle struct{}

type CreateAreaDescriptorServerMsgHandle struct{}

func (d *CreateAreaDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAreaRequest{}
}

func (d *CreateAreaDescriptor) NewEmptyServerMsg() proto.Message {
	return &area.Area{}
}

func (d *CreateAreaDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAreaDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAreaDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAreaDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateAreaDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateAreaDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateAreaDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAreaDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAreaDescriptor) GetMethodName() string {
	return "CreateArea"
}

func (d *CreateAreaDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/CreateArea"
}

func (d *CreateAreaDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateAreaDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *CreateAreaDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateAreaDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateAreaDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *CreateAreaDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *CreateAreaDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAreaDescriptorClientMsgHandle{}
}

func (d *CreateAreaDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAreaDescriptorServerMsgHandle{}
}

func (h *CreateAreaDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateAreaRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetArea().GetName()
}

func (h *CreateAreaDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateAreaRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAreaDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateAreaRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*area.ParentName)(nil)
}

func (h *CreateAreaDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*area.Area) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateAreaDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*area.Area) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAreaDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*area.Area) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAreaDescriptor() *CreateAreaDescriptor {
	return createAreaDescriptor
}

type UpdateAreaDescriptor struct{}

type UpdateAreaDescriptorClientMsgHandle struct{}

type UpdateAreaDescriptorServerMsgHandle struct{}

func (d *UpdateAreaDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAreaRequest{}
}

func (d *UpdateAreaDescriptor) NewEmptyServerMsg() proto.Message {
	return &area.Area{}
}

func (d *UpdateAreaDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAreaDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAreaDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAreaDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateAreaDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateAreaDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateAreaDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAreaDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAreaDescriptor) GetMethodName() string {
	return "UpdateArea"
}

func (d *UpdateAreaDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/UpdateArea"
}

func (d *UpdateAreaDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateAreaDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *UpdateAreaDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateAreaDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateAreaDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *UpdateAreaDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *UpdateAreaDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAreaDescriptorClientMsgHandle{}
}

func (d *UpdateAreaDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAreaDescriptorServerMsgHandle{}
}

func (h *UpdateAreaDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateAreaRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetArea().GetName()
}

func (h *UpdateAreaDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateAreaRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAreaDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateAreaRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAreaDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*area.Area) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateAreaDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*area.Area) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAreaDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*area.Area)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*area.Area) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAreaDescriptor() *UpdateAreaDescriptor {
	return updateAreaDescriptor
}

type DeleteAreaDescriptor struct{}

type DeleteAreaDescriptorClientMsgHandle struct{}

type DeleteAreaDescriptorServerMsgHandle struct{}

func (d *DeleteAreaDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAreaRequest{}
}

func (d *DeleteAreaDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAreaDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAreaDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAreaDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAreaDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteAreaDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteAreaDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteAreaDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAreaDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAreaDescriptor) GetMethodName() string {
	return "DeleteArea"
}

func (d *DeleteAreaDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.AreaService/DeleteArea"
}

func (d *DeleteAreaDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteAreaDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *DeleteAreaDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteAreaDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteAreaDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return areaServiceDescriptor
}

func (d *DeleteAreaDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return area.GetDescriptor()
}

func (d *DeleteAreaDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAreaDescriptorClientMsgHandle{}
}

func (d *DeleteAreaDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAreaDescriptorServerMsgHandle{}
}

func (h *DeleteAreaDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteAreaRequest) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*area.Name)(nil)
}

func (h *DeleteAreaDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteAreaRequest) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAreaDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAreaRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteAreaRequest) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAreaDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *area.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAreaDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*area.Name
	})
	if ok {
		return area.AreaNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAreaDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *area.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAreaDescriptor() *DeleteAreaDescriptor {
	return deleteAreaDescriptor
}

type AreaServiceDescriptor struct{}

func (d *AreaServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAreaDescriptor,
		batchGetAreasDescriptor,
		listAreasDescriptor,
		watchAreaDescriptor,
		watchAreasDescriptor,
		createAreaDescriptor,
		updateAreaDescriptor,
		deleteAreaDescriptor,
	}
}

func (d *AreaServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.AreaService"
}

func (d *AreaServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *AreaServiceDescriptor) GetApiName() string {
	return "AreaService"
}

func (d *AreaServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *AreaServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAreaServiceDescriptor() *AreaServiceDescriptor {
	return areaServiceDescriptor
}

func initDescriptors() {
	areaServiceDescriptor = &AreaServiceDescriptor{}
	getAreaDescriptor = &GetAreaDescriptor{}
	batchGetAreasDescriptor = &BatchGetAreasDescriptor{}
	listAreasDescriptor = &ListAreasDescriptor{}
	watchAreaDescriptor = &WatchAreaDescriptor{}
	watchAreasDescriptor = &WatchAreasDescriptor{}
	createAreaDescriptor = &CreateAreaDescriptor{}
	updateAreaDescriptor = &UpdateAreaDescriptor{}
	deleteAreaDescriptor = &DeleteAreaDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(areaServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAreaDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAreasDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAreasDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAreaDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAreasDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAreaDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAreaDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAreaDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
