// Code generated by protoc-gen-goten-client
// API: AreaService
// DO NOT EDIT!!!

package area_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &area.Area{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AreaServiceClient is the client API for AreaService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AreaServiceClient interface {
	GetArea(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*area.Area, error)
	BatchGetAreas(ctx context.Context, in *BatchGetAreasRequest, opts ...grpc.CallOption) (*BatchGetAreasResponse, error)
	ListAreas(ctx context.Context, in *ListAreasRequest, opts ...grpc.CallOption) (*ListAreasResponse, error)
	WatchArea(ctx context.Context, in *WatchAreaRequest, opts ...grpc.CallOption) (WatchAreaClientStream, error)
	WatchAreas(ctx context.Context, in *WatchAreasRequest, opts ...grpc.CallOption) (WatchAreasClientStream, error)
	CreateArea(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*area.Area, error)
	UpdateArea(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*area.Area, error)
	DeleteArea(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAreaServiceClient(cc grpc.ClientConnInterface) AreaServiceClient {
	return &client{cc}
}

func (c *client) GetArea(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*area.Area, error) {
	out := new(area.Area)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/GetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAreas(ctx context.Context, in *BatchGetAreasRequest, opts ...grpc.CallOption) (*BatchGetAreasResponse, error) {
	out := new(BatchGetAreasResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/BatchGetAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAreas(ctx context.Context, in *ListAreasRequest, opts ...grpc.CallOption) (*ListAreasResponse, error) {
	out := new(ListAreasResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/ListAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchArea(ctx context.Context, in *WatchAreaRequest, opts ...grpc.CallOption) (WatchAreaClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchArea",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.AreaService/WatchArea", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAreaWatchAreaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAreaClientStream interface {
	Recv() (*WatchAreaResponse, error)
	grpc.ClientStream
}

type watchAreaWatchAreaClient struct {
	grpc.ClientStream
}

func (x *watchAreaWatchAreaClient) Recv() (*WatchAreaResponse, error) {
	m := new(WatchAreaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAreas(ctx context.Context, in *WatchAreasRequest, opts ...grpc.CallOption) (WatchAreasClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAreas",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.AreaService/WatchAreas", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAreasWatchAreasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAreasClientStream interface {
	Recv() (*WatchAreasResponse, error)
	grpc.ClientStream
}

type watchAreasWatchAreasClient struct {
	grpc.ClientStream
}

func (x *watchAreasWatchAreasClient) Recv() (*WatchAreasResponse, error) {
	m := new(WatchAreasResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateArea(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*area.Area, error) {
	out := new(area.Area)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/CreateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateArea(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*area.Area, error) {
	out := new(area.Area)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/UpdateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteArea(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.AreaService/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
