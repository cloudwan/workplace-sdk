// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/area_service.proto
// DO NOT EDIT!!!

package area_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &floor.Floor{}
)

func (o *GetAreaRequest) GotenObjectExt() {}

func (o *GetAreaRequest) MakeFullFieldMask() *GetAreaRequest_FieldMask {
	return FullGetAreaRequest_FieldMask()
}

func (o *GetAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAreaRequest_FieldMask()
}

func (o *GetAreaRequest) MakeDiffFieldMask(other *GetAreaRequest) *GetAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAreaRequest_FieldMask()
	}

	res := &GetAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAreaRequest))
}

func (o *GetAreaRequest) Clone() *GetAreaRequest {
	if o == nil {
		return nil
	}
	result := &GetAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAreaRequest) Merge(source *GetAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAreaRequest))
}

func (o *BatchGetAreasRequest) GotenObjectExt() {}

func (o *BatchGetAreasRequest) MakeFullFieldMask() *BatchGetAreasRequest_FieldMask {
	return FullBatchGetAreasRequest_FieldMask()
}

func (o *BatchGetAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAreasRequest_FieldMask()
}

func (o *BatchGetAreasRequest) MakeDiffFieldMask(other *BatchGetAreasRequest) *BatchGetAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAreasRequest_FieldMask()
	}

	res := &BatchGetAreasRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAreasRequest))
}

func (o *BatchGetAreasRequest) Clone() *BatchGetAreasRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAreasRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &area.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*area.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &area.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAreasRequest) Merge(source *BatchGetAreasRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &area.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *area.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &area.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAreasRequest))
}

func (o *BatchGetAreasResponse) GotenObjectExt() {}

func (o *BatchGetAreasResponse) MakeFullFieldMask() *BatchGetAreasResponse_FieldMask {
	return FullBatchGetAreasResponse_FieldMask()
}

func (o *BatchGetAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAreasResponse_FieldMask()
}

func (o *BatchGetAreasResponse) MakeDiffFieldMask(other *BatchGetAreasResponse) *BatchGetAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAreasResponse_FieldMask()
	}

	res := &BatchGetAreasResponse_FieldMask{}

	if len(o.GetAreas()) == len(other.GetAreas()) {
		for i, lValue := range o.GetAreas() {
			rValue := other.GetAreas()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorAreas})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorAreas})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAreasResponse))
}

func (o *BatchGetAreasResponse) Clone() *BatchGetAreasResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAreasResponse{}
	result.Areas = make([]*area.Area, len(o.Areas))
	for i, sourceValue := range o.Areas {
		result.Areas[i] = sourceValue.Clone()
	}
	result.Missing = make([]*area.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &area.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAreasResponse) Merge(source *BatchGetAreasResponse) {
	for _, sourceValue := range source.GetAreas() {
		exists := false
		for _, currentValue := range o.Areas {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *area.Area
			if sourceValue != nil {
				newDstElement = new(area.Area)
				newDstElement.Merge(sourceValue)
			}
			o.Areas = append(o.Areas, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *area.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &area.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAreasResponse))
}

func (o *ListAreasRequest) GotenObjectExt() {}

func (o *ListAreasRequest) MakeFullFieldMask() *ListAreasRequest_FieldMask {
	return FullListAreasRequest_FieldMask()
}

func (o *ListAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAreasRequest_FieldMask()
}

func (o *ListAreasRequest) MakeDiffFieldMask(other *ListAreasRequest) *ListAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAreasRequest_FieldMask()
	}

	res := &ListAreasRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAreasRequest))
}

func (o *ListAreasRequest) Clone() *ListAreasRequest {
	if o == nil {
		return nil
	}
	result := &ListAreasRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &area.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &area.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &area.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &area.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	result.View = o.View
	return result
}

func (o *ListAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAreasRequest) Merge(source *ListAreasRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &area.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &area.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &area.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &area.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAreasRequest))
}

func (o *ListAreasResponse) GotenObjectExt() {}

func (o *ListAreasResponse) MakeFullFieldMask() *ListAreasResponse_FieldMask {
	return FullListAreasResponse_FieldMask()
}

func (o *ListAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAreasResponse_FieldMask()
}

func (o *ListAreasResponse) MakeDiffFieldMask(other *ListAreasResponse) *ListAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAreasResponse_FieldMask()
	}

	res := &ListAreasResponse_FieldMask{}

	if len(o.GetAreas()) == len(other.GetAreas()) {
		for i, lValue := range o.GetAreas() {
			rValue := other.GetAreas()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorAreas})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorAreas})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAreasResponse))
}

func (o *ListAreasResponse) Clone() *ListAreasResponse {
	if o == nil {
		return nil
	}
	result := &ListAreasResponse{}
	result.Areas = make([]*area.Area, len(o.Areas))
	for i, sourceValue := range o.Areas {
		result.Areas[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &area.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &area.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAreasResponse) Merge(source *ListAreasResponse) {
	for _, sourceValue := range source.GetAreas() {
		exists := false
		for _, currentValue := range o.Areas {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *area.Area
			if sourceValue != nil {
				newDstElement = new(area.Area)
				newDstElement.Merge(sourceValue)
			}
			o.Areas = append(o.Areas, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &area.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &area.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAreasResponse))
}

func (o *WatchAreaRequest) GotenObjectExt() {}

func (o *WatchAreaRequest) MakeFullFieldMask() *WatchAreaRequest_FieldMask {
	return FullWatchAreaRequest_FieldMask()
}

func (o *WatchAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAreaRequest_FieldMask()
}

func (o *WatchAreaRequest) MakeDiffFieldMask(other *WatchAreaRequest) *WatchAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAreaRequest_FieldMask()
	}

	res := &WatchAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAreaRequest))
}

func (o *WatchAreaRequest) Clone() *WatchAreaRequest {
	if o == nil {
		return nil
	}
	result := &WatchAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAreaRequest) Merge(source *WatchAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAreaRequest))
}

func (o *WatchAreaResponse) GotenObjectExt() {}

func (o *WatchAreaResponse) MakeFullFieldMask() *WatchAreaResponse_FieldMask {
	return FullWatchAreaResponse_FieldMask()
}

func (o *WatchAreaResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAreaResponse_FieldMask()
}

func (o *WatchAreaResponse) MakeDiffFieldMask(other *WatchAreaResponse) *WatchAreaResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAreaResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAreaResponse_FieldMask()
	}

	res := &WatchAreaResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAreaResponse_FieldTerminalPath{selector: WatchAreaResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAreaResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAreaResponse))
}

func (o *WatchAreaResponse) Clone() *WatchAreaResponse {
	if o == nil {
		return nil
	}
	result := &WatchAreaResponse{}
	result.Change = proto.Clone(o.Change).(*area.AreaChange)
	return result
}

func (o *WatchAreaResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAreaResponse) Merge(source *WatchAreaResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(area.AreaChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAreaResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAreaResponse))
}

func (o *WatchAreasRequest) GotenObjectExt() {}

func (o *WatchAreasRequest) MakeFullFieldMask() *WatchAreasRequest_FieldMask {
	return FullWatchAreasRequest_FieldMask()
}

func (o *WatchAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAreasRequest_FieldMask()
}

func (o *WatchAreasRequest) MakeDiffFieldMask(other *WatchAreasRequest) *WatchAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAreasRequest_FieldMask()
	}

	res := &WatchAreasRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAreasRequest))
}

func (o *WatchAreasRequest) Clone() *WatchAreasRequest {
	if o == nil {
		return nil
	}
	result := &WatchAreasRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &area.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &area.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &area.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &area.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAreasRequest) Merge(source *WatchAreasRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &area.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &area.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &area.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &area.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAreasRequest))
}

func (o *WatchAreasResponse) GotenObjectExt() {}

func (o *WatchAreasResponse) MakeFullFieldMask() *WatchAreasResponse_FieldMask {
	return FullWatchAreasResponse_FieldMask()
}

func (o *WatchAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAreasResponse_FieldMask()
}

func (o *WatchAreasResponse) MakeDiffFieldMask(other *WatchAreasResponse) *WatchAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAreasResponse_FieldMask()
	}

	res := &WatchAreasResponse_FieldMask{}

	if len(o.GetAreaChanges()) == len(other.GetAreaChanges()) {
		for i, lValue := range o.GetAreaChanges() {
			rValue := other.GetAreaChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorAreaChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorAreaChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAreasResponse_FieldSubPath{selector: WatchAreasResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAreasResponse))
}

func (o *WatchAreasResponse) Clone() *WatchAreasResponse {
	if o == nil {
		return nil
	}
	result := &WatchAreasResponse{}
	result.AreaChanges = make([]*area.AreaChange, len(o.AreaChanges))
	for i, sourceValue := range o.AreaChanges {
		result.AreaChanges[i] = proto.Clone(sourceValue).(*area.AreaChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAreasResponse) Merge(source *WatchAreasResponse) {
	for _, sourceValue := range source.GetAreaChanges() {
		exists := false
		for _, currentValue := range o.AreaChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *area.AreaChange
			if sourceValue != nil {
				newDstElement = new(area.AreaChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AreaChanges = append(o.AreaChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAreasResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAreasResponse))
}

func (o *WatchAreasResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAreasResponse_PageTokenChange) MakeFullFieldMask() *WatchAreasResponse_PageTokenChange_FieldMask {
	return FullWatchAreasResponse_PageTokenChange_FieldMask()
}

func (o *WatchAreasResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAreasResponse_PageTokenChange_FieldMask()
}

func (o *WatchAreasResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAreasResponse_PageTokenChange) *WatchAreasResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAreasResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAreasResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAreasResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAreasResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAreasResponse_PageTokenChange))
}

func (o *WatchAreasResponse_PageTokenChange) Clone() *WatchAreasResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAreasResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &area.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &area.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAreasResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAreasResponse_PageTokenChange) Merge(source *WatchAreasResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &area.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &area.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAreasResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAreasResponse_PageTokenChange))
}

func (o *CreateAreaRequest) GotenObjectExt() {}

func (o *CreateAreaRequest) MakeFullFieldMask() *CreateAreaRequest_FieldMask {
	return FullCreateAreaRequest_FieldMask()
}

func (o *CreateAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAreaRequest_FieldMask()
}

func (o *CreateAreaRequest) MakeDiffFieldMask(other *CreateAreaRequest) *CreateAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAreaRequest_FieldMask()
	}

	res := &CreateAreaRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAreaRequest_FieldTerminalPath{selector: CreateAreaRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetArea().MakeDiffFieldMask(other.GetArea())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAreaRequest_FieldTerminalPath{selector: CreateAreaRequest_FieldPathSelectorArea})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAreaRequest_FieldSubPath{selector: CreateAreaRequest_FieldPathSelectorArea, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAreaRequest))
}

func (o *CreateAreaRequest) Clone() *CreateAreaRequest {
	if o == nil {
		return nil
	}
	result := &CreateAreaRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &area.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Area = o.Area.Clone()
	return result
}

func (o *CreateAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAreaRequest) Merge(source *CreateAreaRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &area.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetArea() != nil {
		if o.Area == nil {
			o.Area = new(area.Area)
		}
		o.Area.Merge(source.GetArea())
	}
}

func (o *CreateAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAreaRequest))
}

func (o *UpdateAreaRequest) GotenObjectExt() {}

func (o *UpdateAreaRequest) MakeFullFieldMask() *UpdateAreaRequest_FieldMask {
	return FullUpdateAreaRequest_FieldMask()
}

func (o *UpdateAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAreaRequest_FieldMask()
}

func (o *UpdateAreaRequest) MakeDiffFieldMask(other *UpdateAreaRequest) *UpdateAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAreaRequest_FieldMask()
	}

	res := &UpdateAreaRequest_FieldMask{}
	{
		subMask := o.GetArea().MakeDiffFieldMask(other.GetArea())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorArea})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAreaRequest_FieldSubPath{selector: UpdateAreaRequest_FieldPathSelectorArea, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAreaRequest_FieldSubPath{selector: UpdateAreaRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAreaRequest))
}

func (o *UpdateAreaRequest) Clone() *UpdateAreaRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAreaRequest{}
	result.Area = o.Area.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*area.Area_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAreaRequest) Merge(source *UpdateAreaRequest) {
	if source.GetArea() != nil {
		if o.Area == nil {
			o.Area = new(area.Area)
		}
		o.Area.Merge(source.GetArea())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAreaRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAreaRequest))
}

func (o *UpdateAreaRequest_CAS) GotenObjectExt() {}

func (o *UpdateAreaRequest_CAS) MakeFullFieldMask() *UpdateAreaRequest_CAS_FieldMask {
	return FullUpdateAreaRequest_CAS_FieldMask()
}

func (o *UpdateAreaRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAreaRequest_CAS_FieldMask()
}

func (o *UpdateAreaRequest_CAS) MakeDiffFieldMask(other *UpdateAreaRequest_CAS) *UpdateAreaRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAreaRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAreaRequest_CAS_FieldMask()
	}

	res := &UpdateAreaRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAreaRequestCAS_FieldTerminalPath{selector: UpdateAreaRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAreaRequestCAS_FieldSubPath{selector: UpdateAreaRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAreaRequestCAS_FieldTerminalPath{selector: UpdateAreaRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAreaRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAreaRequest_CAS))
}

func (o *UpdateAreaRequest_CAS) Clone() *UpdateAreaRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAreaRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*area.Area_FieldMask)
	return result
}

func (o *UpdateAreaRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAreaRequest_CAS) Merge(source *UpdateAreaRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(area.Area)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(area.Area_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAreaRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAreaRequest_CAS))
}

func (o *DeleteAreaRequest) GotenObjectExt() {}

func (o *DeleteAreaRequest) MakeFullFieldMask() *DeleteAreaRequest_FieldMask {
	return FullDeleteAreaRequest_FieldMask()
}

func (o *DeleteAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAreaRequest_FieldMask()
}

func (o *DeleteAreaRequest) MakeDiffFieldMask(other *DeleteAreaRequest) *DeleteAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAreaRequest_FieldMask()
	}

	res := &DeleteAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAreaRequest_FieldTerminalPath{selector: DeleteAreaRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAreaRequest))
}

func (o *DeleteAreaRequest) Clone() *DeleteAreaRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAreaRequest) Merge(source *DeleteAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAreaRequest))
}
