// Code generated by protoc-gen-goten-client
// API: PropertyService
// DO NOT EDIT!!!

package property_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	property "github.com/cloudwan/workplace-sdk/resources/v1alpha2/property"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &property.Property{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PropertyServiceClient is the client API for PropertyService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PropertyServiceClient interface {
	GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*property.Property, error)
	BatchGetProperties(ctx context.Context, in *BatchGetPropertiesRequest, opts ...grpc.CallOption) (*BatchGetPropertiesResponse, error)
	ListProperties(ctx context.Context, in *ListPropertiesRequest, opts ...grpc.CallOption) (*ListPropertiesResponse, error)
	WatchProperty(ctx context.Context, in *WatchPropertyRequest, opts ...grpc.CallOption) (WatchPropertyClientStream, error)
	WatchProperties(ctx context.Context, in *WatchPropertiesRequest, opts ...grpc.CallOption) (WatchPropertiesClientStream, error)
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*property.Property, error)
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*property.Property, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &client{cc}
}

func (c *client) GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*property.Property, error) {
	out := new(property.Property)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/GetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProperties(ctx context.Context, in *BatchGetPropertiesRequest, opts ...grpc.CallOption) (*BatchGetPropertiesResponse, error) {
	out := new(BatchGetPropertiesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/BatchGetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProperties(ctx context.Context, in *ListPropertiesRequest, opts ...grpc.CallOption) (*ListPropertiesResponse, error) {
	out := new(ListPropertiesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/ListProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProperty(ctx context.Context, in *WatchPropertyRequest, opts ...grpc.CallOption) (WatchPropertyClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProperty",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.PropertyService/WatchProperty", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPropertyWatchPropertyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPropertyClientStream interface {
	Recv() (*WatchPropertyResponse, error)
	grpc.ClientStream
}

type watchPropertyWatchPropertyClient struct {
	grpc.ClientStream
}

func (x *watchPropertyWatchPropertyClient) Recv() (*WatchPropertyResponse, error) {
	m := new(WatchPropertyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProperties(ctx context.Context, in *WatchPropertiesRequest, opts ...grpc.CallOption) (WatchPropertiesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProperties",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.PropertyService/WatchProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPropertiesWatchPropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPropertiesClientStream interface {
	Recv() (*WatchPropertiesResponse, error)
	grpc.ClientStream
}

type watchPropertiesWatchPropertiesClient struct {
	grpc.ClientStream
}

func (x *watchPropertiesWatchPropertiesClient) Recv() (*WatchPropertiesResponse, error) {
	m := new(WatchPropertiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*property.Property, error) {
	out := new(property.Property)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/CreateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*property.Property, error) {
	out := new(property.Property)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.PropertyService/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
