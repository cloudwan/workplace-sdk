// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/property_service.proto
// DO NOT EDIT!!!

package property_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	device "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	property "github.com/cloudwan/workplace-sdk/resources/v1alpha2/property"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &device.Device{}
	_ = &floor.Floor{}
	_ = &property.Property{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPropertyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPropertyRequest_FieldPathSelector
	Get(source *GetPropertyRequest) []interface{}
	GetSingle(source *GetPropertyRequest) (interface{}, bool)
	ClearValue(item *GetPropertyRequest)

	// Those methods build corresponding GetPropertyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPropertyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPropertyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPropertyRequest_FieldPathArrayItemValue
}

type GetPropertyRequest_FieldPathSelector int32

const (
	GetPropertyRequest_FieldPathSelectorName      GetPropertyRequest_FieldPathSelector = 0
	GetPropertyRequest_FieldPathSelectorFieldMask GetPropertyRequest_FieldPathSelector = 1
	GetPropertyRequest_FieldPathSelectorView      GetPropertyRequest_FieldPathSelector = 2
)

func (s GetPropertyRequest_FieldPathSelector) String() string {
	switch s {
	case GetPropertyRequest_FieldPathSelectorName:
		return "name"
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPropertyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", s))
	}
}

func BuildGetPropertyRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPropertyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPropertyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPropertyRequest", fp)
}

func ParseGetPropertyRequest_FieldPath(rawField string) (GetPropertyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPropertyRequest_FieldPath(fp)
}

func MustParseGetPropertyRequest_FieldPath(rawField string) GetPropertyRequest_FieldPath {
	fp, err := ParseGetPropertyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPropertyRequest_FieldTerminalPath struct {
	selector GetPropertyRequest_FieldPathSelector
}

var _ GetPropertyRequest_FieldPath = (*GetPropertyRequest_FieldTerminalPath)(nil)

func (fp *GetPropertyRequest_FieldTerminalPath) Selector() GetPropertyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPropertyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPropertyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPropertyRequest
func (fp *GetPropertyRequest_FieldTerminalPath) Get(source *GetPropertyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPropertyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPropertyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPropertyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPropertyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPropertyRequest))
}

// GetSingle returns value pointed by specific field of from source GetPropertyRequest
func (fp *GetPropertyRequest_FieldTerminalPath) GetSingle(source *GetPropertyRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPropertyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
	}
}

func (fp *GetPropertyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPropertyRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPropertyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		return (*property.Reference)(nil)
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	case GetPropertyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
	}
}

func (fp *GetPropertyRequest_FieldTerminalPath) ClearValue(item *GetPropertyRequest) {
	if item != nil {
		switch fp.selector {
		case GetPropertyRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPropertyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPropertyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPropertyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPropertyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPropertyRequest_FieldPathSelectorName ||
		fp.selector == GetPropertyRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPropertyRequest_FieldPathSelectorView
}

func (fp *GetPropertyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithIValue(value interface{}) GetPropertyRequest_FieldPathValue {
	switch fp.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		return &GetPropertyRequest_FieldTerminalPathValue{GetPropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Reference)}
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		return &GetPropertyRequest_FieldTerminalPathValue{GetPropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case GetPropertyRequest_FieldPathSelectorView:
		return &GetPropertyRequest_FieldTerminalPathValue{GetPropertyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
	}
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPropertyRequest_FieldPathArrayOfValues {
	fpaov := &GetPropertyRequest_FieldTerminalPathArrayOfValues{GetPropertyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		return &GetPropertyRequest_FieldTerminalPathArrayOfValues{GetPropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Reference)}
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		return &GetPropertyRequest_FieldTerminalPathArrayOfValues{GetPropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case GetPropertyRequest_FieldPathSelectorView:
		return &GetPropertyRequest_FieldTerminalPathArrayOfValues{GetPropertyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPropertyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fp.selector))
	}
}

func (fp *GetPropertyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPropertyRequest_FieldPathValue allows storing values for GetPropertyRequest fields according to their type
type GetPropertyRequest_FieldPathValue interface {
	GetPropertyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPropertyRequest)
	CompareWith(*GetPropertyRequest) (cmp int, comparable bool)
}

func ParseGetPropertyRequest_FieldPathValue(pathStr, valueStr string) (GetPropertyRequest_FieldPathValue, error) {
	fp, err := ParseGetPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPropertyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPropertyRequest_FieldPathValue), nil
}

func MustParseGetPropertyRequest_FieldPathValue(pathStr, valueStr string) GetPropertyRequest_FieldPathValue {
	fpv, err := ParseGetPropertyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPropertyRequest_FieldTerminalPathValue struct {
	GetPropertyRequest_FieldTerminalPath
	value interface{}
}

var _ GetPropertyRequest_FieldPathValue = (*GetPropertyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPropertyRequest' as interface{}
func (fpv *GetPropertyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPropertyRequest_FieldTerminalPathValue) AsNameValue() (*property.Reference, bool) {
	res, ok := fpv.value.(*property.Reference)
	return res, ok
}
func (fpv *GetPropertyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *GetPropertyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPropertyRequest
func (fpv *GetPropertyRequest_FieldTerminalPathValue) SetTo(target **GetPropertyRequest) {
	if *target == nil {
		*target = new(GetPropertyRequest)
	}
	switch fpv.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*property.Reference)
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	case GetPropertyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fpv.selector))
	}
}

func (fpv *GetPropertyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPropertyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPropertyRequest_FieldTerminalPathValue' with the value under path in 'GetPropertyRequest'.
func (fpv *GetPropertyRequest_FieldTerminalPathValue) CompareWith(source *GetPropertyRequest) (int, bool) {
	switch fpv.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*property.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPropertyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPropertyRequest: %d", fpv.selector))
	}
}

func (fpv *GetPropertyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPropertyRequest))
}

// GetPropertyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPropertyRequest according to their type
// Present only for array (repeated) types.
type GetPropertyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPropertyRequest_FieldPath
	ContainsValue(*GetPropertyRequest) bool
}

// ParseGetPropertyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPropertyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPropertyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPropertyRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPropertyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPropertyRequest_FieldTerminalPathArrayItemValue struct {
	GetPropertyRequest_FieldTerminalPath
	value interface{}
}

var _ GetPropertyRequest_FieldPathArrayItemValue = (*GetPropertyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPropertyRequest as interface{}
func (fpaiv *GetPropertyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPropertyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPropertyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPropertyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPropertyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPropertyRequest'
func (fpaiv *GetPropertyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPropertyRequest) bool {
	slice := fpaiv.GetPropertyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPropertyRequest_FieldPathArrayOfValues allows storing slice of values for GetPropertyRequest fields according to their type
type GetPropertyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPropertyRequest_FieldPath
}

func ParseGetPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPropertyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPropertyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPropertyRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPropertyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPropertyRequest_FieldTerminalPathArrayOfValues struct {
	GetPropertyRequest_FieldTerminalPath
	values interface{}
}

var _ GetPropertyRequest_FieldPathArrayOfValues = (*GetPropertyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPropertyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPropertyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*property.Reference) {
			values = append(values, v)
		}
	case GetPropertyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case GetPropertyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPropertyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*property.Reference, bool) {
	res, ok := fpaov.values.([]*property.Reference)
	return res, ok
}
func (fpaov *GetPropertyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *GetPropertyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPropertiesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPropertiesRequest_FieldPathSelector
	Get(source *BatchGetPropertiesRequest) []interface{}
	GetSingle(source *BatchGetPropertiesRequest) (interface{}, bool)
	ClearValue(item *BatchGetPropertiesRequest)

	// Those methods build corresponding BatchGetPropertiesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPropertiesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPropertiesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPropertiesRequest_FieldPathArrayItemValue
}

type BatchGetPropertiesRequest_FieldPathSelector int32

const (
	BatchGetPropertiesRequest_FieldPathSelectorNames     BatchGetPropertiesRequest_FieldPathSelector = 0
	BatchGetPropertiesRequest_FieldPathSelectorFieldMask BatchGetPropertiesRequest_FieldPathSelector = 1
	BatchGetPropertiesRequest_FieldPathSelectorView      BatchGetPropertiesRequest_FieldPathSelector = 2
)

func (s BatchGetPropertiesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", s))
	}
}

func BuildBatchGetPropertiesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPropertiesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPropertiesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPropertiesRequest", fp)
}

func ParseBatchGetPropertiesRequest_FieldPath(rawField string) (BatchGetPropertiesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPropertiesRequest_FieldPath(fp)
}

func MustParseBatchGetPropertiesRequest_FieldPath(rawField string) BatchGetPropertiesRequest_FieldPath {
	fp, err := ParseBatchGetPropertiesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPropertiesRequest_FieldTerminalPath struct {
	selector BatchGetPropertiesRequest_FieldPathSelector
}

var _ BatchGetPropertiesRequest_FieldPath = (*BatchGetPropertiesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) Selector() BatchGetPropertiesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPropertiesRequest
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) Get(source *BatchGetPropertiesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPropertiesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPropertiesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPropertiesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPropertiesRequest
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) GetSingle(source *BatchGetPropertiesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPropertiesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return ([]*property.Reference)(nil)
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) ClearValue(item *BatchGetPropertiesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPropertiesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPropertiesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPropertiesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPropertiesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPropertiesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPropertiesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPropertiesRequest_FieldPathSelectorView
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPropertiesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return &BatchGetPropertiesRequest_FieldTerminalPathValue{BatchGetPropertiesRequest_FieldTerminalPath: *fp, value: value.([]*property.Reference)}
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		return &BatchGetPropertiesRequest_FieldTerminalPathValue{BatchGetPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		return &BatchGetPropertiesRequest_FieldTerminalPathValue{BatchGetPropertiesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPropertiesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues{BatchGetPropertiesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return &BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues{BatchGetPropertiesRequest_FieldTerminalPath: *fp, values: values.([][]*property.Reference)}
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		return &BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues{BatchGetPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		return &BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues{BatchGetPropertiesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPropertiesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return &BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue{BatchGetPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPropertiesRequest_FieldPathValue allows storing values for BatchGetPropertiesRequest fields according to their type
type BatchGetPropertiesRequest_FieldPathValue interface {
	BatchGetPropertiesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPropertiesRequest)
	CompareWith(*BatchGetPropertiesRequest) (cmp int, comparable bool)
}

func ParseBatchGetPropertiesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPropertiesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPropertiesRequest_FieldPathValue), nil
}

func MustParseBatchGetPropertiesRequest_FieldPathValue(pathStr, valueStr string) BatchGetPropertiesRequest_FieldPathValue {
	fpv, err := ParseBatchGetPropertiesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPropertiesRequest_FieldTerminalPathValue struct {
	BatchGetPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPropertiesRequest_FieldPathValue = (*BatchGetPropertiesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPropertiesRequest' as interface{}
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) AsNamesValue() ([]*property.Reference, bool) {
	res, ok := fpv.value.([]*property.Reference)
	return res, ok
}
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPropertiesRequest
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) SetTo(target **BatchGetPropertiesRequest) {
	if *target == nil {
		*target = new(BatchGetPropertiesRequest)
	}
	switch fpv.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*property.Reference)
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPropertiesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPropertiesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPropertiesRequest'.
func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPropertiesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPropertiesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPropertiesRequest))
}

// BatchGetPropertiesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPropertiesRequest according to their type
// Present only for array (repeated) types.
type BatchGetPropertiesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPropertiesRequest_FieldPath
	ContainsValue(*BatchGetPropertiesRequest) bool
}

// ParseBatchGetPropertiesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPropertiesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPropertiesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPropertiesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPropertiesRequest_FieldPathArrayItemValue = (*BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPropertiesRequest as interface{}
func (fpaiv *BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*property.Reference, bool) {
	res, ok := fpaiv.value.(*property.Reference)
	return res, ok
}

func (fpaiv *BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPropertiesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPropertiesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPropertiesRequest'
func (fpaiv *BatchGetPropertiesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPropertiesRequest) bool {
	slice := fpaiv.BatchGetPropertiesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPropertiesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPropertiesRequest fields according to their type
type BatchGetPropertiesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPropertiesRequest_FieldPath
}

func ParseBatchGetPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPropertiesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPropertiesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPropertiesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPropertiesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPropertiesRequest_FieldPathArrayOfValues = (*BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPropertiesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*property.Reference) {
			values = append(values, v)
		}
	case BatchGetPropertiesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPropertiesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*property.Reference, bool) {
	res, ok := fpaov.values.([][]*property.Reference)
	return res, ok
}
func (fpaov *BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPropertiesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPropertiesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPropertiesResponse_FieldPathSelector
	Get(source *BatchGetPropertiesResponse) []interface{}
	GetSingle(source *BatchGetPropertiesResponse) (interface{}, bool)
	ClearValue(item *BatchGetPropertiesResponse)

	// Those methods build corresponding BatchGetPropertiesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPropertiesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPropertiesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPropertiesResponse_FieldPathArrayItemValue
}

type BatchGetPropertiesResponse_FieldPathSelector int32

const (
	BatchGetPropertiesResponse_FieldPathSelectorProperties BatchGetPropertiesResponse_FieldPathSelector = 0
	BatchGetPropertiesResponse_FieldPathSelectorMissing    BatchGetPropertiesResponse_FieldPathSelector = 1
)

func (s BatchGetPropertiesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return "properties"
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", s))
	}
}

func BuildBatchGetPropertiesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPropertiesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPropertiesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "properties":
			return &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorProperties}, nil
		case "missing":
			return &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "properties":
			if subpath, err := property.BuildProperty_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPropertiesResponse_FieldSubPath{selector: BatchGetPropertiesResponse_FieldPathSelectorProperties, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPropertiesResponse", fp)
}

func ParseBatchGetPropertiesResponse_FieldPath(rawField string) (BatchGetPropertiesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPropertiesResponse_FieldPath(fp)
}

func MustParseBatchGetPropertiesResponse_FieldPath(rawField string) BatchGetPropertiesResponse_FieldPath {
	fp, err := ParseBatchGetPropertiesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPropertiesResponse_FieldTerminalPath struct {
	selector BatchGetPropertiesResponse_FieldPathSelector
}

var _ BatchGetPropertiesResponse_FieldPath = (*BatchGetPropertiesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) Selector() BatchGetPropertiesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPropertiesResponse
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) Get(source *BatchGetPropertiesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPropertiesResponse_FieldPathSelectorProperties:
			for _, value := range source.GetProperties() {
				values = append(values, value)
			}
		case BatchGetPropertiesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPropertiesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPropertiesResponse
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) GetSingle(source *BatchGetPropertiesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		res := source.GetProperties()
		return res, res != nil
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return ([]*property.Property)(nil)
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return ([]*property.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) ClearValue(item *BatchGetPropertiesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPropertiesResponse_FieldPathSelectorProperties:
			item.Properties = nil
		case BatchGetPropertiesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPropertiesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPropertiesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPropertiesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return &BatchGetPropertiesResponse_FieldTerminalPathValue{BatchGetPropertiesResponse_FieldTerminalPath: *fp, value: value.([]*property.Property)}
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return &BatchGetPropertiesResponse_FieldTerminalPathValue{BatchGetPropertiesResponse_FieldTerminalPath: *fp, value: value.([]*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPropertiesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues{BatchGetPropertiesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return &BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues{BatchGetPropertiesResponse_FieldTerminalPath: *fp, values: values.([][]*property.Property)}
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return &BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues{BatchGetPropertiesResponse_FieldTerminalPath: *fp, values: values.([][]*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPropertiesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return &BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue{BatchGetPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.Property)}
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return &BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue{BatchGetPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPropertiesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPropertiesResponse_FieldSubPath struct {
	selector BatchGetPropertiesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPropertiesResponse_FieldPath = (*BatchGetPropertiesResponse_FieldSubPath)(nil)

func (fps *BatchGetPropertiesResponse_FieldSubPath) Selector() BatchGetPropertiesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPropertiesResponse_FieldSubPath) AsPropertiesSubPath() (property.Property_FieldPath, bool) {
	res, ok := fps.subPath.(property.Property_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPropertiesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPropertiesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPropertiesResponse
func (fps *BatchGetPropertiesResponse_FieldSubPath) Get(source *BatchGetPropertiesResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		for _, item := range source.GetProperties() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPropertiesResponse))
}

// GetSingle returns value of selected field from source BatchGetPropertiesResponse
func (fps *BatchGetPropertiesResponse_FieldSubPath) GetSingle(source *BatchGetPropertiesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		if len(source.GetProperties()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProperties()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPropertiesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) ClearValue(item *BatchGetPropertiesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPropertiesResponse_FieldPathSelectorProperties:
			for _, subItem := range item.Properties {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPropertiesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPropertiesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPropertiesResponse_FieldPathValue {
	return &BatchGetPropertiesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPropertiesResponse_FieldPathArrayOfValues {
	return &BatchGetPropertiesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPropertiesResponse_FieldPathArrayItemValue {
	return &BatchGetPropertiesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPropertiesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPropertiesResponse_FieldPathValue allows storing values for BatchGetPropertiesResponse fields according to their type
type BatchGetPropertiesResponse_FieldPathValue interface {
	BatchGetPropertiesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPropertiesResponse)
	CompareWith(*BatchGetPropertiesResponse) (cmp int, comparable bool)
}

func ParseBatchGetPropertiesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPropertiesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPropertiesResponse_FieldPathValue), nil
}

func MustParseBatchGetPropertiesResponse_FieldPathValue(pathStr, valueStr string) BatchGetPropertiesResponse_FieldPathValue {
	fpv, err := ParseBatchGetPropertiesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPropertiesResponse_FieldTerminalPathValue struct {
	BatchGetPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPropertiesResponse_FieldPathValue = (*BatchGetPropertiesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPropertiesResponse' as interface{}
func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) AsPropertiesValue() ([]*property.Property, bool) {
	res, ok := fpv.value.([]*property.Property)
	return res, ok
}
func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) AsMissingValue() ([]*property.Reference, bool) {
	res, ok := fpv.value.([]*property.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPropertiesResponse
func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) SetTo(target **BatchGetPropertiesResponse) {
	if *target == nil {
		*target = new(BatchGetPropertiesResponse)
	}
	switch fpv.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		(*target).Properties = fpv.value.([]*property.Property)
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*property.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPropertiesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPropertiesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPropertiesResponse'.
func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPropertiesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return 0, false
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPropertiesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPropertiesResponse))
}

type BatchGetPropertiesResponse_FieldSubPathValue struct {
	BatchGetPropertiesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPropertiesResponse_FieldPathValue = (*BatchGetPropertiesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) AsPropertiesPathValue() (property.Property_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(property.Property_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) SetTo(target **BatchGetPropertiesResponse) {
	if *target == nil {
		*target = new(BatchGetPropertiesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPropertiesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) CompareWith(source *BatchGetPropertiesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPropertiesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPropertiesResponse))
}

// BatchGetPropertiesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPropertiesResponse according to their type
// Present only for array (repeated) types.
type BatchGetPropertiesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPropertiesResponse_FieldPath
	ContainsValue(*BatchGetPropertiesResponse) bool
}

// ParseBatchGetPropertiesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPropertiesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPropertiesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPropertiesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPropertiesResponse_FieldPathArrayItemValue = (*BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPropertiesResponse as interface{}
func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) AsPropertiesItemValue() (*property.Property, bool) {
	res, ok := fpaiv.value.(*property.Property)
	return res, ok
}
func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*property.Reference, bool) {
	res, ok := fpaiv.value.(*property.Reference)
	return res, ok
}

func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPropertiesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPropertiesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPropertiesResponse'
func (fpaiv *BatchGetPropertiesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPropertiesResponse) bool {
	slice := fpaiv.BatchGetPropertiesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPropertiesResponse_FieldSubPathArrayItemValue struct {
	BatchGetPropertiesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPropertiesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPropertiesResponse_FieldSubPathArrayItemValue) AsPropertiesPathItemValue() (property.Property_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPropertiesResponse'
func (fpaivs *BatchGetPropertiesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPropertiesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPropertiesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPropertiesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPropertiesResponse fields according to their type
type BatchGetPropertiesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPropertiesResponse_FieldPath
}

func ParseBatchGetPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPropertiesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPropertiesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPropertiesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPropertiesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPropertiesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPropertiesResponse_FieldPathArrayOfValues = (*BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPropertiesResponse_FieldPathSelectorProperties:
		for _, v := range fpaov.values.([][]*property.Property) {
			values = append(values, v)
		}
	case BatchGetPropertiesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*property.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues) AsPropertiesArrayOfValues() ([][]*property.Property, bool) {
	res, ok := fpaov.values.([][]*property.Property)
	return res, ok
}
func (fpaov *BatchGetPropertiesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*property.Reference, bool) {
	res, ok := fpaov.values.([][]*property.Reference)
	return res, ok
}

type BatchGetPropertiesResponse_FieldSubPathArrayOfValues struct {
	BatchGetPropertiesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPropertiesResponse_FieldPathArrayOfValues = (*BatchGetPropertiesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPropertiesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPropertiesResponse_FieldSubPathArrayOfValues) AsPropertiesPathArrayOfValues() (property.Property_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(property.Property_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPropertiesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPropertiesRequest_FieldPathSelector
	Get(source *ListPropertiesRequest) []interface{}
	GetSingle(source *ListPropertiesRequest) (interface{}, bool)
	ClearValue(item *ListPropertiesRequest)

	// Those methods build corresponding ListPropertiesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPropertiesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPropertiesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPropertiesRequest_FieldPathArrayItemValue
}

type ListPropertiesRequest_FieldPathSelector int32

const (
	ListPropertiesRequest_FieldPathSelectorParent            ListPropertiesRequest_FieldPathSelector = 0
	ListPropertiesRequest_FieldPathSelectorPageSize          ListPropertiesRequest_FieldPathSelector = 1
	ListPropertiesRequest_FieldPathSelectorPageToken         ListPropertiesRequest_FieldPathSelector = 2
	ListPropertiesRequest_FieldPathSelectorOrderBy           ListPropertiesRequest_FieldPathSelector = 3
	ListPropertiesRequest_FieldPathSelectorFilter            ListPropertiesRequest_FieldPathSelector = 4
	ListPropertiesRequest_FieldPathSelectorFieldMask         ListPropertiesRequest_FieldPathSelector = 5
	ListPropertiesRequest_FieldPathSelectorView              ListPropertiesRequest_FieldPathSelector = 6
	ListPropertiesRequest_FieldPathSelectorIncludePagingInfo ListPropertiesRequest_FieldPathSelector = 7
)

func (s ListPropertiesRequest_FieldPathSelector) String() string {
	switch s {
	case ListPropertiesRequest_FieldPathSelectorParent:
		return "parent"
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPropertiesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPropertiesRequest_FieldPathSelectorView:
		return "view"
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", s))
	}
}

func BuildListPropertiesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPropertiesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPropertiesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPropertiesRequest", fp)
}

func ParseListPropertiesRequest_FieldPath(rawField string) (ListPropertiesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPropertiesRequest_FieldPath(fp)
}

func MustParseListPropertiesRequest_FieldPath(rawField string) ListPropertiesRequest_FieldPath {
	fp, err := ParseListPropertiesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPropertiesRequest_FieldTerminalPath struct {
	selector ListPropertiesRequest_FieldPathSelector
}

var _ ListPropertiesRequest_FieldPath = (*ListPropertiesRequest_FieldTerminalPath)(nil)

func (fp *ListPropertiesRequest_FieldTerminalPath) Selector() ListPropertiesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPropertiesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPropertiesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPropertiesRequest
func (fp *ListPropertiesRequest_FieldTerminalPath) Get(source *ListPropertiesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPropertiesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPropertiesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPropertiesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPropertiesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPropertiesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPropertiesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPropertiesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPropertiesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPropertiesRequest))
}

// GetSingle returns value pointed by specific field of from source ListPropertiesRequest
func (fp *ListPropertiesRequest_FieldTerminalPath) GetSingle(source *ListPropertiesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPropertiesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPropertiesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
	}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPropertiesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPropertiesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		return (*property.ParentName)(nil)
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		return (*property.PagerCursor)(nil)
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		return (*property.OrderBy)(nil)
	case ListPropertiesRequest_FieldPathSelectorFilter:
		return (*property.Filter)(nil)
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	case ListPropertiesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
	}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) ClearValue(item *ListPropertiesRequest) {
	if item != nil {
		switch fp.selector {
		case ListPropertiesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPropertiesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPropertiesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPropertiesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPropertiesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPropertiesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPropertiesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPropertiesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPropertiesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPropertiesRequest_FieldPathSelectorParent ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorFilter ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorView ||
		fp.selector == ListPropertiesRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListPropertiesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithIValue(value interface{}) ListPropertiesRequest_FieldPathValue {
	switch fp.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.ParentName)}
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.OrderBy)}
	case ListPropertiesRequest_FieldPathSelectorFilter:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Filter)}
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case ListPropertiesRequest_FieldPathSelectorView:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPropertiesRequest_FieldTerminalPathValue{ListPropertiesRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
	}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPropertiesRequest_FieldPathArrayOfValues {
	fpaov := &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.ParentName)}
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.OrderBy)}
	case ListPropertiesRequest_FieldPathSelectorFilter:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.Filter)}
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case ListPropertiesRequest_FieldPathSelectorView:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPropertiesRequest_FieldTerminalPathArrayOfValues{ListPropertiesRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPropertiesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fp.selector))
	}
}

func (fp *ListPropertiesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPropertiesRequest_FieldPathValue allows storing values for ListPropertiesRequest fields according to their type
type ListPropertiesRequest_FieldPathValue interface {
	ListPropertiesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPropertiesRequest)
	CompareWith(*ListPropertiesRequest) (cmp int, comparable bool)
}

func ParseListPropertiesRequest_FieldPathValue(pathStr, valueStr string) (ListPropertiesRequest_FieldPathValue, error) {
	fp, err := ParseListPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPropertiesRequest_FieldPathValue), nil
}

func MustParseListPropertiesRequest_FieldPathValue(pathStr, valueStr string) ListPropertiesRequest_FieldPathValue {
	fpv, err := ParseListPropertiesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPropertiesRequest_FieldTerminalPathValue struct {
	ListPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPropertiesRequest_FieldPathValue = (*ListPropertiesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPropertiesRequest' as interface{}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsParentValue() (*property.ParentName, bool) {
	res, ok := fpv.value.(*property.ParentName)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsOrderByValue() (*property.OrderBy, bool) {
	res, ok := fpv.value.(*property.OrderBy)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsFilterValue() (*property.Filter, bool) {
	res, ok := fpv.value.(*property.Filter)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListPropertiesRequest
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) SetTo(target **ListPropertiesRequest) {
	if *target == nil {
		*target = new(ListPropertiesRequest)
	}
	switch fpv.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*property.ParentName)
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*property.PagerCursor)
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*property.OrderBy)
	case ListPropertiesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*property.Filter)
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	case ListPropertiesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPropertiesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPropertiesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPropertiesRequest_FieldTerminalPathValue' with the value under path in 'ListPropertiesRequest'.
func (fpv *ListPropertiesRequest_FieldTerminalPathValue) CompareWith(source *ListPropertiesRequest) (int, bool) {
	switch fpv.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*property.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPropertiesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPropertiesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPropertiesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPropertiesRequest))
}

// ListPropertiesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPropertiesRequest according to their type
// Present only for array (repeated) types.
type ListPropertiesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPropertiesRequest_FieldPath
	ContainsValue(*ListPropertiesRequest) bool
}

// ParseListPropertiesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPropertiesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPropertiesRequest_FieldPathArrayItemValue), nil
}

func MustParseListPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPropertiesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPropertiesRequest_FieldTerminalPathArrayItemValue struct {
	ListPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPropertiesRequest_FieldPathArrayItemValue = (*ListPropertiesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPropertiesRequest as interface{}
func (fpaiv *ListPropertiesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPropertiesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPropertiesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPropertiesRequest'
func (fpaiv *ListPropertiesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPropertiesRequest) bool {
	slice := fpaiv.ListPropertiesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPropertiesRequest_FieldPathArrayOfValues allows storing slice of values for ListPropertiesRequest fields according to their type
type ListPropertiesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPropertiesRequest_FieldPath
}

func ParseListPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPropertiesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPropertiesRequest_FieldPathArrayOfValues), nil
}

func MustParseListPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPropertiesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPropertiesRequest_FieldTerminalPathArrayOfValues struct {
	ListPropertiesRequest_FieldTerminalPath
	values interface{}
}

var _ ListPropertiesRequest_FieldPathArrayOfValues = (*ListPropertiesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPropertiesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*property.ParentName) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*property.OrderBy) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*property.Filter) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListPropertiesRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*property.ParentName, bool) {
	res, ok := fpaov.values.([]*property.ParentName)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*property.OrderBy, bool) {
	res, ok := fpaov.values.([]*property.OrderBy)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*property.Filter, bool) {
	res, ok := fpaov.values.([]*property.Filter)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListPropertiesRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPropertiesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPropertiesResponse_FieldPathSelector
	Get(source *ListPropertiesResponse) []interface{}
	GetSingle(source *ListPropertiesResponse) (interface{}, bool)
	ClearValue(item *ListPropertiesResponse)

	// Those methods build corresponding ListPropertiesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPropertiesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPropertiesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPropertiesResponse_FieldPathArrayItemValue
}

type ListPropertiesResponse_FieldPathSelector int32

const (
	ListPropertiesResponse_FieldPathSelectorProperties        ListPropertiesResponse_FieldPathSelector = 0
	ListPropertiesResponse_FieldPathSelectorPrevPageToken     ListPropertiesResponse_FieldPathSelector = 1
	ListPropertiesResponse_FieldPathSelectorNextPageToken     ListPropertiesResponse_FieldPathSelector = 2
	ListPropertiesResponse_FieldPathSelectorCurrentOffset     ListPropertiesResponse_FieldPathSelector = 3
	ListPropertiesResponse_FieldPathSelectorTotalResultsCount ListPropertiesResponse_FieldPathSelector = 4
)

func (s ListPropertiesResponse_FieldPathSelector) String() string {
	switch s {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return "properties"
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", s))
	}
}

func BuildListPropertiesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPropertiesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPropertiesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "properties":
			return &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorProperties}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "properties":
			if subpath, err := property.BuildProperty_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPropertiesResponse_FieldSubPath{selector: ListPropertiesResponse_FieldPathSelectorProperties, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPropertiesResponse", fp)
}

func ParseListPropertiesResponse_FieldPath(rawField string) (ListPropertiesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPropertiesResponse_FieldPath(fp)
}

func MustParseListPropertiesResponse_FieldPath(rawField string) ListPropertiesResponse_FieldPath {
	fp, err := ParseListPropertiesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPropertiesResponse_FieldTerminalPath struct {
	selector ListPropertiesResponse_FieldPathSelector
}

var _ ListPropertiesResponse_FieldPath = (*ListPropertiesResponse_FieldTerminalPath)(nil)

func (fp *ListPropertiesResponse_FieldTerminalPath) Selector() ListPropertiesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPropertiesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPropertiesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPropertiesResponse
func (fp *ListPropertiesResponse_FieldTerminalPath) Get(source *ListPropertiesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPropertiesResponse_FieldPathSelectorProperties:
			for _, value := range source.GetProperties() {
				values = append(values, value)
			}
		case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPropertiesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPropertiesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPropertiesResponse))
}

// GetSingle returns value pointed by specific field of from source ListPropertiesResponse
func (fp *ListPropertiesResponse_FieldTerminalPath) GetSingle(source *ListPropertiesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		res := source.GetProperties()
		return res, res != nil
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
	}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPropertiesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return ([]*property.Property)(nil)
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		return (*property.PagerCursor)(nil)
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		return (*property.PagerCursor)(nil)
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
	}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) ClearValue(item *ListPropertiesResponse) {
	if item != nil {
		switch fp.selector {
		case ListPropertiesResponse_FieldPathSelectorProperties:
			item.Properties = nil
		case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPropertiesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPropertiesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPropertiesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPropertiesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListPropertiesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListPropertiesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListPropertiesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithIValue(value interface{}) ListPropertiesResponse_FieldPathValue {
	switch fp.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return &ListPropertiesResponse_FieldTerminalPathValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.([]*property.Property)}
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		return &ListPropertiesResponse_FieldTerminalPathValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		return &ListPropertiesResponse_FieldTerminalPathValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		return &ListPropertiesResponse_FieldTerminalPathValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		return &ListPropertiesResponse_FieldTerminalPathValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
	}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPropertiesResponse_FieldPathArrayOfValues {
	fpaov := &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp, values: values.([][]*property.Property)}
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		return &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		return &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		return &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		return &ListPropertiesResponse_FieldTerminalPathArrayOfValues{ListPropertiesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPropertiesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return &ListPropertiesResponse_FieldTerminalPathArrayItemValue{ListPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.Property)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fp.selector))
	}
}

func (fp *ListPropertiesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPropertiesResponse_FieldSubPath struct {
	selector ListPropertiesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPropertiesResponse_FieldPath = (*ListPropertiesResponse_FieldSubPath)(nil)

func (fps *ListPropertiesResponse_FieldSubPath) Selector() ListPropertiesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPropertiesResponse_FieldSubPath) AsPropertiesSubPath() (property.Property_FieldPath, bool) {
	res, ok := fps.subPath.(property.Property_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPropertiesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPropertiesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPropertiesResponse
func (fps *ListPropertiesResponse_FieldSubPath) Get(source *ListPropertiesResponse) (values []interface{}) {
	switch fps.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		for _, item := range source.GetProperties() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPropertiesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPropertiesResponse))
}

// GetSingle returns value of selected field from source ListPropertiesResponse
func (fps *ListPropertiesResponse_FieldSubPath) GetSingle(source *ListPropertiesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		if len(source.GetProperties()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProperties()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fps.selector))
	}
}

func (fps *ListPropertiesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPropertiesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPropertiesResponse_FieldSubPath) ClearValue(item *ListPropertiesResponse) {
	if item != nil {
		switch fps.selector {
		case ListPropertiesResponse_FieldPathSelectorProperties:
			for _, subItem := range item.Properties {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPropertiesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPropertiesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPropertiesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPropertiesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPropertiesResponse_FieldSubPath) WithIValue(value interface{}) ListPropertiesResponse_FieldPathValue {
	return &ListPropertiesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPropertiesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPropertiesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPropertiesResponse_FieldPathArrayOfValues {
	return &ListPropertiesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPropertiesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPropertiesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPropertiesResponse_FieldPathArrayItemValue {
	return &ListPropertiesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPropertiesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPropertiesResponse_FieldPathValue allows storing values for ListPropertiesResponse fields according to their type
type ListPropertiesResponse_FieldPathValue interface {
	ListPropertiesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPropertiesResponse)
	CompareWith(*ListPropertiesResponse) (cmp int, comparable bool)
}

func ParseListPropertiesResponse_FieldPathValue(pathStr, valueStr string) (ListPropertiesResponse_FieldPathValue, error) {
	fp, err := ParseListPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPropertiesResponse_FieldPathValue), nil
}

func MustParseListPropertiesResponse_FieldPathValue(pathStr, valueStr string) ListPropertiesResponse_FieldPathValue {
	fpv, err := ParseListPropertiesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPropertiesResponse_FieldTerminalPathValue struct {
	ListPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPropertiesResponse_FieldPathValue = (*ListPropertiesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPropertiesResponse' as interface{}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) AsPropertiesValue() ([]*property.Property, bool) {
	res, ok := fpv.value.([]*property.Property)
	return res, ok
}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListPropertiesResponse
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) SetTo(target **ListPropertiesResponse) {
	if *target == nil {
		*target = new(ListPropertiesResponse)
	}
	switch fpv.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		(*target).Properties = fpv.value.([]*property.Property)
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*property.PagerCursor)
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*property.PagerCursor)
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPropertiesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPropertiesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPropertiesResponse_FieldTerminalPathValue' with the value under path in 'ListPropertiesResponse'.
func (fpv *ListPropertiesResponse_FieldTerminalPathValue) CompareWith(source *ListPropertiesResponse) (int, bool) {
	switch fpv.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return 0, false
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPropertiesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPropertiesResponse))
}

type ListPropertiesResponse_FieldSubPathValue struct {
	ListPropertiesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPropertiesResponse_FieldPathValue = (*ListPropertiesResponse_FieldSubPathValue)(nil)

func (fpvs *ListPropertiesResponse_FieldSubPathValue) AsPropertiesPathValue() (property.Property_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(property.Property_FieldPathValue)
	return res, ok
}

func (fpvs *ListPropertiesResponse_FieldSubPathValue) SetTo(target **ListPropertiesResponse) {
	if *target == nil {
		*target = new(ListPropertiesResponse)
	}
	switch fpvs.Selector() {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPropertiesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPropertiesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPropertiesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPropertiesResponse_FieldSubPathValue) CompareWith(source *ListPropertiesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPropertiesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPropertiesResponse))
}

// ListPropertiesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPropertiesResponse according to their type
// Present only for array (repeated) types.
type ListPropertiesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPropertiesResponse_FieldPath
	ContainsValue(*ListPropertiesResponse) bool
}

// ParseListPropertiesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPropertiesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPropertiesResponse_FieldPathArrayItemValue), nil
}

func MustParseListPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPropertiesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPropertiesResponse_FieldTerminalPathArrayItemValue struct {
	ListPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPropertiesResponse_FieldPathArrayItemValue = (*ListPropertiesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPropertiesResponse as interface{}
func (fpaiv *ListPropertiesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPropertiesResponse_FieldTerminalPathArrayItemValue) AsPropertiesItemValue() (*property.Property, bool) {
	res, ok := fpaiv.value.(*property.Property)
	return res, ok
}

func (fpaiv *ListPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPropertiesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPropertiesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPropertiesResponse'
func (fpaiv *ListPropertiesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPropertiesResponse) bool {
	slice := fpaiv.ListPropertiesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPropertiesResponse_FieldSubPathArrayItemValue struct {
	ListPropertiesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPropertiesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPropertiesResponse_FieldSubPathArrayItemValue) AsPropertiesPathItemValue() (property.Property_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPropertiesResponse'
func (fpaivs *ListPropertiesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPropertiesResponse) bool {
	switch fpaivs.Selector() {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPropertiesResponse: %d", fpaivs.Selector()))
	}
}

// ListPropertiesResponse_FieldPathArrayOfValues allows storing slice of values for ListPropertiesResponse fields according to their type
type ListPropertiesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPropertiesResponse_FieldPath
}

func ParseListPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPropertiesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPropertiesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPropertiesResponse_FieldPathArrayOfValues), nil
}

func MustParseListPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPropertiesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPropertiesResponse_FieldTerminalPathArrayOfValues struct {
	ListPropertiesResponse_FieldTerminalPath
	values interface{}
}

var _ ListPropertiesResponse_FieldPathArrayOfValues = (*ListPropertiesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPropertiesResponse_FieldPathSelectorProperties:
		for _, v := range fpaov.values.([][]*property.Property) {
			values = append(values, v)
		}
	case ListPropertiesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	case ListPropertiesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	case ListPropertiesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPropertiesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) AsPropertiesArrayOfValues() ([][]*property.Property, bool) {
	res, ok := fpaov.values.([][]*property.Property)
	return res, ok
}
func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}
func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}
func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPropertiesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListPropertiesResponse_FieldSubPathArrayOfValues struct {
	ListPropertiesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPropertiesResponse_FieldPathArrayOfValues = (*ListPropertiesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPropertiesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPropertiesResponse_FieldSubPathArrayOfValues) AsPropertiesPathArrayOfValues() (property.Property_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(property.Property_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPropertyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPropertyRequest_FieldPathSelector
	Get(source *WatchPropertyRequest) []interface{}
	GetSingle(source *WatchPropertyRequest) (interface{}, bool)
	ClearValue(item *WatchPropertyRequest)

	// Those methods build corresponding WatchPropertyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPropertyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPropertyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPropertyRequest_FieldPathArrayItemValue
}

type WatchPropertyRequest_FieldPathSelector int32

const (
	WatchPropertyRequest_FieldPathSelectorName      WatchPropertyRequest_FieldPathSelector = 0
	WatchPropertyRequest_FieldPathSelectorFieldMask WatchPropertyRequest_FieldPathSelector = 1
	WatchPropertyRequest_FieldPathSelectorView      WatchPropertyRequest_FieldPathSelector = 2
)

func (s WatchPropertyRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPropertyRequest_FieldPathSelectorName:
		return "name"
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPropertyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", s))
	}
}

func BuildWatchPropertyRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPropertyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPropertyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPropertyRequest", fp)
}

func ParseWatchPropertyRequest_FieldPath(rawField string) (WatchPropertyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPropertyRequest_FieldPath(fp)
}

func MustParseWatchPropertyRequest_FieldPath(rawField string) WatchPropertyRequest_FieldPath {
	fp, err := ParseWatchPropertyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPropertyRequest_FieldTerminalPath struct {
	selector WatchPropertyRequest_FieldPathSelector
}

var _ WatchPropertyRequest_FieldPath = (*WatchPropertyRequest_FieldTerminalPath)(nil)

func (fp *WatchPropertyRequest_FieldTerminalPath) Selector() WatchPropertyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPropertyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPropertyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPropertyRequest
func (fp *WatchPropertyRequest_FieldTerminalPath) Get(source *WatchPropertyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPropertyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPropertyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPropertyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPropertyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPropertyRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPropertyRequest
func (fp *WatchPropertyRequest_FieldTerminalPath) GetSingle(source *WatchPropertyRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPropertyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPropertyRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPropertyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		return (*property.Reference)(nil)
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	case WatchPropertyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) ClearValue(item *WatchPropertyRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPropertyRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPropertyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPropertyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPropertyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPropertyRequest_FieldPathSelectorName ||
		fp.selector == WatchPropertyRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPropertyRequest_FieldPathSelectorView
}

func (fp *WatchPropertyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPropertyRequest_FieldPathValue {
	switch fp.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		return &WatchPropertyRequest_FieldTerminalPathValue{WatchPropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Reference)}
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		return &WatchPropertyRequest_FieldTerminalPathValue{WatchPropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case WatchPropertyRequest_FieldPathSelectorView:
		return &WatchPropertyRequest_FieldTerminalPathValue{WatchPropertyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPropertyRequest_FieldPathArrayOfValues {
	fpaov := &WatchPropertyRequest_FieldTerminalPathArrayOfValues{WatchPropertyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		return &WatchPropertyRequest_FieldTerminalPathArrayOfValues{WatchPropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Reference)}
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		return &WatchPropertyRequest_FieldTerminalPathArrayOfValues{WatchPropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case WatchPropertyRequest_FieldPathSelectorView:
		return &WatchPropertyRequest_FieldTerminalPathArrayOfValues{WatchPropertyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPropertyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPropertyRequest_FieldPathValue allows storing values for WatchPropertyRequest fields according to their type
type WatchPropertyRequest_FieldPathValue interface {
	WatchPropertyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPropertyRequest)
	CompareWith(*WatchPropertyRequest) (cmp int, comparable bool)
}

func ParseWatchPropertyRequest_FieldPathValue(pathStr, valueStr string) (WatchPropertyRequest_FieldPathValue, error) {
	fp, err := ParseWatchPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPropertyRequest_FieldPathValue), nil
}

func MustParseWatchPropertyRequest_FieldPathValue(pathStr, valueStr string) WatchPropertyRequest_FieldPathValue {
	fpv, err := ParseWatchPropertyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPropertyRequest_FieldTerminalPathValue struct {
	WatchPropertyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPropertyRequest_FieldPathValue = (*WatchPropertyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPropertyRequest' as interface{}
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) AsNameValue() (*property.Reference, bool) {
	res, ok := fpv.value.(*property.Reference)
	return res, ok
}
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPropertyRequest
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) SetTo(target **WatchPropertyRequest) {
	if *target == nil {
		*target = new(WatchPropertyRequest)
	}
	switch fpv.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*property.Reference)
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	case WatchPropertyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPropertyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPropertyRequest_FieldTerminalPathValue' with the value under path in 'WatchPropertyRequest'.
func (fpv *WatchPropertyRequest_FieldTerminalPathValue) CompareWith(source *WatchPropertyRequest) (int, bool) {
	switch fpv.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*property.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPropertyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPropertyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPropertyRequest))
}

// WatchPropertyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPropertyRequest according to their type
// Present only for array (repeated) types.
type WatchPropertyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPropertyRequest_FieldPath
	ContainsValue(*WatchPropertyRequest) bool
}

// ParseWatchPropertyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPropertyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPropertyRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPropertyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPropertyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPropertyRequest_FieldTerminalPathArrayItemValue struct {
	WatchPropertyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPropertyRequest_FieldPathArrayItemValue = (*WatchPropertyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPropertyRequest as interface{}
func (fpaiv *WatchPropertyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPropertyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPropertyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPropertyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPropertyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPropertyRequest'
func (fpaiv *WatchPropertyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPropertyRequest) bool {
	slice := fpaiv.WatchPropertyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPropertyRequest_FieldPathArrayOfValues allows storing slice of values for WatchPropertyRequest fields according to their type
type WatchPropertyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPropertyRequest_FieldPath
}

func ParseWatchPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPropertyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPropertyRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPropertyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPropertyRequest_FieldTerminalPathArrayOfValues struct {
	WatchPropertyRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPropertyRequest_FieldPathArrayOfValues = (*WatchPropertyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPropertyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPropertyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*property.Reference) {
			values = append(values, v)
		}
	case WatchPropertyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case WatchPropertyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPropertyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*property.Reference, bool) {
	res, ok := fpaov.values.([]*property.Reference)
	return res, ok
}
func (fpaov *WatchPropertyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *WatchPropertyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPropertyResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPropertyResponse_FieldPathSelector
	Get(source *WatchPropertyResponse) []interface{}
	GetSingle(source *WatchPropertyResponse) (interface{}, bool)
	ClearValue(item *WatchPropertyResponse)

	// Those methods build corresponding WatchPropertyResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPropertyResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPropertyResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPropertyResponse_FieldPathArrayItemValue
}

type WatchPropertyResponse_FieldPathSelector int32

const (
	WatchPropertyResponse_FieldPathSelectorChange WatchPropertyResponse_FieldPathSelector = 0
)

func (s WatchPropertyResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPropertyResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", s))
	}
}

func BuildWatchPropertyResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPropertyResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPropertyResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPropertyResponse_FieldTerminalPath{selector: WatchPropertyResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPropertyResponse", fp)
}

func ParseWatchPropertyResponse_FieldPath(rawField string) (WatchPropertyResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPropertyResponse_FieldPath(fp)
}

func MustParseWatchPropertyResponse_FieldPath(rawField string) WatchPropertyResponse_FieldPath {
	fp, err := ParseWatchPropertyResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPropertyResponse_FieldTerminalPath struct {
	selector WatchPropertyResponse_FieldPathSelector
}

var _ WatchPropertyResponse_FieldPath = (*WatchPropertyResponse_FieldTerminalPath)(nil)

func (fp *WatchPropertyResponse_FieldTerminalPath) Selector() WatchPropertyResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPropertyResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPropertyResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPropertyResponse
func (fp *WatchPropertyResponse_FieldTerminalPath) Get(source *WatchPropertyResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPropertyResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPropertyResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPropertyResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPropertyResponse
func (fp *WatchPropertyResponse_FieldTerminalPath) GetSingle(source *WatchPropertyResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPropertyResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPropertyResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		return (*property.PropertyChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) ClearValue(item *WatchPropertyResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPropertyResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPropertyResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPropertyResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPropertyResponse_FieldPathSelectorChange
}

func (fp *WatchPropertyResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPropertyResponse_FieldPathValue {
	switch fp.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		return &WatchPropertyResponse_FieldTerminalPathValue{WatchPropertyResponse_FieldTerminalPath: *fp, value: value.(*property.PropertyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPropertyResponse_FieldPathArrayOfValues {
	fpaov := &WatchPropertyResponse_FieldTerminalPathArrayOfValues{WatchPropertyResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		return &WatchPropertyResponse_FieldTerminalPathArrayOfValues{WatchPropertyResponse_FieldTerminalPath: *fp, values: values.([]*property.PropertyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPropertyResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertyResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPropertyResponse_FieldPathValue allows storing values for WatchPropertyResponse fields according to their type
type WatchPropertyResponse_FieldPathValue interface {
	WatchPropertyResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPropertyResponse)
	CompareWith(*WatchPropertyResponse) (cmp int, comparable bool)
}

func ParseWatchPropertyResponse_FieldPathValue(pathStr, valueStr string) (WatchPropertyResponse_FieldPathValue, error) {
	fp, err := ParseWatchPropertyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPropertyResponse_FieldPathValue), nil
}

func MustParseWatchPropertyResponse_FieldPathValue(pathStr, valueStr string) WatchPropertyResponse_FieldPathValue {
	fpv, err := ParseWatchPropertyResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPropertyResponse_FieldTerminalPathValue struct {
	WatchPropertyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPropertyResponse_FieldPathValue = (*WatchPropertyResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPropertyResponse' as interface{}
func (fpv *WatchPropertyResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPropertyResponse_FieldTerminalPathValue) AsChangeValue() (*property.PropertyChange, bool) {
	res, ok := fpv.value.(*property.PropertyChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPropertyResponse
func (fpv *WatchPropertyResponse_FieldTerminalPathValue) SetTo(target **WatchPropertyResponse) {
	if *target == nil {
		*target = new(WatchPropertyResponse)
	}
	switch fpv.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*property.PropertyChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPropertyResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertyResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPropertyResponse_FieldTerminalPathValue' with the value under path in 'WatchPropertyResponse'.
func (fpv *WatchPropertyResponse_FieldTerminalPathValue) CompareWith(source *WatchPropertyResponse) (int, bool) {
	switch fpv.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPropertyResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPropertyResponse))
}

// WatchPropertyResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPropertyResponse according to their type
// Present only for array (repeated) types.
type WatchPropertyResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPropertyResponse_FieldPath
	ContainsValue(*WatchPropertyResponse) bool
}

// ParseWatchPropertyResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPropertyResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPropertyResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPropertyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPropertyResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPropertyResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPropertyResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPropertyResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPropertyResponse_FieldTerminalPathArrayItemValue struct {
	WatchPropertyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPropertyResponse_FieldPathArrayItemValue = (*WatchPropertyResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPropertyResponse as interface{}
func (fpaiv *WatchPropertyResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPropertyResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPropertyResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPropertyResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPropertyResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPropertyResponse'
func (fpaiv *WatchPropertyResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPropertyResponse) bool {
	slice := fpaiv.WatchPropertyResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPropertyResponse_FieldPathArrayOfValues allows storing slice of values for WatchPropertyResponse fields according to their type
type WatchPropertyResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPropertyResponse_FieldPath
}

func ParseWatchPropertyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPropertyResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPropertyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertyResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPropertyResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPropertyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPropertyResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPropertyResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPropertyResponse_FieldTerminalPathArrayOfValues struct {
	WatchPropertyResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPropertyResponse_FieldPathArrayOfValues = (*WatchPropertyResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPropertyResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPropertyResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*property.PropertyChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPropertyResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*property.PropertyChange, bool) {
	res, ok := fpaov.values.([]*property.PropertyChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPropertiesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPropertiesRequest_FieldPathSelector
	Get(source *WatchPropertiesRequest) []interface{}
	GetSingle(source *WatchPropertiesRequest) (interface{}, bool)
	ClearValue(item *WatchPropertiesRequest)

	// Those methods build corresponding WatchPropertiesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPropertiesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPropertiesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPropertiesRequest_FieldPathArrayItemValue
}

type WatchPropertiesRequest_FieldPathSelector int32

const (
	WatchPropertiesRequest_FieldPathSelectorType         WatchPropertiesRequest_FieldPathSelector = 0
	WatchPropertiesRequest_FieldPathSelectorParent       WatchPropertiesRequest_FieldPathSelector = 1
	WatchPropertiesRequest_FieldPathSelectorPageSize     WatchPropertiesRequest_FieldPathSelector = 2
	WatchPropertiesRequest_FieldPathSelectorPageToken    WatchPropertiesRequest_FieldPathSelector = 3
	WatchPropertiesRequest_FieldPathSelectorOrderBy      WatchPropertiesRequest_FieldPathSelector = 4
	WatchPropertiesRequest_FieldPathSelectorResumeToken  WatchPropertiesRequest_FieldPathSelector = 5
	WatchPropertiesRequest_FieldPathSelectorStartingTime WatchPropertiesRequest_FieldPathSelector = 6
	WatchPropertiesRequest_FieldPathSelectorFilter       WatchPropertiesRequest_FieldPathSelector = 7
	WatchPropertiesRequest_FieldPathSelectorFieldMask    WatchPropertiesRequest_FieldPathSelector = 8
	WatchPropertiesRequest_FieldPathSelectorView         WatchPropertiesRequest_FieldPathSelector = 9
	WatchPropertiesRequest_FieldPathSelectorMaxChunkSize WatchPropertiesRequest_FieldPathSelector = 10
)

func (s WatchPropertiesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPropertiesRequest_FieldPathSelectorType:
		return "type"
	case WatchPropertiesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPropertiesRequest_FieldPathSelectorView:
		return "view"
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", s))
	}
}

func BuildWatchPropertiesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPropertiesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPropertiesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPropertiesRequest", fp)
}

func ParseWatchPropertiesRequest_FieldPath(rawField string) (WatchPropertiesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPropertiesRequest_FieldPath(fp)
}

func MustParseWatchPropertiesRequest_FieldPath(rawField string) WatchPropertiesRequest_FieldPath {
	fp, err := ParseWatchPropertiesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPropertiesRequest_FieldTerminalPath struct {
	selector WatchPropertiesRequest_FieldPathSelector
}

var _ WatchPropertiesRequest_FieldPath = (*WatchPropertiesRequest_FieldTerminalPath)(nil)

func (fp *WatchPropertiesRequest_FieldTerminalPath) Selector() WatchPropertiesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPropertiesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPropertiesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPropertiesRequest
func (fp *WatchPropertiesRequest_FieldTerminalPath) Get(source *WatchPropertiesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPropertiesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPropertiesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchPropertiesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPropertiesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPropertiesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPropertiesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPropertiesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchPropertiesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPropertiesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPropertiesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPropertiesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPropertiesRequest
func (fp *WatchPropertiesRequest_FieldTerminalPath) GetSingle(source *WatchPropertiesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPropertiesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPropertiesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPropertiesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPropertiesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPropertiesRequest_FieldPathSelectorParent:
		return (*property.ParentReference)(nil)
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		return (*property.PagerCursor)(nil)
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		return (*property.OrderBy)(nil)
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		return (*property.Filter)(nil)
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	case WatchPropertiesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) ClearValue(item *WatchPropertiesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPropertiesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPropertiesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchPropertiesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPropertiesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPropertiesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPropertiesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPropertiesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchPropertiesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPropertiesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPropertiesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPropertiesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPropertiesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPropertiesRequest_FieldPathSelectorType ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorParent ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorView ||
		fp.selector == WatchPropertiesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPropertiesRequest_FieldPathValue {
	switch fp.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPropertiesRequest_FieldPathSelectorParent:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.ParentReference)}
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.OrderBy)}
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Filter)}
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case WatchPropertiesRequest_FieldPathSelectorView:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPropertiesRequest_FieldTerminalPathValue{WatchPropertiesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPropertiesRequest_FieldPathArrayOfValues {
	fpaov := &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPropertiesRequest_FieldPathSelectorParent:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.ParentReference)}
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.OrderBy)}
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.Filter)}
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case WatchPropertiesRequest_FieldPathSelectorView:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPropertiesRequest_FieldTerminalPathArrayOfValues{WatchPropertiesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPropertiesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fp.selector))
	}
}

func (fp *WatchPropertiesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPropertiesRequest_FieldPathValue allows storing values for WatchPropertiesRequest fields according to their type
type WatchPropertiesRequest_FieldPathValue interface {
	WatchPropertiesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPropertiesRequest)
	CompareWith(*WatchPropertiesRequest) (cmp int, comparable bool)
}

func ParseWatchPropertiesRequest_FieldPathValue(pathStr, valueStr string) (WatchPropertiesRequest_FieldPathValue, error) {
	fp, err := ParseWatchPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPropertiesRequest_FieldPathValue), nil
}

func MustParseWatchPropertiesRequest_FieldPathValue(pathStr, valueStr string) WatchPropertiesRequest_FieldPathValue {
	fpv, err := ParseWatchPropertiesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPropertiesRequest_FieldTerminalPathValue struct {
	WatchPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesRequest_FieldPathValue = (*WatchPropertiesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPropertiesRequest' as interface{}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsParentValue() (*property.ParentReference, bool) {
	res, ok := fpv.value.(*property.ParentReference)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsOrderByValue() (*property.OrderBy, bool) {
	res, ok := fpv.value.(*property.OrderBy)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsFilterValue() (*property.Filter, bool) {
	res, ok := fpv.value.(*property.Filter)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPropertiesRequest
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) SetTo(target **WatchPropertiesRequest) {
	if *target == nil {
		*target = new(WatchPropertiesRequest)
	}
	switch fpv.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPropertiesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*property.ParentReference)
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*property.PagerCursor)
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*property.OrderBy)
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*property.Filter)
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	case WatchPropertiesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertiesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPropertiesRequest_FieldTerminalPathValue' with the value under path in 'WatchPropertiesRequest'.
func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) CompareWith(source *WatchPropertiesRequest) (int, bool) {
	switch fpv.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*property.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPropertiesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPropertiesRequest))
}

// WatchPropertiesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPropertiesRequest according to their type
// Present only for array (repeated) types.
type WatchPropertiesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPropertiesRequest_FieldPath
	ContainsValue(*WatchPropertiesRequest) bool
}

// ParseWatchPropertiesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPropertiesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPropertiesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPropertiesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPropertiesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPropertiesRequest_FieldTerminalPathArrayItemValue struct {
	WatchPropertiesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesRequest_FieldPathArrayItemValue = (*WatchPropertiesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPropertiesRequest as interface{}
func (fpaiv *WatchPropertiesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPropertiesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPropertiesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPropertiesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPropertiesRequest'
func (fpaiv *WatchPropertiesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPropertiesRequest) bool {
	slice := fpaiv.WatchPropertiesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPropertiesRequest_FieldPathArrayOfValues allows storing slice of values for WatchPropertiesRequest fields according to their type
type WatchPropertiesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPropertiesRequest_FieldPath
}

func ParseWatchPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPropertiesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPropertiesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPropertiesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPropertiesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPropertiesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPropertiesRequest_FieldTerminalPathArrayOfValues struct {
	WatchPropertiesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPropertiesRequest_FieldPathArrayOfValues = (*WatchPropertiesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPropertiesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*property.ParentReference) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*property.OrderBy) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*property.Filter) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPropertiesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*property.ParentReference, bool) {
	res, ok := fpaov.values.([]*property.ParentReference)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*property.OrderBy, bool) {
	res, ok := fpaov.values.([]*property.OrderBy)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*property.Filter, bool) {
	res, ok := fpaov.values.([]*property.Filter)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPropertiesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPropertiesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPropertiesResponse_FieldPathSelector
	Get(source *WatchPropertiesResponse) []interface{}
	GetSingle(source *WatchPropertiesResponse) (interface{}, bool)
	ClearValue(item *WatchPropertiesResponse)

	// Those methods build corresponding WatchPropertiesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPropertiesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPropertiesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPropertiesResponse_FieldPathArrayItemValue
}

type WatchPropertiesResponse_FieldPathSelector int32

const (
	WatchPropertiesResponse_FieldPathSelectorPropertyChanges WatchPropertiesResponse_FieldPathSelector = 0
	WatchPropertiesResponse_FieldPathSelectorIsCurrent       WatchPropertiesResponse_FieldPathSelector = 1
	WatchPropertiesResponse_FieldPathSelectorPageTokenChange WatchPropertiesResponse_FieldPathSelector = 2
	WatchPropertiesResponse_FieldPathSelectorResumeToken     WatchPropertiesResponse_FieldPathSelector = 3
	WatchPropertiesResponse_FieldPathSelectorSnapshotSize    WatchPropertiesResponse_FieldPathSelector = 4
	WatchPropertiesResponse_FieldPathSelectorIsSoftReset     WatchPropertiesResponse_FieldPathSelector = 5
	WatchPropertiesResponse_FieldPathSelectorIsHardReset     WatchPropertiesResponse_FieldPathSelector = 6
)

func (s WatchPropertiesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return "property_changes"
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", s))
	}
}

func BuildWatchPropertiesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPropertiesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPropertiesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "property_changes", "propertyChanges", "property-changes":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorPropertyChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPropertiesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPropertiesResponse_FieldSubPath{selector: WatchPropertiesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPropertiesResponse", fp)
}

func ParseWatchPropertiesResponse_FieldPath(rawField string) (WatchPropertiesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPropertiesResponse_FieldPath(fp)
}

func MustParseWatchPropertiesResponse_FieldPath(rawField string) WatchPropertiesResponse_FieldPath {
	fp, err := ParseWatchPropertiesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPropertiesResponse_FieldTerminalPath struct {
	selector WatchPropertiesResponse_FieldPathSelector
}

var _ WatchPropertiesResponse_FieldPath = (*WatchPropertiesResponse_FieldTerminalPath)(nil)

func (fp *WatchPropertiesResponse_FieldTerminalPath) Selector() WatchPropertiesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPropertiesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPropertiesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPropertiesResponse
func (fp *WatchPropertiesResponse_FieldTerminalPath) Get(source *WatchPropertiesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
			for _, value := range source.GetPropertyChanges() {
				values = append(values, value)
			}
		case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPropertiesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPropertiesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPropertiesResponse
func (fp *WatchPropertiesResponse_FieldTerminalPath) GetSingle(source *WatchPropertiesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		res := source.GetPropertyChanges()
		return res, res != nil
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPropertiesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return ([]*property.PropertyChange)(nil)
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPropertiesResponse_PageTokenChange)(nil)
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) ClearValue(item *WatchPropertiesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
			item.PropertyChanges = nil
		case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPropertiesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPropertiesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPropertiesResponse_FieldPathSelectorPropertyChanges ||
		fp.selector == WatchPropertiesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPropertiesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPropertiesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPropertiesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPropertiesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPropertiesResponse_FieldPathValue {
	switch fp.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.([]*property.PropertyChange)}
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(*WatchPropertiesResponse_PageTokenChange)}
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		return &WatchPropertiesResponse_FieldTerminalPathValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPropertiesResponse_FieldPathArrayOfValues {
	fpaov := &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([][]*property.PropertyChange)}
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]*WatchPropertiesResponse_PageTokenChange)}
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		return &WatchPropertiesResponse_FieldTerminalPathArrayOfValues{WatchPropertiesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPropertiesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return &WatchPropertiesResponse_FieldTerminalPathArrayItemValue{WatchPropertiesResponse_FieldTerminalPath: *fp, value: value.(*property.PropertyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPropertiesResponse_FieldSubPath struct {
	selector WatchPropertiesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPropertiesResponse_FieldPath = (*WatchPropertiesResponse_FieldSubPath)(nil)

func (fps *WatchPropertiesResponse_FieldSubPath) Selector() WatchPropertiesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPropertiesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPropertiesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPropertiesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPropertiesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPropertiesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPropertiesResponse
func (fps *WatchPropertiesResponse_FieldSubPath) Get(source *WatchPropertiesResponse) (values []interface{}) {
	switch fps.selector {
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPropertiesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPropertiesResponse))
}

// GetSingle returns value of selected field from source WatchPropertiesResponse
func (fps *WatchPropertiesResponse_FieldSubPath) GetSingle(source *WatchPropertiesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fps.selector))
	}
}

func (fps *WatchPropertiesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPropertiesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPropertiesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPropertiesResponse_FieldSubPath) ClearValue(item *WatchPropertiesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPropertiesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPropertiesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPropertiesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPropertiesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPropertiesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithIValue(value interface{}) WatchPropertiesResponse_FieldPathValue {
	return &WatchPropertiesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPropertiesResponse_FieldPathArrayOfValues {
	return &WatchPropertiesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPropertiesResponse_FieldPathArrayItemValue {
	return &WatchPropertiesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPropertiesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPropertiesResponse_FieldPathValue allows storing values for WatchPropertiesResponse fields according to their type
type WatchPropertiesResponse_FieldPathValue interface {
	WatchPropertiesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPropertiesResponse)
	CompareWith(*WatchPropertiesResponse) (cmp int, comparable bool)
}

func ParseWatchPropertiesResponse_FieldPathValue(pathStr, valueStr string) (WatchPropertiesResponse_FieldPathValue, error) {
	fp, err := ParseWatchPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPropertiesResponse_FieldPathValue), nil
}

func MustParseWatchPropertiesResponse_FieldPathValue(pathStr, valueStr string) WatchPropertiesResponse_FieldPathValue {
	fpv, err := ParseWatchPropertiesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPropertiesResponse_FieldTerminalPathValue struct {
	WatchPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesResponse_FieldPathValue = (*WatchPropertiesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPropertiesResponse' as interface{}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsPropertyChangesValue() ([]*property.PropertyChange, bool) {
	res, ok := fpv.value.([]*property.PropertyChange)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPropertiesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPropertiesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPropertiesResponse
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) SetTo(target **WatchPropertiesResponse) {
	if *target == nil {
		*target = new(WatchPropertiesResponse)
	}
	switch fpv.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		(*target).PropertyChanges = fpv.value.([]*property.PropertyChange)
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPropertiesResponse_PageTokenChange)
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertiesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPropertiesResponse_FieldTerminalPathValue' with the value under path in 'WatchPropertiesResponse'.
func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) CompareWith(source *WatchPropertiesResponse) (int, bool) {
	switch fpv.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		return 0, false
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPropertiesResponse))
}

type WatchPropertiesResponse_FieldSubPathValue struct {
	WatchPropertiesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPropertiesResponse_FieldPathValue = (*WatchPropertiesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPropertiesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPropertiesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) SetTo(target **WatchPropertiesResponse) {
	if *target == nil {
		*target = new(WatchPropertiesResponse)
	}
	switch fpvs.Selector() {
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPropertiesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertiesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) CompareWith(source *WatchPropertiesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPropertiesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPropertiesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPropertiesResponse))
}

// WatchPropertiesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPropertiesResponse according to their type
// Present only for array (repeated) types.
type WatchPropertiesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPropertiesResponse_FieldPath
	ContainsValue(*WatchPropertiesResponse) bool
}

// ParseWatchPropertiesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPropertiesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPropertiesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPropertiesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPropertiesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPropertiesResponse_FieldTerminalPathArrayItemValue struct {
	WatchPropertiesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesResponse_FieldPathArrayItemValue = (*WatchPropertiesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPropertiesResponse as interface{}
func (fpaiv *WatchPropertiesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPropertiesResponse_FieldTerminalPathArrayItemValue) AsPropertyChangesItemValue() (*property.PropertyChange, bool) {
	res, ok := fpaiv.value.(*property.PropertyChange)
	return res, ok
}

func (fpaiv *WatchPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPropertiesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPropertiesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPropertiesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPropertiesResponse'
func (fpaiv *WatchPropertiesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPropertiesResponse) bool {
	slice := fpaiv.WatchPropertiesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPropertiesResponse_FieldSubPathArrayItemValue struct {
	WatchPropertiesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPropertiesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPropertiesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPropertiesResponse'
func (fpaivs *WatchPropertiesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPropertiesResponse) bool {
	switch fpaivs.Selector() {
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse: %d", fpaivs.Selector()))
	}
}

// WatchPropertiesResponse_FieldPathArrayOfValues allows storing slice of values for WatchPropertiesResponse fields according to their type
type WatchPropertiesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPropertiesResponse_FieldPath
}

func ParseWatchPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPropertiesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPropertiesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPropertiesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPropertiesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPropertiesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPropertiesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPropertiesResponse_FieldTerminalPathArrayOfValues struct {
	WatchPropertiesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPropertiesResponse_FieldPathArrayOfValues = (*WatchPropertiesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPropertiesResponse_FieldPathSelectorPropertyChanges:
		for _, v := range fpaov.values.([][]*property.PropertyChange) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPropertiesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPropertiesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsPropertyChangesArrayOfValues() ([][]*property.PropertyChange, bool) {
	res, ok := fpaov.values.([][]*property.PropertyChange)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPropertiesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPropertiesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPropertiesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPropertiesResponse_FieldSubPathArrayOfValues struct {
	WatchPropertiesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPropertiesResponse_FieldPathArrayOfValues = (*WatchPropertiesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPropertiesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPropertiesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPropertiesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPropertiesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPropertiesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPropertiesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPropertiesResponse_PageTokenChange)

	// Those methods build corresponding WatchPropertiesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPropertiesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPropertiesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPropertiesResponsePageTokenChange_FieldPathSelector = 0
	WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPropertiesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPropertiesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPropertiesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPropertiesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPropertiesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPropertiesResponsePageTokenChange_FieldTerminalPath{selector: WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPropertiesResponsePageTokenChange_FieldTerminalPath{selector: WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPropertiesResponse_PageTokenChange", fp)
}

func ParseWatchPropertiesResponsePageTokenChange_FieldPath(rawField string) (WatchPropertiesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPropertiesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPropertiesResponsePageTokenChange_FieldPath(rawField string) WatchPropertiesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPropertiesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPropertiesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPropertiesResponsePageTokenChange_FieldPathSelector
}

var _ WatchPropertiesResponsePageTokenChange_FieldPath = (*WatchPropertiesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) Selector() WatchPropertiesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPropertiesResponse_PageTokenChange
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPropertiesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPropertiesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPropertiesResponse_PageTokenChange
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPropertiesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPropertiesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*property.PagerCursor)(nil)
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*property.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPropertiesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPropertiesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPropertiesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue{WatchPropertiesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue{WatchPropertiesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*property.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPropertiesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPropertiesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPropertiesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*property.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPropertiesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPropertiesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPropertiesResponsePageTokenChange_FieldPathValue interface {
	WatchPropertiesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPropertiesResponse_PageTokenChange)
	CompareWith(*WatchPropertiesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPropertiesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPropertiesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPropertiesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPropertiesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPropertiesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPropertiesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPropertiesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPropertiesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesResponsePageTokenChange_FieldPathValue = (*WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}
func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*property.PagerCursor, bool) {
	res, ok := fpv.value.(*property.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPropertiesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPropertiesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*property.PagerCursor)
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*property.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPropertiesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPropertiesResponse_PageTokenChange'.
func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPropertiesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPropertiesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPropertiesResponse_PageTokenChange))
}

// WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPropertiesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPropertiesResponse_PageTokenChange) bool
}

// ParseWatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPropertiesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPropertiesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPropertiesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPropertiesResponse_PageTokenChange as interface{}
func (fpaiv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPropertiesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPropertiesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPropertiesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPropertiesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPropertiesResponsePageTokenChange_FieldPath
}

func ParseWatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPropertiesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPropertiesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPropertiesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	case WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*property.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}
func (fpaov *WatchPropertiesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*property.PagerCursor, bool) {
	res, ok := fpaov.values.([]*property.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePropertyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePropertyRequest_FieldPathSelector
	Get(source *CreatePropertyRequest) []interface{}
	GetSingle(source *CreatePropertyRequest) (interface{}, bool)
	ClearValue(item *CreatePropertyRequest)

	// Those methods build corresponding CreatePropertyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePropertyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePropertyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePropertyRequest_FieldPathArrayItemValue
}

type CreatePropertyRequest_FieldPathSelector int32

const (
	CreatePropertyRequest_FieldPathSelectorParent   CreatePropertyRequest_FieldPathSelector = 0
	CreatePropertyRequest_FieldPathSelectorProperty CreatePropertyRequest_FieldPathSelector = 1
)

func (s CreatePropertyRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePropertyRequest_FieldPathSelectorParent:
		return "parent"
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return "property"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", s))
	}
}

func BuildCreatePropertyRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePropertyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePropertyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreatePropertyRequest_FieldTerminalPath{selector: CreatePropertyRequest_FieldPathSelectorParent}, nil
		case "property":
			return &CreatePropertyRequest_FieldTerminalPath{selector: CreatePropertyRequest_FieldPathSelectorProperty}, nil
		}
	} else {
		switch fp[0] {
		case "property":
			if subpath, err := property.BuildProperty_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePropertyRequest_FieldSubPath{selector: CreatePropertyRequest_FieldPathSelectorProperty, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePropertyRequest", fp)
}

func ParseCreatePropertyRequest_FieldPath(rawField string) (CreatePropertyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePropertyRequest_FieldPath(fp)
}

func MustParseCreatePropertyRequest_FieldPath(rawField string) CreatePropertyRequest_FieldPath {
	fp, err := ParseCreatePropertyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePropertyRequest_FieldTerminalPath struct {
	selector CreatePropertyRequest_FieldPathSelector
}

var _ CreatePropertyRequest_FieldPath = (*CreatePropertyRequest_FieldTerminalPath)(nil)

func (fp *CreatePropertyRequest_FieldTerminalPath) Selector() CreatePropertyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePropertyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePropertyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePropertyRequest
func (fp *CreatePropertyRequest_FieldTerminalPath) Get(source *CreatePropertyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePropertyRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreatePropertyRequest_FieldPathSelectorProperty:
			if source.Property != nil {
				values = append(values, source.Property)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePropertyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePropertyRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePropertyRequest
func (fp *CreatePropertyRequest_FieldTerminalPath) GetSingle(source *CreatePropertyRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreatePropertyRequest_FieldPathSelectorProperty:
		res := source.GetProperty()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
	}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePropertyRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePropertyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		return (*property.ParentReference)(nil)
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return (*property.Property)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
	}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) ClearValue(item *CreatePropertyRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePropertyRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreatePropertyRequest_FieldPathSelectorProperty:
			item.Property = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePropertyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePropertyRequest_FieldPathSelectorParent
}

func (fp *CreatePropertyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePropertyRequest_FieldPathValue {
	switch fp.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		return &CreatePropertyRequest_FieldTerminalPathValue{CreatePropertyRequest_FieldTerminalPath: *fp, value: value.(*property.ParentReference)}
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return &CreatePropertyRequest_FieldTerminalPathValue{CreatePropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Property)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
	}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePropertyRequest_FieldPathArrayOfValues {
	fpaov := &CreatePropertyRequest_FieldTerminalPathArrayOfValues{CreatePropertyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		return &CreatePropertyRequest_FieldTerminalPathArrayOfValues{CreatePropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.ParentReference)}
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return &CreatePropertyRequest_FieldTerminalPathArrayOfValues{CreatePropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Property)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePropertyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fp.selector))
	}
}

func (fp *CreatePropertyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePropertyRequest_FieldSubPath struct {
	selector CreatePropertyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePropertyRequest_FieldPath = (*CreatePropertyRequest_FieldSubPath)(nil)

func (fps *CreatePropertyRequest_FieldSubPath) Selector() CreatePropertyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePropertyRequest_FieldSubPath) AsPropertySubPath() (property.Property_FieldPath, bool) {
	res, ok := fps.subPath.(property.Property_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePropertyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePropertyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePropertyRequest
func (fps *CreatePropertyRequest_FieldSubPath) Get(source *CreatePropertyRequest) (values []interface{}) {
	switch fps.selector {
	case CreatePropertyRequest_FieldPathSelectorProperty:
		values = append(values, fps.subPath.GetRaw(source.GetProperty())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePropertyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePropertyRequest))
}

// GetSingle returns value of selected field from source CreatePropertyRequest
func (fps *CreatePropertyRequest_FieldSubPath) GetSingle(source *CreatePropertyRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePropertyRequest_FieldPathSelectorProperty:
		if source.GetProperty() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProperty())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fps.selector))
	}
}

func (fps *CreatePropertyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePropertyRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePropertyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePropertyRequest_FieldSubPath) ClearValue(item *CreatePropertyRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePropertyRequest_FieldPathSelectorProperty:
			fps.subPath.ClearValueRaw(item.Property)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePropertyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePropertyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePropertyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePropertyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePropertyRequest_FieldSubPath) WithIValue(value interface{}) CreatePropertyRequest_FieldPathValue {
	return &CreatePropertyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePropertyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePropertyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePropertyRequest_FieldPathArrayOfValues {
	return &CreatePropertyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePropertyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePropertyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePropertyRequest_FieldPathArrayItemValue {
	return &CreatePropertyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePropertyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePropertyRequest_FieldPathValue allows storing values for CreatePropertyRequest fields according to their type
type CreatePropertyRequest_FieldPathValue interface {
	CreatePropertyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePropertyRequest)
	CompareWith(*CreatePropertyRequest) (cmp int, comparable bool)
}

func ParseCreatePropertyRequest_FieldPathValue(pathStr, valueStr string) (CreatePropertyRequest_FieldPathValue, error) {
	fp, err := ParseCreatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePropertyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePropertyRequest_FieldPathValue), nil
}

func MustParseCreatePropertyRequest_FieldPathValue(pathStr, valueStr string) CreatePropertyRequest_FieldPathValue {
	fpv, err := ParseCreatePropertyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePropertyRequest_FieldTerminalPathValue struct {
	CreatePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePropertyRequest_FieldPathValue = (*CreatePropertyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePropertyRequest' as interface{}
func (fpv *CreatePropertyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePropertyRequest_FieldTerminalPathValue) AsParentValue() (*property.ParentReference, bool) {
	res, ok := fpv.value.(*property.ParentReference)
	return res, ok
}
func (fpv *CreatePropertyRequest_FieldTerminalPathValue) AsPropertyValue() (*property.Property, bool) {
	res, ok := fpv.value.(*property.Property)
	return res, ok
}

// SetTo stores value for selected field for object CreatePropertyRequest
func (fpv *CreatePropertyRequest_FieldTerminalPathValue) SetTo(target **CreatePropertyRequest) {
	if *target == nil {
		*target = new(CreatePropertyRequest)
	}
	switch fpv.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*property.ParentReference)
	case CreatePropertyRequest_FieldPathSelectorProperty:
		(*target).Property = fpv.value.(*property.Property)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePropertyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePropertyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePropertyRequest_FieldTerminalPathValue' with the value under path in 'CreatePropertyRequest'.
func (fpv *CreatePropertyRequest_FieldTerminalPathValue) CompareWith(source *CreatePropertyRequest) (int, bool) {
	switch fpv.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*property.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePropertyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePropertyRequest))
}

type CreatePropertyRequest_FieldSubPathValue struct {
	CreatePropertyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePropertyRequest_FieldPathValue = (*CreatePropertyRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePropertyRequest_FieldSubPathValue) AsPropertyPathValue() (property.Property_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(property.Property_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePropertyRequest_FieldSubPathValue) SetTo(target **CreatePropertyRequest) {
	if *target == nil {
		*target = new(CreatePropertyRequest)
	}
	switch fpvs.Selector() {
	case CreatePropertyRequest_FieldPathSelectorProperty:
		fpvs.subPathValue.(property.Property_FieldPathValue).SetTo(&(*target).Property)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePropertyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePropertyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePropertyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePropertyRequest_FieldSubPathValue) CompareWith(source *CreatePropertyRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return fpvs.subPathValue.(property.Property_FieldPathValue).CompareWith(source.GetProperty())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePropertyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePropertyRequest))
}

// CreatePropertyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePropertyRequest according to their type
// Present only for array (repeated) types.
type CreatePropertyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePropertyRequest_FieldPath
	ContainsValue(*CreatePropertyRequest) bool
}

// ParseCreatePropertyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePropertyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePropertyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePropertyRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePropertyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePropertyRequest_FieldTerminalPathArrayItemValue struct {
	CreatePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePropertyRequest_FieldPathArrayItemValue = (*CreatePropertyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePropertyRequest as interface{}
func (fpaiv *CreatePropertyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePropertyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePropertyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePropertyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePropertyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePropertyRequest'
func (fpaiv *CreatePropertyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePropertyRequest) bool {
	slice := fpaiv.CreatePropertyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePropertyRequest_FieldSubPathArrayItemValue struct {
	CreatePropertyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePropertyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePropertyRequest_FieldSubPathArrayItemValue) AsPropertyPathItemValue() (property.Property_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePropertyRequest'
func (fpaivs *CreatePropertyRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePropertyRequest) bool {
	switch fpaivs.Selector() {
	case CreatePropertyRequest_FieldPathSelectorProperty:
		return fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue).ContainsValue(source.GetProperty())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePropertyRequest: %d", fpaivs.Selector()))
	}
}

// CreatePropertyRequest_FieldPathArrayOfValues allows storing slice of values for CreatePropertyRequest fields according to their type
type CreatePropertyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePropertyRequest_FieldPath
}

func ParseCreatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePropertyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePropertyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePropertyRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePropertyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePropertyRequest_FieldTerminalPathArrayOfValues struct {
	CreatePropertyRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePropertyRequest_FieldPathArrayOfValues = (*CreatePropertyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePropertyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePropertyRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*property.ParentReference) {
			values = append(values, v)
		}
	case CreatePropertyRequest_FieldPathSelectorProperty:
		for _, v := range fpaov.values.([]*property.Property) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePropertyRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*property.ParentReference, bool) {
	res, ok := fpaov.values.([]*property.ParentReference)
	return res, ok
}
func (fpaov *CreatePropertyRequest_FieldTerminalPathArrayOfValues) AsPropertyArrayOfValues() ([]*property.Property, bool) {
	res, ok := fpaov.values.([]*property.Property)
	return res, ok
}

type CreatePropertyRequest_FieldSubPathArrayOfValues struct {
	CreatePropertyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePropertyRequest_FieldPathArrayOfValues = (*CreatePropertyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePropertyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePropertyRequest_FieldSubPathArrayOfValues) AsPropertyPathArrayOfValues() (property.Property_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(property.Property_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePropertyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePropertyRequest_FieldPathSelector
	Get(source *UpdatePropertyRequest) []interface{}
	GetSingle(source *UpdatePropertyRequest) (interface{}, bool)
	ClearValue(item *UpdatePropertyRequest)

	// Those methods build corresponding UpdatePropertyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePropertyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePropertyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePropertyRequest_FieldPathArrayItemValue
}

type UpdatePropertyRequest_FieldPathSelector int32

const (
	UpdatePropertyRequest_FieldPathSelectorProperty   UpdatePropertyRequest_FieldPathSelector = 0
	UpdatePropertyRequest_FieldPathSelectorUpdateMask UpdatePropertyRequest_FieldPathSelector = 1
	UpdatePropertyRequest_FieldPathSelectorCas        UpdatePropertyRequest_FieldPathSelector = 2
)

func (s UpdatePropertyRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return "property"
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", s))
	}
}

func BuildUpdatePropertyRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePropertyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePropertyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "property":
			return &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorProperty}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "property":
			if subpath, err := property.BuildProperty_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePropertyRequest_FieldSubPath{selector: UpdatePropertyRequest_FieldPathSelectorProperty, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePropertyRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePropertyRequest_FieldSubPath{selector: UpdatePropertyRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePropertyRequest", fp)
}

func ParseUpdatePropertyRequest_FieldPath(rawField string) (UpdatePropertyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePropertyRequest_FieldPath(fp)
}

func MustParseUpdatePropertyRequest_FieldPath(rawField string) UpdatePropertyRequest_FieldPath {
	fp, err := ParseUpdatePropertyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePropertyRequest_FieldTerminalPath struct {
	selector UpdatePropertyRequest_FieldPathSelector
}

var _ UpdatePropertyRequest_FieldPath = (*UpdatePropertyRequest_FieldTerminalPath)(nil)

func (fp *UpdatePropertyRequest_FieldTerminalPath) Selector() UpdatePropertyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePropertyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePropertyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePropertyRequest
func (fp *UpdatePropertyRequest_FieldTerminalPath) Get(source *UpdatePropertyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePropertyRequest_FieldPathSelectorProperty:
			if source.Property != nil {
				values = append(values, source.Property)
			}
		case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePropertyRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePropertyRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePropertyRequest
func (fp *UpdatePropertyRequest_FieldTerminalPath) GetSingle(source *UpdatePropertyRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		res := source.GetProperty()
		return res, res != nil
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePropertyRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePropertyRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePropertyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return (*property.Property)(nil)
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		return (*property.Property_FieldMask)(nil)
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return (*UpdatePropertyRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) ClearValue(item *UpdatePropertyRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePropertyRequest_FieldPathSelectorProperty:
			item.Property = nil
		case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePropertyRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePropertyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePropertyRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePropertyRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return &UpdatePropertyRequest_FieldTerminalPathValue{UpdatePropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Property)}
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		return &UpdatePropertyRequest_FieldTerminalPathValue{UpdatePropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return &UpdatePropertyRequest_FieldTerminalPathValue{UpdatePropertyRequest_FieldTerminalPath: *fp, value: value.(*UpdatePropertyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePropertyRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePropertyRequest_FieldTerminalPathArrayOfValues{UpdatePropertyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return &UpdatePropertyRequest_FieldTerminalPathArrayOfValues{UpdatePropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Property)}
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		return &UpdatePropertyRequest_FieldTerminalPathArrayOfValues{UpdatePropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return &UpdatePropertyRequest_FieldTerminalPathArrayOfValues{UpdatePropertyRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePropertyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePropertyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePropertyRequest_FieldSubPath struct {
	selector UpdatePropertyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePropertyRequest_FieldPath = (*UpdatePropertyRequest_FieldSubPath)(nil)

func (fps *UpdatePropertyRequest_FieldSubPath) Selector() UpdatePropertyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePropertyRequest_FieldSubPath) AsPropertySubPath() (property.Property_FieldPath, bool) {
	res, ok := fps.subPath.(property.Property_FieldPath)
	return res, ok
}
func (fps *UpdatePropertyRequest_FieldSubPath) AsCasSubPath() (UpdatePropertyRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePropertyRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePropertyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePropertyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePropertyRequest
func (fps *UpdatePropertyRequest_FieldSubPath) Get(source *UpdatePropertyRequest) (values []interface{}) {
	switch fps.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		values = append(values, fps.subPath.GetRaw(source.GetProperty())...)
	case UpdatePropertyRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePropertyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePropertyRequest))
}

// GetSingle returns value of selected field from source UpdatePropertyRequest
func (fps *UpdatePropertyRequest_FieldSubPath) GetSingle(source *UpdatePropertyRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		if source.GetProperty() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProperty())
	case UpdatePropertyRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fps.selector))
	}
}

func (fps *UpdatePropertyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePropertyRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePropertyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePropertyRequest_FieldSubPath) ClearValue(item *UpdatePropertyRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePropertyRequest_FieldPathSelectorProperty:
			fps.subPath.ClearValueRaw(item.Property)
		case UpdatePropertyRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePropertyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePropertyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePropertyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePropertyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithIValue(value interface{}) UpdatePropertyRequest_FieldPathValue {
	return &UpdatePropertyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePropertyRequest_FieldPathArrayOfValues {
	return &UpdatePropertyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePropertyRequest_FieldPathArrayItemValue {
	return &UpdatePropertyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePropertyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePropertyRequest_FieldPathValue allows storing values for UpdatePropertyRequest fields according to their type
type UpdatePropertyRequest_FieldPathValue interface {
	UpdatePropertyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePropertyRequest)
	CompareWith(*UpdatePropertyRequest) (cmp int, comparable bool)
}

func ParseUpdatePropertyRequest_FieldPathValue(pathStr, valueStr string) (UpdatePropertyRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePropertyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePropertyRequest_FieldPathValue), nil
}

func MustParseUpdatePropertyRequest_FieldPathValue(pathStr, valueStr string) UpdatePropertyRequest_FieldPathValue {
	fpv, err := ParseUpdatePropertyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePropertyRequest_FieldTerminalPathValue struct {
	UpdatePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePropertyRequest_FieldPathValue = (*UpdatePropertyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePropertyRequest' as interface{}
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) AsPropertyValue() (*property.Property, bool) {
	res, ok := fpv.value.(*property.Property)
	return res, ok
}
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePropertyRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePropertyRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePropertyRequest
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) SetTo(target **UpdatePropertyRequest) {
	if *target == nil {
		*target = new(UpdatePropertyRequest)
	}
	switch fpv.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		(*target).Property = fpv.value.(*property.Property)
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*property.Property_FieldMask)
	case UpdatePropertyRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePropertyRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePropertyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePropertyRequest_FieldTerminalPathValue' with the value under path in 'UpdatePropertyRequest'.
func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) CompareWith(source *UpdatePropertyRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return 0, false
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePropertyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePropertyRequest))
}

type UpdatePropertyRequest_FieldSubPathValue struct {
	UpdatePropertyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePropertyRequest_FieldPathValue = (*UpdatePropertyRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) AsPropertyPathValue() (property.Property_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(property.Property_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePropertyRequest_FieldSubPathValue) AsCasPathValue() (UpdatePropertyRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePropertyRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) SetTo(target **UpdatePropertyRequest) {
	if *target == nil {
		*target = new(UpdatePropertyRequest)
	}
	switch fpvs.Selector() {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		fpvs.subPathValue.(property.Property_FieldPathValue).SetTo(&(*target).Property)
	case UpdatePropertyRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePropertyRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePropertyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) CompareWith(source *UpdatePropertyRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return fpvs.subPathValue.(property.Property_FieldPathValue).CompareWith(source.GetProperty())
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePropertyRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePropertyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePropertyRequest))
}

// UpdatePropertyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePropertyRequest according to their type
// Present only for array (repeated) types.
type UpdatePropertyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePropertyRequest_FieldPath
	ContainsValue(*UpdatePropertyRequest) bool
}

// ParseUpdatePropertyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePropertyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePropertyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePropertyRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePropertyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePropertyRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePropertyRequest_FieldPathArrayItemValue = (*UpdatePropertyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePropertyRequest as interface{}
func (fpaiv *UpdatePropertyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePropertyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePropertyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePropertyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePropertyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePropertyRequest'
func (fpaiv *UpdatePropertyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePropertyRequest) bool {
	slice := fpaiv.UpdatePropertyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePropertyRequest_FieldSubPathArrayItemValue struct {
	UpdatePropertyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePropertyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePropertyRequest_FieldSubPathArrayItemValue) AsPropertyPathItemValue() (property.Property_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePropertyRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePropertyRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePropertyRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePropertyRequest'
func (fpaivs *UpdatePropertyRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePropertyRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		return fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue).ContainsValue(source.GetProperty())
	case UpdatePropertyRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePropertyRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePropertyRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePropertyRequest fields according to their type
type UpdatePropertyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePropertyRequest_FieldPath
}

func ParseUpdatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePropertyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePropertyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePropertyRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePropertyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePropertyRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePropertyRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePropertyRequest_FieldPathArrayOfValues = (*UpdatePropertyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePropertyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePropertyRequest_FieldPathSelectorProperty:
		for _, v := range fpaov.values.([]*property.Property) {
			values = append(values, v)
		}
	case UpdatePropertyRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	case UpdatePropertyRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePropertyRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePropertyRequest_FieldTerminalPathArrayOfValues) AsPropertyArrayOfValues() ([]*property.Property, bool) {
	res, ok := fpaov.values.([]*property.Property)
	return res, ok
}
func (fpaov *UpdatePropertyRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}
func (fpaov *UpdatePropertyRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePropertyRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePropertyRequest_CAS)
	return res, ok
}

type UpdatePropertyRequest_FieldSubPathArrayOfValues struct {
	UpdatePropertyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePropertyRequest_FieldPathArrayOfValues = (*UpdatePropertyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePropertyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePropertyRequest_FieldSubPathArrayOfValues) AsPropertyPathArrayOfValues() (property.Property_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(property.Property_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePropertyRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePropertyRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePropertyRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePropertyRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePropertyRequestCAS_FieldPathSelector
	Get(source *UpdatePropertyRequest_CAS) []interface{}
	GetSingle(source *UpdatePropertyRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePropertyRequest_CAS)

	// Those methods build corresponding UpdatePropertyRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePropertyRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePropertyRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePropertyRequestCAS_FieldPathArrayItemValue
}

type UpdatePropertyRequestCAS_FieldPathSelector int32

const (
	UpdatePropertyRequestCAS_FieldPathSelectorConditionalState UpdatePropertyRequestCAS_FieldPathSelector = 0
	UpdatePropertyRequestCAS_FieldPathSelectorFieldMask        UpdatePropertyRequestCAS_FieldPathSelector = 1
)

func (s UpdatePropertyRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", s))
	}
}

func BuildUpdatePropertyRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePropertyRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePropertyRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePropertyRequestCAS_FieldTerminalPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePropertyRequestCAS_FieldTerminalPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := property.BuildProperty_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePropertyRequestCAS_FieldSubPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePropertyRequest_CAS", fp)
}

func ParseUpdatePropertyRequestCAS_FieldPath(rawField string) (UpdatePropertyRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePropertyRequestCAS_FieldPath(fp)
}

func MustParseUpdatePropertyRequestCAS_FieldPath(rawField string) UpdatePropertyRequestCAS_FieldPath {
	fp, err := ParseUpdatePropertyRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePropertyRequestCAS_FieldTerminalPath struct {
	selector UpdatePropertyRequestCAS_FieldPathSelector
}

var _ UpdatePropertyRequestCAS_FieldPath = (*UpdatePropertyRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) Selector() UpdatePropertyRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePropertyRequest_CAS
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) Get(source *UpdatePropertyRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePropertyRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePropertyRequest_CAS
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePropertyRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePropertyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return (*property.Property)(nil)
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		return (*property.Property_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePropertyRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePropertyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePropertyRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePropertyRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePropertyRequestCAS_FieldTerminalPathValue{UpdatePropertyRequestCAS_FieldTerminalPath: *fp, value: value.(*property.Property)}
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePropertyRequestCAS_FieldTerminalPathValue{UpdatePropertyRequestCAS_FieldTerminalPath: *fp, value: value.(*property.Property_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePropertyRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues{UpdatePropertyRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues{UpdatePropertyRequestCAS_FieldTerminalPath: *fp, values: values.([]*property.Property)}
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues{UpdatePropertyRequestCAS_FieldTerminalPath: *fp, values: values.([]*property.Property_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePropertyRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePropertyRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePropertyRequestCAS_FieldSubPath struct {
	selector UpdatePropertyRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePropertyRequestCAS_FieldPath = (*UpdatePropertyRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePropertyRequestCAS_FieldSubPath) Selector() UpdatePropertyRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePropertyRequestCAS_FieldSubPath) AsConditionalStateSubPath() (property.Property_FieldPath, bool) {
	res, ok := fps.subPath.(property.Property_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePropertyRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePropertyRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePropertyRequest_CAS
func (fps *UpdatePropertyRequestCAS_FieldSubPath) Get(source *UpdatePropertyRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePropertyRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePropertyRequest_CAS
func (fps *UpdatePropertyRequestCAS_FieldSubPath) GetSingle(source *UpdatePropertyRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePropertyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePropertyRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) ClearValue(item *UpdatePropertyRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePropertyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePropertyRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePropertyRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePropertyRequestCAS_FieldPathValue {
	return &UpdatePropertyRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePropertyRequestCAS_FieldPathArrayOfValues {
	return &UpdatePropertyRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePropertyRequestCAS_FieldPathArrayItemValue {
	return &UpdatePropertyRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePropertyRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePropertyRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePropertyRequestCAS_FieldPathValue interface {
	UpdatePropertyRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePropertyRequest_CAS)
	CompareWith(*UpdatePropertyRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePropertyRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePropertyRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePropertyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePropertyRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePropertyRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePropertyRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePropertyRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePropertyRequestCAS_FieldTerminalPathValue struct {
	UpdatePropertyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePropertyRequestCAS_FieldPathValue = (*UpdatePropertyRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*property.Property, bool) {
	res, ok := fpv.value.(*property.Property)
	return res, ok
}
func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*property.Property_FieldMask, bool) {
	res, ok := fpv.value.(*property.Property_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePropertyRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePropertyRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*property.Property)
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*property.Property_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePropertyRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePropertyRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePropertyRequest_CAS'.
func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePropertyRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePropertyRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePropertyRequest_CAS))
}

type UpdatePropertyRequestCAS_FieldSubPathValue struct {
	UpdatePropertyRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePropertyRequestCAS_FieldPathValue = (*UpdatePropertyRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (property.Property_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(property.Property_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) SetTo(target **UpdatePropertyRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePropertyRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(property.Property_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePropertyRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePropertyRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(property.Property_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePropertyRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePropertyRequest_CAS))
}

// UpdatePropertyRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePropertyRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePropertyRequestCAS_FieldPath
	ContainsValue(*UpdatePropertyRequest_CAS) bool
}

// ParseUpdatePropertyRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePropertyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePropertyRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePropertyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePropertyRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePropertyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePropertyRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePropertyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePropertyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePropertyRequestCAS_FieldPathArrayItemValue = (*UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePropertyRequest_CAS as interface{}
func (fpaiv *UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePropertyRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePropertyRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePropertyRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePropertyRequest_CAS) bool {
	slice := fpaiv.UpdatePropertyRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePropertyRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePropertyRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePropertyRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePropertyRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (property.Property_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePropertyRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePropertyRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(property.Property_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePropertyRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePropertyRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePropertyRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePropertyRequestCAS_FieldPath
}

func ParseUpdatePropertyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePropertyRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePropertyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePropertyRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePropertyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePropertyRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePropertyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePropertyRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePropertyRequestCAS_FieldPathArrayOfValues = (*UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePropertyRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*property.Property) {
			values = append(values, v)
		}
	case UpdatePropertyRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*property.Property_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*property.Property, bool) {
	res, ok := fpaov.values.([]*property.Property)
	return res, ok
}
func (fpaov *UpdatePropertyRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*property.Property_FieldMask, bool) {
	res, ok := fpaov.values.([]*property.Property_FieldMask)
	return res, ok
}

type UpdatePropertyRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePropertyRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePropertyRequestCAS_FieldPathArrayOfValues = (*UpdatePropertyRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePropertyRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePropertyRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (property.Property_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(property.Property_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePropertyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePropertyRequest_FieldPathSelector
	Get(source *DeletePropertyRequest) []interface{}
	GetSingle(source *DeletePropertyRequest) (interface{}, bool)
	ClearValue(item *DeletePropertyRequest)

	// Those methods build corresponding DeletePropertyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePropertyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePropertyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePropertyRequest_FieldPathArrayItemValue
}

type DeletePropertyRequest_FieldPathSelector int32

const (
	DeletePropertyRequest_FieldPathSelectorName DeletePropertyRequest_FieldPathSelector = 0
)

func (s DeletePropertyRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePropertyRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", s))
	}
}

func BuildDeletePropertyRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePropertyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePropertyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePropertyRequest_FieldTerminalPath{selector: DeletePropertyRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePropertyRequest", fp)
}

func ParseDeletePropertyRequest_FieldPath(rawField string) (DeletePropertyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePropertyRequest_FieldPath(fp)
}

func MustParseDeletePropertyRequest_FieldPath(rawField string) DeletePropertyRequest_FieldPath {
	fp, err := ParseDeletePropertyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePropertyRequest_FieldTerminalPath struct {
	selector DeletePropertyRequest_FieldPathSelector
}

var _ DeletePropertyRequest_FieldPath = (*DeletePropertyRequest_FieldTerminalPath)(nil)

func (fp *DeletePropertyRequest_FieldTerminalPath) Selector() DeletePropertyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePropertyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePropertyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePropertyRequest
func (fp *DeletePropertyRequest_FieldTerminalPath) Get(source *DeletePropertyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePropertyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePropertyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePropertyRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePropertyRequest
func (fp *DeletePropertyRequest_FieldTerminalPath) GetSingle(source *DeletePropertyRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
	}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePropertyRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePropertyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		return (*property.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
	}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) ClearValue(item *DeletePropertyRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePropertyRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePropertyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePropertyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePropertyRequest_FieldPathSelectorName
}

func (fp *DeletePropertyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePropertyRequest_FieldPathValue {
	switch fp.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		return &DeletePropertyRequest_FieldTerminalPathValue{DeletePropertyRequest_FieldTerminalPath: *fp, value: value.(*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
	}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePropertyRequest_FieldPathArrayOfValues {
	fpaov := &DeletePropertyRequest_FieldTerminalPathArrayOfValues{DeletePropertyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		return &DeletePropertyRequest_FieldTerminalPathArrayOfValues{DeletePropertyRequest_FieldTerminalPath: *fp, values: values.([]*property.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePropertyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fp.selector))
	}
}

func (fp *DeletePropertyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePropertyRequest_FieldPathValue allows storing values for DeletePropertyRequest fields according to their type
type DeletePropertyRequest_FieldPathValue interface {
	DeletePropertyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePropertyRequest)
	CompareWith(*DeletePropertyRequest) (cmp int, comparable bool)
}

func ParseDeletePropertyRequest_FieldPathValue(pathStr, valueStr string) (DeletePropertyRequest_FieldPathValue, error) {
	fp, err := ParseDeletePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePropertyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePropertyRequest_FieldPathValue), nil
}

func MustParseDeletePropertyRequest_FieldPathValue(pathStr, valueStr string) DeletePropertyRequest_FieldPathValue {
	fpv, err := ParseDeletePropertyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePropertyRequest_FieldTerminalPathValue struct {
	DeletePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePropertyRequest_FieldPathValue = (*DeletePropertyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePropertyRequest' as interface{}
func (fpv *DeletePropertyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePropertyRequest_FieldTerminalPathValue) AsNameValue() (*property.Reference, bool) {
	res, ok := fpv.value.(*property.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePropertyRequest
func (fpv *DeletePropertyRequest_FieldTerminalPathValue) SetTo(target **DeletePropertyRequest) {
	if *target == nil {
		*target = new(DeletePropertyRequest)
	}
	switch fpv.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*property.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePropertyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePropertyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePropertyRequest_FieldTerminalPathValue' with the value under path in 'DeletePropertyRequest'.
func (fpv *DeletePropertyRequest_FieldTerminalPathValue) CompareWith(source *DeletePropertyRequest) (int, bool) {
	switch fpv.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*property.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePropertyRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePropertyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePropertyRequest))
}

// DeletePropertyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePropertyRequest according to their type
// Present only for array (repeated) types.
type DeletePropertyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePropertyRequest_FieldPath
	ContainsValue(*DeletePropertyRequest) bool
}

// ParseDeletePropertyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePropertyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePropertyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePropertyRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePropertyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePropertyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePropertyRequest_FieldTerminalPathArrayItemValue struct {
	DeletePropertyRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePropertyRequest_FieldPathArrayItemValue = (*DeletePropertyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePropertyRequest as interface{}
func (fpaiv *DeletePropertyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePropertyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePropertyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePropertyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePropertyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePropertyRequest'
func (fpaiv *DeletePropertyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePropertyRequest) bool {
	slice := fpaiv.DeletePropertyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePropertyRequest_FieldPathArrayOfValues allows storing slice of values for DeletePropertyRequest fields according to their type
type DeletePropertyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePropertyRequest_FieldPath
}

func ParseDeletePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePropertyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePropertyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePropertyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePropertyRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePropertyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePropertyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePropertyRequest_FieldTerminalPathArrayOfValues struct {
	DeletePropertyRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePropertyRequest_FieldPathArrayOfValues = (*DeletePropertyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePropertyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePropertyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*property.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePropertyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*property.Reference, bool) {
	res, ok := fpaov.values.([]*property.Reference)
	return res, ok
}
