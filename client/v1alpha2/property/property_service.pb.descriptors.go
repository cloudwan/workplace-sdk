// Code generated by protoc-gen-goten-client
// API: PropertyService
// DO NOT EDIT!!!

package property_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	property "github.com/cloudwan/workplace-sdk/resources/v1alpha2/property"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &property.Property{}
)

var (
	descriptorsInitialized       bool
	propertyServiceDescriptor    *PropertyServiceDescriptor
	getPropertyDescriptor        *GetPropertyDescriptor
	batchGetPropertiesDescriptor *BatchGetPropertiesDescriptor
	listPropertiesDescriptor     *ListPropertiesDescriptor
	watchPropertyDescriptor      *WatchPropertyDescriptor
	watchPropertiesDescriptor    *WatchPropertiesDescriptor
	createPropertyDescriptor     *CreatePropertyDescriptor
	updatePropertyDescriptor     *UpdatePropertyDescriptor
	deletePropertyDescriptor     *DeletePropertyDescriptor
)

type GetPropertyDescriptor struct{}

type GetPropertyDescriptorClientMsgHandle struct{}

type GetPropertyDescriptorServerMsgHandle struct{}

func (d *GetPropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPropertyRequest{}
}

func (d *GetPropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *GetPropertyDescriptor) IsUnary() bool {
	return true
}

func (d *GetPropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPropertyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetPropertyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetPropertyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetPropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPropertyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPropertyDescriptor) GetMethodName() string {
	return "GetProperty"
}

func (d *GetPropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/GetProperty"
}

func (d *GetPropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetPropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *GetPropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetPropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetPropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *GetPropertyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *GetPropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPropertyDescriptorClientMsgHandle{}
}

func (d *GetPropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPropertyDescriptorServerMsgHandle{}
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetPropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*property.Name)(nil)
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetPropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetPropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetPropertyDescriptor() *GetPropertyDescriptor {
	return getPropertyDescriptor
}

type BatchGetPropertiesDescriptor struct{}

type BatchGetPropertiesDescriptorClientMsgHandle struct{}

type BatchGetPropertiesDescriptorServerMsgHandle struct{}

func (d *BatchGetPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPropertiesRequest{}
}

func (d *BatchGetPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPropertiesResponse{}
}

func (d *BatchGetPropertiesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPropertiesDescriptor) GetMethodName() string {
	return "BatchGetProperties"
}

func (d *BatchGetPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/BatchGetProperties"
}

func (d *BatchGetPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *BatchGetPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *BatchGetPropertiesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *BatchGetPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPropertiesDescriptorClientMsgHandle{}
}

func (d *BatchGetPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPropertiesDescriptorServerMsgHandle{}
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(property.PropertyNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (property.PropertyNameList)(nil)
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProperties()
	list := make(property.PropertyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPropertiesDescriptor() *BatchGetPropertiesDescriptor {
	return batchGetPropertiesDescriptor
}

type ListPropertiesDescriptor struct{}

type ListPropertiesDescriptorClientMsgHandle struct{}

type ListPropertiesDescriptorServerMsgHandle struct{}

func (d *ListPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPropertiesRequest{}
}

func (d *ListPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPropertiesResponse{}
}

func (d *ListPropertiesDescriptor) IsUnary() bool {
	return true
}

func (d *ListPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPropertiesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPropertiesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListPropertiesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListPropertiesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPropertiesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPropertiesDescriptor) GetMethodName() string {
	return "ListProperties"
}

func (d *ListPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/ListProperties"
}

func (d *ListPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *ListPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *ListPropertiesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *ListPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPropertiesDescriptorClientMsgHandle{}
}

func (d *ListPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPropertiesDescriptorServerMsgHandle{}
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProperties()
	list := make(property.PropertyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListPropertiesDescriptor() *ListPropertiesDescriptor {
	return listPropertiesDescriptor
}

type WatchPropertyDescriptor struct{}

type WatchPropertyDescriptorClientMsgHandle struct{}

type WatchPropertyDescriptorServerMsgHandle struct{}

func (d *WatchPropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPropertyRequest{}
}

func (d *WatchPropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPropertyResponse{}
}

func (d *WatchPropertyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPropertyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchPropertyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchPropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPropertyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPropertyDescriptor) GetMethodName() string {
	return "WatchProperty"
}

func (d *WatchPropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/WatchProperty"
}

func (d *WatchPropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchPropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *WatchPropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchPropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *WatchPropertyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *WatchPropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertyDescriptorClientMsgHandle{}
}

func (d *WatchPropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertyDescriptorServerMsgHandle{}
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*property.Name)(nil)
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPropertyResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *property.PropertyChange_Added_:
			return tResChange.Added.GetProperty().GetName()
		case *property.PropertyChange_Modified_:
			return tResChange.Modified.GetName()
		case *property.PropertyChange_Removed_:
			return tResChange.Removed.GetName()
		case *property.PropertyChange_Current_:
			return tResChange.Current.GetProperty().GetName()
		}
	}
	return (*property.Name)(nil)
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPropertyResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPropertyResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPropertyDescriptor() *WatchPropertyDescriptor {
	return watchPropertyDescriptor
}

type WatchPropertiesDescriptor struct{}

type WatchPropertiesDescriptorClientMsgHandle struct{}

type WatchPropertiesDescriptorServerMsgHandle struct{}

func (d *WatchPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPropertiesRequest{}
}

func (d *WatchPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPropertiesResponse{}
}

func (d *WatchPropertiesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPropertiesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPropertiesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchPropertiesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchPropertiesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPropertiesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPropertiesDescriptor) GetMethodName() string {
	return "WatchProperties"
}

func (d *WatchPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/WatchProperties"
}

func (d *WatchPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *WatchPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *WatchPropertiesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *WatchPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertiesDescriptorClientMsgHandle{}
}

func (d *WatchPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertiesDescriptorServerMsgHandle{}
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*property.ParentName)(nil)
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetPropertyChanges()
	list := make(property.PropertyNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *property.PropertyChange_Added_:
			list = append(list, tResChange.Added.GetProperty().GetName())
		case *property.PropertyChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *property.PropertyChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *property.PropertyChange_Current_:
			list = append(list, tResChange.Current.GetProperty().GetName())
		}
	}
	return list
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPropertiesDescriptor() *WatchPropertiesDescriptor {
	return watchPropertiesDescriptor
}

type CreatePropertyDescriptor struct{}

type CreatePropertyDescriptorClientMsgHandle struct{}

type CreatePropertyDescriptorServerMsgHandle struct{}

func (d *CreatePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePropertyRequest{}
}

func (d *CreatePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *CreatePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePropertyDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreatePropertyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreatePropertyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreatePropertyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePropertyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePropertyDescriptor) GetMethodName() string {
	return "CreateProperty"
}

func (d *CreatePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/CreateProperty"
}

func (d *CreatePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreatePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *CreatePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreatePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreatePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *CreatePropertyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *CreatePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePropertyDescriptorClientMsgHandle{}
}

func (d *CreatePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePropertyDescriptorServerMsgHandle{}
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreatePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProperty().GetName()
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreatePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreatePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*property.ParentName)(nil)
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePropertyDescriptor() *CreatePropertyDescriptor {
	return createPropertyDescriptor
}

type UpdatePropertyDescriptor struct{}

type UpdatePropertyDescriptorClientMsgHandle struct{}

type UpdatePropertyDescriptorServerMsgHandle struct{}

func (d *UpdatePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePropertyRequest{}
}

func (d *UpdatePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *UpdatePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdatePropertyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdatePropertyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePropertyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePropertyDescriptor) GetMethodName() string {
	return "UpdateProperty"
}

func (d *UpdatePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/UpdateProperty"
}

func (d *UpdatePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdatePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *UpdatePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdatePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdatePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *UpdatePropertyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *UpdatePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePropertyDescriptorClientMsgHandle{}
}

func (d *UpdatePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePropertyDescriptorServerMsgHandle{}
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdatePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProperty().GetName()
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdatePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdatePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdatePropertyDescriptor() *UpdatePropertyDescriptor {
	return updatePropertyDescriptor
}

type DeletePropertyDescriptor struct{}

type DeletePropertyDescriptorClientMsgHandle struct{}

type DeletePropertyDescriptorServerMsgHandle struct{}

func (d *DeletePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePropertyRequest{}
}

func (d *DeletePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeletePropertyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeletePropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePropertyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePropertyDescriptor) GetMethodName() string {
	return "DeleteProperty"
}

func (d *DeletePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/DeleteProperty"
}

func (d *DeletePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeletePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *DeletePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeletePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeletePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *DeletePropertyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *DeletePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePropertyDescriptorClientMsgHandle{}
}

func (d *DeletePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePropertyDescriptorServerMsgHandle{}
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeletePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*property.Name)(nil)
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeletePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeletePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *property.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *property.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePropertyDescriptor() *DeletePropertyDescriptor {
	return deletePropertyDescriptor
}

type PropertyServiceDescriptor struct{}

func (d *PropertyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPropertyDescriptor,
		batchGetPropertiesDescriptor,
		listPropertiesDescriptor,
		watchPropertyDescriptor,
		watchPropertiesDescriptor,
		createPropertyDescriptor,
		updatePropertyDescriptor,
		deletePropertyDescriptor,
	}
}

func (d *PropertyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.PropertyService"
}

func (d *PropertyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *PropertyServiceDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *PropertyServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *PropertyServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetPropertyServiceDescriptor() *PropertyServiceDescriptor {
	return propertyServiceDescriptor
}

func initDescriptors() {
	propertyServiceDescriptor = &PropertyServiceDescriptor{}
	getPropertyDescriptor = &GetPropertyDescriptor{}
	batchGetPropertiesDescriptor = &BatchGetPropertiesDescriptor{}
	listPropertiesDescriptor = &ListPropertiesDescriptor{}
	watchPropertyDescriptor = &WatchPropertyDescriptor{}
	watchPropertiesDescriptor = &WatchPropertiesDescriptor{}
	createPropertyDescriptor = &CreatePropertyDescriptor{}
	updatePropertyDescriptor = &UpdatePropertyDescriptor{}
	deletePropertyDescriptor = &DeletePropertyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(propertyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePropertyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
