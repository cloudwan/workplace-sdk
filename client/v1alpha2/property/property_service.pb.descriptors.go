// Code generated by protoc-gen-goten-client
// API: PropertyService
// DO NOT EDIT!!!

package property_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	property "github.com/cloudwan/workplace-sdk/resources/v1alpha2/property"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &property.Property{}
)

var (
	descriptorsInitialized       bool
	propertyServiceDescriptor    *PropertyServiceDescriptor
	getPropertyDescriptor        *GetPropertyDescriptor
	batchGetPropertiesDescriptor *BatchGetPropertiesDescriptor
	listPropertiesDescriptor     *ListPropertiesDescriptor
	watchPropertyDescriptor      *WatchPropertyDescriptor
	watchPropertiesDescriptor    *WatchPropertiesDescriptor
	createPropertyDescriptor     *CreatePropertyDescriptor
	updatePropertyDescriptor     *UpdatePropertyDescriptor
	deletePropertyDescriptor     *DeletePropertyDescriptor
)

type GetPropertyDescriptor struct{}

type GetPropertyDescriptorClientMsgHandle struct{}

type GetPropertyDescriptorServerMsgHandle struct{}

func (d *GetPropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPropertyRequest{}
}

func (d *GetPropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *GetPropertyDescriptor) IsUnary() bool {
	return true
}

func (d *GetPropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPropertyDescriptor) IsCollection() bool {
	return false
}

func (d *GetPropertyDescriptor) IsPlural() bool {
	return false
}

func (d *GetPropertyDescriptor) HasResource() bool {
	return true
}

func (d *GetPropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPropertyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPropertyDescriptor) GetMethodName() string {
	return "GetProperty"
}

func (d *GetPropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/GetProperty"
}

func (d *GetPropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetPropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *GetPropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetPropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetPropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *GetPropertyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *GetPropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPropertyDescriptorClientMsgHandle{}
}

func (d *GetPropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPropertyDescriptorServerMsgHandle{}
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*property.Name)(nil)
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPropertyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*property.Name)(nil)
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPropertyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetPropertyDescriptor() *GetPropertyDescriptor {
	return getPropertyDescriptor
}

type BatchGetPropertiesDescriptor struct{}

type BatchGetPropertiesDescriptorClientMsgHandle struct{}

type BatchGetPropertiesDescriptorServerMsgHandle struct{}

func (d *BatchGetPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPropertiesRequest{}
}

func (d *BatchGetPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPropertiesResponse{}
}

func (d *BatchGetPropertiesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPropertiesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPropertiesDescriptor) GetMethodName() string {
	return "BatchGetProperties"
}

func (d *BatchGetPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/BatchGetProperties"
}

func (d *BatchGetPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *BatchGetPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *BatchGetPropertiesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *BatchGetPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPropertiesDescriptorClientMsgHandle{}
}

func (d *BatchGetPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPropertiesDescriptorServerMsgHandle{}
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(property.PropertyNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (property.PropertyNameList)(nil)
}

func (h *BatchGetPropertiesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProperties(); len(resources) > 0 {
			list := make(property.PropertyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (property.PropertyNameList)(nil)
}

func (h *BatchGetPropertiesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPropertiesDescriptor() *BatchGetPropertiesDescriptor {
	return batchGetPropertiesDescriptor
}

type ListPropertiesDescriptor struct{}

type ListPropertiesDescriptorClientMsgHandle struct{}

type ListPropertiesDescriptorServerMsgHandle struct{}

func (d *ListPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPropertiesRequest{}
}

func (d *ListPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPropertiesResponse{}
}

func (d *ListPropertiesDescriptor) IsUnary() bool {
	return true
}

func (d *ListPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPropertiesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPropertiesDescriptor) IsCollection() bool {
	return true
}

func (d *ListPropertiesDescriptor) IsPlural() bool {
	return true
}

func (d *ListPropertiesDescriptor) HasResource() bool {
	return true
}

func (d *ListPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPropertiesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPropertiesDescriptor) GetMethodName() string {
	return "ListProperties"
}

func (d *ListPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/ListProperties"
}

func (d *ListPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *ListPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *ListPropertiesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *ListPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPropertiesDescriptorClientMsgHandle{}
}

func (d *ListPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPropertiesDescriptorServerMsgHandle{}
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPropertiesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*property.ParentName)(nil)
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProperties(); len(resources) > 0 {
			list := make(property.PropertyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (property.PropertyNameList)(nil)
}

func (h *ListPropertiesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListPropertiesDescriptor() *ListPropertiesDescriptor {
	return listPropertiesDescriptor
}

type WatchPropertyDescriptor struct{}

type WatchPropertyDescriptorClientMsgHandle struct{}

type WatchPropertyDescriptorServerMsgHandle struct{}

func (d *WatchPropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPropertyRequest{}
}

func (d *WatchPropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPropertyResponse{}
}

func (d *WatchPropertyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPropertyDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPropertyDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPropertyDescriptor) HasResource() bool {
	return true
}

func (d *WatchPropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPropertyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPropertyDescriptor) GetMethodName() string {
	return "WatchProperty"
}

func (d *WatchPropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/WatchProperty"
}

func (d *WatchPropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchPropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *WatchPropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchPropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *WatchPropertyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *WatchPropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertyDescriptorClientMsgHandle{}
}

func (d *WatchPropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertyDescriptorServerMsgHandle{}
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*property.Name)(nil)
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPropertyResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *property.PropertyChange_Added_:
				return tResChange.Added.GetProperty().GetName()
			case *property.PropertyChange_Modified_:
				return tResChange.Modified.GetName()
			case *property.PropertyChange_Removed_:
				return tResChange.Removed.GetName()
			case *property.PropertyChange_Current_:
				return tResChange.Current.GetProperty().GetName()
			}
		}
	}
	return (*property.Name)(nil)
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPropertyResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPropertyResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPropertyDescriptor() *WatchPropertyDescriptor {
	return watchPropertyDescriptor
}

type WatchPropertiesDescriptor struct{}

type WatchPropertiesDescriptorClientMsgHandle struct{}

type WatchPropertiesDescriptorServerMsgHandle struct{}

func (d *WatchPropertiesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPropertiesRequest{}
}

func (d *WatchPropertiesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPropertiesResponse{}
}

func (d *WatchPropertiesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPropertiesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPropertiesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPropertiesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPropertiesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPropertiesDescriptor) HasResource() bool {
	return true
}

func (d *WatchPropertiesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPropertiesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPropertiesDescriptor) GetMethodName() string {
	return "WatchProperties"
}

func (d *WatchPropertiesDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/WatchProperties"
}

func (d *WatchPropertiesDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchPropertiesDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *WatchPropertiesDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchPropertiesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPropertiesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *WatchPropertiesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *WatchPropertiesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertiesDescriptorClientMsgHandle{}
}

func (d *WatchPropertiesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPropertiesDescriptorServerMsgHandle{}
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPropertiesRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPropertiesRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPropertiesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPropertiesRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*property.ParentName)(nil)
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPropertiesResponse) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPropertiesResponse) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPropertyChanges(); len(resChanges) > 0 {
			list := make(property.PropertyNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *property.PropertyChange_Added_:
					list = append(list, tResChange.Added.GetProperty().GetName())
				case *property.PropertyChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *property.PropertyChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *property.PropertyChange_Current_:
					list = append(list, tResChange.Current.GetProperty().GetName())
				}
			}
			return list
		}
	}
	return (property.PropertyNameList)(nil)
}

func (h *WatchPropertiesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPropertiesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPropertiesResponse) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPropertiesDescriptor() *WatchPropertiesDescriptor {
	return watchPropertiesDescriptor
}

type CreatePropertyDescriptor struct{}

type CreatePropertyDescriptorClientMsgHandle struct{}

type CreatePropertyDescriptorServerMsgHandle struct{}

func (d *CreatePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePropertyRequest{}
}

func (d *CreatePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *CreatePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePropertyDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePropertyDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePropertyDescriptor) HasResource() bool {
	return true
}

func (d *CreatePropertyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePropertyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePropertyDescriptor) GetMethodName() string {
	return "CreateProperty"
}

func (d *CreatePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/CreateProperty"
}

func (d *CreatePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreatePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *CreatePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreatePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreatePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *CreatePropertyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *CreatePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePropertyDescriptorClientMsgHandle{}
}

func (d *CreatePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePropertyDescriptorServerMsgHandle{}
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProperty()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*property.Name)(nil)
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePropertyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*property.ParentName)(nil)
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*property.Name)(nil)
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePropertyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePropertyDescriptor() *CreatePropertyDescriptor {
	return createPropertyDescriptor
}

type UpdatePropertyDescriptor struct{}

type UpdatePropertyDescriptorClientMsgHandle struct{}

type UpdatePropertyDescriptorServerMsgHandle struct{}

func (d *UpdatePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePropertyRequest{}
}

func (d *UpdatePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &property.Property{}
}

func (d *UpdatePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePropertyDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePropertyDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePropertyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePropertyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePropertyDescriptor) GetMethodName() string {
	return "UpdateProperty"
}

func (d *UpdatePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/UpdateProperty"
}

func (d *UpdatePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdatePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *UpdatePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdatePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdatePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *UpdatePropertyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *UpdatePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePropertyDescriptorClientMsgHandle{}
}

func (d *UpdatePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePropertyDescriptorServerMsgHandle{}
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProperty()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*property.Name)(nil)
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePropertyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*property.Property) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*property.Name)(nil)
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*property.Property) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePropertyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*property.Property)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*property.Property) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdatePropertyDescriptor() *UpdatePropertyDescriptor {
	return updatePropertyDescriptor
}

type DeletePropertyDescriptor struct{}

type DeletePropertyDescriptorClientMsgHandle struct{}

type DeletePropertyDescriptorServerMsgHandle struct{}

func (d *DeletePropertyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePropertyRequest{}
}

func (d *DeletePropertyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePropertyDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePropertyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePropertyDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePropertyDescriptor) HasResource() bool {
	return true
}

func (d *DeletePropertyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePropertyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePropertyDescriptor) GetMethodName() string {
	return "DeleteProperty"
}

func (d *DeletePropertyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.PropertyService/DeleteProperty"
}

func (d *DeletePropertyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeletePropertyDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *DeletePropertyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeletePropertyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeletePropertyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return propertyServiceDescriptor
}

func (d *DeletePropertyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return property.GetDescriptor()
}

func (d *DeletePropertyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePropertyDescriptorClientMsgHandle{}
}

func (d *DeletePropertyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePropertyDescriptorServerMsgHandle{}
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePropertyRequest) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*property.Name)(nil)
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePropertyRequest) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePropertyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePropertyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePropertyRequest) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *property.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*property.Name
	})
	if ok {
		return property.PropertyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePropertyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *property.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePropertyDescriptor() *DeletePropertyDescriptor {
	return deletePropertyDescriptor
}

type PropertyServiceDescriptor struct{}

func (d *PropertyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPropertyDescriptor,
		batchGetPropertiesDescriptor,
		listPropertiesDescriptor,
		watchPropertyDescriptor,
		watchPropertiesDescriptor,
		createPropertyDescriptor,
		updatePropertyDescriptor,
		deletePropertyDescriptor,
	}
}

func (d *PropertyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.PropertyService"
}

func (d *PropertyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *PropertyServiceDescriptor) GetApiName() string {
	return "PropertyService"
}

func (d *PropertyServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *PropertyServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetPropertyServiceDescriptor() *PropertyServiceDescriptor {
	return propertyServiceDescriptor
}

func initDescriptors() {
	propertyServiceDescriptor = &PropertyServiceDescriptor{}
	getPropertyDescriptor = &GetPropertyDescriptor{}
	batchGetPropertiesDescriptor = &BatchGetPropertiesDescriptor{}
	listPropertiesDescriptor = &ListPropertiesDescriptor{}
	watchPropertyDescriptor = &WatchPropertyDescriptor{}
	watchPropertiesDescriptor = &WatchPropertiesDescriptor{}
	createPropertyDescriptor = &CreatePropertyDescriptor{}
	updatePropertyDescriptor = &UpdatePropertyDescriptor{}
	deletePropertyDescriptor = &DeletePropertyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(propertyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPropertiesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePropertyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePropertyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
