// Code generated by protoc-gen-goten-client
// API: FloorService
// DO NOT EDIT!!!

package floor_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &floor.Floor{}
)

var (
	descriptorsInitialized   bool
	floorServiceDescriptor   *FloorServiceDescriptor
	getFloorDescriptor       *GetFloorDescriptor
	batchGetFloorsDescriptor *BatchGetFloorsDescriptor
	listFloorsDescriptor     *ListFloorsDescriptor
	watchFloorDescriptor     *WatchFloorDescriptor
	watchFloorsDescriptor    *WatchFloorsDescriptor
	createFloorDescriptor    *CreateFloorDescriptor
	updateFloorDescriptor    *UpdateFloorDescriptor
	deleteFloorDescriptor    *DeleteFloorDescriptor
)

type GetFloorDescriptor struct{}

type GetFloorDescriptorClientMsgHandle struct{}

type GetFloorDescriptorServerMsgHandle struct{}

func (d *GetFloorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetFloorRequest{}
}

func (d *GetFloorDescriptor) NewEmptyServerMsg() proto.Message {
	return &floor.Floor{}
}

func (d *GetFloorDescriptor) IsUnary() bool {
	return true
}

func (d *GetFloorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetFloorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetFloorDescriptor) IsCollection() bool {
	return false
}

func (d *GetFloorDescriptor) IsPlural() bool {
	return false
}

func (d *GetFloorDescriptor) HasResource() bool {
	return true
}

func (d *GetFloorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetFloorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetFloorDescriptor) GetMethodName() string {
	return "GetFloor"
}

func (d *GetFloorDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/GetFloor"
}

func (d *GetFloorDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetFloorDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *GetFloorDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetFloorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetFloorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *GetFloorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *GetFloorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetFloorDescriptorClientMsgHandle{}
}

func (d *GetFloorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetFloorDescriptorServerMsgHandle{}
}

func (h *GetFloorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetFloorRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*floor.Name)(nil)
}

func (h *GetFloorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetFloorRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetFloorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetFloorRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetFloorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*floor.Floor) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*floor.Name)(nil)
}

func (h *GetFloorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*floor.Floor) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetFloorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*floor.Floor) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetFloorDescriptor() *GetFloorDescriptor {
	return getFloorDescriptor
}

type BatchGetFloorsDescriptor struct{}

type BatchGetFloorsDescriptorClientMsgHandle struct{}

type BatchGetFloorsDescriptorServerMsgHandle struct{}

func (d *BatchGetFloorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetFloorsRequest{}
}

func (d *BatchGetFloorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetFloorsResponse{}
}

func (d *BatchGetFloorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetFloorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetFloorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetFloorsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetFloorsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetFloorsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetFloorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetFloorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetFloorsDescriptor) GetMethodName() string {
	return "BatchGetFloors"
}

func (d *BatchGetFloorsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/BatchGetFloors"
}

func (d *BatchGetFloorsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetFloorsDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *BatchGetFloorsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetFloorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetFloorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *BatchGetFloorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *BatchGetFloorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetFloorsDescriptorClientMsgHandle{}
}

func (d *BatchGetFloorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetFloorsDescriptorServerMsgHandle{}
}

func (h *BatchGetFloorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetFloorsRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetFloorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetFloorsRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(floor.FloorNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (floor.FloorNameList)(nil)
}

func (h *BatchGetFloorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetFloorsRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetFloorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetFloorsResponse) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetFloorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetFloorsResponse) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetFloors(); len(resources) > 0 {
			list := make(floor.FloorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (floor.FloorNameList)(nil)
}

func (h *BatchGetFloorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetFloorsResponse) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetFloorsDescriptor() *BatchGetFloorsDescriptor {
	return batchGetFloorsDescriptor
}

type ListFloorsDescriptor struct{}

type ListFloorsDescriptorClientMsgHandle struct{}

type ListFloorsDescriptorServerMsgHandle struct{}

func (d *ListFloorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListFloorsRequest{}
}

func (d *ListFloorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListFloorsResponse{}
}

func (d *ListFloorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListFloorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListFloorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListFloorsDescriptor) IsCollection() bool {
	return true
}

func (d *ListFloorsDescriptor) IsPlural() bool {
	return true
}

func (d *ListFloorsDescriptor) HasResource() bool {
	return true
}

func (d *ListFloorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListFloorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListFloorsDescriptor) GetMethodName() string {
	return "ListFloors"
}

func (d *ListFloorsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/ListFloors"
}

func (d *ListFloorsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListFloorsDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *ListFloorsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListFloorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListFloorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *ListFloorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *ListFloorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListFloorsDescriptorClientMsgHandle{}
}

func (d *ListFloorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListFloorsDescriptorServerMsgHandle{}
}

func (h *ListFloorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListFloorsRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListFloorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListFloorsRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListFloorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListFloorsRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*floor.ParentName)(nil)
}

func (h *ListFloorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListFloorsResponse) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListFloorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListFloorsResponse) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetFloors(); len(resources) > 0 {
			list := make(floor.FloorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (floor.FloorNameList)(nil)
}

func (h *ListFloorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListFloorsResponse) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListFloorsDescriptor() *ListFloorsDescriptor {
	return listFloorsDescriptor
}

type WatchFloorDescriptor struct{}

type WatchFloorDescriptorClientMsgHandle struct{}

type WatchFloorDescriptorServerMsgHandle struct{}

func (d *WatchFloorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchFloorRequest{}
}

func (d *WatchFloorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchFloorResponse{}
}

func (d *WatchFloorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchFloorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchFloorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchFloorDescriptor) IsCollection() bool {
	return false
}

func (d *WatchFloorDescriptor) IsPlural() bool {
	return false
}

func (d *WatchFloorDescriptor) HasResource() bool {
	return true
}

func (d *WatchFloorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchFloorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchFloorDescriptor) GetMethodName() string {
	return "WatchFloor"
}

func (d *WatchFloorDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/WatchFloor"
}

func (d *WatchFloorDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchFloorDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *WatchFloorDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchFloorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchFloorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *WatchFloorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *WatchFloorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchFloorDescriptorClientMsgHandle{}
}

func (d *WatchFloorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchFloorDescriptorServerMsgHandle{}
}

func (h *WatchFloorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchFloorRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*floor.Name)(nil)
}

func (h *WatchFloorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchFloorRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchFloorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchFloorRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchFloorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchFloorResponse) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *floor.FloorChange_Added_:
				return tResChange.Added.GetFloor().GetName()
			case *floor.FloorChange_Modified_:
				return tResChange.Modified.GetName()
			case *floor.FloorChange_Removed_:
				return tResChange.Removed.GetName()
			case *floor.FloorChange_Current_:
				return tResChange.Current.GetFloor().GetName()
			}
		}
	}
	return (*floor.Name)(nil)
}

func (h *WatchFloorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchFloorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchFloorResponse) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchFloorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchFloorResponse) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchFloorDescriptor() *WatchFloorDescriptor {
	return watchFloorDescriptor
}

type WatchFloorsDescriptor struct{}

type WatchFloorsDescriptorClientMsgHandle struct{}

type WatchFloorsDescriptorServerMsgHandle struct{}

func (d *WatchFloorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchFloorsRequest{}
}

func (d *WatchFloorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchFloorsResponse{}
}

func (d *WatchFloorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchFloorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchFloorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchFloorsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchFloorsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchFloorsDescriptor) HasResource() bool {
	return true
}

func (d *WatchFloorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchFloorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchFloorsDescriptor) GetMethodName() string {
	return "WatchFloors"
}

func (d *WatchFloorsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/WatchFloors"
}

func (d *WatchFloorsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchFloorsDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *WatchFloorsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchFloorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchFloorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *WatchFloorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *WatchFloorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchFloorsDescriptorClientMsgHandle{}
}

func (d *WatchFloorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchFloorsDescriptorServerMsgHandle{}
}

func (h *WatchFloorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchFloorsRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchFloorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchFloorsRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchFloorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchFloorsRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*floor.ParentName)(nil)
}

func (h *WatchFloorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchFloorsResponse) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchFloorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchFloorsResponse) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetFloorChanges(); len(resChanges) > 0 {
			list := make(floor.FloorNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *floor.FloorChange_Added_:
					list = append(list, tResChange.Added.GetFloor().GetName())
				case *floor.FloorChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *floor.FloorChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *floor.FloorChange_Current_:
					list = append(list, tResChange.Current.GetFloor().GetName())
				}
			}
			return list
		}
	}
	return (floor.FloorNameList)(nil)
}

func (h *WatchFloorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchFloorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchFloorsResponse) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchFloorsDescriptor() *WatchFloorsDescriptor {
	return watchFloorsDescriptor
}

type CreateFloorDescriptor struct{}

type CreateFloorDescriptorClientMsgHandle struct{}

type CreateFloorDescriptorServerMsgHandle struct{}

func (d *CreateFloorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateFloorRequest{}
}

func (d *CreateFloorDescriptor) NewEmptyServerMsg() proto.Message {
	return &floor.Floor{}
}

func (d *CreateFloorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateFloorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateFloorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateFloorDescriptor) IsCollection() bool {
	return true
}

func (d *CreateFloorDescriptor) IsPlural() bool {
	return false
}

func (d *CreateFloorDescriptor) HasResource() bool {
	return true
}

func (d *CreateFloorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateFloorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateFloorDescriptor) GetMethodName() string {
	return "CreateFloor"
}

func (d *CreateFloorDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/CreateFloor"
}

func (d *CreateFloorDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateFloorDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *CreateFloorDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateFloorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateFloorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *CreateFloorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *CreateFloorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateFloorDescriptorClientMsgHandle{}
}

func (d *CreateFloorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateFloorDescriptorServerMsgHandle{}
}

func (h *CreateFloorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateFloorRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetFloor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*floor.Name)(nil)
}

func (h *CreateFloorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateFloorRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateFloorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateFloorRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*floor.ParentName)(nil)
}

func (h *CreateFloorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*floor.Floor) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*floor.Name)(nil)
}

func (h *CreateFloorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*floor.Floor) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateFloorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*floor.Floor) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateFloorDescriptor() *CreateFloorDescriptor {
	return createFloorDescriptor
}

type UpdateFloorDescriptor struct{}

type UpdateFloorDescriptorClientMsgHandle struct{}

type UpdateFloorDescriptorServerMsgHandle struct{}

func (d *UpdateFloorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateFloorRequest{}
}

func (d *UpdateFloorDescriptor) NewEmptyServerMsg() proto.Message {
	return &floor.Floor{}
}

func (d *UpdateFloorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateFloorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateFloorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateFloorDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateFloorDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateFloorDescriptor) HasResource() bool {
	return true
}

func (d *UpdateFloorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateFloorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateFloorDescriptor) GetMethodName() string {
	return "UpdateFloor"
}

func (d *UpdateFloorDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/UpdateFloor"
}

func (d *UpdateFloorDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateFloorDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *UpdateFloorDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateFloorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateFloorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *UpdateFloorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *UpdateFloorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateFloorDescriptorClientMsgHandle{}
}

func (d *UpdateFloorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateFloorDescriptorServerMsgHandle{}
}

func (h *UpdateFloorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateFloorRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetFloor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*floor.Name)(nil)
}

func (h *UpdateFloorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateFloorRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateFloorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateFloorRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateFloorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*floor.Floor) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*floor.Name)(nil)
}

func (h *UpdateFloorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*floor.Floor) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateFloorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*floor.Floor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*floor.Floor) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateFloorDescriptor() *UpdateFloorDescriptor {
	return updateFloorDescriptor
}

type DeleteFloorDescriptor struct{}

type DeleteFloorDescriptorClientMsgHandle struct{}

type DeleteFloorDescriptorServerMsgHandle struct{}

func (d *DeleteFloorDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteFloorRequest{}
}

func (d *DeleteFloorDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteFloorDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteFloorDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteFloorDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteFloorDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteFloorDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteFloorDescriptor) HasResource() bool {
	return true
}

func (d *DeleteFloorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteFloorDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteFloorDescriptor) GetMethodName() string {
	return "DeleteFloor"
}

func (d *DeleteFloorDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.FloorService/DeleteFloor"
}

func (d *DeleteFloorDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteFloorDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *DeleteFloorDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteFloorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteFloorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return floorServiceDescriptor
}

func (d *DeleteFloorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return floor.GetDescriptor()
}

func (d *DeleteFloorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteFloorDescriptorClientMsgHandle{}
}

func (d *DeleteFloorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteFloorDescriptorServerMsgHandle{}
}

func (h *DeleteFloorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteFloorRequest) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*floor.Name)(nil)
}

func (h *DeleteFloorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteFloorRequest) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteFloorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteFloorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteFloorRequest) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteFloorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *floor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteFloorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*floor.Name
	})
	if ok {
		return floor.FloorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteFloorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *floor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteFloorDescriptor() *DeleteFloorDescriptor {
	return deleteFloorDescriptor
}

type FloorServiceDescriptor struct{}

func (d *FloorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getFloorDescriptor,
		batchGetFloorsDescriptor,
		listFloorsDescriptor,
		watchFloorDescriptor,
		watchFloorsDescriptor,
		createFloorDescriptor,
		updateFloorDescriptor,
		deleteFloorDescriptor,
	}
}

func (d *FloorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.FloorService"
}

func (d *FloorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *FloorServiceDescriptor) GetApiName() string {
	return "FloorService"
}

func (d *FloorServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *FloorServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetFloorServiceDescriptor() *FloorServiceDescriptor {
	return floorServiceDescriptor
}

func initDescriptors() {
	floorServiceDescriptor = &FloorServiceDescriptor{}
	getFloorDescriptor = &GetFloorDescriptor{}
	batchGetFloorsDescriptor = &BatchGetFloorsDescriptor{}
	listFloorsDescriptor = &ListFloorsDescriptor{}
	watchFloorDescriptor = &WatchFloorDescriptor{}
	watchFloorsDescriptor = &WatchFloorsDescriptor{}
	createFloorDescriptor = &CreateFloorDescriptor{}
	updateFloorDescriptor = &UpdateFloorDescriptor{}
	deleteFloorDescriptor = &DeleteFloorDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(floorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getFloorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetFloorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listFloorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchFloorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchFloorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createFloorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateFloorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteFloorDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
