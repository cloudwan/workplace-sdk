// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/floor_service.proto
// DO NOT EDIT!!!

package floor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &building.Building{}
	_ = &floor.Floor{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetFloorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetFloorRequest_FieldPathSelector
	Get(source *GetFloorRequest) []interface{}
	GetSingle(source *GetFloorRequest) (interface{}, bool)
	ClearValue(item *GetFloorRequest)

	// Those methods build corresponding GetFloorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetFloorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetFloorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetFloorRequest_FieldPathArrayItemValue
}

type GetFloorRequest_FieldPathSelector int32

const (
	GetFloorRequest_FieldPathSelectorName      GetFloorRequest_FieldPathSelector = 0
	GetFloorRequest_FieldPathSelectorFieldMask GetFloorRequest_FieldPathSelector = 1
	GetFloorRequest_FieldPathSelectorView      GetFloorRequest_FieldPathSelector = 2
)

func (s GetFloorRequest_FieldPathSelector) String() string {
	switch s {
	case GetFloorRequest_FieldPathSelectorName:
		return "name"
	case GetFloorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetFloorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", s))
	}
}

func BuildGetFloorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetFloorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetFloorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetFloorRequest", fp)
}

func ParseGetFloorRequest_FieldPath(rawField string) (GetFloorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetFloorRequest_FieldPath(fp)
}

func MustParseGetFloorRequest_FieldPath(rawField string) GetFloorRequest_FieldPath {
	fp, err := ParseGetFloorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetFloorRequest_FieldTerminalPath struct {
	selector GetFloorRequest_FieldPathSelector
}

var _ GetFloorRequest_FieldPath = (*GetFloorRequest_FieldTerminalPath)(nil)

func (fp *GetFloorRequest_FieldTerminalPath) Selector() GetFloorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetFloorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetFloorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetFloorRequest
func (fp *GetFloorRequest_FieldTerminalPath) Get(source *GetFloorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetFloorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetFloorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetFloorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetFloorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetFloorRequest))
}

// GetSingle returns value pointed by specific field of from source GetFloorRequest
func (fp *GetFloorRequest_FieldTerminalPath) GetSingle(source *GetFloorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetFloorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetFloorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetFloorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
	}
}

func (fp *GetFloorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetFloorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetFloorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetFloorRequest_FieldPathSelectorName:
		return (*floor.Reference)(nil)
	case GetFloorRequest_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	case GetFloorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
	}
}

func (fp *GetFloorRequest_FieldTerminalPath) ClearValue(item *GetFloorRequest) {
	if item != nil {
		switch fp.selector {
		case GetFloorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetFloorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetFloorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetFloorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetFloorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetFloorRequest_FieldPathSelectorName ||
		fp.selector == GetFloorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetFloorRequest_FieldPathSelectorView
}

func (fp *GetFloorRequest_FieldTerminalPath) WithIValue(value interface{}) GetFloorRequest_FieldPathValue {
	switch fp.selector {
	case GetFloorRequest_FieldPathSelectorName:
		return &GetFloorRequest_FieldTerminalPathValue{GetFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	case GetFloorRequest_FieldPathSelectorFieldMask:
		return &GetFloorRequest_FieldTerminalPathValue{GetFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case GetFloorRequest_FieldPathSelectorView:
		return &GetFloorRequest_FieldTerminalPathValue{GetFloorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
	}
}

func (fp *GetFloorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetFloorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetFloorRequest_FieldPathArrayOfValues {
	fpaov := &GetFloorRequest_FieldTerminalPathArrayOfValues{GetFloorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetFloorRequest_FieldPathSelectorName:
		return &GetFloorRequest_FieldTerminalPathArrayOfValues{GetFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Reference)}
	case GetFloorRequest_FieldPathSelectorFieldMask:
		return &GetFloorRequest_FieldTerminalPathArrayOfValues{GetFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case GetFloorRequest_FieldPathSelectorView:
		return &GetFloorRequest_FieldTerminalPathArrayOfValues{GetFloorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetFloorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetFloorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetFloorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fp.selector))
	}
}

func (fp *GetFloorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetFloorRequest_FieldPathValue allows storing values for GetFloorRequest fields according to their type
type GetFloorRequest_FieldPathValue interface {
	GetFloorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetFloorRequest)
	CompareWith(*GetFloorRequest) (cmp int, comparable bool)
}

func ParseGetFloorRequest_FieldPathValue(pathStr, valueStr string) (GetFloorRequest_FieldPathValue, error) {
	fp, err := ParseGetFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetFloorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetFloorRequest_FieldPathValue), nil
}

func MustParseGetFloorRequest_FieldPathValue(pathStr, valueStr string) GetFloorRequest_FieldPathValue {
	fpv, err := ParseGetFloorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetFloorRequest_FieldTerminalPathValue struct {
	GetFloorRequest_FieldTerminalPath
	value interface{}
}

var _ GetFloorRequest_FieldPathValue = (*GetFloorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetFloorRequest' as interface{}
func (fpv *GetFloorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetFloorRequest_FieldTerminalPathValue) AsNameValue() (*floor.Reference, bool) {
	res, ok := fpv.value.(*floor.Reference)
	return res, ok
}
func (fpv *GetFloorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *GetFloorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetFloorRequest
func (fpv *GetFloorRequest_FieldTerminalPathValue) SetTo(target **GetFloorRequest) {
	if *target == nil {
		*target = new(GetFloorRequest)
	}
	switch fpv.selector {
	case GetFloorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*floor.Reference)
	case GetFloorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	case GetFloorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fpv.selector))
	}
}

func (fpv *GetFloorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetFloorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetFloorRequest_FieldTerminalPathValue' with the value under path in 'GetFloorRequest'.
func (fpv *GetFloorRequest_FieldTerminalPathValue) CompareWith(source *GetFloorRequest) (int, bool) {
	switch fpv.selector {
	case GetFloorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*floor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetFloorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetFloorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetFloorRequest: %d", fpv.selector))
	}
}

func (fpv *GetFloorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetFloorRequest))
}

// GetFloorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetFloorRequest according to their type
// Present only for array (repeated) types.
type GetFloorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetFloorRequest_FieldPath
	ContainsValue(*GetFloorRequest) bool
}

// ParseGetFloorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetFloorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetFloorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetFloorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetFloorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetFloorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetFloorRequest_FieldTerminalPathArrayItemValue struct {
	GetFloorRequest_FieldTerminalPath
	value interface{}
}

var _ GetFloorRequest_FieldPathArrayItemValue = (*GetFloorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetFloorRequest as interface{}
func (fpaiv *GetFloorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetFloorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetFloorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetFloorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetFloorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetFloorRequest'
func (fpaiv *GetFloorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetFloorRequest) bool {
	slice := fpaiv.GetFloorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetFloorRequest_FieldPathArrayOfValues allows storing slice of values for GetFloorRequest fields according to their type
type GetFloorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetFloorRequest_FieldPath
}

func ParseGetFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetFloorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetFloorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetFloorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetFloorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetFloorRequest_FieldTerminalPathArrayOfValues struct {
	GetFloorRequest_FieldTerminalPath
	values interface{}
}

var _ GetFloorRequest_FieldPathArrayOfValues = (*GetFloorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetFloorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetFloorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*floor.Reference) {
			values = append(values, v)
		}
	case GetFloorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case GetFloorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetFloorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*floor.Reference, bool) {
	res, ok := fpaov.values.([]*floor.Reference)
	return res, ok
}
func (fpaov *GetFloorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *GetFloorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetFloorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetFloorsRequest_FieldPathSelector
	Get(source *BatchGetFloorsRequest) []interface{}
	GetSingle(source *BatchGetFloorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetFloorsRequest)

	// Those methods build corresponding BatchGetFloorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetFloorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetFloorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetFloorsRequest_FieldPathArrayItemValue
}

type BatchGetFloorsRequest_FieldPathSelector int32

const (
	BatchGetFloorsRequest_FieldPathSelectorNames     BatchGetFloorsRequest_FieldPathSelector = 0
	BatchGetFloorsRequest_FieldPathSelectorFieldMask BatchGetFloorsRequest_FieldPathSelector = 1
	BatchGetFloorsRequest_FieldPathSelectorView      BatchGetFloorsRequest_FieldPathSelector = 2
)

func (s BatchGetFloorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetFloorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", s))
	}
}

func BuildBatchGetFloorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetFloorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetFloorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetFloorsRequest", fp)
}

func ParseBatchGetFloorsRequest_FieldPath(rawField string) (BatchGetFloorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetFloorsRequest_FieldPath(fp)
}

func MustParseBatchGetFloorsRequest_FieldPath(rawField string) BatchGetFloorsRequest_FieldPath {
	fp, err := ParseBatchGetFloorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetFloorsRequest_FieldTerminalPath struct {
	selector BatchGetFloorsRequest_FieldPathSelector
}

var _ BatchGetFloorsRequest_FieldPath = (*BatchGetFloorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetFloorsRequest_FieldTerminalPath) Selector() BatchGetFloorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetFloorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetFloorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetFloorsRequest
func (fp *BatchGetFloorsRequest_FieldTerminalPath) Get(source *BatchGetFloorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetFloorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetFloorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetFloorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetFloorsRequest
func (fp *BatchGetFloorsRequest_FieldTerminalPath) GetSingle(source *BatchGetFloorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetFloorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetFloorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetFloorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return ([]*floor.Reference)(nil)
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	case BatchGetFloorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) ClearValue(item *BatchGetFloorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetFloorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetFloorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetFloorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetFloorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetFloorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetFloorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetFloorsRequest_FieldPathSelectorView
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetFloorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return &BatchGetFloorsRequest_FieldTerminalPathValue{BatchGetFloorsRequest_FieldTerminalPath: *fp, value: value.([]*floor.Reference)}
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetFloorsRequest_FieldTerminalPathValue{BatchGetFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case BatchGetFloorsRequest_FieldPathSelectorView:
		return &BatchGetFloorsRequest_FieldTerminalPathValue{BatchGetFloorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetFloorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetFloorsRequest_FieldTerminalPathArrayOfValues{BatchGetFloorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return &BatchGetFloorsRequest_FieldTerminalPathArrayOfValues{BatchGetFloorsRequest_FieldTerminalPath: *fp, values: values.([][]*floor.Reference)}
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetFloorsRequest_FieldTerminalPathArrayOfValues{BatchGetFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case BatchGetFloorsRequest_FieldPathSelectorView:
		return &BatchGetFloorsRequest_FieldTerminalPathArrayOfValues{BatchGetFloorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetFloorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return &BatchGetFloorsRequest_FieldTerminalPathArrayItemValue{BatchGetFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetFloorsRequest_FieldPathValue allows storing values for BatchGetFloorsRequest fields according to their type
type BatchGetFloorsRequest_FieldPathValue interface {
	BatchGetFloorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetFloorsRequest)
	CompareWith(*BatchGetFloorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetFloorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetFloorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetFloorsRequest_FieldPathValue), nil
}

func MustParseBatchGetFloorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetFloorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetFloorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetFloorsRequest_FieldTerminalPathValue struct {
	BatchGetFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetFloorsRequest_FieldPathValue = (*BatchGetFloorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetFloorsRequest' as interface{}
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*floor.Reference, bool) {
	res, ok := fpv.value.([]*floor.Reference)
	return res, ok
}
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetFloorsRequest
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetFloorsRequest) {
	if *target == nil {
		*target = new(BatchGetFloorsRequest)
	}
	switch fpv.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*floor.Reference)
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	case BatchGetFloorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetFloorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetFloorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetFloorsRequest'.
func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetFloorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetFloorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetFloorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetFloorsRequest))
}

// BatchGetFloorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetFloorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetFloorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetFloorsRequest_FieldPath
	ContainsValue(*BatchGetFloorsRequest) bool
}

// ParseBatchGetFloorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetFloorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetFloorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetFloorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetFloorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetFloorsRequest_FieldPathArrayItemValue = (*BatchGetFloorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetFloorsRequest as interface{}
func (fpaiv *BatchGetFloorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetFloorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*floor.Reference, bool) {
	res, ok := fpaiv.value.(*floor.Reference)
	return res, ok
}

func (fpaiv *BatchGetFloorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetFloorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetFloorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetFloorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetFloorsRequest'
func (fpaiv *BatchGetFloorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetFloorsRequest) bool {
	slice := fpaiv.BatchGetFloorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetFloorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetFloorsRequest fields according to their type
type BatchGetFloorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetFloorsRequest_FieldPath
}

func ParseBatchGetFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetFloorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetFloorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetFloorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetFloorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetFloorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetFloorsRequest_FieldPathArrayOfValues = (*BatchGetFloorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetFloorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetFloorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*floor.Reference) {
			values = append(values, v)
		}
	case BatchGetFloorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetFloorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetFloorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*floor.Reference, bool) {
	res, ok := fpaov.values.([][]*floor.Reference)
	return res, ok
}
func (fpaov *BatchGetFloorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetFloorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetFloorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetFloorsResponse_FieldPathSelector
	Get(source *BatchGetFloorsResponse) []interface{}
	GetSingle(source *BatchGetFloorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetFloorsResponse)

	// Those methods build corresponding BatchGetFloorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetFloorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetFloorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetFloorsResponse_FieldPathArrayItemValue
}

type BatchGetFloorsResponse_FieldPathSelector int32

const (
	BatchGetFloorsResponse_FieldPathSelectorFloors  BatchGetFloorsResponse_FieldPathSelector = 0
	BatchGetFloorsResponse_FieldPathSelectorMissing BatchGetFloorsResponse_FieldPathSelector = 1
)

func (s BatchGetFloorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return "floors"
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", s))
	}
}

func BuildBatchGetFloorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetFloorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetFloorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floors":
			return &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorFloors}, nil
		case "missing":
			return &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "floors":
			if subpath, err := floor.BuildFloor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetFloorsResponse_FieldSubPath{selector: BatchGetFloorsResponse_FieldPathSelectorFloors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetFloorsResponse", fp)
}

func ParseBatchGetFloorsResponse_FieldPath(rawField string) (BatchGetFloorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetFloorsResponse_FieldPath(fp)
}

func MustParseBatchGetFloorsResponse_FieldPath(rawField string) BatchGetFloorsResponse_FieldPath {
	fp, err := ParseBatchGetFloorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetFloorsResponse_FieldTerminalPath struct {
	selector BatchGetFloorsResponse_FieldPathSelector
}

var _ BatchGetFloorsResponse_FieldPath = (*BatchGetFloorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetFloorsResponse_FieldTerminalPath) Selector() BatchGetFloorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetFloorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetFloorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetFloorsResponse
func (fp *BatchGetFloorsResponse_FieldTerminalPath) Get(source *BatchGetFloorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetFloorsResponse_FieldPathSelectorFloors:
			for _, value := range source.GetFloors() {
				values = append(values, value)
			}
		case BatchGetFloorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetFloorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetFloorsResponse
func (fp *BatchGetFloorsResponse_FieldTerminalPath) GetSingle(source *BatchGetFloorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		res := source.GetFloors()
		return res, res != nil
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetFloorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return ([]*floor.Floor)(nil)
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return ([]*floor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) ClearValue(item *BatchGetFloorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetFloorsResponse_FieldPathSelectorFloors:
			item.Floors = nil
		case BatchGetFloorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetFloorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetFloorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetFloorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return &BatchGetFloorsResponse_FieldTerminalPathValue{BatchGetFloorsResponse_FieldTerminalPath: *fp, value: value.([]*floor.Floor)}
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return &BatchGetFloorsResponse_FieldTerminalPathValue{BatchGetFloorsResponse_FieldTerminalPath: *fp, value: value.([]*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetFloorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetFloorsResponse_FieldTerminalPathArrayOfValues{BatchGetFloorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return &BatchGetFloorsResponse_FieldTerminalPathArrayOfValues{BatchGetFloorsResponse_FieldTerminalPath: *fp, values: values.([][]*floor.Floor)}
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return &BatchGetFloorsResponse_FieldTerminalPathArrayOfValues{BatchGetFloorsResponse_FieldTerminalPath: *fp, values: values.([][]*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetFloorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return &BatchGetFloorsResponse_FieldTerminalPathArrayItemValue{BatchGetFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.Floor)}
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return &BatchGetFloorsResponse_FieldTerminalPathArrayItemValue{BatchGetFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetFloorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetFloorsResponse_FieldSubPath struct {
	selector BatchGetFloorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetFloorsResponse_FieldPath = (*BatchGetFloorsResponse_FieldSubPath)(nil)

func (fps *BatchGetFloorsResponse_FieldSubPath) Selector() BatchGetFloorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetFloorsResponse_FieldSubPath) AsFloorsSubPath() (floor.Floor_FieldPath, bool) {
	res, ok := fps.subPath.(floor.Floor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetFloorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetFloorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetFloorsResponse
func (fps *BatchGetFloorsResponse_FieldSubPath) Get(source *BatchGetFloorsResponse) (values []interface{}) {
	if asFloorFieldPath, ok := fps.AsFloorsSubPath(); ok {
		for _, item := range source.GetFloors() {
			values = append(values, asFloorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetFloorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetFloorsResponse))
}

// GetSingle returns value of selected field from source BatchGetFloorsResponse
func (fps *BatchGetFloorsResponse_FieldSubPath) GetSingle(source *BatchGetFloorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		if len(source.GetFloors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFloors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetFloorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetFloorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetFloorsResponse_FieldSubPath) ClearValue(item *BatchGetFloorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetFloorsResponse_FieldPathSelectorFloors:
			for _, subItem := range item.Floors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetFloorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetFloorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetFloorsResponse_FieldPathValue {
	return &BatchGetFloorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetFloorsResponse_FieldPathArrayOfValues {
	return &BatchGetFloorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetFloorsResponse_FieldPathArrayItemValue {
	return &BatchGetFloorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetFloorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetFloorsResponse_FieldPathValue allows storing values for BatchGetFloorsResponse fields according to their type
type BatchGetFloorsResponse_FieldPathValue interface {
	BatchGetFloorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetFloorsResponse)
	CompareWith(*BatchGetFloorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetFloorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetFloorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetFloorsResponse_FieldPathValue), nil
}

func MustParseBatchGetFloorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetFloorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetFloorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetFloorsResponse_FieldTerminalPathValue struct {
	BatchGetFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetFloorsResponse_FieldPathValue = (*BatchGetFloorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetFloorsResponse' as interface{}
func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) AsFloorsValue() ([]*floor.Floor, bool) {
	res, ok := fpv.value.([]*floor.Floor)
	return res, ok
}
func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*floor.Reference, bool) {
	res, ok := fpv.value.([]*floor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetFloorsResponse
func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetFloorsResponse) {
	if *target == nil {
		*target = new(BatchGetFloorsResponse)
	}
	switch fpv.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		(*target).Floors = fpv.value.([]*floor.Floor)
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*floor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetFloorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetFloorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetFloorsResponse'.
func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetFloorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return 0, false
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetFloorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetFloorsResponse))
}

type BatchGetFloorsResponse_FieldSubPathValue struct {
	BatchGetFloorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetFloorsResponse_FieldPathValue = (*BatchGetFloorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) AsFloorsPathValue() (floor.Floor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(floor.Floor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) SetTo(target **BatchGetFloorsResponse) {
	if *target == nil {
		*target = new(BatchGetFloorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetFloorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) CompareWith(source *BatchGetFloorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetFloorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetFloorsResponse))
}

// BatchGetFloorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetFloorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetFloorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetFloorsResponse_FieldPath
	ContainsValue(*BatchGetFloorsResponse) bool
}

// ParseBatchGetFloorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetFloorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetFloorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetFloorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetFloorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetFloorsResponse_FieldPathArrayItemValue = (*BatchGetFloorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetFloorsResponse as interface{}
func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) AsFloorsItemValue() (*floor.Floor, bool) {
	res, ok := fpaiv.value.(*floor.Floor)
	return res, ok
}
func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*floor.Reference, bool) {
	res, ok := fpaiv.value.(*floor.Reference)
	return res, ok
}

func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetFloorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetFloorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetFloorsResponse'
func (fpaiv *BatchGetFloorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetFloorsResponse) bool {
	slice := fpaiv.BatchGetFloorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetFloorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetFloorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetFloorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetFloorsResponse_FieldSubPathArrayItemValue) AsFloorsPathItemValue() (floor.Floor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetFloorsResponse'
func (fpaivs *BatchGetFloorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetFloorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetFloorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetFloorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetFloorsResponse fields according to their type
type BatchGetFloorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetFloorsResponse_FieldPath
}

func ParseBatchGetFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetFloorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetFloorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetFloorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetFloorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetFloorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetFloorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetFloorsResponse_FieldPathArrayOfValues = (*BatchGetFloorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetFloorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetFloorsResponse_FieldPathSelectorFloors:
		for _, v := range fpaov.values.([][]*floor.Floor) {
			values = append(values, v)
		}
	case BatchGetFloorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*floor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetFloorsResponse_FieldTerminalPathArrayOfValues) AsFloorsArrayOfValues() ([][]*floor.Floor, bool) {
	res, ok := fpaov.values.([][]*floor.Floor)
	return res, ok
}
func (fpaov *BatchGetFloorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*floor.Reference, bool) {
	res, ok := fpaov.values.([][]*floor.Reference)
	return res, ok
}

type BatchGetFloorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetFloorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetFloorsResponse_FieldPathArrayOfValues = (*BatchGetFloorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetFloorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetFloorsResponse_FieldSubPathArrayOfValues) AsFloorsPathArrayOfValues() (floor.Floor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(floor.Floor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListFloorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListFloorsRequest_FieldPathSelector
	Get(source *ListFloorsRequest) []interface{}
	GetSingle(source *ListFloorsRequest) (interface{}, bool)
	ClearValue(item *ListFloorsRequest)

	// Those methods build corresponding ListFloorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListFloorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListFloorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListFloorsRequest_FieldPathArrayItemValue
}

type ListFloorsRequest_FieldPathSelector int32

const (
	ListFloorsRequest_FieldPathSelectorParent    ListFloorsRequest_FieldPathSelector = 0
	ListFloorsRequest_FieldPathSelectorPageSize  ListFloorsRequest_FieldPathSelector = 1
	ListFloorsRequest_FieldPathSelectorPageToken ListFloorsRequest_FieldPathSelector = 2
	ListFloorsRequest_FieldPathSelectorOrderBy   ListFloorsRequest_FieldPathSelector = 3
	ListFloorsRequest_FieldPathSelectorFilter    ListFloorsRequest_FieldPathSelector = 4
	ListFloorsRequest_FieldPathSelectorFieldMask ListFloorsRequest_FieldPathSelector = 5
	ListFloorsRequest_FieldPathSelectorView      ListFloorsRequest_FieldPathSelector = 6
)

func (s ListFloorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListFloorsRequest_FieldPathSelectorParent:
		return "parent"
	case ListFloorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListFloorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListFloorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListFloorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", s))
	}
}

func BuildListFloorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListFloorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListFloorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListFloorsRequest", fp)
}

func ParseListFloorsRequest_FieldPath(rawField string) (ListFloorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListFloorsRequest_FieldPath(fp)
}

func MustParseListFloorsRequest_FieldPath(rawField string) ListFloorsRequest_FieldPath {
	fp, err := ParseListFloorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListFloorsRequest_FieldTerminalPath struct {
	selector ListFloorsRequest_FieldPathSelector
}

var _ ListFloorsRequest_FieldPath = (*ListFloorsRequest_FieldTerminalPath)(nil)

func (fp *ListFloorsRequest_FieldTerminalPath) Selector() ListFloorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListFloorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListFloorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListFloorsRequest
func (fp *ListFloorsRequest_FieldTerminalPath) Get(source *ListFloorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListFloorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListFloorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListFloorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListFloorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListFloorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListFloorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListFloorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListFloorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListFloorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListFloorsRequest
func (fp *ListFloorsRequest_FieldTerminalPath) GetSingle(source *ListFloorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListFloorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListFloorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListFloorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListFloorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
	}
}

func (fp *ListFloorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListFloorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListFloorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		return (*floor.ParentName)(nil)
	case ListFloorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListFloorsRequest_FieldPathSelectorPageToken:
		return (*floor.PagerCursor)(nil)
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		return (*floor.OrderBy)(nil)
	case ListFloorsRequest_FieldPathSelectorFilter:
		return (*floor.Filter)(nil)
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	case ListFloorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
	}
}

func (fp *ListFloorsRequest_FieldTerminalPath) ClearValue(item *ListFloorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListFloorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListFloorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListFloorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListFloorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListFloorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListFloorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListFloorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListFloorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListFloorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListFloorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListFloorsRequest_FieldPathSelectorParent ||
		fp.selector == ListFloorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListFloorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListFloorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListFloorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListFloorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListFloorsRequest_FieldPathSelectorView
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListFloorsRequest_FieldPathValue {
	switch fp.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.ParentName)}
	case ListFloorsRequest_FieldPathSelectorPageSize:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListFloorsRequest_FieldPathSelectorPageToken:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.OrderBy)}
	case ListFloorsRequest_FieldPathSelectorFilter:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Filter)}
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case ListFloorsRequest_FieldPathSelectorView:
		return &ListFloorsRequest_FieldTerminalPathValue{ListFloorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
	}
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListFloorsRequest_FieldPathArrayOfValues {
	fpaov := &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.ParentName)}
	case ListFloorsRequest_FieldPathSelectorPageSize:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListFloorsRequest_FieldPathSelectorPageToken:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.OrderBy)}
	case ListFloorsRequest_FieldPathSelectorFilter:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.Filter)}
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case ListFloorsRequest_FieldPathSelectorView:
		return &ListFloorsRequest_FieldTerminalPathArrayOfValues{ListFloorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListFloorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fp.selector))
	}
}

func (fp *ListFloorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListFloorsRequest_FieldPathValue allows storing values for ListFloorsRequest fields according to their type
type ListFloorsRequest_FieldPathValue interface {
	ListFloorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListFloorsRequest)
	CompareWith(*ListFloorsRequest) (cmp int, comparable bool)
}

func ParseListFloorsRequest_FieldPathValue(pathStr, valueStr string) (ListFloorsRequest_FieldPathValue, error) {
	fp, err := ParseListFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListFloorsRequest_FieldPathValue), nil
}

func MustParseListFloorsRequest_FieldPathValue(pathStr, valueStr string) ListFloorsRequest_FieldPathValue {
	fpv, err := ParseListFloorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListFloorsRequest_FieldTerminalPathValue struct {
	ListFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListFloorsRequest_FieldPathValue = (*ListFloorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListFloorsRequest' as interface{}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsParentValue() (*floor.ParentName, bool) {
	res, ok := fpv.value.(*floor.ParentName)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsOrderByValue() (*floor.OrderBy, bool) {
	res, ok := fpv.value.(*floor.OrderBy)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsFilterValue() (*floor.Filter, bool) {
	res, ok := fpv.value.(*floor.Filter)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *ListFloorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListFloorsRequest
func (fpv *ListFloorsRequest_FieldTerminalPathValue) SetTo(target **ListFloorsRequest) {
	if *target == nil {
		*target = new(ListFloorsRequest)
	}
	switch fpv.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*floor.ParentName)
	case ListFloorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListFloorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*floor.PagerCursor)
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*floor.OrderBy)
	case ListFloorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*floor.Filter)
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	case ListFloorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListFloorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListFloorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListFloorsRequest_FieldTerminalPathValue' with the value under path in 'ListFloorsRequest'.
func (fpv *ListFloorsRequest_FieldTerminalPathValue) CompareWith(source *ListFloorsRequest) (int, bool) {
	switch fpv.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*floor.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListFloorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListFloorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListFloorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListFloorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListFloorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListFloorsRequest))
}

// ListFloorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListFloorsRequest according to their type
// Present only for array (repeated) types.
type ListFloorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListFloorsRequest_FieldPath
	ContainsValue(*ListFloorsRequest) bool
}

// ParseListFloorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListFloorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListFloorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListFloorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListFloorsRequest_FieldTerminalPathArrayItemValue struct {
	ListFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListFloorsRequest_FieldPathArrayItemValue = (*ListFloorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListFloorsRequest as interface{}
func (fpaiv *ListFloorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListFloorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListFloorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListFloorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListFloorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListFloorsRequest'
func (fpaiv *ListFloorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListFloorsRequest) bool {
	slice := fpaiv.ListFloorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListFloorsRequest_FieldPathArrayOfValues allows storing slice of values for ListFloorsRequest fields according to their type
type ListFloorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListFloorsRequest_FieldPath
}

func ParseListFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListFloorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListFloorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListFloorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListFloorsRequest_FieldTerminalPathArrayOfValues struct {
	ListFloorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListFloorsRequest_FieldPathArrayOfValues = (*ListFloorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListFloorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*floor.ParentName) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*floor.OrderBy) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*floor.Filter) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case ListFloorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*floor.ParentName, bool) {
	res, ok := fpaov.values.([]*floor.ParentName)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*floor.OrderBy, bool) {
	res, ok := fpaov.values.([]*floor.OrderBy)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*floor.Filter, bool) {
	res, ok := fpaov.values.([]*floor.Filter)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *ListFloorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListFloorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListFloorsResponse_FieldPathSelector
	Get(source *ListFloorsResponse) []interface{}
	GetSingle(source *ListFloorsResponse) (interface{}, bool)
	ClearValue(item *ListFloorsResponse)

	// Those methods build corresponding ListFloorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListFloorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListFloorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListFloorsResponse_FieldPathArrayItemValue
}

type ListFloorsResponse_FieldPathSelector int32

const (
	ListFloorsResponse_FieldPathSelectorFloors        ListFloorsResponse_FieldPathSelector = 0
	ListFloorsResponse_FieldPathSelectorPrevPageToken ListFloorsResponse_FieldPathSelector = 1
	ListFloorsResponse_FieldPathSelectorNextPageToken ListFloorsResponse_FieldPathSelector = 2
)

func (s ListFloorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return "floors"
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", s))
	}
}

func BuildListFloorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListFloorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListFloorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floors":
			return &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorFloors}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "floors":
			if subpath, err := floor.BuildFloor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListFloorsResponse_FieldSubPath{selector: ListFloorsResponse_FieldPathSelectorFloors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListFloorsResponse", fp)
}

func ParseListFloorsResponse_FieldPath(rawField string) (ListFloorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListFloorsResponse_FieldPath(fp)
}

func MustParseListFloorsResponse_FieldPath(rawField string) ListFloorsResponse_FieldPath {
	fp, err := ParseListFloorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListFloorsResponse_FieldTerminalPath struct {
	selector ListFloorsResponse_FieldPathSelector
}

var _ ListFloorsResponse_FieldPath = (*ListFloorsResponse_FieldTerminalPath)(nil)

func (fp *ListFloorsResponse_FieldTerminalPath) Selector() ListFloorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListFloorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListFloorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListFloorsResponse
func (fp *ListFloorsResponse_FieldTerminalPath) Get(source *ListFloorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListFloorsResponse_FieldPathSelectorFloors:
			for _, value := range source.GetFloors() {
				values = append(values, value)
			}
		case ListFloorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListFloorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListFloorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListFloorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListFloorsResponse
func (fp *ListFloorsResponse_FieldTerminalPath) GetSingle(source *ListFloorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		res := source.GetFloors()
		return res, res != nil
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
	}
}

func (fp *ListFloorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListFloorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return ([]*floor.Floor)(nil)
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		return (*floor.PagerCursor)(nil)
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		return (*floor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
	}
}

func (fp *ListFloorsResponse_FieldTerminalPath) ClearValue(item *ListFloorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListFloorsResponse_FieldPathSelectorFloors:
			item.Floors = nil
		case ListFloorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListFloorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListFloorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListFloorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListFloorsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListFloorsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListFloorsResponse_FieldPathValue {
	switch fp.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return &ListFloorsResponse_FieldTerminalPathValue{ListFloorsResponse_FieldTerminalPath: *fp, value: value.([]*floor.Floor)}
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		return &ListFloorsResponse_FieldTerminalPathValue{ListFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		return &ListFloorsResponse_FieldTerminalPathValue{ListFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
	}
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListFloorsResponse_FieldPathArrayOfValues {
	fpaov := &ListFloorsResponse_FieldTerminalPathArrayOfValues{ListFloorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return &ListFloorsResponse_FieldTerminalPathArrayOfValues{ListFloorsResponse_FieldTerminalPath: *fp, values: values.([][]*floor.Floor)}
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		return &ListFloorsResponse_FieldTerminalPathArrayOfValues{ListFloorsResponse_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		return &ListFloorsResponse_FieldTerminalPathArrayOfValues{ListFloorsResponse_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListFloorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return &ListFloorsResponse_FieldTerminalPathArrayItemValue{ListFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.Floor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fp.selector))
	}
}

func (fp *ListFloorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListFloorsResponse_FieldSubPath struct {
	selector ListFloorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListFloorsResponse_FieldPath = (*ListFloorsResponse_FieldSubPath)(nil)

func (fps *ListFloorsResponse_FieldSubPath) Selector() ListFloorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListFloorsResponse_FieldSubPath) AsFloorsSubPath() (floor.Floor_FieldPath, bool) {
	res, ok := fps.subPath.(floor.Floor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListFloorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListFloorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListFloorsResponse
func (fps *ListFloorsResponse_FieldSubPath) Get(source *ListFloorsResponse) (values []interface{}) {
	if asFloorFieldPath, ok := fps.AsFloorsSubPath(); ok {
		for _, item := range source.GetFloors() {
			values = append(values, asFloorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListFloorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListFloorsResponse))
}

// GetSingle returns value of selected field from source ListFloorsResponse
func (fps *ListFloorsResponse_FieldSubPath) GetSingle(source *ListFloorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		if len(source.GetFloors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFloors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fps.selector))
	}
}

func (fps *ListFloorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListFloorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListFloorsResponse_FieldSubPath) ClearValue(item *ListFloorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListFloorsResponse_FieldPathSelectorFloors:
			for _, subItem := range item.Floors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListFloorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListFloorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListFloorsResponse_FieldSubPath) WithIValue(value interface{}) ListFloorsResponse_FieldPathValue {
	return &ListFloorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListFloorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListFloorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListFloorsResponse_FieldPathArrayOfValues {
	return &ListFloorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListFloorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListFloorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListFloorsResponse_FieldPathArrayItemValue {
	return &ListFloorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListFloorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListFloorsResponse_FieldPathValue allows storing values for ListFloorsResponse fields according to their type
type ListFloorsResponse_FieldPathValue interface {
	ListFloorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListFloorsResponse)
	CompareWith(*ListFloorsResponse) (cmp int, comparable bool)
}

func ParseListFloorsResponse_FieldPathValue(pathStr, valueStr string) (ListFloorsResponse_FieldPathValue, error) {
	fp, err := ParseListFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListFloorsResponse_FieldPathValue), nil
}

func MustParseListFloorsResponse_FieldPathValue(pathStr, valueStr string) ListFloorsResponse_FieldPathValue {
	fpv, err := ParseListFloorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListFloorsResponse_FieldTerminalPathValue struct {
	ListFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListFloorsResponse_FieldPathValue = (*ListFloorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListFloorsResponse' as interface{}
func (fpv *ListFloorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListFloorsResponse_FieldTerminalPathValue) AsFloorsValue() ([]*floor.Floor, bool) {
	res, ok := fpv.value.([]*floor.Floor)
	return res, ok
}
func (fpv *ListFloorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}
func (fpv *ListFloorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListFloorsResponse
func (fpv *ListFloorsResponse_FieldTerminalPathValue) SetTo(target **ListFloorsResponse) {
	if *target == nil {
		*target = new(ListFloorsResponse)
	}
	switch fpv.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		(*target).Floors = fpv.value.([]*floor.Floor)
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*floor.PagerCursor)
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*floor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListFloorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListFloorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListFloorsResponse_FieldTerminalPathValue' with the value under path in 'ListFloorsResponse'.
func (fpv *ListFloorsResponse_FieldTerminalPathValue) CompareWith(source *ListFloorsResponse) (int, bool) {
	switch fpv.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return 0, false
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListFloorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListFloorsResponse))
}

type ListFloorsResponse_FieldSubPathValue struct {
	ListFloorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListFloorsResponse_FieldPathValue = (*ListFloorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListFloorsResponse_FieldSubPathValue) AsFloorsPathValue() (floor.Floor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(floor.Floor_FieldPathValue)
	return res, ok
}

func (fpvs *ListFloorsResponse_FieldSubPathValue) SetTo(target **ListFloorsResponse) {
	if *target == nil {
		*target = new(ListFloorsResponse)
	}
	switch fpvs.Selector() {
	case ListFloorsResponse_FieldPathSelectorFloors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListFloorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListFloorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListFloorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListFloorsResponse_FieldSubPathValue) CompareWith(source *ListFloorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListFloorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListFloorsResponse))
}

// ListFloorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListFloorsResponse according to their type
// Present only for array (repeated) types.
type ListFloorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListFloorsResponse_FieldPath
	ContainsValue(*ListFloorsResponse) bool
}

// ParseListFloorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListFloorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListFloorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListFloorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListFloorsResponse_FieldTerminalPathArrayItemValue struct {
	ListFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListFloorsResponse_FieldPathArrayItemValue = (*ListFloorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListFloorsResponse as interface{}
func (fpaiv *ListFloorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListFloorsResponse_FieldTerminalPathArrayItemValue) AsFloorsItemValue() (*floor.Floor, bool) {
	res, ok := fpaiv.value.(*floor.Floor)
	return res, ok
}

func (fpaiv *ListFloorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListFloorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListFloorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListFloorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListFloorsResponse'
func (fpaiv *ListFloorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListFloorsResponse) bool {
	slice := fpaiv.ListFloorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListFloorsResponse_FieldSubPathArrayItemValue struct {
	ListFloorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListFloorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListFloorsResponse_FieldSubPathArrayItemValue) AsFloorsPathItemValue() (floor.Floor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListFloorsResponse'
func (fpaivs *ListFloorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListFloorsResponse) bool {
	switch fpaivs.Selector() {
	case ListFloorsResponse_FieldPathSelectorFloors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListFloorsResponse: %d", fpaivs.Selector()))
	}
}

// ListFloorsResponse_FieldPathArrayOfValues allows storing slice of values for ListFloorsResponse fields according to their type
type ListFloorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListFloorsResponse_FieldPath
}

func ParseListFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListFloorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListFloorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListFloorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListFloorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListFloorsResponse_FieldTerminalPathArrayOfValues struct {
	ListFloorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListFloorsResponse_FieldPathArrayOfValues = (*ListFloorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListFloorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListFloorsResponse_FieldPathSelectorFloors:
		for _, v := range fpaov.values.([][]*floor.Floor) {
			values = append(values, v)
		}
	case ListFloorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	case ListFloorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListFloorsResponse_FieldTerminalPathArrayOfValues) AsFloorsArrayOfValues() ([][]*floor.Floor, bool) {
	res, ok := fpaov.values.([][]*floor.Floor)
	return res, ok
}
func (fpaov *ListFloorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}
func (fpaov *ListFloorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}

type ListFloorsResponse_FieldSubPathArrayOfValues struct {
	ListFloorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListFloorsResponse_FieldPathArrayOfValues = (*ListFloorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListFloorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListFloorsResponse_FieldSubPathArrayOfValues) AsFloorsPathArrayOfValues() (floor.Floor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(floor.Floor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchFloorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchFloorRequest_FieldPathSelector
	Get(source *WatchFloorRequest) []interface{}
	GetSingle(source *WatchFloorRequest) (interface{}, bool)
	ClearValue(item *WatchFloorRequest)

	// Those methods build corresponding WatchFloorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchFloorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchFloorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchFloorRequest_FieldPathArrayItemValue
}

type WatchFloorRequest_FieldPathSelector int32

const (
	WatchFloorRequest_FieldPathSelectorName      WatchFloorRequest_FieldPathSelector = 0
	WatchFloorRequest_FieldPathSelectorFieldMask WatchFloorRequest_FieldPathSelector = 1
	WatchFloorRequest_FieldPathSelectorView      WatchFloorRequest_FieldPathSelector = 2
)

func (s WatchFloorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchFloorRequest_FieldPathSelectorName:
		return "name"
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchFloorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", s))
	}
}

func BuildWatchFloorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchFloorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchFloorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchFloorRequest", fp)
}

func ParseWatchFloorRequest_FieldPath(rawField string) (WatchFloorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchFloorRequest_FieldPath(fp)
}

func MustParseWatchFloorRequest_FieldPath(rawField string) WatchFloorRequest_FieldPath {
	fp, err := ParseWatchFloorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchFloorRequest_FieldTerminalPath struct {
	selector WatchFloorRequest_FieldPathSelector
}

var _ WatchFloorRequest_FieldPath = (*WatchFloorRequest_FieldTerminalPath)(nil)

func (fp *WatchFloorRequest_FieldTerminalPath) Selector() WatchFloorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchFloorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchFloorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchFloorRequest
func (fp *WatchFloorRequest_FieldTerminalPath) Get(source *WatchFloorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchFloorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchFloorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchFloorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchFloorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchFloorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchFloorRequest
func (fp *WatchFloorRequest_FieldTerminalPath) GetSingle(source *WatchFloorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchFloorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchFloorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchFloorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		return (*floor.Reference)(nil)
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	case WatchFloorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorRequest_FieldTerminalPath) ClearValue(item *WatchFloorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchFloorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchFloorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchFloorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchFloorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchFloorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchFloorRequest_FieldPathSelectorName ||
		fp.selector == WatchFloorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchFloorRequest_FieldPathSelectorView
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchFloorRequest_FieldPathValue {
	switch fp.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		return &WatchFloorRequest_FieldTerminalPathValue{WatchFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		return &WatchFloorRequest_FieldTerminalPathValue{WatchFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case WatchFloorRequest_FieldPathSelectorView:
		return &WatchFloorRequest_FieldTerminalPathValue{WatchFloorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchFloorRequest_FieldPathArrayOfValues {
	fpaov := &WatchFloorRequest_FieldTerminalPathArrayOfValues{WatchFloorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		return &WatchFloorRequest_FieldTerminalPathArrayOfValues{WatchFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Reference)}
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		return &WatchFloorRequest_FieldTerminalPathArrayOfValues{WatchFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case WatchFloorRequest_FieldPathSelectorView:
		return &WatchFloorRequest_FieldTerminalPathArrayOfValues{WatchFloorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchFloorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchFloorRequest_FieldPathValue allows storing values for WatchFloorRequest fields according to their type
type WatchFloorRequest_FieldPathValue interface {
	WatchFloorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchFloorRequest)
	CompareWith(*WatchFloorRequest) (cmp int, comparable bool)
}

func ParseWatchFloorRequest_FieldPathValue(pathStr, valueStr string) (WatchFloorRequest_FieldPathValue, error) {
	fp, err := ParseWatchFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchFloorRequest_FieldPathValue), nil
}

func MustParseWatchFloorRequest_FieldPathValue(pathStr, valueStr string) WatchFloorRequest_FieldPathValue {
	fpv, err := ParseWatchFloorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchFloorRequest_FieldTerminalPathValue struct {
	WatchFloorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchFloorRequest_FieldPathValue = (*WatchFloorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchFloorRequest' as interface{}
func (fpv *WatchFloorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchFloorRequest_FieldTerminalPathValue) AsNameValue() (*floor.Reference, bool) {
	res, ok := fpv.value.(*floor.Reference)
	return res, ok
}
func (fpv *WatchFloorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *WatchFloorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchFloorRequest
func (fpv *WatchFloorRequest_FieldTerminalPathValue) SetTo(target **WatchFloorRequest) {
	if *target == nil {
		*target = new(WatchFloorRequest)
	}
	switch fpv.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*floor.Reference)
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	case WatchFloorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchFloorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchFloorRequest_FieldTerminalPathValue' with the value under path in 'WatchFloorRequest'.
func (fpv *WatchFloorRequest_FieldTerminalPathValue) CompareWith(source *WatchFloorRequest) (int, bool) {
	switch fpv.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*floor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchFloorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchFloorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchFloorRequest))
}

// WatchFloorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchFloorRequest according to their type
// Present only for array (repeated) types.
type WatchFloorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchFloorRequest_FieldPath
	ContainsValue(*WatchFloorRequest) bool
}

// ParseWatchFloorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchFloorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchFloorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchFloorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchFloorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchFloorRequest_FieldTerminalPathArrayItemValue struct {
	WatchFloorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchFloorRequest_FieldPathArrayItemValue = (*WatchFloorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchFloorRequest as interface{}
func (fpaiv *WatchFloorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchFloorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchFloorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchFloorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchFloorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchFloorRequest'
func (fpaiv *WatchFloorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchFloorRequest) bool {
	slice := fpaiv.WatchFloorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchFloorRequest_FieldPathArrayOfValues allows storing slice of values for WatchFloorRequest fields according to their type
type WatchFloorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchFloorRequest_FieldPath
}

func ParseWatchFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchFloorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchFloorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchFloorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchFloorRequest_FieldTerminalPathArrayOfValues struct {
	WatchFloorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchFloorRequest_FieldPathArrayOfValues = (*WatchFloorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchFloorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchFloorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*floor.Reference) {
			values = append(values, v)
		}
	case WatchFloorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case WatchFloorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchFloorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*floor.Reference, bool) {
	res, ok := fpaov.values.([]*floor.Reference)
	return res, ok
}
func (fpaov *WatchFloorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *WatchFloorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchFloorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchFloorResponse_FieldPathSelector
	Get(source *WatchFloorResponse) []interface{}
	GetSingle(source *WatchFloorResponse) (interface{}, bool)
	ClearValue(item *WatchFloorResponse)

	// Those methods build corresponding WatchFloorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchFloorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchFloorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchFloorResponse_FieldPathArrayItemValue
}

type WatchFloorResponse_FieldPathSelector int32

const (
	WatchFloorResponse_FieldPathSelectorChange WatchFloorResponse_FieldPathSelector = 0
)

func (s WatchFloorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchFloorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", s))
	}
}

func BuildWatchFloorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchFloorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchFloorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchFloorResponse_FieldTerminalPath{selector: WatchFloorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchFloorResponse", fp)
}

func ParseWatchFloorResponse_FieldPath(rawField string) (WatchFloorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchFloorResponse_FieldPath(fp)
}

func MustParseWatchFloorResponse_FieldPath(rawField string) WatchFloorResponse_FieldPath {
	fp, err := ParseWatchFloorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchFloorResponse_FieldTerminalPath struct {
	selector WatchFloorResponse_FieldPathSelector
}

var _ WatchFloorResponse_FieldPath = (*WatchFloorResponse_FieldTerminalPath)(nil)

func (fp *WatchFloorResponse_FieldTerminalPath) Selector() WatchFloorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchFloorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchFloorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchFloorResponse
func (fp *WatchFloorResponse_FieldTerminalPath) Get(source *WatchFloorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchFloorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchFloorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchFloorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchFloorResponse
func (fp *WatchFloorResponse_FieldTerminalPath) GetSingle(source *WatchFloorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchFloorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchFloorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		return (*floor.FloorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorResponse_FieldTerminalPath) ClearValue(item *WatchFloorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchFloorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchFloorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchFloorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchFloorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchFloorResponse_FieldPathSelectorChange
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchFloorResponse_FieldPathValue {
	switch fp.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		return &WatchFloorResponse_FieldTerminalPathValue{WatchFloorResponse_FieldTerminalPath: *fp, value: value.(*floor.FloorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchFloorResponse_FieldPathArrayOfValues {
	fpaov := &WatchFloorResponse_FieldTerminalPathArrayOfValues{WatchFloorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		return &WatchFloorResponse_FieldTerminalPathArrayOfValues{WatchFloorResponse_FieldTerminalPath: *fp, values: values.([]*floor.FloorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchFloorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchFloorResponse_FieldPathValue allows storing values for WatchFloorResponse fields according to their type
type WatchFloorResponse_FieldPathValue interface {
	WatchFloorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchFloorResponse)
	CompareWith(*WatchFloorResponse) (cmp int, comparable bool)
}

func ParseWatchFloorResponse_FieldPathValue(pathStr, valueStr string) (WatchFloorResponse_FieldPathValue, error) {
	fp, err := ParseWatchFloorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchFloorResponse_FieldPathValue), nil
}

func MustParseWatchFloorResponse_FieldPathValue(pathStr, valueStr string) WatchFloorResponse_FieldPathValue {
	fpv, err := ParseWatchFloorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchFloorResponse_FieldTerminalPathValue struct {
	WatchFloorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchFloorResponse_FieldPathValue = (*WatchFloorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchFloorResponse' as interface{}
func (fpv *WatchFloorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchFloorResponse_FieldTerminalPathValue) AsChangeValue() (*floor.FloorChange, bool) {
	res, ok := fpv.value.(*floor.FloorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchFloorResponse
func (fpv *WatchFloorResponse_FieldTerminalPathValue) SetTo(target **WatchFloorResponse) {
	if *target == nil {
		*target = new(WatchFloorResponse)
	}
	switch fpv.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*floor.FloorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchFloorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchFloorResponse_FieldTerminalPathValue' with the value under path in 'WatchFloorResponse'.
func (fpv *WatchFloorResponse_FieldTerminalPathValue) CompareWith(source *WatchFloorResponse) (int, bool) {
	switch fpv.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchFloorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchFloorResponse))
}

// WatchFloorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchFloorResponse according to their type
// Present only for array (repeated) types.
type WatchFloorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchFloorResponse_FieldPath
	ContainsValue(*WatchFloorResponse) bool
}

// ParseWatchFloorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchFloorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchFloorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchFloorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchFloorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchFloorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchFloorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchFloorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchFloorResponse_FieldTerminalPathArrayItemValue struct {
	WatchFloorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchFloorResponse_FieldPathArrayItemValue = (*WatchFloorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchFloorResponse as interface{}
func (fpaiv *WatchFloorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchFloorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchFloorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchFloorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchFloorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchFloorResponse'
func (fpaiv *WatchFloorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchFloorResponse) bool {
	slice := fpaiv.WatchFloorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchFloorResponse_FieldPathArrayOfValues allows storing slice of values for WatchFloorResponse fields according to their type
type WatchFloorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchFloorResponse_FieldPath
}

func ParseWatchFloorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchFloorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchFloorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchFloorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchFloorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchFloorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchFloorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchFloorResponse_FieldTerminalPathArrayOfValues struct {
	WatchFloorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchFloorResponse_FieldPathArrayOfValues = (*WatchFloorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchFloorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchFloorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*floor.FloorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchFloorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*floor.FloorChange, bool) {
	res, ok := fpaov.values.([]*floor.FloorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchFloorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchFloorsRequest_FieldPathSelector
	Get(source *WatchFloorsRequest) []interface{}
	GetSingle(source *WatchFloorsRequest) (interface{}, bool)
	ClearValue(item *WatchFloorsRequest)

	// Those methods build corresponding WatchFloorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchFloorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchFloorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchFloorsRequest_FieldPathArrayItemValue
}

type WatchFloorsRequest_FieldPathSelector int32

const (
	WatchFloorsRequest_FieldPathSelectorType         WatchFloorsRequest_FieldPathSelector = 0
	WatchFloorsRequest_FieldPathSelectorParent       WatchFloorsRequest_FieldPathSelector = 1
	WatchFloorsRequest_FieldPathSelectorPageSize     WatchFloorsRequest_FieldPathSelector = 2
	WatchFloorsRequest_FieldPathSelectorPageToken    WatchFloorsRequest_FieldPathSelector = 3
	WatchFloorsRequest_FieldPathSelectorOrderBy      WatchFloorsRequest_FieldPathSelector = 4
	WatchFloorsRequest_FieldPathSelectorResumeToken  WatchFloorsRequest_FieldPathSelector = 5
	WatchFloorsRequest_FieldPathSelectorFilter       WatchFloorsRequest_FieldPathSelector = 6
	WatchFloorsRequest_FieldPathSelectorFieldMask    WatchFloorsRequest_FieldPathSelector = 7
	WatchFloorsRequest_FieldPathSelectorView         WatchFloorsRequest_FieldPathSelector = 8
	WatchFloorsRequest_FieldPathSelectorMaxChunkSize WatchFloorsRequest_FieldPathSelector = 9
)

func (s WatchFloorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchFloorsRequest_FieldPathSelectorType:
		return "type"
	case WatchFloorsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchFloorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchFloorsRequest_FieldPathSelectorView:
		return "view"
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", s))
	}
}

func BuildWatchFloorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchFloorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchFloorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchFloorsRequest", fp)
}

func ParseWatchFloorsRequest_FieldPath(rawField string) (WatchFloorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchFloorsRequest_FieldPath(fp)
}

func MustParseWatchFloorsRequest_FieldPath(rawField string) WatchFloorsRequest_FieldPath {
	fp, err := ParseWatchFloorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchFloorsRequest_FieldTerminalPath struct {
	selector WatchFloorsRequest_FieldPathSelector
}

var _ WatchFloorsRequest_FieldPath = (*WatchFloorsRequest_FieldTerminalPath)(nil)

func (fp *WatchFloorsRequest_FieldTerminalPath) Selector() WatchFloorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchFloorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchFloorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchFloorsRequest
func (fp *WatchFloorsRequest_FieldTerminalPath) Get(source *WatchFloorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchFloorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchFloorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchFloorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchFloorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchFloorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchFloorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchFloorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchFloorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchFloorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchFloorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchFloorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchFloorsRequest
func (fp *WatchFloorsRequest_FieldTerminalPath) GetSingle(source *WatchFloorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchFloorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchFloorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchFloorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchFloorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchFloorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchFloorsRequest_FieldPathSelectorParent:
		return (*floor.ParentReference)(nil)
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		return (*floor.PagerCursor)(nil)
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		return (*floor.OrderBy)(nil)
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchFloorsRequest_FieldPathSelectorFilter:
		return (*floor.Filter)(nil)
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	case WatchFloorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorsRequest_FieldTerminalPath) ClearValue(item *WatchFloorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchFloorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchFloorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchFloorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchFloorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchFloorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchFloorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchFloorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchFloorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchFloorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchFloorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchFloorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchFloorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchFloorsRequest_FieldPathSelectorType ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorParent ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorView ||
		fp.selector == WatchFloorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchFloorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchFloorsRequest_FieldPathSelectorParent:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.ParentReference)}
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.OrderBy)}
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchFloorsRequest_FieldPathSelectorFilter:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Filter)}
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case WatchFloorsRequest_FieldPathSelectorView:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchFloorsRequest_FieldTerminalPathValue{WatchFloorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchFloorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchFloorsRequest_FieldPathSelectorParent:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.ParentReference)}
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.OrderBy)}
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchFloorsRequest_FieldPathSelectorFilter:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.Filter)}
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case WatchFloorsRequest_FieldPathSelectorView:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchFloorsRequest_FieldTerminalPathArrayOfValues{WatchFloorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchFloorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fp.selector))
	}
}

func (fp *WatchFloorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchFloorsRequest_FieldPathValue allows storing values for WatchFloorsRequest fields according to their type
type WatchFloorsRequest_FieldPathValue interface {
	WatchFloorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchFloorsRequest)
	CompareWith(*WatchFloorsRequest) (cmp int, comparable bool)
}

func ParseWatchFloorsRequest_FieldPathValue(pathStr, valueStr string) (WatchFloorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchFloorsRequest_FieldPathValue), nil
}

func MustParseWatchFloorsRequest_FieldPathValue(pathStr, valueStr string) WatchFloorsRequest_FieldPathValue {
	fpv, err := ParseWatchFloorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchFloorsRequest_FieldTerminalPathValue struct {
	WatchFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsRequest_FieldPathValue = (*WatchFloorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchFloorsRequest' as interface{}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsParentValue() (*floor.ParentReference, bool) {
	res, ok := fpv.value.(*floor.ParentReference)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsOrderByValue() (*floor.OrderBy, bool) {
	res, ok := fpv.value.(*floor.OrderBy)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsFilterValue() (*floor.Filter, bool) {
	res, ok := fpv.value.(*floor.Filter)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchFloorsRequest
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) SetTo(target **WatchFloorsRequest) {
	if *target == nil {
		*target = new(WatchFloorsRequest)
	}
	switch fpv.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchFloorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*floor.ParentReference)
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*floor.PagerCursor)
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*floor.OrderBy)
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchFloorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*floor.Filter)
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	case WatchFloorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchFloorsRequest_FieldTerminalPathValue' with the value under path in 'WatchFloorsRequest'.
func (fpv *WatchFloorsRequest_FieldTerminalPathValue) CompareWith(source *WatchFloorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*floor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchFloorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchFloorsRequest))
}

// WatchFloorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchFloorsRequest according to their type
// Present only for array (repeated) types.
type WatchFloorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchFloorsRequest_FieldPath
	ContainsValue(*WatchFloorsRequest) bool
}

// ParseWatchFloorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchFloorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchFloorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchFloorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchFloorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchFloorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchFloorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsRequest_FieldPathArrayItemValue = (*WatchFloorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchFloorsRequest as interface{}
func (fpaiv *WatchFloorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchFloorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchFloorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchFloorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchFloorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchFloorsRequest'
func (fpaiv *WatchFloorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchFloorsRequest) bool {
	slice := fpaiv.WatchFloorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchFloorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchFloorsRequest fields according to their type
type WatchFloorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchFloorsRequest_FieldPath
}

func ParseWatchFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchFloorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchFloorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchFloorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchFloorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchFloorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchFloorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchFloorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchFloorsRequest_FieldPathArrayOfValues = (*WatchFloorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchFloorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*floor.ParentReference) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*floor.OrderBy) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*floor.Filter) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchFloorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*floor.ParentReference, bool) {
	res, ok := fpaov.values.([]*floor.ParentReference)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*floor.OrderBy, bool) {
	res, ok := fpaov.values.([]*floor.OrderBy)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*floor.Filter, bool) {
	res, ok := fpaov.values.([]*floor.Filter)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchFloorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchFloorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchFloorsResponse_FieldPathSelector
	Get(source *WatchFloorsResponse) []interface{}
	GetSingle(source *WatchFloorsResponse) (interface{}, bool)
	ClearValue(item *WatchFloorsResponse)

	// Those methods build corresponding WatchFloorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchFloorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchFloorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchFloorsResponse_FieldPathArrayItemValue
}

type WatchFloorsResponse_FieldPathSelector int32

const (
	WatchFloorsResponse_FieldPathSelectorFloorChanges    WatchFloorsResponse_FieldPathSelector = 0
	WatchFloorsResponse_FieldPathSelectorIsCurrent       WatchFloorsResponse_FieldPathSelector = 1
	WatchFloorsResponse_FieldPathSelectorPageTokenChange WatchFloorsResponse_FieldPathSelector = 2
	WatchFloorsResponse_FieldPathSelectorResumeToken     WatchFloorsResponse_FieldPathSelector = 3
	WatchFloorsResponse_FieldPathSelectorSnapshotSize    WatchFloorsResponse_FieldPathSelector = 4
	WatchFloorsResponse_FieldPathSelectorIsSoftReset     WatchFloorsResponse_FieldPathSelector = 5
	WatchFloorsResponse_FieldPathSelectorIsHardReset     WatchFloorsResponse_FieldPathSelector = 6
)

func (s WatchFloorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return "floor_changes"
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", s))
	}
}

func BuildWatchFloorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchFloorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchFloorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floor_changes", "floorChanges", "floor-changes":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorFloorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchFloorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchFloorsResponse_FieldSubPath{selector: WatchFloorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchFloorsResponse", fp)
}

func ParseWatchFloorsResponse_FieldPath(rawField string) (WatchFloorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchFloorsResponse_FieldPath(fp)
}

func MustParseWatchFloorsResponse_FieldPath(rawField string) WatchFloorsResponse_FieldPath {
	fp, err := ParseWatchFloorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchFloorsResponse_FieldTerminalPath struct {
	selector WatchFloorsResponse_FieldPathSelector
}

var _ WatchFloorsResponse_FieldPath = (*WatchFloorsResponse_FieldTerminalPath)(nil)

func (fp *WatchFloorsResponse_FieldTerminalPath) Selector() WatchFloorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchFloorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchFloorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchFloorsResponse
func (fp *WatchFloorsResponse_FieldTerminalPath) Get(source *WatchFloorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchFloorsResponse_FieldPathSelectorFloorChanges:
			for _, value := range source.GetFloorChanges() {
				values = append(values, value)
			}
		case WatchFloorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchFloorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchFloorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchFloorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchFloorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchFloorsResponse
func (fp *WatchFloorsResponse_FieldTerminalPath) GetSingle(source *WatchFloorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		res := source.GetFloorChanges()
		return res, res != nil
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchFloorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return ([]*floor.FloorChange)(nil)
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchFloorsResponse_PageTokenChange)(nil)
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponse_FieldTerminalPath) ClearValue(item *WatchFloorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchFloorsResponse_FieldPathSelectorFloorChanges:
			item.FloorChanges = nil
		case WatchFloorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchFloorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchFloorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchFloorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchFloorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchFloorsResponse_FieldPathSelectorFloorChanges ||
		fp.selector == WatchFloorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchFloorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchFloorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchFloorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchFloorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchFloorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.([]*floor.FloorChange)}
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(*WatchFloorsResponse_PageTokenChange)}
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		return &WatchFloorsResponse_FieldTerminalPathValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchFloorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([][]*floor.FloorChange)}
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchFloorsResponse_PageTokenChange)}
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		return &WatchFloorsResponse_FieldTerminalPathArrayOfValues{WatchFloorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchFloorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return &WatchFloorsResponse_FieldTerminalPathArrayItemValue{WatchFloorsResponse_FieldTerminalPath: *fp, value: value.(*floor.FloorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchFloorsResponse_FieldSubPath struct {
	selector WatchFloorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchFloorsResponse_FieldPath = (*WatchFloorsResponse_FieldSubPath)(nil)

func (fps *WatchFloorsResponse_FieldSubPath) Selector() WatchFloorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchFloorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchFloorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchFloorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchFloorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchFloorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchFloorsResponse
func (fps *WatchFloorsResponse_FieldSubPath) Get(source *WatchFloorsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchFloorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchFloorsResponse))
}

// GetSingle returns value of selected field from source WatchFloorsResponse
func (fps *WatchFloorsResponse_FieldSubPath) GetSingle(source *WatchFloorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fps.selector))
	}
}

func (fps *WatchFloorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchFloorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchFloorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchFloorsResponse_FieldSubPath) ClearValue(item *WatchFloorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchFloorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchFloorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchFloorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchFloorsResponse_FieldSubPath) WithIValue(value interface{}) WatchFloorsResponse_FieldPathValue {
	return &WatchFloorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchFloorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchFloorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchFloorsResponse_FieldPathArrayOfValues {
	return &WatchFloorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchFloorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchFloorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchFloorsResponse_FieldPathArrayItemValue {
	return &WatchFloorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchFloorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchFloorsResponse_FieldPathValue allows storing values for WatchFloorsResponse fields according to their type
type WatchFloorsResponse_FieldPathValue interface {
	WatchFloorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchFloorsResponse)
	CompareWith(*WatchFloorsResponse) (cmp int, comparable bool)
}

func ParseWatchFloorsResponse_FieldPathValue(pathStr, valueStr string) (WatchFloorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchFloorsResponse_FieldPathValue), nil
}

func MustParseWatchFloorsResponse_FieldPathValue(pathStr, valueStr string) WatchFloorsResponse_FieldPathValue {
	fpv, err := ParseWatchFloorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchFloorsResponse_FieldTerminalPathValue struct {
	WatchFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsResponse_FieldPathValue = (*WatchFloorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchFloorsResponse' as interface{}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsFloorChangesValue() ([]*floor.FloorChange, bool) {
	res, ok := fpv.value.([]*floor.FloorChange)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchFloorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchFloorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchFloorsResponse
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) SetTo(target **WatchFloorsResponse) {
	if *target == nil {
		*target = new(WatchFloorsResponse)
	}
	switch fpv.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		(*target).FloorChanges = fpv.value.([]*floor.FloorChange)
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchFloorsResponse_PageTokenChange)
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchFloorsResponse_FieldTerminalPathValue' with the value under path in 'WatchFloorsResponse'.
func (fpv *WatchFloorsResponse_FieldTerminalPathValue) CompareWith(source *WatchFloorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		return 0, false
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchFloorsResponse))
}

type WatchFloorsResponse_FieldSubPathValue struct {
	WatchFloorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchFloorsResponse_FieldPathValue = (*WatchFloorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchFloorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchFloorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchFloorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchFloorsResponse_FieldSubPathValue) SetTo(target **WatchFloorsResponse) {
	if *target == nil {
		*target = new(WatchFloorsResponse)
	}
	switch fpvs.Selector() {
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchFloorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchFloorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchFloorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchFloorsResponse_FieldSubPathValue) CompareWith(source *WatchFloorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchFloorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchFloorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchFloorsResponse))
}

// WatchFloorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchFloorsResponse according to their type
// Present only for array (repeated) types.
type WatchFloorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchFloorsResponse_FieldPath
	ContainsValue(*WatchFloorsResponse) bool
}

// ParseWatchFloorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchFloorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchFloorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchFloorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchFloorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchFloorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchFloorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsResponse_FieldPathArrayItemValue = (*WatchFloorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchFloorsResponse as interface{}
func (fpaiv *WatchFloorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchFloorsResponse_FieldTerminalPathArrayItemValue) AsFloorChangesItemValue() (*floor.FloorChange, bool) {
	res, ok := fpaiv.value.(*floor.FloorChange)
	return res, ok
}

func (fpaiv *WatchFloorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchFloorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchFloorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchFloorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchFloorsResponse'
func (fpaiv *WatchFloorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchFloorsResponse) bool {
	slice := fpaiv.WatchFloorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchFloorsResponse_FieldSubPathArrayItemValue struct {
	WatchFloorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchFloorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchFloorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchFloorsResponse'
func (fpaivs *WatchFloorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchFloorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchFloorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchFloorsResponse fields according to their type
type WatchFloorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchFloorsResponse_FieldPath
}

func ParseWatchFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchFloorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchFloorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchFloorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchFloorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchFloorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchFloorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchFloorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchFloorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchFloorsResponse_FieldPathArrayOfValues = (*WatchFloorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchFloorsResponse_FieldPathSelectorFloorChanges:
		for _, v := range fpaov.values.([][]*floor.FloorChange) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchFloorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchFloorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsFloorChangesArrayOfValues() ([][]*floor.FloorChange, bool) {
	res, ok := fpaov.values.([][]*floor.FloorChange)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchFloorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchFloorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchFloorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchFloorsResponse_FieldSubPathArrayOfValues struct {
	WatchFloorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchFloorsResponse_FieldPathArrayOfValues = (*WatchFloorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchFloorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchFloorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchFloorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchFloorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchFloorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchFloorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchFloorsResponse_PageTokenChange)

	// Those methods build corresponding WatchFloorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchFloorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchFloorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchFloorsResponsePageTokenChange_FieldPathSelector = 0
	WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchFloorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchFloorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchFloorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchFloorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchFloorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchFloorsResponsePageTokenChange_FieldTerminalPath{selector: WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchFloorsResponsePageTokenChange_FieldTerminalPath{selector: WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchFloorsResponse_PageTokenChange", fp)
}

func ParseWatchFloorsResponsePageTokenChange_FieldPath(rawField string) (WatchFloorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchFloorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchFloorsResponsePageTokenChange_FieldPath(rawField string) WatchFloorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchFloorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchFloorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchFloorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchFloorsResponsePageTokenChange_FieldPath = (*WatchFloorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchFloorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchFloorsResponse_PageTokenChange
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchFloorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchFloorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchFloorsResponse_PageTokenChange
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchFloorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchFloorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*floor.PagerCursor)(nil)
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*floor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchFloorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchFloorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchFloorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchFloorsResponsePageTokenChange_FieldTerminalPathValue{WatchFloorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchFloorsResponsePageTokenChange_FieldTerminalPathValue{WatchFloorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*floor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchFloorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchFloorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchFloorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*floor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchFloorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchFloorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchFloorsResponsePageTokenChange_FieldPathValue interface {
	WatchFloorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchFloorsResponse_PageTokenChange)
	CompareWith(*WatchFloorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchFloorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchFloorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchFloorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchFloorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchFloorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchFloorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchFloorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchFloorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchFloorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsResponsePageTokenChange_FieldPathValue = (*WatchFloorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}
func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*floor.PagerCursor, bool) {
	res, ok := fpv.value.(*floor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchFloorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchFloorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*floor.PagerCursor)
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*floor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchFloorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchFloorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchFloorsResponse_PageTokenChange'.
func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchFloorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchFloorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchFloorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchFloorsResponse_PageTokenChange))
}

// WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchFloorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchFloorsResponse_PageTokenChange) bool
}

// ParseWatchFloorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchFloorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchFloorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchFloorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchFloorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchFloorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchFloorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchFloorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchFloorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchFloorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchFloorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchFloorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchFloorsResponsePageTokenChange_FieldPath
}

func ParseWatchFloorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchFloorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchFloorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchFloorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchFloorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchFloorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	case WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*floor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}
func (fpaov *WatchFloorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*floor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*floor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateFloorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateFloorRequest_FieldPathSelector
	Get(source *CreateFloorRequest) []interface{}
	GetSingle(source *CreateFloorRequest) (interface{}, bool)
	ClearValue(item *CreateFloorRequest)

	// Those methods build corresponding CreateFloorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateFloorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateFloorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateFloorRequest_FieldPathArrayItemValue
}

type CreateFloorRequest_FieldPathSelector int32

const (
	CreateFloorRequest_FieldPathSelectorParent CreateFloorRequest_FieldPathSelector = 0
	CreateFloorRequest_FieldPathSelectorFloor  CreateFloorRequest_FieldPathSelector = 1
)

func (s CreateFloorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateFloorRequest_FieldPathSelectorParent:
		return "parent"
	case CreateFloorRequest_FieldPathSelectorFloor:
		return "floor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", s))
	}
}

func BuildCreateFloorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateFloorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateFloorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateFloorRequest_FieldTerminalPath{selector: CreateFloorRequest_FieldPathSelectorParent}, nil
		case "floor":
			return &CreateFloorRequest_FieldTerminalPath{selector: CreateFloorRequest_FieldPathSelectorFloor}, nil
		}
	} else {
		switch fp[0] {
		case "floor":
			if subpath, err := floor.BuildFloor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateFloorRequest_FieldSubPath{selector: CreateFloorRequest_FieldPathSelectorFloor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateFloorRequest", fp)
}

func ParseCreateFloorRequest_FieldPath(rawField string) (CreateFloorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateFloorRequest_FieldPath(fp)
}

func MustParseCreateFloorRequest_FieldPath(rawField string) CreateFloorRequest_FieldPath {
	fp, err := ParseCreateFloorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateFloorRequest_FieldTerminalPath struct {
	selector CreateFloorRequest_FieldPathSelector
}

var _ CreateFloorRequest_FieldPath = (*CreateFloorRequest_FieldTerminalPath)(nil)

func (fp *CreateFloorRequest_FieldTerminalPath) Selector() CreateFloorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateFloorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateFloorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateFloorRequest
func (fp *CreateFloorRequest_FieldTerminalPath) Get(source *CreateFloorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateFloorRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateFloorRequest_FieldPathSelectorFloor:
			if source.Floor != nil {
				values = append(values, source.Floor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateFloorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateFloorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateFloorRequest
func (fp *CreateFloorRequest_FieldTerminalPath) GetSingle(source *CreateFloorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateFloorRequest_FieldPathSelectorFloor:
		res := source.GetFloor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
	}
}

func (fp *CreateFloorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateFloorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateFloorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		return (*floor.ParentReference)(nil)
	case CreateFloorRequest_FieldPathSelectorFloor:
		return (*floor.Floor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
	}
}

func (fp *CreateFloorRequest_FieldTerminalPath) ClearValue(item *CreateFloorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateFloorRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateFloorRequest_FieldPathSelectorFloor:
			item.Floor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateFloorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateFloorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateFloorRequest_FieldPathSelectorParent
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateFloorRequest_FieldPathValue {
	switch fp.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		return &CreateFloorRequest_FieldTerminalPathValue{CreateFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.ParentReference)}
	case CreateFloorRequest_FieldPathSelectorFloor:
		return &CreateFloorRequest_FieldTerminalPathValue{CreateFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
	}
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateFloorRequest_FieldPathArrayOfValues {
	fpaov := &CreateFloorRequest_FieldTerminalPathArrayOfValues{CreateFloorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		return &CreateFloorRequest_FieldTerminalPathArrayOfValues{CreateFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.ParentReference)}
	case CreateFloorRequest_FieldPathSelectorFloor:
		return &CreateFloorRequest_FieldTerminalPathArrayOfValues{CreateFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateFloorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fp.selector))
	}
}

func (fp *CreateFloorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateFloorRequest_FieldSubPath struct {
	selector CreateFloorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateFloorRequest_FieldPath = (*CreateFloorRequest_FieldSubPath)(nil)

func (fps *CreateFloorRequest_FieldSubPath) Selector() CreateFloorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateFloorRequest_FieldSubPath) AsFloorSubPath() (floor.Floor_FieldPath, bool) {
	res, ok := fps.subPath.(floor.Floor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateFloorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateFloorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateFloorRequest
func (fps *CreateFloorRequest_FieldSubPath) Get(source *CreateFloorRequest) (values []interface{}) {
	if asFloorFieldPath, ok := fps.AsFloorSubPath(); ok {
		values = append(values, asFloorFieldPath.Get(source.GetFloor())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateFloorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateFloorRequest))
}

// GetSingle returns value of selected field from source CreateFloorRequest
func (fps *CreateFloorRequest_FieldSubPath) GetSingle(source *CreateFloorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateFloorRequest_FieldPathSelectorFloor:
		if source.GetFloor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFloor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fps.selector))
	}
}

func (fps *CreateFloorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateFloorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateFloorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateFloorRequest_FieldSubPath) ClearValue(item *CreateFloorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateFloorRequest_FieldPathSelectorFloor:
			fps.subPath.ClearValueRaw(item.Floor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateFloorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateFloorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateFloorRequest_FieldSubPath) WithIValue(value interface{}) CreateFloorRequest_FieldPathValue {
	return &CreateFloorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateFloorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateFloorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateFloorRequest_FieldPathArrayOfValues {
	return &CreateFloorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateFloorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateFloorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateFloorRequest_FieldPathArrayItemValue {
	return &CreateFloorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateFloorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateFloorRequest_FieldPathValue allows storing values for CreateFloorRequest fields according to their type
type CreateFloorRequest_FieldPathValue interface {
	CreateFloorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateFloorRequest)
	CompareWith(*CreateFloorRequest) (cmp int, comparable bool)
}

func ParseCreateFloorRequest_FieldPathValue(pathStr, valueStr string) (CreateFloorRequest_FieldPathValue, error) {
	fp, err := ParseCreateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateFloorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateFloorRequest_FieldPathValue), nil
}

func MustParseCreateFloorRequest_FieldPathValue(pathStr, valueStr string) CreateFloorRequest_FieldPathValue {
	fpv, err := ParseCreateFloorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateFloorRequest_FieldTerminalPathValue struct {
	CreateFloorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateFloorRequest_FieldPathValue = (*CreateFloorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateFloorRequest' as interface{}
func (fpv *CreateFloorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateFloorRequest_FieldTerminalPathValue) AsParentValue() (*floor.ParentReference, bool) {
	res, ok := fpv.value.(*floor.ParentReference)
	return res, ok
}
func (fpv *CreateFloorRequest_FieldTerminalPathValue) AsFloorValue() (*floor.Floor, bool) {
	res, ok := fpv.value.(*floor.Floor)
	return res, ok
}

// SetTo stores value for selected field for object CreateFloorRequest
func (fpv *CreateFloorRequest_FieldTerminalPathValue) SetTo(target **CreateFloorRequest) {
	if *target == nil {
		*target = new(CreateFloorRequest)
	}
	switch fpv.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*floor.ParentReference)
	case CreateFloorRequest_FieldPathSelectorFloor:
		(*target).Floor = fpv.value.(*floor.Floor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateFloorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateFloorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateFloorRequest_FieldTerminalPathValue' with the value under path in 'CreateFloorRequest'.
func (fpv *CreateFloorRequest_FieldTerminalPathValue) CompareWith(source *CreateFloorRequest) (int, bool) {
	switch fpv.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*floor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateFloorRequest_FieldPathSelectorFloor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateFloorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateFloorRequest))
}

type CreateFloorRequest_FieldSubPathValue struct {
	CreateFloorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateFloorRequest_FieldPathValue = (*CreateFloorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateFloorRequest_FieldSubPathValue) AsFloorPathValue() (floor.Floor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(floor.Floor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateFloorRequest_FieldSubPathValue) SetTo(target **CreateFloorRequest) {
	if *target == nil {
		*target = new(CreateFloorRequest)
	}
	switch fpvs.Selector() {
	case CreateFloorRequest_FieldPathSelectorFloor:
		fpvs.subPathValue.(floor.Floor_FieldPathValue).SetTo(&(*target).Floor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateFloorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateFloorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateFloorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateFloorRequest_FieldSubPathValue) CompareWith(source *CreateFloorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateFloorRequest_FieldPathSelectorFloor:
		return fpvs.subPathValue.(floor.Floor_FieldPathValue).CompareWith(source.GetFloor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateFloorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateFloorRequest))
}

// CreateFloorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateFloorRequest according to their type
// Present only for array (repeated) types.
type CreateFloorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateFloorRequest_FieldPath
	ContainsValue(*CreateFloorRequest) bool
}

// ParseCreateFloorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateFloorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateFloorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateFloorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateFloorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateFloorRequest_FieldTerminalPathArrayItemValue struct {
	CreateFloorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateFloorRequest_FieldPathArrayItemValue = (*CreateFloorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateFloorRequest as interface{}
func (fpaiv *CreateFloorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateFloorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateFloorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateFloorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateFloorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateFloorRequest'
func (fpaiv *CreateFloorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateFloorRequest) bool {
	slice := fpaiv.CreateFloorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateFloorRequest_FieldSubPathArrayItemValue struct {
	CreateFloorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateFloorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateFloorRequest_FieldSubPathArrayItemValue) AsFloorPathItemValue() (floor.Floor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateFloorRequest'
func (fpaivs *CreateFloorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateFloorRequest) bool {
	switch fpaivs.Selector() {
	case CreateFloorRequest_FieldPathSelectorFloor:
		return fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue).ContainsValue(source.GetFloor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateFloorRequest: %d", fpaivs.Selector()))
	}
}

// CreateFloorRequest_FieldPathArrayOfValues allows storing slice of values for CreateFloorRequest fields according to their type
type CreateFloorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateFloorRequest_FieldPath
}

func ParseCreateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateFloorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateFloorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateFloorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateFloorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateFloorRequest_FieldTerminalPathArrayOfValues struct {
	CreateFloorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateFloorRequest_FieldPathArrayOfValues = (*CreateFloorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateFloorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateFloorRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*floor.ParentReference) {
			values = append(values, v)
		}
	case CreateFloorRequest_FieldPathSelectorFloor:
		for _, v := range fpaov.values.([]*floor.Floor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateFloorRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*floor.ParentReference, bool) {
	res, ok := fpaov.values.([]*floor.ParentReference)
	return res, ok
}
func (fpaov *CreateFloorRequest_FieldTerminalPathArrayOfValues) AsFloorArrayOfValues() ([]*floor.Floor, bool) {
	res, ok := fpaov.values.([]*floor.Floor)
	return res, ok
}

type CreateFloorRequest_FieldSubPathArrayOfValues struct {
	CreateFloorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateFloorRequest_FieldPathArrayOfValues = (*CreateFloorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateFloorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateFloorRequest_FieldSubPathArrayOfValues) AsFloorPathArrayOfValues() (floor.Floor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(floor.Floor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateFloorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateFloorRequest_FieldPathSelector
	Get(source *UpdateFloorRequest) []interface{}
	GetSingle(source *UpdateFloorRequest) (interface{}, bool)
	ClearValue(item *UpdateFloorRequest)

	// Those methods build corresponding UpdateFloorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateFloorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateFloorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateFloorRequest_FieldPathArrayItemValue
}

type UpdateFloorRequest_FieldPathSelector int32

const (
	UpdateFloorRequest_FieldPathSelectorFloor      UpdateFloorRequest_FieldPathSelector = 0
	UpdateFloorRequest_FieldPathSelectorUpdateMask UpdateFloorRequest_FieldPathSelector = 1
	UpdateFloorRequest_FieldPathSelectorCas        UpdateFloorRequest_FieldPathSelector = 2
)

func (s UpdateFloorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return "floor"
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateFloorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", s))
	}
}

func BuildUpdateFloorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateFloorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateFloorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floor":
			return &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorFloor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "floor":
			if subpath, err := floor.BuildFloor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateFloorRequest_FieldSubPath{selector: UpdateFloorRequest_FieldPathSelectorFloor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateFloorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateFloorRequest_FieldSubPath{selector: UpdateFloorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateFloorRequest", fp)
}

func ParseUpdateFloorRequest_FieldPath(rawField string) (UpdateFloorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateFloorRequest_FieldPath(fp)
}

func MustParseUpdateFloorRequest_FieldPath(rawField string) UpdateFloorRequest_FieldPath {
	fp, err := ParseUpdateFloorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateFloorRequest_FieldTerminalPath struct {
	selector UpdateFloorRequest_FieldPathSelector
}

var _ UpdateFloorRequest_FieldPath = (*UpdateFloorRequest_FieldTerminalPath)(nil)

func (fp *UpdateFloorRequest_FieldTerminalPath) Selector() UpdateFloorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateFloorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateFloorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateFloorRequest
func (fp *UpdateFloorRequest_FieldTerminalPath) Get(source *UpdateFloorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateFloorRequest_FieldPathSelectorFloor:
			if source.Floor != nil {
				values = append(values, source.Floor)
			}
		case UpdateFloorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateFloorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateFloorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateFloorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateFloorRequest
func (fp *UpdateFloorRequest_FieldTerminalPath) GetSingle(source *UpdateFloorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		res := source.GetFloor()
		return res, res != nil
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateFloorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateFloorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateFloorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return (*floor.Floor)(nil)
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		return (*floor.Floor_FieldMask)(nil)
	case UpdateFloorRequest_FieldPathSelectorCas:
		return (*UpdateFloorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequest_FieldTerminalPath) ClearValue(item *UpdateFloorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateFloorRequest_FieldPathSelectorFloor:
			item.Floor = nil
		case UpdateFloorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateFloorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateFloorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateFloorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateFloorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateFloorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return &UpdateFloorRequest_FieldTerminalPathValue{UpdateFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor)}
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		return &UpdateFloorRequest_FieldTerminalPathValue{UpdateFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	case UpdateFloorRequest_FieldPathSelectorCas:
		return &UpdateFloorRequest_FieldTerminalPathValue{UpdateFloorRequest_FieldTerminalPath: *fp, value: value.(*UpdateFloorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateFloorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateFloorRequest_FieldTerminalPathArrayOfValues{UpdateFloorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return &UpdateFloorRequest_FieldTerminalPathArrayOfValues{UpdateFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor)}
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		return &UpdateFloorRequest_FieldTerminalPathArrayOfValues{UpdateFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	case UpdateFloorRequest_FieldPathSelectorCas:
		return &UpdateFloorRequest_FieldTerminalPathArrayOfValues{UpdateFloorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateFloorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateFloorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateFloorRequest_FieldSubPath struct {
	selector UpdateFloorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateFloorRequest_FieldPath = (*UpdateFloorRequest_FieldSubPath)(nil)

func (fps *UpdateFloorRequest_FieldSubPath) Selector() UpdateFloorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateFloorRequest_FieldSubPath) AsFloorSubPath() (floor.Floor_FieldPath, bool) {
	res, ok := fps.subPath.(floor.Floor_FieldPath)
	return res, ok
}
func (fps *UpdateFloorRequest_FieldSubPath) AsCasSubPath() (UpdateFloorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateFloorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateFloorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateFloorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateFloorRequest
func (fps *UpdateFloorRequest_FieldSubPath) Get(source *UpdateFloorRequest) (values []interface{}) {
	if asFloorFieldPath, ok := fps.AsFloorSubPath(); ok {
		values = append(values, asFloorFieldPath.Get(source.GetFloor())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateFloorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateFloorRequest))
}

// GetSingle returns value of selected field from source UpdateFloorRequest
func (fps *UpdateFloorRequest_FieldSubPath) GetSingle(source *UpdateFloorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		if source.GetFloor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFloor())
	case UpdateFloorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fps.selector))
	}
}

func (fps *UpdateFloorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateFloorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateFloorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateFloorRequest_FieldSubPath) ClearValue(item *UpdateFloorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateFloorRequest_FieldPathSelectorFloor:
			fps.subPath.ClearValueRaw(item.Floor)
		case UpdateFloorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateFloorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateFloorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateFloorRequest_FieldSubPath) WithIValue(value interface{}) UpdateFloorRequest_FieldPathValue {
	return &UpdateFloorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateFloorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateFloorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateFloorRequest_FieldPathArrayOfValues {
	return &UpdateFloorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateFloorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateFloorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateFloorRequest_FieldPathArrayItemValue {
	return &UpdateFloorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateFloorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateFloorRequest_FieldPathValue allows storing values for UpdateFloorRequest fields according to their type
type UpdateFloorRequest_FieldPathValue interface {
	UpdateFloorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateFloorRequest)
	CompareWith(*UpdateFloorRequest) (cmp int, comparable bool)
}

func ParseUpdateFloorRequest_FieldPathValue(pathStr, valueStr string) (UpdateFloorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateFloorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateFloorRequest_FieldPathValue), nil
}

func MustParseUpdateFloorRequest_FieldPathValue(pathStr, valueStr string) UpdateFloorRequest_FieldPathValue {
	fpv, err := ParseUpdateFloorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateFloorRequest_FieldTerminalPathValue struct {
	UpdateFloorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateFloorRequest_FieldPathValue = (*UpdateFloorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateFloorRequest' as interface{}
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) AsFloorValue() (*floor.Floor, bool) {
	res, ok := fpv.value.(*floor.Floor)
	return res, ok
}
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateFloorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateFloorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateFloorRequest
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) SetTo(target **UpdateFloorRequest) {
	if *target == nil {
		*target = new(UpdateFloorRequest)
	}
	switch fpv.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		(*target).Floor = fpv.value.(*floor.Floor)
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*floor.Floor_FieldMask)
	case UpdateFloorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateFloorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateFloorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateFloorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateFloorRequest_FieldTerminalPathValue' with the value under path in 'UpdateFloorRequest'.
func (fpv *UpdateFloorRequest_FieldTerminalPathValue) CompareWith(source *UpdateFloorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return 0, false
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateFloorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateFloorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateFloorRequest))
}

type UpdateFloorRequest_FieldSubPathValue struct {
	UpdateFloorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateFloorRequest_FieldPathValue = (*UpdateFloorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateFloorRequest_FieldSubPathValue) AsFloorPathValue() (floor.Floor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(floor.Floor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateFloorRequest_FieldSubPathValue) AsCasPathValue() (UpdateFloorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateFloorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateFloorRequest_FieldSubPathValue) SetTo(target **UpdateFloorRequest) {
	if *target == nil {
		*target = new(UpdateFloorRequest)
	}
	switch fpvs.Selector() {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		fpvs.subPathValue.(floor.Floor_FieldPathValue).SetTo(&(*target).Floor)
	case UpdateFloorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateFloorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateFloorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateFloorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateFloorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateFloorRequest_FieldSubPathValue) CompareWith(source *UpdateFloorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return fpvs.subPathValue.(floor.Floor_FieldPathValue).CompareWith(source.GetFloor())
	case UpdateFloorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateFloorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateFloorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateFloorRequest))
}

// UpdateFloorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateFloorRequest according to their type
// Present only for array (repeated) types.
type UpdateFloorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateFloorRequest_FieldPath
	ContainsValue(*UpdateFloorRequest) bool
}

// ParseUpdateFloorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateFloorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateFloorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateFloorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateFloorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateFloorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateFloorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateFloorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateFloorRequest_FieldPathArrayItemValue = (*UpdateFloorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateFloorRequest as interface{}
func (fpaiv *UpdateFloorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateFloorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateFloorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateFloorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateFloorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateFloorRequest'
func (fpaiv *UpdateFloorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateFloorRequest) bool {
	slice := fpaiv.UpdateFloorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateFloorRequest_FieldSubPathArrayItemValue struct {
	UpdateFloorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateFloorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateFloorRequest_FieldSubPathArrayItemValue) AsFloorPathItemValue() (floor.Floor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateFloorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateFloorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateFloorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateFloorRequest'
func (fpaivs *UpdateFloorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateFloorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		return fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue).ContainsValue(source.GetFloor())
	case UpdateFloorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateFloorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateFloorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateFloorRequest fields according to their type
type UpdateFloorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateFloorRequest_FieldPath
}

func ParseUpdateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateFloorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateFloorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateFloorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateFloorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateFloorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateFloorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateFloorRequest_FieldPathArrayOfValues = (*UpdateFloorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateFloorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateFloorRequest_FieldPathSelectorFloor:
		for _, v := range fpaov.values.([]*floor.Floor) {
			values = append(values, v)
		}
	case UpdateFloorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	case UpdateFloorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateFloorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateFloorRequest_FieldTerminalPathArrayOfValues) AsFloorArrayOfValues() ([]*floor.Floor, bool) {
	res, ok := fpaov.values.([]*floor.Floor)
	return res, ok
}
func (fpaov *UpdateFloorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}
func (fpaov *UpdateFloorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateFloorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateFloorRequest_CAS)
	return res, ok
}

type UpdateFloorRequest_FieldSubPathArrayOfValues struct {
	UpdateFloorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateFloorRequest_FieldPathArrayOfValues = (*UpdateFloorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateFloorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateFloorRequest_FieldSubPathArrayOfValues) AsFloorPathArrayOfValues() (floor.Floor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(floor.Floor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateFloorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateFloorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateFloorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateFloorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateFloorRequestCAS_FieldPathSelector
	Get(source *UpdateFloorRequest_CAS) []interface{}
	GetSingle(source *UpdateFloorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateFloorRequest_CAS)

	// Those methods build corresponding UpdateFloorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateFloorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateFloorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateFloorRequestCAS_FieldPathArrayItemValue
}

type UpdateFloorRequestCAS_FieldPathSelector int32

const (
	UpdateFloorRequestCAS_FieldPathSelectorConditionalState UpdateFloorRequestCAS_FieldPathSelector = 0
	UpdateFloorRequestCAS_FieldPathSelectorFieldMask        UpdateFloorRequestCAS_FieldPathSelector = 1
)

func (s UpdateFloorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", s))
	}
}

func BuildUpdateFloorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateFloorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateFloorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateFloorRequestCAS_FieldTerminalPath{selector: UpdateFloorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateFloorRequestCAS_FieldTerminalPath{selector: UpdateFloorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := floor.BuildFloor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateFloorRequestCAS_FieldSubPath{selector: UpdateFloorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateFloorRequest_CAS", fp)
}

func ParseUpdateFloorRequestCAS_FieldPath(rawField string) (UpdateFloorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateFloorRequestCAS_FieldPath(fp)
}

func MustParseUpdateFloorRequestCAS_FieldPath(rawField string) UpdateFloorRequestCAS_FieldPath {
	fp, err := ParseUpdateFloorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateFloorRequestCAS_FieldTerminalPath struct {
	selector UpdateFloorRequestCAS_FieldPathSelector
}

var _ UpdateFloorRequestCAS_FieldPath = (*UpdateFloorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) Selector() UpdateFloorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateFloorRequest_CAS
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) Get(source *UpdateFloorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateFloorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateFloorRequest_CAS
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateFloorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateFloorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return (*floor.Floor)(nil)
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		return (*floor.Floor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateFloorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateFloorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateFloorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateFloorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateFloorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateFloorRequestCAS_FieldTerminalPathValue{UpdateFloorRequestCAS_FieldTerminalPath: *fp, value: value.(*floor.Floor)}
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateFloorRequestCAS_FieldTerminalPathValue{UpdateFloorRequestCAS_FieldTerminalPath: *fp, value: value.(*floor.Floor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateFloorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues{UpdateFloorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues{UpdateFloorRequestCAS_FieldTerminalPath: *fp, values: values.([]*floor.Floor)}
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues{UpdateFloorRequestCAS_FieldTerminalPath: *fp, values: values.([]*floor.Floor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateFloorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateFloorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateFloorRequestCAS_FieldSubPath struct {
	selector UpdateFloorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateFloorRequestCAS_FieldPath = (*UpdateFloorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateFloorRequestCAS_FieldSubPath) Selector() UpdateFloorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateFloorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (floor.Floor_FieldPath, bool) {
	res, ok := fps.subPath.(floor.Floor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateFloorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateFloorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateFloorRequest_CAS
func (fps *UpdateFloorRequestCAS_FieldSubPath) Get(source *UpdateFloorRequest_CAS) (values []interface{}) {
	if asFloorFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asFloorFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateFloorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateFloorRequest_CAS
func (fps *UpdateFloorRequestCAS_FieldSubPath) GetSingle(source *UpdateFloorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateFloorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateFloorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) ClearValue(item *UpdateFloorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateFloorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateFloorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateFloorRequestCAS_FieldPathValue {
	return &UpdateFloorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateFloorRequestCAS_FieldPathArrayOfValues {
	return &UpdateFloorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateFloorRequestCAS_FieldPathArrayItemValue {
	return &UpdateFloorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateFloorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateFloorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateFloorRequestCAS_FieldPathValue interface {
	UpdateFloorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateFloorRequest_CAS)
	CompareWith(*UpdateFloorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateFloorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateFloorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateFloorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateFloorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateFloorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateFloorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateFloorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateFloorRequestCAS_FieldTerminalPathValue struct {
	UpdateFloorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateFloorRequestCAS_FieldPathValue = (*UpdateFloorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*floor.Floor, bool) {
	res, ok := fpv.value.(*floor.Floor)
	return res, ok
}
func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*floor.Floor_FieldMask, bool) {
	res, ok := fpv.value.(*floor.Floor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateFloorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateFloorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*floor.Floor)
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*floor.Floor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateFloorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateFloorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateFloorRequest_CAS'.
func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateFloorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateFloorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateFloorRequest_CAS))
}

type UpdateFloorRequestCAS_FieldSubPathValue struct {
	UpdateFloorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateFloorRequestCAS_FieldPathValue = (*UpdateFloorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (floor.Floor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(floor.Floor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) SetTo(target **UpdateFloorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateFloorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(floor.Floor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateFloorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateFloorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(floor.Floor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateFloorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateFloorRequest_CAS))
}

// UpdateFloorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateFloorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateFloorRequestCAS_FieldPath
	ContainsValue(*UpdateFloorRequest_CAS) bool
}

// ParseUpdateFloorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateFloorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateFloorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateFloorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateFloorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateFloorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateFloorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateFloorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateFloorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateFloorRequestCAS_FieldPathArrayItemValue = (*UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateFloorRequest_CAS as interface{}
func (fpaiv *UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateFloorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateFloorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateFloorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateFloorRequest_CAS) bool {
	slice := fpaiv.UpdateFloorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateFloorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateFloorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateFloorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateFloorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (floor.Floor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateFloorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateFloorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(floor.Floor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateFloorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateFloorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateFloorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateFloorRequestCAS_FieldPath
}

func ParseUpdateFloorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateFloorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateFloorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateFloorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateFloorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateFloorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateFloorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateFloorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateFloorRequestCAS_FieldPathArrayOfValues = (*UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateFloorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*floor.Floor) {
			values = append(values, v)
		}
	case UpdateFloorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*floor.Floor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*floor.Floor, bool) {
	res, ok := fpaov.values.([]*floor.Floor)
	return res, ok
}
func (fpaov *UpdateFloorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*floor.Floor_FieldMask, bool) {
	res, ok := fpaov.values.([]*floor.Floor_FieldMask)
	return res, ok
}

type UpdateFloorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateFloorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateFloorRequestCAS_FieldPathArrayOfValues = (*UpdateFloorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateFloorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateFloorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (floor.Floor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(floor.Floor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteFloorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteFloorRequest_FieldPathSelector
	Get(source *DeleteFloorRequest) []interface{}
	GetSingle(source *DeleteFloorRequest) (interface{}, bool)
	ClearValue(item *DeleteFloorRequest)

	// Those methods build corresponding DeleteFloorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteFloorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteFloorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteFloorRequest_FieldPathArrayItemValue
}

type DeleteFloorRequest_FieldPathSelector int32

const (
	DeleteFloorRequest_FieldPathSelectorName DeleteFloorRequest_FieldPathSelector = 0
)

func (s DeleteFloorRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteFloorRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", s))
	}
}

func BuildDeleteFloorRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteFloorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteFloorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteFloorRequest_FieldTerminalPath{selector: DeleteFloorRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteFloorRequest", fp)
}

func ParseDeleteFloorRequest_FieldPath(rawField string) (DeleteFloorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteFloorRequest_FieldPath(fp)
}

func MustParseDeleteFloorRequest_FieldPath(rawField string) DeleteFloorRequest_FieldPath {
	fp, err := ParseDeleteFloorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteFloorRequest_FieldTerminalPath struct {
	selector DeleteFloorRequest_FieldPathSelector
}

var _ DeleteFloorRequest_FieldPath = (*DeleteFloorRequest_FieldTerminalPath)(nil)

func (fp *DeleteFloorRequest_FieldTerminalPath) Selector() DeleteFloorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteFloorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteFloorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteFloorRequest
func (fp *DeleteFloorRequest_FieldTerminalPath) Get(source *DeleteFloorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteFloorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteFloorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteFloorRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteFloorRequest
func (fp *DeleteFloorRequest_FieldTerminalPath) GetSingle(source *DeleteFloorRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
	}
}

func (fp *DeleteFloorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteFloorRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteFloorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		return (*floor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
	}
}

func (fp *DeleteFloorRequest_FieldTerminalPath) ClearValue(item *DeleteFloorRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteFloorRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteFloorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteFloorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteFloorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteFloorRequest_FieldPathSelectorName
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteFloorRequest_FieldPathValue {
	switch fp.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		return &DeleteFloorRequest_FieldTerminalPathValue{DeleteFloorRequest_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
	}
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteFloorRequest_FieldPathArrayOfValues {
	fpaov := &DeleteFloorRequest_FieldTerminalPathArrayOfValues{DeleteFloorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		return &DeleteFloorRequest_FieldTerminalPathArrayOfValues{DeleteFloorRequest_FieldTerminalPath: *fp, values: values.([]*floor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteFloorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fp.selector))
	}
}

func (fp *DeleteFloorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteFloorRequest_FieldPathValue allows storing values for DeleteFloorRequest fields according to their type
type DeleteFloorRequest_FieldPathValue interface {
	DeleteFloorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteFloorRequest)
	CompareWith(*DeleteFloorRequest) (cmp int, comparable bool)
}

func ParseDeleteFloorRequest_FieldPathValue(pathStr, valueStr string) (DeleteFloorRequest_FieldPathValue, error) {
	fp, err := ParseDeleteFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteFloorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteFloorRequest_FieldPathValue), nil
}

func MustParseDeleteFloorRequest_FieldPathValue(pathStr, valueStr string) DeleteFloorRequest_FieldPathValue {
	fpv, err := ParseDeleteFloorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteFloorRequest_FieldTerminalPathValue struct {
	DeleteFloorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteFloorRequest_FieldPathValue = (*DeleteFloorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteFloorRequest' as interface{}
func (fpv *DeleteFloorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteFloorRequest_FieldTerminalPathValue) AsNameValue() (*floor.Reference, bool) {
	res, ok := fpv.value.(*floor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteFloorRequest
func (fpv *DeleteFloorRequest_FieldTerminalPathValue) SetTo(target **DeleteFloorRequest) {
	if *target == nil {
		*target = new(DeleteFloorRequest)
	}
	switch fpv.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*floor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteFloorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteFloorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteFloorRequest_FieldTerminalPathValue' with the value under path in 'DeleteFloorRequest'.
func (fpv *DeleteFloorRequest_FieldTerminalPathValue) CompareWith(source *DeleteFloorRequest) (int, bool) {
	switch fpv.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*floor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteFloorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteFloorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteFloorRequest))
}

// DeleteFloorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteFloorRequest according to their type
// Present only for array (repeated) types.
type DeleteFloorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteFloorRequest_FieldPath
	ContainsValue(*DeleteFloorRequest) bool
}

// ParseDeleteFloorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteFloorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteFloorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteFloorRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteFloorRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteFloorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteFloorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteFloorRequest_FieldTerminalPathArrayItemValue struct {
	DeleteFloorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteFloorRequest_FieldPathArrayItemValue = (*DeleteFloorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteFloorRequest as interface{}
func (fpaiv *DeleteFloorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteFloorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteFloorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteFloorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteFloorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteFloorRequest'
func (fpaiv *DeleteFloorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteFloorRequest) bool {
	slice := fpaiv.DeleteFloorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteFloorRequest_FieldPathArrayOfValues allows storing slice of values for DeleteFloorRequest fields according to their type
type DeleteFloorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteFloorRequest_FieldPath
}

func ParseDeleteFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteFloorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteFloorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteFloorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteFloorRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteFloorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteFloorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteFloorRequest_FieldTerminalPathArrayOfValues struct {
	DeleteFloorRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteFloorRequest_FieldPathArrayOfValues = (*DeleteFloorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteFloorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteFloorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*floor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteFloorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*floor.Reference, bool) {
	res, ok := fpaov.values.([]*floor.Reference)
	return res, ok
}
