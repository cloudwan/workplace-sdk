// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection_service.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &vendor_connection.PointGrab{}
)

type GetVendorConnectionRequest_FieldMask struct {
	Paths []GetVendorConnectionRequest_FieldPath
}

func FullGetVendorConnectionRequest_FieldMask() *GetVendorConnectionRequest_FieldMask {
	res := &GetVendorConnectionRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetVendorConnectionRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetVendorConnectionRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetVendorConnectionRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetVendorConnectionRequest_FieldPath(raw)
	})
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Subtract(other *GetVendorConnectionRequest_FieldMask) *GetVendorConnectionRequest_FieldMask {
	result := &GetVendorConnectionRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetVendorConnectionRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetVendorConnectionRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetVendorConnectionRequest_FieldMask) FilterInputFields() *GetVendorConnectionRequest_FieldMask {
	result := &GetVendorConnectionRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetVendorConnectionRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetVendorConnectionRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetVendorConnectionRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetVendorConnectionRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetVendorConnectionRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) AppendPath(path GetVendorConnectionRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetVendorConnectionRequest_FieldPath))
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) GetPaths() []GetVendorConnectionRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetVendorConnectionRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Set(target, source *GetVendorConnectionRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetVendorConnectionRequest), source.(*GetVendorConnectionRequest))
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) Project(source *GetVendorConnectionRequest) *GetVendorConnectionRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetVendorConnectionRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetVendorConnectionRequest_FieldTerminalPath:
			switch tp.selector {
			case GetVendorConnectionRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetVendorConnectionRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetVendorConnectionRequest))
}

func (fieldMask *GetVendorConnectionRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetVendorConnectionsRequest_FieldMask struct {
	Paths []BatchGetVendorConnectionsRequest_FieldPath
}

func FullBatchGetVendorConnectionsRequest_FieldMask() *BatchGetVendorConnectionsRequest_FieldMask {
	res := &BatchGetVendorConnectionsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetVendorConnectionsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetVendorConnectionsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetVendorConnectionsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Subtract(other *BatchGetVendorConnectionsRequest_FieldMask) *BatchGetVendorConnectionsRequest_FieldMask {
	result := &BatchGetVendorConnectionsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetVendorConnectionsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetVendorConnectionsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) FilterInputFields() *BatchGetVendorConnectionsRequest_FieldMask {
	result := &BatchGetVendorConnectionsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetVendorConnectionsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetVendorConnectionsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetVendorConnectionsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetVendorConnectionsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) AppendPath(path BatchGetVendorConnectionsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetVendorConnectionsRequest_FieldPath))
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) GetPaths() []BatchGetVendorConnectionsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetVendorConnectionsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Set(target, source *BatchGetVendorConnectionsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetVendorConnectionsRequest), source.(*BatchGetVendorConnectionsRequest))
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) Project(source *BatchGetVendorConnectionsRequest) *BatchGetVendorConnectionsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetVendorConnectionsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetVendorConnectionsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetVendorConnectionsRequest))
}

func (fieldMask *BatchGetVendorConnectionsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetVendorConnectionsResponse_FieldMask struct {
	Paths []BatchGetVendorConnectionsResponse_FieldPath
}

func FullBatchGetVendorConnectionsResponse_FieldMask() *BatchGetVendorConnectionsResponse_FieldMask {
	res := &BatchGetVendorConnectionsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections})
	res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetVendorConnectionsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetVendorConnectionsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetVendorConnectionsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Subtract(other *BatchGetVendorConnectionsResponse_FieldMask) *BatchGetVendorConnectionsResponse_FieldMask {
	result := &BatchGetVendorConnectionsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections: &vendor_connection.VendorConnection_FieldMask{},
	}
	mySubMasks := map[BatchGetVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections: &vendor_connection.VendorConnection_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetVendorConnectionsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetVendorConnectionsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetVendorConnectionsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
						mySubMasks[BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections] = vendor_connection.FullVendorConnection_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetVendorConnectionsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetVendorConnectionsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetVendorConnectionsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) FilterInputFields() *BatchGetVendorConnectionsResponse_FieldMask {
	result := &BatchGetVendorConnectionsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			if _, ok := path.(*BatchGetVendorConnectionsResponse_FieldTerminalPath); ok {
				for _, subpath := range vendor_connection.FullVendorConnection_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetVendorConnectionsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetVendorConnectionsResponse_FieldSubPath); ok {
				selectedMask := &vendor_connection.VendorConnection_FieldMask{
					Paths: []vendor_connection.VendorConnection_FieldPath{sub.subPath.(vendor_connection.VendorConnection_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetVendorConnectionsResponse_FieldSubPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetVendorConnectionsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetVendorConnectionsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetVendorConnectionsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetVendorConnectionsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) AppendPath(path BatchGetVendorConnectionsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetVendorConnectionsResponse_FieldPath))
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) GetPaths() []BatchGetVendorConnectionsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetVendorConnectionsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Set(target, source *BatchGetVendorConnectionsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetVendorConnectionsResponse), source.(*BatchGetVendorConnectionsResponse))
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) Project(source *BatchGetVendorConnectionsResponse) *BatchGetVendorConnectionsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetVendorConnectionsResponse{}
	vendorConnectionsMask := &vendor_connection.VendorConnection_FieldMask{}
	wholeVendorConnectionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetVendorConnectionsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
				result.VendorConnections = source.VendorConnections
				wholeVendorConnectionsAccepted = true
			case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetVendorConnectionsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
				vendorConnectionsMask.AppendPath(tp.subPath.(vendor_connection.VendorConnection_FieldPath))
			}
		}
	}
	if wholeVendorConnectionsAccepted == false && len(vendorConnectionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetVendorConnections() {
			result.VendorConnections = append(result.VendorConnections, vendorConnectionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetVendorConnectionsResponse))
}

func (fieldMask *BatchGetVendorConnectionsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListVendorConnectionsRequest_FieldMask struct {
	Paths []ListVendorConnectionsRequest_FieldPath
}

func FullListVendorConnectionsRequest_FieldMask() *ListVendorConnectionsRequest_FieldMask {
	res := &ListVendorConnectionsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListVendorConnectionsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListVendorConnectionsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListVendorConnectionsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListVendorConnectionsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Subtract(other *ListVendorConnectionsRequest_FieldMask) *ListVendorConnectionsRequest_FieldMask {
	result := &ListVendorConnectionsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListVendorConnectionsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListVendorConnectionsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListVendorConnectionsRequest_FieldMask) FilterInputFields() *ListVendorConnectionsRequest_FieldMask {
	result := &ListVendorConnectionsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListVendorConnectionsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListVendorConnectionsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListVendorConnectionsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListVendorConnectionsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListVendorConnectionsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) AppendPath(path ListVendorConnectionsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListVendorConnectionsRequest_FieldPath))
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) GetPaths() []ListVendorConnectionsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListVendorConnectionsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Set(target, source *ListVendorConnectionsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListVendorConnectionsRequest), source.(*ListVendorConnectionsRequest))
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) Project(source *ListVendorConnectionsRequest) *ListVendorConnectionsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListVendorConnectionsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListVendorConnectionsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListVendorConnectionsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListVendorConnectionsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListVendorConnectionsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListVendorConnectionsRequest))
}

func (fieldMask *ListVendorConnectionsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListVendorConnectionsResponse_FieldMask struct {
	Paths []ListVendorConnectionsResponse_FieldPath
}

func FullListVendorConnectionsResponse_FieldMask() *ListVendorConnectionsResponse_FieldMask {
	res := &ListVendorConnectionsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections})
	res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListVendorConnectionsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListVendorConnectionsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListVendorConnectionsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListVendorConnectionsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Subtract(other *ListVendorConnectionsResponse_FieldMask) *ListVendorConnectionsResponse_FieldMask {
	result := &ListVendorConnectionsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListVendorConnectionsResponse_FieldPathSelectorVendorConnections: &vendor_connection.VendorConnection_FieldMask{},
	}
	mySubMasks := map[ListVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListVendorConnectionsResponse_FieldPathSelectorVendorConnections: &vendor_connection.VendorConnection_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListVendorConnectionsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListVendorConnectionsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListVendorConnectionsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
						mySubMasks[ListVendorConnectionsResponse_FieldPathSelectorVendorConnections] = vendor_connection.FullVendorConnection_FieldMask()
					}
				} else if tp, ok := path.(*ListVendorConnectionsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListVendorConnectionsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListVendorConnectionsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListVendorConnectionsResponse_FieldMask) FilterInputFields() *ListVendorConnectionsResponse_FieldMask {
	result := &ListVendorConnectionsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			if _, ok := path.(*ListVendorConnectionsResponse_FieldTerminalPath); ok {
				for _, subpath := range vendor_connection.FullVendorConnection_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListVendorConnectionsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListVendorConnectionsResponse_FieldSubPath); ok {
				selectedMask := &vendor_connection.VendorConnection_FieldMask{
					Paths: []vendor_connection.VendorConnection_FieldPath{sub.subPath.(vendor_connection.VendorConnection_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListVendorConnectionsResponse_FieldSubPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListVendorConnectionsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListVendorConnectionsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListVendorConnectionsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListVendorConnectionsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListVendorConnectionsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) AppendPath(path ListVendorConnectionsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListVendorConnectionsResponse_FieldPath))
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) GetPaths() []ListVendorConnectionsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListVendorConnectionsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Set(target, source *ListVendorConnectionsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListVendorConnectionsResponse), source.(*ListVendorConnectionsResponse))
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) Project(source *ListVendorConnectionsResponse) *ListVendorConnectionsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListVendorConnectionsResponse{}
	vendorConnectionsMask := &vendor_connection.VendorConnection_FieldMask{}
	wholeVendorConnectionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListVendorConnectionsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
				result.VendorConnections = source.VendorConnections
				wholeVendorConnectionsAccepted = true
			case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListVendorConnectionsResponse_FieldSubPath:
			switch tp.selector {
			case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
				vendorConnectionsMask.AppendPath(tp.subPath.(vendor_connection.VendorConnection_FieldPath))
			}
		}
	}
	if wholeVendorConnectionsAccepted == false && len(vendorConnectionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetVendorConnections() {
			result.VendorConnections = append(result.VendorConnections, vendorConnectionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListVendorConnectionsResponse))
}

func (fieldMask *ListVendorConnectionsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchVendorConnectionRequest_FieldMask struct {
	Paths []WatchVendorConnectionRequest_FieldPath
}

func FullWatchVendorConnectionRequest_FieldMask() *WatchVendorConnectionRequest_FieldMask {
	res := &WatchVendorConnectionRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchVendorConnectionRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchVendorConnectionRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchVendorConnectionRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchVendorConnectionRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Subtract(other *WatchVendorConnectionRequest_FieldMask) *WatchVendorConnectionRequest_FieldMask {
	result := &WatchVendorConnectionRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchVendorConnectionRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchVendorConnectionRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchVendorConnectionRequest_FieldMask) FilterInputFields() *WatchVendorConnectionRequest_FieldMask {
	result := &WatchVendorConnectionRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchVendorConnectionRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchVendorConnectionRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchVendorConnectionRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchVendorConnectionRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchVendorConnectionRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) AppendPath(path WatchVendorConnectionRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchVendorConnectionRequest_FieldPath))
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) GetPaths() []WatchVendorConnectionRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchVendorConnectionRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Set(target, source *WatchVendorConnectionRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchVendorConnectionRequest), source.(*WatchVendorConnectionRequest))
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) Project(source *WatchVendorConnectionRequest) *WatchVendorConnectionRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchVendorConnectionRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchVendorConnectionRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchVendorConnectionRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchVendorConnectionRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchVendorConnectionRequest))
}

func (fieldMask *WatchVendorConnectionRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchVendorConnectionResponse_FieldMask struct {
	Paths []WatchVendorConnectionResponse_FieldPath
}

func FullWatchVendorConnectionResponse_FieldMask() *WatchVendorConnectionResponse_FieldMask {
	res := &WatchVendorConnectionResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchVendorConnectionResponse_FieldTerminalPath{selector: WatchVendorConnectionResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchVendorConnectionResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchVendorConnectionResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchVendorConnectionResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchVendorConnectionResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Subtract(other *WatchVendorConnectionResponse_FieldMask) *WatchVendorConnectionResponse_FieldMask {
	result := &WatchVendorConnectionResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchVendorConnectionResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchVendorConnectionResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchVendorConnectionResponse_FieldMask) FilterInputFields() *WatchVendorConnectionResponse_FieldMask {
	result := &WatchVendorConnectionResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchVendorConnectionResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchVendorConnectionResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchVendorConnectionResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchVendorConnectionResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchVendorConnectionResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) AppendPath(path WatchVendorConnectionResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchVendorConnectionResponse_FieldPath))
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) GetPaths() []WatchVendorConnectionResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchVendorConnectionResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Set(target, source *WatchVendorConnectionResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchVendorConnectionResponse), source.(*WatchVendorConnectionResponse))
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) Project(source *WatchVendorConnectionResponse) *WatchVendorConnectionResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchVendorConnectionResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchVendorConnectionResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchVendorConnectionResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchVendorConnectionResponse))
}

func (fieldMask *WatchVendorConnectionResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchVendorConnectionsRequest_FieldMask struct {
	Paths []WatchVendorConnectionsRequest_FieldPath
}

func FullWatchVendorConnectionsRequest_FieldMask() *WatchVendorConnectionsRequest_FieldMask {
	res := &WatchVendorConnectionsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchVendorConnectionsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchVendorConnectionsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchVendorConnectionsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchVendorConnectionsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Subtract(other *WatchVendorConnectionsRequest_FieldMask) *WatchVendorConnectionsRequest_FieldMask {
	result := &WatchVendorConnectionsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchVendorConnectionsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchVendorConnectionsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchVendorConnectionsRequest_FieldMask) FilterInputFields() *WatchVendorConnectionsRequest_FieldMask {
	result := &WatchVendorConnectionsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchVendorConnectionsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchVendorConnectionsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchVendorConnectionsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchVendorConnectionsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchVendorConnectionsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) AppendPath(path WatchVendorConnectionsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchVendorConnectionsRequest_FieldPath))
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) GetPaths() []WatchVendorConnectionsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchVendorConnectionsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Set(target, source *WatchVendorConnectionsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchVendorConnectionsRequest), source.(*WatchVendorConnectionsRequest))
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) Project(source *WatchVendorConnectionsRequest) *WatchVendorConnectionsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchVendorConnectionsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchVendorConnectionsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchVendorConnectionsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchVendorConnectionsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchVendorConnectionsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchVendorConnectionsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchVendorConnectionsRequest))
}

func (fieldMask *WatchVendorConnectionsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchVendorConnectionsResponse_FieldMask struct {
	Paths []WatchVendorConnectionsResponse_FieldPath
}

func FullWatchVendorConnectionsResponse_FieldMask() *WatchVendorConnectionsResponse_FieldMask {
	res := &WatchVendorConnectionsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchVendorConnectionsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchVendorConnectionsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchVendorConnectionsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchVendorConnectionsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Subtract(other *WatchVendorConnectionsResponse_FieldMask) *WatchVendorConnectionsResponse_FieldMask {
	result := &WatchVendorConnectionsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange: &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchVendorConnectionsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange: &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchVendorConnectionsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchVendorConnectionsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchVendorConnectionsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange] = FullWatchVendorConnectionsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchVendorConnectionsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchVendorConnectionsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchVendorConnectionsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchVendorConnectionsResponse_FieldMask) FilterInputFields() *WatchVendorConnectionsResponse_FieldMask {
	result := &WatchVendorConnectionsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchVendorConnectionsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchVendorConnectionsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchVendorConnectionsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchVendorConnectionsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchVendorConnectionsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) AppendPath(path WatchVendorConnectionsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchVendorConnectionsResponse_FieldPath))
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) GetPaths() []WatchVendorConnectionsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchVendorConnectionsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Set(target, source *WatchVendorConnectionsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchVendorConnectionsResponse), source.(*WatchVendorConnectionsResponse))
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) Project(source *WatchVendorConnectionsResponse) *WatchVendorConnectionsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchVendorConnectionsResponse{}
	pageTokenChangeMask := &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchVendorConnectionsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
				result.VendorConnectionChanges = source.VendorConnectionChanges
			case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchVendorConnectionsResponse_FieldSubPath:
			switch tp.selector {
			case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchVendorConnectionsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchVendorConnectionsResponse))
}

func (fieldMask *WatchVendorConnectionsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchVendorConnectionsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchVendorConnectionsResponsePageTokenChange_FieldPath
}

func FullWatchVendorConnectionsResponse_PageTokenChange_FieldMask() *WatchVendorConnectionsResponse_PageTokenChange_FieldMask {
	res := &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Subtract(other *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) *WatchVendorConnectionsResponse_PageTokenChange_FieldMask {
	result := &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchVendorConnectionsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchVendorConnectionsResponse_PageTokenChange_FieldMask {
	result := &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchVendorConnectionsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchVendorConnectionsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) AppendPath(path WatchVendorConnectionsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchVendorConnectionsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) GetPaths() []WatchVendorConnectionsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Set(target, source *WatchVendorConnectionsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchVendorConnectionsResponse_PageTokenChange), source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) Project(source *WatchVendorConnectionsResponse_PageTokenChange) *WatchVendorConnectionsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchVendorConnectionsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

func (fieldMask *WatchVendorConnectionsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateVendorConnectionRequest_FieldMask struct {
	Paths []CreateVendorConnectionRequest_FieldPath
}

func FullCreateVendorConnectionRequest_FieldMask() *CreateVendorConnectionRequest_FieldMask {
	res := &CreateVendorConnectionRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection})
	return res
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateVendorConnectionRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateVendorConnectionRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateVendorConnectionRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateVendorConnectionRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Subtract(other *CreateVendorConnectionRequest_FieldMask) *CreateVendorConnectionRequest_FieldMask {
	result := &CreateVendorConnectionRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateVendorConnectionRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateVendorConnectionRequest_FieldPathSelectorVendorConnection: &vendor_connection.VendorConnection_FieldMask{},
	}
	mySubMasks := map[CreateVendorConnectionRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateVendorConnectionRequest_FieldPathSelectorVendorConnection: &vendor_connection.VendorConnection_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateVendorConnectionRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateVendorConnectionRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateVendorConnectionRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
						mySubMasks[CreateVendorConnectionRequest_FieldPathSelectorVendorConnection] = vendor_connection.FullVendorConnection_FieldMask()
					}
				} else if tp, ok := path.(*CreateVendorConnectionRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateVendorConnectionRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateVendorConnectionRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateVendorConnectionRequest_FieldMask) FilterInputFields() *CreateVendorConnectionRequest_FieldMask {
	result := &CreateVendorConnectionRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			if _, ok := path.(*CreateVendorConnectionRequest_FieldTerminalPath); ok {
				for _, subpath := range vendor_connection.FullVendorConnection_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateVendorConnectionRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateVendorConnectionRequest_FieldSubPath); ok {
				selectedMask := &vendor_connection.VendorConnection_FieldMask{
					Paths: []vendor_connection.VendorConnection_FieldPath{sub.subPath.(vendor_connection.VendorConnection_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateVendorConnectionRequest_FieldSubPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateVendorConnectionRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateVendorConnectionRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateVendorConnectionRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateVendorConnectionRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateVendorConnectionRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) AppendPath(path CreateVendorConnectionRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateVendorConnectionRequest_FieldPath))
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) GetPaths() []CreateVendorConnectionRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateVendorConnectionRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Set(target, source *CreateVendorConnectionRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateVendorConnectionRequest), source.(*CreateVendorConnectionRequest))
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) Project(source *CreateVendorConnectionRequest) *CreateVendorConnectionRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateVendorConnectionRequest{}
	vendorConnectionMask := &vendor_connection.VendorConnection_FieldMask{}
	wholeVendorConnectionAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateVendorConnectionRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateVendorConnectionRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
				result.VendorConnection = source.VendorConnection
				wholeVendorConnectionAccepted = true
			}
		case *CreateVendorConnectionRequest_FieldSubPath:
			switch tp.selector {
			case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
				vendorConnectionMask.AppendPath(tp.subPath.(vendor_connection.VendorConnection_FieldPath))
			}
		}
	}
	if wholeVendorConnectionAccepted == false && len(vendorConnectionMask.Paths) > 0 {
		result.VendorConnection = vendorConnectionMask.Project(source.GetVendorConnection())
	}
	return result
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateVendorConnectionRequest))
}

func (fieldMask *CreateVendorConnectionRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateVendorConnectionRequest_FieldMask struct {
	Paths []UpdateVendorConnectionRequest_FieldPath
}

func FullUpdateVendorConnectionRequest_FieldMask() *UpdateVendorConnectionRequest_FieldMask {
	res := &UpdateVendorConnectionRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection})
	res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateVendorConnectionRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateVendorConnectionRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateVendorConnectionRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateVendorConnectionRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Subtract(other *UpdateVendorConnectionRequest_FieldMask) *UpdateVendorConnectionRequest_FieldMask {
	result := &UpdateVendorConnectionRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateVendorConnectionRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection: &vendor_connection.VendorConnection_FieldMask{},
		UpdateVendorConnectionRequest_FieldPathSelectorCas:              &UpdateVendorConnectionRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateVendorConnectionRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection: &vendor_connection.VendorConnection_FieldMask{},
		UpdateVendorConnectionRequest_FieldPathSelectorCas:              &UpdateVendorConnectionRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateVendorConnectionRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateVendorConnectionRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateVendorConnectionRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
						mySubMasks[UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection] = vendor_connection.FullVendorConnection_FieldMask()
					case UpdateVendorConnectionRequest_FieldPathSelectorCas:
						mySubMasks[UpdateVendorConnectionRequest_FieldPathSelectorCas] = FullUpdateVendorConnectionRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateVendorConnectionRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateVendorConnectionRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateVendorConnectionRequest_FieldMask) FilterInputFields() *UpdateVendorConnectionRequest_FieldMask {
	result := &UpdateVendorConnectionRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			if _, ok := path.(*UpdateVendorConnectionRequest_FieldTerminalPath); ok {
				for _, subpath := range vendor_connection.FullVendorConnection_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateVendorConnectionRequest_FieldSubPath); ok {
				selectedMask := &vendor_connection.VendorConnection_FieldMask{
					Paths: []vendor_connection.VendorConnection_FieldPath{sub.subPath.(vendor_connection.VendorConnection_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: allowedPath})
				}
			}
		case UpdateVendorConnectionRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateVendorConnectionRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateVendorConnectionRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateVendorConnectionRequest_FieldSubPath); ok {
				selectedMask := &UpdateVendorConnectionRequest_CAS_FieldMask{
					Paths: []UpdateVendorConnectionRequestCAS_FieldPath{sub.subPath.(UpdateVendorConnectionRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateVendorConnectionRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateVendorConnectionRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateVendorConnectionRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateVendorConnectionRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateVendorConnectionRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) AppendPath(path UpdateVendorConnectionRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateVendorConnectionRequest_FieldPath))
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) GetPaths() []UpdateVendorConnectionRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateVendorConnectionRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Set(target, source *UpdateVendorConnectionRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateVendorConnectionRequest), source.(*UpdateVendorConnectionRequest))
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) Project(source *UpdateVendorConnectionRequest) *UpdateVendorConnectionRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateVendorConnectionRequest{}
	vendorConnectionMask := &vendor_connection.VendorConnection_FieldMask{}
	wholeVendorConnectionAccepted := false
	casMask := &UpdateVendorConnectionRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateVendorConnectionRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
				result.VendorConnection = source.VendorConnection
				wholeVendorConnectionAccepted = true
			case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateVendorConnectionRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateVendorConnectionRequest_FieldSubPath:
			switch tp.selector {
			case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
				vendorConnectionMask.AppendPath(tp.subPath.(vendor_connection.VendorConnection_FieldPath))
			case UpdateVendorConnectionRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateVendorConnectionRequestCAS_FieldPath))
			}
		}
	}
	if wholeVendorConnectionAccepted == false && len(vendorConnectionMask.Paths) > 0 {
		result.VendorConnection = vendorConnectionMask.Project(source.GetVendorConnection())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateVendorConnectionRequest))
}

func (fieldMask *UpdateVendorConnectionRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateVendorConnectionRequest_CAS_FieldMask struct {
	Paths []UpdateVendorConnectionRequestCAS_FieldPath
}

func FullUpdateVendorConnectionRequest_CAS_FieldMask() *UpdateVendorConnectionRequest_CAS_FieldMask {
	res := &UpdateVendorConnectionRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateVendorConnectionRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateVendorConnectionRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Subtract(other *UpdateVendorConnectionRequest_CAS_FieldMask) *UpdateVendorConnectionRequest_CAS_FieldMask {
	result := &UpdateVendorConnectionRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateVendorConnectionRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState: &vendor_connection.VendorConnection_FieldMask{},
	}
	mySubMasks := map[UpdateVendorConnectionRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState: &vendor_connection.VendorConnection_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateVendorConnectionRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateVendorConnectionRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateVendorConnectionRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState] = vendor_connection.FullVendorConnection_FieldMask()
					}
				} else if tp, ok := path.(*UpdateVendorConnectionRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateVendorConnectionRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateVendorConnectionRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) FilterInputFields() *UpdateVendorConnectionRequest_CAS_FieldMask {
	result := &UpdateVendorConnectionRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateVendorConnectionRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range vendor_connection.FullVendorConnection_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateVendorConnectionRequestCAS_FieldSubPath); ok {
				selectedMask := &vendor_connection.VendorConnection_FieldMask{
					Paths: []vendor_connection.VendorConnection_FieldPath{sub.subPath.(vendor_connection.VendorConnection_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateVendorConnectionRequestCAS_FieldSubPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateVendorConnectionRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateVendorConnectionRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateVendorConnectionRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) AppendPath(path UpdateVendorConnectionRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateVendorConnectionRequestCAS_FieldPath))
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) GetPaths() []UpdateVendorConnectionRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Set(target, source *UpdateVendorConnectionRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateVendorConnectionRequest_CAS), source.(*UpdateVendorConnectionRequest_CAS))
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) Project(source *UpdateVendorConnectionRequest_CAS) *UpdateVendorConnectionRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateVendorConnectionRequest_CAS{}
	conditionalStateMask := &vendor_connection.VendorConnection_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateVendorConnectionRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateVendorConnectionRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(vendor_connection.VendorConnection_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateVendorConnectionRequest_CAS))
}

func (fieldMask *UpdateVendorConnectionRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteVendorConnectionRequest_FieldMask struct {
	Paths []DeleteVendorConnectionRequest_FieldPath
}

func FullDeleteVendorConnectionRequest_FieldMask() *DeleteVendorConnectionRequest_FieldMask {
	res := &DeleteVendorConnectionRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteVendorConnectionRequest_FieldTerminalPath{selector: DeleteVendorConnectionRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteVendorConnectionRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteVendorConnectionRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteVendorConnectionRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteVendorConnectionRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Subtract(other *DeleteVendorConnectionRequest_FieldMask) *DeleteVendorConnectionRequest_FieldMask {
	result := &DeleteVendorConnectionRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteVendorConnectionRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteVendorConnectionRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteVendorConnectionRequest_FieldMask) FilterInputFields() *DeleteVendorConnectionRequest_FieldMask {
	result := &DeleteVendorConnectionRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteVendorConnectionRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteVendorConnectionRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteVendorConnectionRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteVendorConnectionRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteVendorConnectionRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) AppendPath(path DeleteVendorConnectionRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteVendorConnectionRequest_FieldPath))
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) GetPaths() []DeleteVendorConnectionRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteVendorConnectionRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Set(target, source *DeleteVendorConnectionRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteVendorConnectionRequest), source.(*DeleteVendorConnectionRequest))
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) Project(source *DeleteVendorConnectionRequest) *DeleteVendorConnectionRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteVendorConnectionRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteVendorConnectionRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteVendorConnectionRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteVendorConnectionRequest))
}

func (fieldMask *DeleteVendorConnectionRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
