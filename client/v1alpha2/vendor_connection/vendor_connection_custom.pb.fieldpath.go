// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection_custom.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &workplace_common.BBox{}
	_ = &vendor_connection.PointGrab{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PointGrabTelemetryNotifyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() PointGrabTelemetryNotifyRequest_FieldPathSelector
	Get(source *PointGrabTelemetryNotifyRequest) []interface{}
	GetSingle(source *PointGrabTelemetryNotifyRequest) (interface{}, bool)
	ClearValue(item *PointGrabTelemetryNotifyRequest)

	// Those methods build corresponding PointGrabTelemetryNotifyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue
}

type PointGrabTelemetryNotifyRequest_FieldPathSelector int32

const (
	PointGrabTelemetryNotifyRequest_FieldPathSelectorName        PointGrabTelemetryNotifyRequest_FieldPathSelector = 0
	PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId    PointGrabTelemetryNotifyRequest_FieldPathSelector = 1
	PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId     PointGrabTelemetryNotifyRequest_FieldPathSelector = 2
	PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId      PointGrabTelemetryNotifyRequest_FieldPathSelector = 3
	PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices     PointGrabTelemetryNotifyRequest_FieldPathSelector = 4
	PointGrabTelemetryNotifyRequest_FieldPathSelectorType        PointGrabTelemetryNotifyRequest_FieldPathSelector = 5
	PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp   PointGrabTelemetryNotifyRequest_FieldPathSelector = 6
	PointGrabTelemetryNotifyRequest_FieldPathSelectorCount       PointGrabTelemetryNotifyRequest_FieldPathSelector = 7
	PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn     PointGrabTelemetryNotifyRequest_FieldPathSelector = 8
	PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut    PointGrabTelemetryNotifyRequest_FieldPathSelector = 9
	PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions PointGrabTelemetryNotifyRequest_FieldPathSelector = 10
)

func (s PointGrabTelemetryNotifyRequest_FieldPathSelector) String() string {
	switch s {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		return "name"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		return "region_id"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		return "floor_id"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		return "area_id"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return "devices"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		return "type"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		return "timestamp"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		return "count"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		return "count_in"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		return "count_out"
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return "pc_positions"
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", s))
	}
}

func BuildPointGrabTelemetryNotifyRequest_FieldPath(fp gotenobject.RawFieldPath) (PointGrabTelemetryNotifyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PointGrabTelemetryNotifyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorName}, nil
		case "region_id", "regionId", "region-id":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId}, nil
		case "floor_id", "floorId", "floor-id":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId}, nil
		case "area_id", "areaId", "area-id":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId}, nil
		case "devices":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices}, nil
		case "type":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorType}, nil
		case "timestamp":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp}, nil
		case "count":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCount}, nil
		case "count_in", "countIn", "count-in":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn}, nil
		case "count_out", "countOut", "count-out":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut}, nil
		case "pc_positions", "pcPositions", "pc-positions":
			return &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions}, nil
		}
	} else {
		switch fp[0] {
		case "pc_positions", "pcPositions", "pc-positions":
			if subpath, err := workplace_common.BuildPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PointGrabTelemetryNotifyRequest_FieldSubPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PointGrabTelemetryNotifyRequest", fp)
}

func ParsePointGrabTelemetryNotifyRequest_FieldPath(rawField string) (PointGrabTelemetryNotifyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPointGrabTelemetryNotifyRequest_FieldPath(fp)
}

func MustParsePointGrabTelemetryNotifyRequest_FieldPath(rawField string) PointGrabTelemetryNotifyRequest_FieldPath {
	fp, err := ParsePointGrabTelemetryNotifyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PointGrabTelemetryNotifyRequest_FieldTerminalPath struct {
	selector PointGrabTelemetryNotifyRequest_FieldPathSelector
}

var _ PointGrabTelemetryNotifyRequest_FieldPath = (*PointGrabTelemetryNotifyRequest_FieldTerminalPath)(nil)

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) Selector() PointGrabTelemetryNotifyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PointGrabTelemetryNotifyRequest
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) Get(source *PointGrabTelemetryNotifyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
			values = append(values, source.FloorId)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
			values = append(values, source.AreaId)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
			for _, value := range source.GetDevices() {
				values = append(values, value)
			}
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
			values = append(values, source.Timestamp)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
			values = append(values, source.Count)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
			values = append(values, source.CountIn)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
			values = append(values, source.CountOut)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
			for _, value := range source.GetPcPositions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PointGrabTelemetryNotifyRequest))
}

// GetSingle returns value pointed by specific field of from source PointGrabTelemetryNotifyRequest
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) GetSingle(source *PointGrabTelemetryNotifyRequest) (interface{}, bool) {
	switch fp.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		return source.GetFloorId(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		return source.GetAreaId(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		res := source.GetDevices()
		return res, res != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		return source.GetTimestamp(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		return source.GetCount(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		return source.GetCountIn(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		return source.GetCountOut(), source != nil
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		res := source.GetPcPositions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PointGrabTelemetryNotifyRequest))
}

// GetDefault returns a default value of the field type
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		return (*vendor_connection.Reference)(nil)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		return ""
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		return ""
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		return ""
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return ([]string)(nil)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		return vendor_connection.PointGrab_Telemetry_NOTIFICATION_TYPE_UNSPECIFIED
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		return int64(0)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		return int64(0)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		return int64(0)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		return int64(0)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return ([]*workplace_common.Point)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) ClearValue(item *PointGrabTelemetryNotifyRequest) {
	if item != nil {
		switch fp.selector {
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
			item.Name = nil
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
			item.FloorId = ""
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
			item.AreaId = ""
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
			item.Devices = nil
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
			item.Type = vendor_connection.PointGrab_Telemetry_NOTIFICATION_TYPE_UNSPECIFIED
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
			item.Timestamp = int64(0)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
			item.Count = int64(0)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
			item.CountIn = int64(0)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
			item.CountOut = int64(0)
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
			item.PcPositions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
		}
	}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PointGrabTelemetryNotifyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorName ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorType ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorCount ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn ||
		fp.selector == PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithIValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathValue {
	switch fp.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.([]string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(vendor_connection.PointGrab_Telemetry_NotificationType)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.([]*workplace_common.Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues {
	fpaov := &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Reference)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([][]string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]vendor_connection.PointGrab_Telemetry_NotificationType)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([]int64)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, values: values.([][]*workplace_common.Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(string)}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return &PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue{PointGrabTelemetryNotifyRequest_FieldTerminalPath: *fp, value: value.(*workplace_common.Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetryNotifyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type PointGrabTelemetryNotifyRequest_FieldSubPath struct {
	selector PointGrabTelemetryNotifyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ PointGrabTelemetryNotifyRequest_FieldPath = (*PointGrabTelemetryNotifyRequest_FieldSubPath)(nil)

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) Selector() PointGrabTelemetryNotifyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) AsPcPositionsSubPath() (workplace_common.Point_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Point_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source PointGrabTelemetryNotifyRequest
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) Get(source *PointGrabTelemetryNotifyRequest) (values []interface{}) {
	if asPointFieldPath, ok := fps.AsPcPositionsSubPath(); ok {
		for _, item := range source.GetPcPositions() {
			values = append(values, asPointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fps.selector))
	}
	return
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*PointGrabTelemetryNotifyRequest))
}

// GetSingle returns value of selected field from source PointGrabTelemetryNotifyRequest
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) GetSingle(source *PointGrabTelemetryNotifyRequest) (interface{}, bool) {
	switch fps.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		if len(source.GetPcPositions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPcPositions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fps.selector))
	}
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*PointGrabTelemetryNotifyRequest))
}

// GetDefault returns a default value of the field type
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) ClearValue(item *PointGrabTelemetryNotifyRequest) {
	if item != nil {
		switch fps.selector {
		case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
			for _, subItem := range item.PcPositions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fps.selector))
		}
	}
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*PointGrabTelemetryNotifyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithIValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathValue {
	return &PointGrabTelemetryNotifyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues {
	return &PointGrabTelemetryNotifyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue {
	return &PointGrabTelemetryNotifyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *PointGrabTelemetryNotifyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// PointGrabTelemetryNotifyRequest_FieldPathValue allows storing values for PointGrabTelemetryNotifyRequest fields according to their type
type PointGrabTelemetryNotifyRequest_FieldPathValue interface {
	PointGrabTelemetryNotifyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PointGrabTelemetryNotifyRequest)
	CompareWith(*PointGrabTelemetryNotifyRequest) (cmp int, comparable bool)
}

func ParsePointGrabTelemetryNotifyRequest_FieldPathValue(pathStr, valueStr string) (PointGrabTelemetryNotifyRequest_FieldPathValue, error) {
	fp, err := ParsePointGrabTelemetryNotifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabTelemetryNotifyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(PointGrabTelemetryNotifyRequest_FieldPathValue), nil
}

func MustParsePointGrabTelemetryNotifyRequest_FieldPathValue(pathStr, valueStr string) PointGrabTelemetryNotifyRequest_FieldPathValue {
	fpv, err := ParsePointGrabTelemetryNotifyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PointGrabTelemetryNotifyRequest_FieldTerminalPathValue struct {
	PointGrabTelemetryNotifyRequest_FieldTerminalPath
	value interface{}
}

var _ PointGrabTelemetryNotifyRequest_FieldPathValue = (*PointGrabTelemetryNotifyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrabTelemetryNotifyRequest' as interface{}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsNameValue() (*vendor_connection.Reference, bool) {
	res, ok := fpv.value.(*vendor_connection.Reference)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsFloorIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsAreaIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsDevicesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsTypeValue() (vendor_connection.PointGrab_Telemetry_NotificationType, bool) {
	res, ok := fpv.value.(vendor_connection.PointGrab_Telemetry_NotificationType)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsTimestampValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsCountInValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsCountOutValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) AsPcPositionsValue() ([]*workplace_common.Point, bool) {
	res, ok := fpv.value.([]*workplace_common.Point)
	return res, ok
}

// SetTo stores value for selected field for object PointGrabTelemetryNotifyRequest
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) SetTo(target **PointGrabTelemetryNotifyRequest) {
	if *target == nil {
		*target = new(PointGrabTelemetryNotifyRequest)
	}
	switch fpv.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*vendor_connection.Reference)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		(*target).FloorId = fpv.value.(string)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		(*target).AreaId = fpv.value.(string)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		(*target).Devices = fpv.value.([]string)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(vendor_connection.PointGrab_Telemetry_NotificationType)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		(*target).Timestamp = fpv.value.(int64)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		(*target).Count = fpv.value.(int64)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		(*target).CountIn = fpv.value.(int64)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		(*target).CountOut = fpv.value.(int64)
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		(*target).PcPositions = fpv.value.([]*workplace_common.Point)
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fpv.selector))
	}
}

func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PointGrabTelemetryNotifyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PointGrabTelemetryNotifyRequest_FieldTerminalPathValue' with the value under path in 'PointGrabTelemetryNotifyRequest'.
func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) CompareWith(source *PointGrabTelemetryNotifyRequest) (int, bool) {
	switch fpv.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*vendor_connection.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		leftValue := fpv.value.(string)
		rightValue := source.GetFloorId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		leftValue := fpv.value.(string)
		rightValue := source.GetAreaId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		return 0, false
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		leftValue := fpv.value.(vendor_connection.PointGrab_Telemetry_NotificationType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTimestamp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		leftValue := fpv.value.(int64)
		rightValue := source.GetCountIn()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		leftValue := fpv.value.(int64)
		rightValue := source.GetCountOut()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fpv.selector))
	}
}

func (fpv *PointGrabTelemetryNotifyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PointGrabTelemetryNotifyRequest))
}

type PointGrabTelemetryNotifyRequest_FieldSubPathValue struct {
	PointGrabTelemetryNotifyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ PointGrabTelemetryNotifyRequest_FieldPathValue = (*PointGrabTelemetryNotifyRequest_FieldSubPathValue)(nil)

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) AsPcPositionsPathValue() (workplace_common.Point_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Point_FieldPathValue)
	return res, ok
}

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) SetTo(target **PointGrabTelemetryNotifyRequest) {
	if *target == nil {
		*target = new(PointGrabTelemetryNotifyRequest)
	}
	switch fpvs.Selector() {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PointGrabTelemetryNotifyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) CompareWith(source *PointGrabTelemetryNotifyRequest) (int, bool) {
	switch fpvs.Selector() {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *PointGrabTelemetryNotifyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*PointGrabTelemetryNotifyRequest))
}

// PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrabTelemetryNotifyRequest according to their type
// Present only for array (repeated) types.
type PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PointGrabTelemetryNotifyRequest_FieldPath
	ContainsValue(*PointGrabTelemetryNotifyRequest) bool
}

// ParsePointGrabTelemetryNotifyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePointGrabTelemetryNotifyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParsePointGrabTelemetryNotifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabTelemetryNotifyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue), nil
}

func MustParsePointGrabTelemetryNotifyRequest_FieldPathArrayItemValue(pathStr, valueStr string) PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParsePointGrabTelemetryNotifyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue struct {
	PointGrabTelemetryNotifyRequest_FieldTerminalPath
	value interface{}
}

var _ PointGrabTelemetryNotifyRequest_FieldPathArrayItemValue = (*PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PointGrabTelemetryNotifyRequest as interface{}
func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) AsDevicesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) AsPcPositionsItemValue() (*workplace_common.Point, bool) {
	res, ok := fpaiv.value.(*workplace_common.Point)
	return res, ok
}

func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *PointGrabTelemetryNotifyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PointGrabTelemetryNotifyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabTelemetryNotifyRequest'
func (fpaiv *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *PointGrabTelemetryNotifyRequest) bool {
	slice := fpaiv.PointGrabTelemetryNotifyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type PointGrabTelemetryNotifyRequest_FieldSubPathArrayItemValue struct {
	PointGrabTelemetryNotifyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *PointGrabTelemetryNotifyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *PointGrabTelemetryNotifyRequest_FieldSubPathArrayItemValue) AsPcPositionsPathItemValue() (workplace_common.Point_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Point_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabTelemetryNotifyRequest'
func (fpaivs *PointGrabTelemetryNotifyRequest_FieldSubPathArrayItemValue) ContainsValue(source *PointGrabTelemetryNotifyRequest) bool {
	switch fpaivs.Selector() {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrabTelemetryNotifyRequest: %d", fpaivs.Selector()))
	}
}

// PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues allows storing slice of values for PointGrabTelemetryNotifyRequest fields according to their type
type PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PointGrabTelemetryNotifyRequest_FieldPath
}

func ParsePointGrabTelemetryNotifyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParsePointGrabTelemetryNotifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabTelemetryNotifyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues), nil
}

func MustParsePointGrabTelemetryNotifyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues {
	fpaov, err := ParsePointGrabTelemetryNotifyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues struct {
	PointGrabTelemetryNotifyRequest_FieldTerminalPath
	values interface{}
}

var _ PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues = (*PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*vendor_connection.Reference) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]vendor_connection.PointGrab_Telemetry_NotificationType) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions:
		for _, v := range fpaov.values.([][]*workplace_common.Point) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Reference)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsFloorIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsAreaIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsDevicesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]vendor_connection.PointGrab_Telemetry_NotificationType, bool) {
	res, ok := fpaov.values.([]vendor_connection.PointGrab_Telemetry_NotificationType)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsTimestampArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsCountInArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsCountOutArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *PointGrabTelemetryNotifyRequest_FieldTerminalPathArrayOfValues) AsPcPositionsArrayOfValues() ([][]*workplace_common.Point, bool) {
	res, ok := fpaov.values.([][]*workplace_common.Point)
	return res, ok
}

type PointGrabTelemetryNotifyRequest_FieldSubPathArrayOfValues struct {
	PointGrabTelemetryNotifyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ PointGrabTelemetryNotifyRequest_FieldPathArrayOfValues = (*PointGrabTelemetryNotifyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *PointGrabTelemetryNotifyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *PointGrabTelemetryNotifyRequest_FieldSubPathArrayOfValues) AsPcPositionsPathArrayOfValues() (workplace_common.Point_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Point_FieldPathArrayOfValues)
	return res, ok
}
