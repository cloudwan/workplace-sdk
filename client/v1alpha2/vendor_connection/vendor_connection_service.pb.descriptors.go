// Code generated by protoc-gen-goten-client
// API: VendorConnectionService
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &vendor_connection.PointGrab{}
)

var (
	descriptorsInitialized              bool
	vendorConnectionServiceDescriptor   *VendorConnectionServiceDescriptor
	getVendorConnectionDescriptor       *GetVendorConnectionDescriptor
	batchGetVendorConnectionsDescriptor *BatchGetVendorConnectionsDescriptor
	listVendorConnectionsDescriptor     *ListVendorConnectionsDescriptor
	watchVendorConnectionDescriptor     *WatchVendorConnectionDescriptor
	watchVendorConnectionsDescriptor    *WatchVendorConnectionsDescriptor
	createVendorConnectionDescriptor    *CreateVendorConnectionDescriptor
	updateVendorConnectionDescriptor    *UpdateVendorConnectionDescriptor
	deleteVendorConnectionDescriptor    *DeleteVendorConnectionDescriptor
	pointGrabTelemetryNotifyDescriptor  *PointGrabTelemetryNotifyDescriptor
)

type GetVendorConnectionDescriptor struct{}

type GetVendorConnectionDescriptorClientMsgHandle struct{}

type GetVendorConnectionDescriptorServerMsgHandle struct{}

func (d *GetVendorConnectionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetVendorConnectionRequest{}
}

func (d *GetVendorConnectionDescriptor) NewEmptyServerMsg() proto.Message {
	return &vendor_connection.VendorConnection{}
}

func (d *GetVendorConnectionDescriptor) IsUnary() bool {
	return true
}

func (d *GetVendorConnectionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetVendorConnectionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetVendorConnectionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetVendorConnectionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetVendorConnectionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetVendorConnectionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetVendorConnectionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetVendorConnectionDescriptor) GetMethodName() string {
	return "GetVendorConnection"
}

func (d *GetVendorConnectionDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/GetVendorConnection"
}

func (d *GetVendorConnectionDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *GetVendorConnectionDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *GetVendorConnectionDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *GetVendorConnectionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetVendorConnectionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *GetVendorConnectionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *GetVendorConnectionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetVendorConnectionDescriptorClientMsgHandle{}
}

func (d *GetVendorConnectionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetVendorConnectionDescriptorServerMsgHandle{}
}

func (h *GetVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetVendorConnectionRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*vendor_connection.Name)(nil)
}

func (h *GetVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetVendorConnectionRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetVendorConnectionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetVendorConnectionRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*vendor_connection.VendorConnection) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*vendor_connection.VendorConnection) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetVendorConnectionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*vendor_connection.VendorConnection) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetVendorConnectionDescriptor() *GetVendorConnectionDescriptor {
	return getVendorConnectionDescriptor
}

type BatchGetVendorConnectionsDescriptor struct{}

type BatchGetVendorConnectionsDescriptorClientMsgHandle struct{}

type BatchGetVendorConnectionsDescriptorServerMsgHandle struct{}

func (d *BatchGetVendorConnectionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetVendorConnectionsRequest{}
}

func (d *BatchGetVendorConnectionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetVendorConnectionsResponse{}
}

func (d *BatchGetVendorConnectionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetVendorConnectionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetVendorConnectionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetVendorConnectionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetVendorConnectionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetVendorConnectionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetVendorConnectionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetVendorConnectionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetVendorConnectionsDescriptor) GetMethodName() string {
	return "BatchGetVendorConnections"
}

func (d *BatchGetVendorConnectionsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/BatchGetVendorConnections"
}

func (d *BatchGetVendorConnectionsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *BatchGetVendorConnectionsDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *BatchGetVendorConnectionsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *BatchGetVendorConnectionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetVendorConnectionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *BatchGetVendorConnectionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *BatchGetVendorConnectionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetVendorConnectionsDescriptorClientMsgHandle{}
}

func (d *BatchGetVendorConnectionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetVendorConnectionsDescriptorServerMsgHandle{}
}

func (h *BatchGetVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetVendorConnectionsRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetVendorConnectionsRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(vendor_connection.VendorConnectionNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (vendor_connection.VendorConnectionNameList)(nil)
}

func (h *BatchGetVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetVendorConnectionsRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetVendorConnectionsResponse) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetVendorConnectionsResponse) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetVendorConnections()
	list := make(vendor_connection.VendorConnectionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetVendorConnectionsResponse) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetVendorConnectionsDescriptor() *BatchGetVendorConnectionsDescriptor {
	return batchGetVendorConnectionsDescriptor
}

type ListVendorConnectionsDescriptor struct{}

type ListVendorConnectionsDescriptorClientMsgHandle struct{}

type ListVendorConnectionsDescriptorServerMsgHandle struct{}

func (d *ListVendorConnectionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListVendorConnectionsRequest{}
}

func (d *ListVendorConnectionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListVendorConnectionsResponse{}
}

func (d *ListVendorConnectionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListVendorConnectionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListVendorConnectionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListVendorConnectionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListVendorConnectionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListVendorConnectionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListVendorConnectionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListVendorConnectionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListVendorConnectionsDescriptor) GetMethodName() string {
	return "ListVendorConnections"
}

func (d *ListVendorConnectionsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/ListVendorConnections"
}

func (d *ListVendorConnectionsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *ListVendorConnectionsDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *ListVendorConnectionsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *ListVendorConnectionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListVendorConnectionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *ListVendorConnectionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *ListVendorConnectionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListVendorConnectionsDescriptorClientMsgHandle{}
}

func (d *ListVendorConnectionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListVendorConnectionsDescriptorServerMsgHandle{}
}

func (h *ListVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListVendorConnectionsRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListVendorConnectionsRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListVendorConnectionsRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListVendorConnectionsResponse) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListVendorConnectionsResponse) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetVendorConnections()
	list := make(vendor_connection.VendorConnectionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListVendorConnectionsResponse) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListVendorConnectionsDescriptor() *ListVendorConnectionsDescriptor {
	return listVendorConnectionsDescriptor
}

type WatchVendorConnectionDescriptor struct{}

type WatchVendorConnectionDescriptorClientMsgHandle struct{}

type WatchVendorConnectionDescriptorServerMsgHandle struct{}

func (d *WatchVendorConnectionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchVendorConnectionRequest{}
}

func (d *WatchVendorConnectionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchVendorConnectionResponse{}
}

func (d *WatchVendorConnectionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchVendorConnectionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchVendorConnectionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchVendorConnectionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchVendorConnectionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchVendorConnectionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchVendorConnectionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchVendorConnectionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchVendorConnectionDescriptor) GetMethodName() string {
	return "WatchVendorConnection"
}

func (d *WatchVendorConnectionDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/WatchVendorConnection"
}

func (d *WatchVendorConnectionDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchVendorConnectionDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *WatchVendorConnectionDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchVendorConnectionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchVendorConnectionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *WatchVendorConnectionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *WatchVendorConnectionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchVendorConnectionDescriptorClientMsgHandle{}
}

func (d *WatchVendorConnectionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchVendorConnectionDescriptorServerMsgHandle{}
}

func (h *WatchVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchVendorConnectionRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*vendor_connection.Name)(nil)
}

func (h *WatchVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchVendorConnectionRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchVendorConnectionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchVendorConnectionRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchVendorConnectionResponse) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *vendor_connection.VendorConnectionChange_Added_:
			return tResChange.Added.GetVendorConnection().GetName()
		case *vendor_connection.VendorConnectionChange_Modified_:
			return tResChange.Modified.GetName()
		case *vendor_connection.VendorConnectionChange_Removed_:
			return tResChange.Removed.GetName()
		case *vendor_connection.VendorConnectionChange_Current_:
			return tResChange.Current.GetVendorConnection().GetName()
		}
	}
	return (*vendor_connection.Name)(nil)
}

func (h *WatchVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchVendorConnectionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchVendorConnectionResponse) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchVendorConnectionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchVendorConnectionResponse) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchVendorConnectionDescriptor() *WatchVendorConnectionDescriptor {
	return watchVendorConnectionDescriptor
}

type WatchVendorConnectionsDescriptor struct{}

type WatchVendorConnectionsDescriptorClientMsgHandle struct{}

type WatchVendorConnectionsDescriptorServerMsgHandle struct{}

func (d *WatchVendorConnectionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchVendorConnectionsRequest{}
}

func (d *WatchVendorConnectionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchVendorConnectionsResponse{}
}

func (d *WatchVendorConnectionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchVendorConnectionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchVendorConnectionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchVendorConnectionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchVendorConnectionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchVendorConnectionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchVendorConnectionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchVendorConnectionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchVendorConnectionsDescriptor) GetMethodName() string {
	return "WatchVendorConnections"
}

func (d *WatchVendorConnectionsDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/WatchVendorConnections"
}

func (d *WatchVendorConnectionsDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *WatchVendorConnectionsDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *WatchVendorConnectionsDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *WatchVendorConnectionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchVendorConnectionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *WatchVendorConnectionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *WatchVendorConnectionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchVendorConnectionsDescriptorClientMsgHandle{}
}

func (d *WatchVendorConnectionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchVendorConnectionsDescriptorServerMsgHandle{}
}

func (h *WatchVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchVendorConnectionsRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchVendorConnectionsRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchVendorConnectionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchVendorConnectionsRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*vendor_connection.ParentName)(nil)
}

func (h *WatchVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchVendorConnectionsResponse) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchVendorConnectionsResponse) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetVendorConnectionChanges()
	list := make(vendor_connection.VendorConnectionNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *vendor_connection.VendorConnectionChange_Added_:
			list = append(list, tResChange.Added.GetVendorConnection().GetName())
		case *vendor_connection.VendorConnectionChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *vendor_connection.VendorConnectionChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *vendor_connection.VendorConnectionChange_Current_:
			list = append(list, tResChange.Current.GetVendorConnection().GetName())
		}
	}
	return list
}

func (h *WatchVendorConnectionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchVendorConnectionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchVendorConnectionsResponse) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchVendorConnectionsDescriptor() *WatchVendorConnectionsDescriptor {
	return watchVendorConnectionsDescriptor
}

type CreateVendorConnectionDescriptor struct{}

type CreateVendorConnectionDescriptorClientMsgHandle struct{}

type CreateVendorConnectionDescriptorServerMsgHandle struct{}

func (d *CreateVendorConnectionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateVendorConnectionRequest{}
}

func (d *CreateVendorConnectionDescriptor) NewEmptyServerMsg() proto.Message {
	return &vendor_connection.VendorConnection{}
}

func (d *CreateVendorConnectionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateVendorConnectionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateVendorConnectionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateVendorConnectionDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateVendorConnectionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateVendorConnectionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateVendorConnectionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateVendorConnectionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateVendorConnectionDescriptor) GetMethodName() string {
	return "CreateVendorConnection"
}

func (d *CreateVendorConnectionDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/CreateVendorConnection"
}

func (d *CreateVendorConnectionDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *CreateVendorConnectionDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *CreateVendorConnectionDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *CreateVendorConnectionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateVendorConnectionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *CreateVendorConnectionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *CreateVendorConnectionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateVendorConnectionDescriptorClientMsgHandle{}
}

func (d *CreateVendorConnectionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateVendorConnectionDescriptorServerMsgHandle{}
}

func (h *CreateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateVendorConnectionRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetVendorConnection().GetName()
}

func (h *CreateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateVendorConnectionRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateVendorConnectionRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*vendor_connection.ParentName)(nil)
}

func (h *CreateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*vendor_connection.VendorConnection) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*vendor_connection.VendorConnection) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*vendor_connection.VendorConnection) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateVendorConnectionDescriptor() *CreateVendorConnectionDescriptor {
	return createVendorConnectionDescriptor
}

type UpdateVendorConnectionDescriptor struct{}

type UpdateVendorConnectionDescriptorClientMsgHandle struct{}

type UpdateVendorConnectionDescriptorServerMsgHandle struct{}

func (d *UpdateVendorConnectionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateVendorConnectionRequest{}
}

func (d *UpdateVendorConnectionDescriptor) NewEmptyServerMsg() proto.Message {
	return &vendor_connection.VendorConnection{}
}

func (d *UpdateVendorConnectionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateVendorConnectionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateVendorConnectionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateVendorConnectionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateVendorConnectionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateVendorConnectionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateVendorConnectionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateVendorConnectionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateVendorConnectionDescriptor) GetMethodName() string {
	return "UpdateVendorConnection"
}

func (d *UpdateVendorConnectionDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/UpdateVendorConnection"
}

func (d *UpdateVendorConnectionDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *UpdateVendorConnectionDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *UpdateVendorConnectionDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *UpdateVendorConnectionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateVendorConnectionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *UpdateVendorConnectionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *UpdateVendorConnectionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateVendorConnectionDescriptorClientMsgHandle{}
}

func (d *UpdateVendorConnectionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateVendorConnectionDescriptorServerMsgHandle{}
}

func (h *UpdateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateVendorConnectionRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetVendorConnection().GetName()
}

func (h *UpdateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateVendorConnectionRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateVendorConnectionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateVendorConnectionRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*vendor_connection.VendorConnection) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*vendor_connection.VendorConnection) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateVendorConnectionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*vendor_connection.VendorConnection)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*vendor_connection.VendorConnection) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateVendorConnectionDescriptor() *UpdateVendorConnectionDescriptor {
	return updateVendorConnectionDescriptor
}

type DeleteVendorConnectionDescriptor struct{}

type DeleteVendorConnectionDescriptorClientMsgHandle struct{}

type DeleteVendorConnectionDescriptorServerMsgHandle struct{}

func (d *DeleteVendorConnectionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteVendorConnectionRequest{}
}

func (d *DeleteVendorConnectionDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteVendorConnectionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteVendorConnectionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteVendorConnectionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteVendorConnectionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteVendorConnectionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteVendorConnectionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteVendorConnectionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteVendorConnectionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteVendorConnectionDescriptor) GetMethodName() string {
	return "DeleteVendorConnection"
}

func (d *DeleteVendorConnectionDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/DeleteVendorConnection"
}

func (d *DeleteVendorConnectionDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *DeleteVendorConnectionDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *DeleteVendorConnectionDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *DeleteVendorConnectionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteVendorConnectionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *DeleteVendorConnectionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *DeleteVendorConnectionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteVendorConnectionDescriptorClientMsgHandle{}
}

func (d *DeleteVendorConnectionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteVendorConnectionDescriptorServerMsgHandle{}
}

func (h *DeleteVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteVendorConnectionRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*vendor_connection.Name)(nil)
}

func (h *DeleteVendorConnectionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteVendorConnectionRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteVendorConnectionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteVendorConnectionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteVendorConnectionRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteVendorConnectionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteVendorConnectionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteVendorConnectionDescriptor() *DeleteVendorConnectionDescriptor {
	return deleteVendorConnectionDescriptor
}

type PointGrabTelemetryNotifyDescriptor struct{}

type PointGrabTelemetryNotifyDescriptorClientMsgHandle struct{}

type PointGrabTelemetryNotifyDescriptorServerMsgHandle struct{}

func (d *PointGrabTelemetryNotifyDescriptor) NewEmptyClientMsg() proto.Message {
	return &PointGrabTelemetryNotifyRequest{}
}

func (d *PointGrabTelemetryNotifyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *PointGrabTelemetryNotifyDescriptor) IsUnary() bool {
	return true
}

func (d *PointGrabTelemetryNotifyDescriptor) IsClientStream() bool {
	return false
}

func (d *PointGrabTelemetryNotifyDescriptor) IsServerStream() bool {
	return false
}

func (d *PointGrabTelemetryNotifyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *PointGrabTelemetryNotifyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *PointGrabTelemetryNotifyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *PointGrabTelemetryNotifyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *PointGrabTelemetryNotifyDescriptor) GetVerb() string {
	return "pointGrabTelemetryNotify"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetMethodName() string {
	return "PointGrabTelemetryNotify"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetFullMethodName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService/PointGrabTelemetryNotify"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *PointGrabTelemetryNotifyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return vendorConnectionServiceDescriptor
}

func (d *PointGrabTelemetryNotifyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return vendor_connection.GetDescriptor()
}

func (d *PointGrabTelemetryNotifyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &PointGrabTelemetryNotifyDescriptorClientMsgHandle{}
}

func (d *PointGrabTelemetryNotifyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &PointGrabTelemetryNotifyDescriptorServerMsgHandle{}
}

func (h *PointGrabTelemetryNotifyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PointGrabTelemetryNotifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*PointGrabTelemetryNotifyRequest) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*vendor_connection.Name)(nil)
}

func (h *PointGrabTelemetryNotifyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*PointGrabTelemetryNotifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*PointGrabTelemetryNotifyRequest) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *PointGrabTelemetryNotifyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PointGrabTelemetryNotifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*PointGrabTelemetryNotifyRequest) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *PointGrabTelemetryNotifyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *vendor_connection.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *PointGrabTelemetryNotifyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*vendor_connection.Name
	})
	if ok {
		return vendor_connection.VendorConnectionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *PointGrabTelemetryNotifyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *vendor_connection.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetPointGrabTelemetryNotifyDescriptor() *PointGrabTelemetryNotifyDescriptor {
	return pointGrabTelemetryNotifyDescriptor
}

type VendorConnectionServiceDescriptor struct{}

func (d *VendorConnectionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getVendorConnectionDescriptor,
		batchGetVendorConnectionsDescriptor,
		listVendorConnectionsDescriptor,
		watchVendorConnectionDescriptor,
		watchVendorConnectionsDescriptor,
		createVendorConnectionDescriptor,
		updateVendorConnectionDescriptor,
		deleteVendorConnectionDescriptor,
		pointGrabTelemetryNotifyDescriptor,
	}
}

func (d *VendorConnectionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.workplace.v1alpha2.VendorConnectionService"
}

func (d *VendorConnectionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.workplace.v1alpha2"
}

func (d *VendorConnectionServiceDescriptor) GetApiName() string {
	return "VendorConnectionService"
}

func (d *VendorConnectionServiceDescriptor) GetServiceDomain() string {
	return "workplace.edgelq.com"
}

func (d *VendorConnectionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetVendorConnectionServiceDescriptor() *VendorConnectionServiceDescriptor {
	return vendorConnectionServiceDescriptor
}

func initDescriptors() {
	vendorConnectionServiceDescriptor = &VendorConnectionServiceDescriptor{}
	getVendorConnectionDescriptor = &GetVendorConnectionDescriptor{}
	batchGetVendorConnectionsDescriptor = &BatchGetVendorConnectionsDescriptor{}
	listVendorConnectionsDescriptor = &ListVendorConnectionsDescriptor{}
	watchVendorConnectionDescriptor = &WatchVendorConnectionDescriptor{}
	watchVendorConnectionsDescriptor = &WatchVendorConnectionsDescriptor{}
	createVendorConnectionDescriptor = &CreateVendorConnectionDescriptor{}
	updateVendorConnectionDescriptor = &UpdateVendorConnectionDescriptor{}
	deleteVendorConnectionDescriptor = &DeleteVendorConnectionDescriptor{}
	pointGrabTelemetryNotifyDescriptor = &PointGrabTelemetryNotifyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(vendorConnectionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getVendorConnectionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetVendorConnectionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listVendorConnectionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchVendorConnectionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchVendorConnectionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createVendorConnectionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateVendorConnectionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteVendorConnectionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(pointGrabTelemetryNotifyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
