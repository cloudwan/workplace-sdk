// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection_service.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &vendor_connection.PointGrab{}
)

func (o *GetVendorConnectionRequest) GotenObjectExt() {}

func (o *GetVendorConnectionRequest) MakeFullFieldMask() *GetVendorConnectionRequest_FieldMask {
	return FullGetVendorConnectionRequest_FieldMask()
}

func (o *GetVendorConnectionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetVendorConnectionRequest_FieldMask()
}

func (o *GetVendorConnectionRequest) MakeDiffFieldMask(other *GetVendorConnectionRequest) *GetVendorConnectionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetVendorConnectionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetVendorConnectionRequest_FieldMask()
	}

	res := &GetVendorConnectionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetVendorConnectionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetVendorConnectionRequest))
}

func (o *GetVendorConnectionRequest) Clone() *GetVendorConnectionRequest {
	if o == nil {
		return nil
	}
	result := &GetVendorConnectionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &vendor_connection.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	result.View = o.View
	return result
}

func (o *GetVendorConnectionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetVendorConnectionRequest) Merge(source *GetVendorConnectionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &vendor_connection.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetVendorConnectionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetVendorConnectionRequest))
}

func (o *BatchGetVendorConnectionsRequest) GotenObjectExt() {}

func (o *BatchGetVendorConnectionsRequest) MakeFullFieldMask() *BatchGetVendorConnectionsRequest_FieldMask {
	return FullBatchGetVendorConnectionsRequest_FieldMask()
}

func (o *BatchGetVendorConnectionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetVendorConnectionsRequest_FieldMask()
}

func (o *BatchGetVendorConnectionsRequest) MakeDiffFieldMask(other *BatchGetVendorConnectionsRequest) *BatchGetVendorConnectionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetVendorConnectionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetVendorConnectionsRequest_FieldMask()
	}

	res := &BatchGetVendorConnectionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetVendorConnectionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetVendorConnectionsRequest))
}

func (o *BatchGetVendorConnectionsRequest) Clone() *BatchGetVendorConnectionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetVendorConnectionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &vendor_connection.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*vendor_connection.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &vendor_connection.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetVendorConnectionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetVendorConnectionsRequest) Merge(source *BatchGetVendorConnectionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &vendor_connection.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *vendor_connection.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &vendor_connection.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetVendorConnectionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetVendorConnectionsRequest))
}

func (o *BatchGetVendorConnectionsResponse) GotenObjectExt() {}

func (o *BatchGetVendorConnectionsResponse) MakeFullFieldMask() *BatchGetVendorConnectionsResponse_FieldMask {
	return FullBatchGetVendorConnectionsResponse_FieldMask()
}

func (o *BatchGetVendorConnectionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetVendorConnectionsResponse_FieldMask()
}

func (o *BatchGetVendorConnectionsResponse) MakeDiffFieldMask(other *BatchGetVendorConnectionsResponse) *BatchGetVendorConnectionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetVendorConnectionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetVendorConnectionsResponse_FieldMask()
	}

	res := &BatchGetVendorConnectionsResponse_FieldMask{}

	if len(o.GetVendorConnections()) == len(other.GetVendorConnections()) {
		for i, lValue := range o.GetVendorConnections() {
			rValue := other.GetVendorConnections()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetVendorConnectionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetVendorConnectionsResponse))
}

func (o *BatchGetVendorConnectionsResponse) Clone() *BatchGetVendorConnectionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetVendorConnectionsResponse{}
	result.VendorConnections = make([]*vendor_connection.VendorConnection, len(o.VendorConnections))
	for i, sourceValue := range o.VendorConnections {
		result.VendorConnections[i] = sourceValue.Clone()
	}
	result.Missing = make([]*vendor_connection.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &vendor_connection.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetVendorConnectionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetVendorConnectionsResponse) Merge(source *BatchGetVendorConnectionsResponse) {
	for _, sourceValue := range source.GetVendorConnections() {
		exists := false
		for _, currentValue := range o.VendorConnections {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *vendor_connection.VendorConnection
			if sourceValue != nil {
				newDstElement = new(vendor_connection.VendorConnection)
				newDstElement.Merge(sourceValue)
			}
			o.VendorConnections = append(o.VendorConnections, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *vendor_connection.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &vendor_connection.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetVendorConnectionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetVendorConnectionsResponse))
}

func (o *ListVendorConnectionsRequest) GotenObjectExt() {}

func (o *ListVendorConnectionsRequest) MakeFullFieldMask() *ListVendorConnectionsRequest_FieldMask {
	return FullListVendorConnectionsRequest_FieldMask()
}

func (o *ListVendorConnectionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListVendorConnectionsRequest_FieldMask()
}

func (o *ListVendorConnectionsRequest) MakeDiffFieldMask(other *ListVendorConnectionsRequest) *ListVendorConnectionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListVendorConnectionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListVendorConnectionsRequest_FieldMask()
	}

	res := &ListVendorConnectionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListVendorConnectionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListVendorConnectionsRequest))
}

func (o *ListVendorConnectionsRequest) Clone() *ListVendorConnectionsRequest {
	if o == nil {
		return nil
	}
	result := &ListVendorConnectionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &vendor_connection.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &vendor_connection.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &vendor_connection.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &vendor_connection.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	result.View = o.View
	return result
}

func (o *ListVendorConnectionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListVendorConnectionsRequest) Merge(source *ListVendorConnectionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &vendor_connection.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &vendor_connection.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &vendor_connection.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &vendor_connection.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListVendorConnectionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListVendorConnectionsRequest))
}

func (o *ListVendorConnectionsResponse) GotenObjectExt() {}

func (o *ListVendorConnectionsResponse) MakeFullFieldMask() *ListVendorConnectionsResponse_FieldMask {
	return FullListVendorConnectionsResponse_FieldMask()
}

func (o *ListVendorConnectionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListVendorConnectionsResponse_FieldMask()
}

func (o *ListVendorConnectionsResponse) MakeDiffFieldMask(other *ListVendorConnectionsResponse) *ListVendorConnectionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListVendorConnectionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListVendorConnectionsResponse_FieldMask()
	}

	res := &ListVendorConnectionsResponse_FieldMask{}

	if len(o.GetVendorConnections()) == len(other.GetVendorConnections()) {
		for i, lValue := range o.GetVendorConnections() {
			rValue := other.GetVendorConnections()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListVendorConnectionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListVendorConnectionsResponse))
}

func (o *ListVendorConnectionsResponse) Clone() *ListVendorConnectionsResponse {
	if o == nil {
		return nil
	}
	result := &ListVendorConnectionsResponse{}
	result.VendorConnections = make([]*vendor_connection.VendorConnection, len(o.VendorConnections))
	for i, sourceValue := range o.VendorConnections {
		result.VendorConnections[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &vendor_connection.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &vendor_connection.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListVendorConnectionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListVendorConnectionsResponse) Merge(source *ListVendorConnectionsResponse) {
	for _, sourceValue := range source.GetVendorConnections() {
		exists := false
		for _, currentValue := range o.VendorConnections {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *vendor_connection.VendorConnection
			if sourceValue != nil {
				newDstElement = new(vendor_connection.VendorConnection)
				newDstElement.Merge(sourceValue)
			}
			o.VendorConnections = append(o.VendorConnections, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &vendor_connection.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &vendor_connection.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListVendorConnectionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListVendorConnectionsResponse))
}

func (o *WatchVendorConnectionRequest) GotenObjectExt() {}

func (o *WatchVendorConnectionRequest) MakeFullFieldMask() *WatchVendorConnectionRequest_FieldMask {
	return FullWatchVendorConnectionRequest_FieldMask()
}

func (o *WatchVendorConnectionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchVendorConnectionRequest_FieldMask()
}

func (o *WatchVendorConnectionRequest) MakeDiffFieldMask(other *WatchVendorConnectionRequest) *WatchVendorConnectionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchVendorConnectionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchVendorConnectionRequest_FieldMask()
	}

	res := &WatchVendorConnectionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchVendorConnectionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchVendorConnectionRequest))
}

func (o *WatchVendorConnectionRequest) Clone() *WatchVendorConnectionRequest {
	if o == nil {
		return nil
	}
	result := &WatchVendorConnectionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &vendor_connection.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchVendorConnectionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchVendorConnectionRequest) Merge(source *WatchVendorConnectionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &vendor_connection.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchVendorConnectionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchVendorConnectionRequest))
}

func (o *WatchVendorConnectionResponse) GotenObjectExt() {}

func (o *WatchVendorConnectionResponse) MakeFullFieldMask() *WatchVendorConnectionResponse_FieldMask {
	return FullWatchVendorConnectionResponse_FieldMask()
}

func (o *WatchVendorConnectionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchVendorConnectionResponse_FieldMask()
}

func (o *WatchVendorConnectionResponse) MakeDiffFieldMask(other *WatchVendorConnectionResponse) *WatchVendorConnectionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchVendorConnectionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchVendorConnectionResponse_FieldMask()
	}

	res := &WatchVendorConnectionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchVendorConnectionResponse_FieldTerminalPath{selector: WatchVendorConnectionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchVendorConnectionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchVendorConnectionResponse))
}

func (o *WatchVendorConnectionResponse) Clone() *WatchVendorConnectionResponse {
	if o == nil {
		return nil
	}
	result := &WatchVendorConnectionResponse{}
	result.Change = proto.Clone(o.Change).(*vendor_connection.VendorConnectionChange)
	return result
}

func (o *WatchVendorConnectionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchVendorConnectionResponse) Merge(source *WatchVendorConnectionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(vendor_connection.VendorConnectionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchVendorConnectionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchVendorConnectionResponse))
}

func (o *WatchVendorConnectionsRequest) GotenObjectExt() {}

func (o *WatchVendorConnectionsRequest) MakeFullFieldMask() *WatchVendorConnectionsRequest_FieldMask {
	return FullWatchVendorConnectionsRequest_FieldMask()
}

func (o *WatchVendorConnectionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchVendorConnectionsRequest_FieldMask()
}

func (o *WatchVendorConnectionsRequest) MakeDiffFieldMask(other *WatchVendorConnectionsRequest) *WatchVendorConnectionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchVendorConnectionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchVendorConnectionsRequest_FieldMask()
	}

	res := &WatchVendorConnectionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchVendorConnectionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchVendorConnectionsRequest))
}

func (o *WatchVendorConnectionsRequest) Clone() *WatchVendorConnectionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchVendorConnectionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &vendor_connection.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &vendor_connection.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &vendor_connection.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &vendor_connection.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchVendorConnectionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchVendorConnectionsRequest) Merge(source *WatchVendorConnectionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &vendor_connection.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &vendor_connection.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &vendor_connection.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &vendor_connection.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchVendorConnectionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchVendorConnectionsRequest))
}

func (o *WatchVendorConnectionsResponse) GotenObjectExt() {}

func (o *WatchVendorConnectionsResponse) MakeFullFieldMask() *WatchVendorConnectionsResponse_FieldMask {
	return FullWatchVendorConnectionsResponse_FieldMask()
}

func (o *WatchVendorConnectionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchVendorConnectionsResponse_FieldMask()
}

func (o *WatchVendorConnectionsResponse) MakeDiffFieldMask(other *WatchVendorConnectionsResponse) *WatchVendorConnectionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchVendorConnectionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchVendorConnectionsResponse_FieldMask()
	}

	res := &WatchVendorConnectionsResponse_FieldMask{}

	if len(o.GetVendorConnectionChanges()) == len(other.GetVendorConnectionChanges()) {
		for i, lValue := range o.GetVendorConnectionChanges() {
			rValue := other.GetVendorConnectionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldSubPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchVendorConnectionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchVendorConnectionsResponse))
}

func (o *WatchVendorConnectionsResponse) Clone() *WatchVendorConnectionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchVendorConnectionsResponse{}
	result.VendorConnectionChanges = make([]*vendor_connection.VendorConnectionChange, len(o.VendorConnectionChanges))
	for i, sourceValue := range o.VendorConnectionChanges {
		result.VendorConnectionChanges[i] = proto.Clone(sourceValue).(*vendor_connection.VendorConnectionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchVendorConnectionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchVendorConnectionsResponse) Merge(source *WatchVendorConnectionsResponse) {
	for _, sourceValue := range source.GetVendorConnectionChanges() {
		exists := false
		for _, currentValue := range o.VendorConnectionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *vendor_connection.VendorConnectionChange
			if sourceValue != nil {
				newDstElement = new(vendor_connection.VendorConnectionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.VendorConnectionChanges = append(o.VendorConnectionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchVendorConnectionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchVendorConnectionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchVendorConnectionsResponse))
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchVendorConnectionsResponse_PageTokenChange) MakeFullFieldMask() *WatchVendorConnectionsResponse_PageTokenChange_FieldMask {
	return FullWatchVendorConnectionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchVendorConnectionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchVendorConnectionsResponse_PageTokenChange) *WatchVendorConnectionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchVendorConnectionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchVendorConnectionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchVendorConnectionsResponse_PageTokenChange))
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) Clone() *WatchVendorConnectionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchVendorConnectionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &vendor_connection.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &vendor_connection.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) Merge(source *WatchVendorConnectionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &vendor_connection.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &vendor_connection.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchVendorConnectionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

func (o *CreateVendorConnectionRequest) GotenObjectExt() {}

func (o *CreateVendorConnectionRequest) MakeFullFieldMask() *CreateVendorConnectionRequest_FieldMask {
	return FullCreateVendorConnectionRequest_FieldMask()
}

func (o *CreateVendorConnectionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateVendorConnectionRequest_FieldMask()
}

func (o *CreateVendorConnectionRequest) MakeDiffFieldMask(other *CreateVendorConnectionRequest) *CreateVendorConnectionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateVendorConnectionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateVendorConnectionRequest_FieldMask()
	}

	res := &CreateVendorConnectionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetVendorConnection().MakeDiffFieldMask(other.GetVendorConnection())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateVendorConnectionRequest_FieldSubPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateVendorConnectionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateVendorConnectionRequest))
}

func (o *CreateVendorConnectionRequest) Clone() *CreateVendorConnectionRequest {
	if o == nil {
		return nil
	}
	result := &CreateVendorConnectionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &vendor_connection.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.VendorConnection = o.VendorConnection.Clone()
	return result
}

func (o *CreateVendorConnectionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateVendorConnectionRequest) Merge(source *CreateVendorConnectionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &vendor_connection.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetVendorConnection() != nil {
		if o.VendorConnection == nil {
			o.VendorConnection = new(vendor_connection.VendorConnection)
		}
		o.VendorConnection.Merge(source.GetVendorConnection())
	}
}

func (o *CreateVendorConnectionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateVendorConnectionRequest))
}

func (o *UpdateVendorConnectionRequest) GotenObjectExt() {}

func (o *UpdateVendorConnectionRequest) MakeFullFieldMask() *UpdateVendorConnectionRequest_FieldMask {
	return FullUpdateVendorConnectionRequest_FieldMask()
}

func (o *UpdateVendorConnectionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateVendorConnectionRequest_FieldMask()
}

func (o *UpdateVendorConnectionRequest) MakeDiffFieldMask(other *UpdateVendorConnectionRequest) *UpdateVendorConnectionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateVendorConnectionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateVendorConnectionRequest_FieldMask()
	}

	res := &UpdateVendorConnectionRequest_FieldMask{}
	{
		subMask := o.GetVendorConnection().MakeDiffFieldMask(other.GetVendorConnection())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateVendorConnectionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateVendorConnectionRequest))
}

func (o *UpdateVendorConnectionRequest) Clone() *UpdateVendorConnectionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateVendorConnectionRequest{}
	result.VendorConnection = o.VendorConnection.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*vendor_connection.VendorConnection_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateVendorConnectionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateVendorConnectionRequest) Merge(source *UpdateVendorConnectionRequest) {
	if source.GetVendorConnection() != nil {
		if o.VendorConnection == nil {
			o.VendorConnection = new(vendor_connection.VendorConnection)
		}
		o.VendorConnection.Merge(source.GetVendorConnection())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateVendorConnectionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateVendorConnectionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateVendorConnectionRequest))
}

func (o *UpdateVendorConnectionRequest_CAS) GotenObjectExt() {}

func (o *UpdateVendorConnectionRequest_CAS) MakeFullFieldMask() *UpdateVendorConnectionRequest_CAS_FieldMask {
	return FullUpdateVendorConnectionRequest_CAS_FieldMask()
}

func (o *UpdateVendorConnectionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateVendorConnectionRequest_CAS_FieldMask()
}

func (o *UpdateVendorConnectionRequest_CAS) MakeDiffFieldMask(other *UpdateVendorConnectionRequest_CAS) *UpdateVendorConnectionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateVendorConnectionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateVendorConnectionRequest_CAS_FieldMask()
	}

	res := &UpdateVendorConnectionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateVendorConnectionRequestCAS_FieldSubPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateVendorConnectionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateVendorConnectionRequest_CAS))
}

func (o *UpdateVendorConnectionRequest_CAS) Clone() *UpdateVendorConnectionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateVendorConnectionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*vendor_connection.VendorConnection_FieldMask)
	return result
}

func (o *UpdateVendorConnectionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateVendorConnectionRequest_CAS) Merge(source *UpdateVendorConnectionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(vendor_connection.VendorConnection)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(vendor_connection.VendorConnection_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateVendorConnectionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateVendorConnectionRequest_CAS))
}

func (o *DeleteVendorConnectionRequest) GotenObjectExt() {}

func (o *DeleteVendorConnectionRequest) MakeFullFieldMask() *DeleteVendorConnectionRequest_FieldMask {
	return FullDeleteVendorConnectionRequest_FieldMask()
}

func (o *DeleteVendorConnectionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteVendorConnectionRequest_FieldMask()
}

func (o *DeleteVendorConnectionRequest) MakeDiffFieldMask(other *DeleteVendorConnectionRequest) *DeleteVendorConnectionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteVendorConnectionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteVendorConnectionRequest_FieldMask()
	}

	res := &DeleteVendorConnectionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteVendorConnectionRequest_FieldTerminalPath{selector: DeleteVendorConnectionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteVendorConnectionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteVendorConnectionRequest))
}

func (o *DeleteVendorConnectionRequest) Clone() *DeleteVendorConnectionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteVendorConnectionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &vendor_connection.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteVendorConnectionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteVendorConnectionRequest) Merge(source *DeleteVendorConnectionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &vendor_connection.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteVendorConnectionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteVendorConnectionRequest))
}
