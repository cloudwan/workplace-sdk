// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection_custom.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &workplace_common.BBox{}
	_ = &vendor_connection.PointGrab{}
)

func (o *PointGrabTelemetryNotifyRequest) GotenObjectExt() {}

func (o *PointGrabTelemetryNotifyRequest) MakeFullFieldMask() *PointGrabTelemetryNotifyRequest_FieldMask {
	return FullPointGrabTelemetryNotifyRequest_FieldMask()
}

func (o *PointGrabTelemetryNotifyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPointGrabTelemetryNotifyRequest_FieldMask()
}

func (o *PointGrabTelemetryNotifyRequest) MakeDiffFieldMask(other *PointGrabTelemetryNotifyRequest) *PointGrabTelemetryNotifyRequest_FieldMask {
	if o == nil && other == nil {
		return &PointGrabTelemetryNotifyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPointGrabTelemetryNotifyRequest_FieldMask()
	}

	res := &PointGrabTelemetryNotifyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorName})
	}
	if o.GetRegionId() != other.GetRegionId() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorRegionId})
	}
	if o.GetFloorId() != other.GetFloorId() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorFloorId})
	}
	if o.GetAreaId() != other.GetAreaId() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorAreaId})
	}

	if len(o.GetDevices()) == len(other.GetDevices()) {
		for i, lValue := range o.GetDevices() {
			rValue := other.GetDevices()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorDevices})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorType})
	}
	if o.GetTimestamp() != other.GetTimestamp() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorTimestamp})
	}
	if o.GetCount() != other.GetCount() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCount})
	}
	if o.GetCountIn() != other.GetCountIn() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCountIn})
	}
	if o.GetCountOut() != other.GetCountOut() {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorCountOut})
	}

	if len(o.GetPcPositions()) == len(other.GetPcPositions()) {
		for i, lValue := range o.GetPcPositions() {
			rValue := other.GetPcPositions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PointGrabTelemetryNotifyRequest_FieldTerminalPath{selector: PointGrabTelemetryNotifyRequest_FieldPathSelectorPcPositions})
	}
	return res
}

func (o *PointGrabTelemetryNotifyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PointGrabTelemetryNotifyRequest))
}

func (o *PointGrabTelemetryNotifyRequest) Clone() *PointGrabTelemetryNotifyRequest {
	if o == nil {
		return nil
	}
	result := &PointGrabTelemetryNotifyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &vendor_connection.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RegionId = o.RegionId
	result.FloorId = o.FloorId
	result.AreaId = o.AreaId
	result.Devices = make([]string, len(o.Devices))
	for i, sourceValue := range o.Devices {
		result.Devices[i] = sourceValue
	}
	result.Type = o.Type
	result.Timestamp = o.Timestamp
	result.Count = o.Count
	result.CountIn = o.CountIn
	result.CountOut = o.CountOut
	result.PcPositions = make([]*workplace_common.Point, len(o.PcPositions))
	for i, sourceValue := range o.PcPositions {
		result.PcPositions[i] = sourceValue.Clone()
	}
	return result
}

func (o *PointGrabTelemetryNotifyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PointGrabTelemetryNotifyRequest) Merge(source *PointGrabTelemetryNotifyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &vendor_connection.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.RegionId = source.GetRegionId()
	o.FloorId = source.GetFloorId()
	o.AreaId = source.GetAreaId()
	for _, sourceValue := range source.GetDevices() {
		exists := false
		for _, currentValue := range o.Devices {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Devices = append(o.Devices, newDstElement)
		}
	}

	o.Type = source.GetType()
	o.Timestamp = source.GetTimestamp()
	o.Count = source.GetCount()
	o.CountIn = source.GetCountIn()
	o.CountOut = source.GetCountOut()
	for _, sourceValue := range source.GetPcPositions() {
		exists := false
		for _, currentValue := range o.PcPositions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *workplace_common.Point
			if sourceValue != nil {
				newDstElement = new(workplace_common.Point)
				newDstElement.Merge(sourceValue)
			}
			o.PcPositions = append(o.PcPositions, newDstElement)
		}
	}

}

func (o *PointGrabTelemetryNotifyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PointGrabTelemetryNotifyRequest))
}
