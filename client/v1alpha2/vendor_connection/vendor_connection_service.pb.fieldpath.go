// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection_service.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &vendor_connection.PointGrab{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetVendorConnectionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetVendorConnectionRequest_FieldPathSelector
	Get(source *GetVendorConnectionRequest) []interface{}
	GetSingle(source *GetVendorConnectionRequest) (interface{}, bool)
	ClearValue(item *GetVendorConnectionRequest)

	// Those methods build corresponding GetVendorConnectionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetVendorConnectionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetVendorConnectionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetVendorConnectionRequest_FieldPathArrayItemValue
}

type GetVendorConnectionRequest_FieldPathSelector int32

const (
	GetVendorConnectionRequest_FieldPathSelectorName      GetVendorConnectionRequest_FieldPathSelector = 0
	GetVendorConnectionRequest_FieldPathSelectorFieldMask GetVendorConnectionRequest_FieldPathSelector = 1
	GetVendorConnectionRequest_FieldPathSelectorView      GetVendorConnectionRequest_FieldPathSelector = 2
)

func (s GetVendorConnectionRequest_FieldPathSelector) String() string {
	switch s {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		return "name"
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetVendorConnectionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", s))
	}
}

func BuildGetVendorConnectionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetVendorConnectionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetVendorConnectionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetVendorConnectionRequest_FieldTerminalPath{selector: GetVendorConnectionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetVendorConnectionRequest", fp)
}

func ParseGetVendorConnectionRequest_FieldPath(rawField string) (GetVendorConnectionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetVendorConnectionRequest_FieldPath(fp)
}

func MustParseGetVendorConnectionRequest_FieldPath(rawField string) GetVendorConnectionRequest_FieldPath {
	fp, err := ParseGetVendorConnectionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetVendorConnectionRequest_FieldTerminalPath struct {
	selector GetVendorConnectionRequest_FieldPathSelector
}

var _ GetVendorConnectionRequest_FieldPath = (*GetVendorConnectionRequest_FieldTerminalPath)(nil)

func (fp *GetVendorConnectionRequest_FieldTerminalPath) Selector() GetVendorConnectionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetVendorConnectionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetVendorConnectionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetVendorConnectionRequest
func (fp *GetVendorConnectionRequest_FieldTerminalPath) Get(source *GetVendorConnectionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetVendorConnectionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetVendorConnectionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetVendorConnectionRequest))
}

// GetSingle returns value pointed by specific field of from source GetVendorConnectionRequest
func (fp *GetVendorConnectionRequest_FieldTerminalPath) GetSingle(source *GetVendorConnectionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetVendorConnectionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetVendorConnectionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		return (*vendor_connection.Reference)(nil)
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case GetVendorConnectionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) ClearValue(item *GetVendorConnectionRequest) {
	if item != nil {
		switch fp.selector {
		case GetVendorConnectionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetVendorConnectionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetVendorConnectionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetVendorConnectionRequest_FieldPathSelectorName ||
		fp.selector == GetVendorConnectionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetVendorConnectionRequest_FieldPathSelectorView
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithIValue(value interface{}) GetVendorConnectionRequest_FieldPathValue {
	switch fp.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		return &GetVendorConnectionRequest_FieldTerminalPathValue{GetVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		return &GetVendorConnectionRequest_FieldTerminalPathValue{GetVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case GetVendorConnectionRequest_FieldPathSelectorView:
		return &GetVendorConnectionRequest_FieldTerminalPathValue{GetVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov := &GetVendorConnectionRequest_FieldTerminalPathArrayOfValues{GetVendorConnectionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		return &GetVendorConnectionRequest_FieldTerminalPathArrayOfValues{GetVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Reference)}
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		return &GetVendorConnectionRequest_FieldTerminalPathArrayOfValues{GetVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case GetVendorConnectionRequest_FieldPathSelectorView:
		return &GetVendorConnectionRequest_FieldTerminalPathArrayOfValues{GetVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetVendorConnectionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *GetVendorConnectionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetVendorConnectionRequest_FieldPathValue allows storing values for GetVendorConnectionRequest fields according to their type
type GetVendorConnectionRequest_FieldPathValue interface {
	GetVendorConnectionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetVendorConnectionRequest)
	CompareWith(*GetVendorConnectionRequest) (cmp int, comparable bool)
}

func ParseGetVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) (GetVendorConnectionRequest_FieldPathValue, error) {
	fp, err := ParseGetVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetVendorConnectionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetVendorConnectionRequest_FieldPathValue), nil
}

func MustParseGetVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) GetVendorConnectionRequest_FieldPathValue {
	fpv, err := ParseGetVendorConnectionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetVendorConnectionRequest_FieldTerminalPathValue struct {
	GetVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ GetVendorConnectionRequest_FieldPathValue = (*GetVendorConnectionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetVendorConnectionRequest' as interface{}
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) AsNameValue() (*vendor_connection.Reference, bool) {
	res, ok := fpv.value.(*vendor_connection.Reference)
	return res, ok
}
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetVendorConnectionRequest
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) SetTo(target **GetVendorConnectionRequest) {
	if *target == nil {
		*target = new(GetVendorConnectionRequest)
	}
	switch fpv.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*vendor_connection.Reference)
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case GetVendorConnectionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetVendorConnectionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetVendorConnectionRequest_FieldTerminalPathValue' with the value under path in 'GetVendorConnectionRequest'.
func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) CompareWith(source *GetVendorConnectionRequest) (int, bool) {
	switch fpv.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*vendor_connection.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetVendorConnectionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *GetVendorConnectionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetVendorConnectionRequest))
}

// GetVendorConnectionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetVendorConnectionRequest according to their type
// Present only for array (repeated) types.
type GetVendorConnectionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetVendorConnectionRequest_FieldPath
	ContainsValue(*GetVendorConnectionRequest) bool
}

// ParseGetVendorConnectionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetVendorConnectionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetVendorConnectionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetVendorConnectionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetVendorConnectionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetVendorConnectionRequest_FieldTerminalPathArrayItemValue struct {
	GetVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ GetVendorConnectionRequest_FieldPathArrayItemValue = (*GetVendorConnectionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetVendorConnectionRequest as interface{}
func (fpaiv *GetVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetVendorConnectionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetVendorConnectionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetVendorConnectionRequest'
func (fpaiv *GetVendorConnectionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetVendorConnectionRequest) bool {
	slice := fpaiv.GetVendorConnectionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetVendorConnectionRequest_FieldPathArrayOfValues allows storing slice of values for GetVendorConnectionRequest fields according to their type
type GetVendorConnectionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetVendorConnectionRequest_FieldPath
}

func ParseGetVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetVendorConnectionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetVendorConnectionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetVendorConnectionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetVendorConnectionRequest_FieldTerminalPathArrayOfValues struct {
	GetVendorConnectionRequest_FieldTerminalPath
	values interface{}
}

var _ GetVendorConnectionRequest_FieldPathArrayOfValues = (*GetVendorConnectionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetVendorConnectionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetVendorConnectionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*vendor_connection.Reference) {
			values = append(values, v)
		}
	case GetVendorConnectionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case GetVendorConnectionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Reference)
	return res, ok
}
func (fpaov *GetVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *GetVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetVendorConnectionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetVendorConnectionsRequest_FieldPathSelector
	Get(source *BatchGetVendorConnectionsRequest) []interface{}
	GetSingle(source *BatchGetVendorConnectionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetVendorConnectionsRequest)

	// Those methods build corresponding BatchGetVendorConnectionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetVendorConnectionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetVendorConnectionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetVendorConnectionsRequest_FieldPathArrayItemValue
}

type BatchGetVendorConnectionsRequest_FieldPathSelector int32

const (
	BatchGetVendorConnectionsRequest_FieldPathSelectorNames     BatchGetVendorConnectionsRequest_FieldPathSelector = 0
	BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask BatchGetVendorConnectionsRequest_FieldPathSelector = 1
	BatchGetVendorConnectionsRequest_FieldPathSelectorView      BatchGetVendorConnectionsRequest_FieldPathSelector = 2
)

func (s BatchGetVendorConnectionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", s))
	}
}

func BuildBatchGetVendorConnectionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetVendorConnectionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetVendorConnectionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetVendorConnectionsRequest_FieldTerminalPath{selector: BatchGetVendorConnectionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetVendorConnectionsRequest", fp)
}

func ParseBatchGetVendorConnectionsRequest_FieldPath(rawField string) (BatchGetVendorConnectionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetVendorConnectionsRequest_FieldPath(fp)
}

func MustParseBatchGetVendorConnectionsRequest_FieldPath(rawField string) BatchGetVendorConnectionsRequest_FieldPath {
	fp, err := ParseBatchGetVendorConnectionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetVendorConnectionsRequest_FieldTerminalPath struct {
	selector BatchGetVendorConnectionsRequest_FieldPathSelector
}

var _ BatchGetVendorConnectionsRequest_FieldPath = (*BatchGetVendorConnectionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) Selector() BatchGetVendorConnectionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetVendorConnectionsRequest
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) Get(source *BatchGetVendorConnectionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetVendorConnectionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetVendorConnectionsRequest
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) GetSingle(source *BatchGetVendorConnectionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetVendorConnectionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return ([]*vendor_connection.Reference)(nil)
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) ClearValue(item *BatchGetVendorConnectionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetVendorConnectionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetVendorConnectionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetVendorConnectionsRequest_FieldPathSelectorView
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetVendorConnectionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathValue{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.([]*vendor_connection.Reference)}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathValue{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathValue{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([][]*vendor_connection.Reference)}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetVendorConnectionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return &BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue{BatchGetVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetVendorConnectionsRequest_FieldPathValue allows storing values for BatchGetVendorConnectionsRequest fields according to their type
type BatchGetVendorConnectionsRequest_FieldPathValue interface {
	BatchGetVendorConnectionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetVendorConnectionsRequest)
	CompareWith(*BatchGetVendorConnectionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetVendorConnectionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetVendorConnectionsRequest_FieldPathValue), nil
}

func MustParseBatchGetVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetVendorConnectionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetVendorConnectionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetVendorConnectionsRequest_FieldTerminalPathValue struct {
	BatchGetVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetVendorConnectionsRequest_FieldPathValue = (*BatchGetVendorConnectionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetVendorConnectionsRequest' as interface{}
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*vendor_connection.Reference, bool) {
	res, ok := fpv.value.([]*vendor_connection.Reference)
	return res, ok
}
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetVendorConnectionsRequest
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetVendorConnectionsRequest) {
	if *target == nil {
		*target = new(BatchGetVendorConnectionsRequest)
	}
	switch fpv.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*vendor_connection.Reference)
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetVendorConnectionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetVendorConnectionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetVendorConnectionsRequest'.
func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetVendorConnectionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetVendorConnectionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetVendorConnectionsRequest))
}

// BatchGetVendorConnectionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetVendorConnectionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetVendorConnectionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetVendorConnectionsRequest_FieldPath
	ContainsValue(*BatchGetVendorConnectionsRequest) bool
}

// ParseBatchGetVendorConnectionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetVendorConnectionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetVendorConnectionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetVendorConnectionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetVendorConnectionsRequest_FieldPathArrayItemValue = (*BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetVendorConnectionsRequest as interface{}
func (fpaiv *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*vendor_connection.Reference, bool) {
	res, ok := fpaiv.value.(*vendor_connection.Reference)
	return res, ok
}

func (fpaiv *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetVendorConnectionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetVendorConnectionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetVendorConnectionsRequest'
func (fpaiv *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetVendorConnectionsRequest) bool {
	slice := fpaiv.BatchGetVendorConnectionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetVendorConnectionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetVendorConnectionsRequest fields according to their type
type BatchGetVendorConnectionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetVendorConnectionsRequest_FieldPath
}

func ParseBatchGetVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetVendorConnectionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetVendorConnectionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetVendorConnectionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetVendorConnectionsRequest_FieldPathArrayOfValues = (*BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetVendorConnectionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*vendor_connection.Reference) {
			values = append(values, v)
		}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case BatchGetVendorConnectionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([][]*vendor_connection.Reference)
	return res, ok
}
func (fpaov *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *BatchGetVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetVendorConnectionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetVendorConnectionsResponse_FieldPathSelector
	Get(source *BatchGetVendorConnectionsResponse) []interface{}
	GetSingle(source *BatchGetVendorConnectionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetVendorConnectionsResponse)

	// Those methods build corresponding BatchGetVendorConnectionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayItemValue
}

type BatchGetVendorConnectionsResponse_FieldPathSelector int32

const (
	BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections BatchGetVendorConnectionsResponse_FieldPathSelector = 0
	BatchGetVendorConnectionsResponse_FieldPathSelectorMissing           BatchGetVendorConnectionsResponse_FieldPathSelector = 1
)

func (s BatchGetVendorConnectionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return "vendor_connections"
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", s))
	}
}

func BuildBatchGetVendorConnectionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetVendorConnectionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetVendorConnectionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor_connections", "vendorConnections", "vendor-connections":
			return &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections}, nil
		case "missing":
			return &BatchGetVendorConnectionsResponse_FieldTerminalPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "vendor_connections", "vendorConnections", "vendor-connections":
			if subpath, err := vendor_connection.BuildVendorConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetVendorConnectionsResponse_FieldSubPath{selector: BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetVendorConnectionsResponse", fp)
}

func ParseBatchGetVendorConnectionsResponse_FieldPath(rawField string) (BatchGetVendorConnectionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetVendorConnectionsResponse_FieldPath(fp)
}

func MustParseBatchGetVendorConnectionsResponse_FieldPath(rawField string) BatchGetVendorConnectionsResponse_FieldPath {
	fp, err := ParseBatchGetVendorConnectionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetVendorConnectionsResponse_FieldTerminalPath struct {
	selector BatchGetVendorConnectionsResponse_FieldPathSelector
}

var _ BatchGetVendorConnectionsResponse_FieldPath = (*BatchGetVendorConnectionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) Selector() BatchGetVendorConnectionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetVendorConnectionsResponse
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) Get(source *BatchGetVendorConnectionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			for _, value := range source.GetVendorConnections() {
				values = append(values, value)
			}
		case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetVendorConnectionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetVendorConnectionsResponse
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) GetSingle(source *BatchGetVendorConnectionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		res := source.GetVendorConnections()
		return res, res != nil
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return ([]*vendor_connection.VendorConnection)(nil)
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return ([]*vendor_connection.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) ClearValue(item *BatchGetVendorConnectionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			item.VendorConnections = nil
		case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetVendorConnectionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathValue{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.([]*vendor_connection.VendorConnection)}
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathValue{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.([]*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([][]*vendor_connection.VendorConnection)}
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([][]*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection)}
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return &BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue{BatchGetVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetVendorConnectionsResponse_FieldSubPath struct {
	selector BatchGetVendorConnectionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetVendorConnectionsResponse_FieldPath = (*BatchGetVendorConnectionsResponse_FieldSubPath)(nil)

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) Selector() BatchGetVendorConnectionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) AsVendorConnectionsSubPath() (vendor_connection.VendorConnection_FieldPath, bool) {
	res, ok := fps.subPath.(vendor_connection.VendorConnection_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetVendorConnectionsResponse
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) Get(source *BatchGetVendorConnectionsResponse) (values []interface{}) {
	if asVendorConnectionFieldPath, ok := fps.AsVendorConnectionsSubPath(); ok {
		for _, item := range source.GetVendorConnections() {
			values = append(values, asVendorConnectionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetVendorConnectionsResponse))
}

// GetSingle returns value of selected field from source BatchGetVendorConnectionsResponse
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) GetSingle(source *BatchGetVendorConnectionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		if len(source.GetVendorConnections()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorConnections()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) ClearValue(item *BatchGetVendorConnectionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			for _, subItem := range item.VendorConnections {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathValue {
	return &BatchGetVendorConnectionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayOfValues {
	return &BatchGetVendorConnectionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetVendorConnectionsResponse_FieldPathArrayItemValue {
	return &BatchGetVendorConnectionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetVendorConnectionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetVendorConnectionsResponse_FieldPathValue allows storing values for BatchGetVendorConnectionsResponse fields according to their type
type BatchGetVendorConnectionsResponse_FieldPathValue interface {
	BatchGetVendorConnectionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetVendorConnectionsResponse)
	CompareWith(*BatchGetVendorConnectionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetVendorConnectionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetVendorConnectionsResponse_FieldPathValue), nil
}

func MustParseBatchGetVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetVendorConnectionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetVendorConnectionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetVendorConnectionsResponse_FieldTerminalPathValue struct {
	BatchGetVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetVendorConnectionsResponse_FieldPathValue = (*BatchGetVendorConnectionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetVendorConnectionsResponse' as interface{}
func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) AsVendorConnectionsValue() ([]*vendor_connection.VendorConnection, bool) {
	res, ok := fpv.value.([]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*vendor_connection.Reference, bool) {
	res, ok := fpv.value.([]*vendor_connection.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetVendorConnectionsResponse
func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetVendorConnectionsResponse) {
	if *target == nil {
		*target = new(BatchGetVendorConnectionsResponse)
	}
	switch fpv.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		(*target).VendorConnections = fpv.value.([]*vendor_connection.VendorConnection)
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*vendor_connection.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetVendorConnectionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetVendorConnectionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetVendorConnectionsResponse'.
func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetVendorConnectionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return 0, false
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetVendorConnectionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetVendorConnectionsResponse))
}

type BatchGetVendorConnectionsResponse_FieldSubPathValue struct {
	BatchGetVendorConnectionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetVendorConnectionsResponse_FieldPathValue = (*BatchGetVendorConnectionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) AsVendorConnectionsPathValue() (vendor_connection.VendorConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) SetTo(target **BatchGetVendorConnectionsResponse) {
	if *target == nil {
		*target = new(BatchGetVendorConnectionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetVendorConnectionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) CompareWith(source *BatchGetVendorConnectionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetVendorConnectionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetVendorConnectionsResponse))
}

// BatchGetVendorConnectionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetVendorConnectionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetVendorConnectionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetVendorConnectionsResponse_FieldPath
	ContainsValue(*BatchGetVendorConnectionsResponse) bool
}

// ParseBatchGetVendorConnectionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetVendorConnectionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetVendorConnectionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetVendorConnectionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetVendorConnectionsResponse_FieldPathArrayItemValue = (*BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetVendorConnectionsResponse as interface{}
func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) AsVendorConnectionsItemValue() (*vendor_connection.VendorConnection, bool) {
	res, ok := fpaiv.value.(*vendor_connection.VendorConnection)
	return res, ok
}
func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*vendor_connection.Reference, bool) {
	res, ok := fpaiv.value.(*vendor_connection.Reference)
	return res, ok
}

func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetVendorConnectionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetVendorConnectionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetVendorConnectionsResponse'
func (fpaiv *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetVendorConnectionsResponse) bool {
	slice := fpaiv.BatchGetVendorConnectionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetVendorConnectionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetVendorConnectionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetVendorConnectionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetVendorConnectionsResponse_FieldSubPathArrayItemValue) AsVendorConnectionsPathItemValue() (vendor_connection.VendorConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetVendorConnectionsResponse'
func (fpaivs *BatchGetVendorConnectionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetVendorConnectionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetVendorConnectionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetVendorConnectionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetVendorConnectionsResponse fields according to their type
type BatchGetVendorConnectionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetVendorConnectionsResponse_FieldPath
}

func ParseBatchGetVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetVendorConnectionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetVendorConnectionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetVendorConnectionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetVendorConnectionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetVendorConnectionsResponse_FieldPathArrayOfValues = (*BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		for _, v := range fpaov.values.([][]*vendor_connection.VendorConnection) {
			values = append(values, v)
		}
	case BatchGetVendorConnectionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*vendor_connection.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsVendorConnectionsArrayOfValues() ([][]*vendor_connection.VendorConnection, bool) {
	res, ok := fpaov.values.([][]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpaov *BatchGetVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([][]*vendor_connection.Reference)
	return res, ok
}

type BatchGetVendorConnectionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetVendorConnectionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetVendorConnectionsResponse_FieldPathArrayOfValues = (*BatchGetVendorConnectionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetVendorConnectionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetVendorConnectionsResponse_FieldSubPathArrayOfValues) AsVendorConnectionsPathArrayOfValues() (vendor_connection.VendorConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(vendor_connection.VendorConnection_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListVendorConnectionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListVendorConnectionsRequest_FieldPathSelector
	Get(source *ListVendorConnectionsRequest) []interface{}
	GetSingle(source *ListVendorConnectionsRequest) (interface{}, bool)
	ClearValue(item *ListVendorConnectionsRequest)

	// Those methods build corresponding ListVendorConnectionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListVendorConnectionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListVendorConnectionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListVendorConnectionsRequest_FieldPathArrayItemValue
}

type ListVendorConnectionsRequest_FieldPathSelector int32

const (
	ListVendorConnectionsRequest_FieldPathSelectorParent    ListVendorConnectionsRequest_FieldPathSelector = 0
	ListVendorConnectionsRequest_FieldPathSelectorPageSize  ListVendorConnectionsRequest_FieldPathSelector = 1
	ListVendorConnectionsRequest_FieldPathSelectorPageToken ListVendorConnectionsRequest_FieldPathSelector = 2
	ListVendorConnectionsRequest_FieldPathSelectorOrderBy   ListVendorConnectionsRequest_FieldPathSelector = 3
	ListVendorConnectionsRequest_FieldPathSelectorFilter    ListVendorConnectionsRequest_FieldPathSelector = 4
	ListVendorConnectionsRequest_FieldPathSelectorFieldMask ListVendorConnectionsRequest_FieldPathSelector = 5
	ListVendorConnectionsRequest_FieldPathSelectorView      ListVendorConnectionsRequest_FieldPathSelector = 6
)

func (s ListVendorConnectionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		return "parent"
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", s))
	}
}

func BuildListVendorConnectionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListVendorConnectionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListVendorConnectionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListVendorConnectionsRequest_FieldTerminalPath{selector: ListVendorConnectionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListVendorConnectionsRequest", fp)
}

func ParseListVendorConnectionsRequest_FieldPath(rawField string) (ListVendorConnectionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListVendorConnectionsRequest_FieldPath(fp)
}

func MustParseListVendorConnectionsRequest_FieldPath(rawField string) ListVendorConnectionsRequest_FieldPath {
	fp, err := ParseListVendorConnectionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListVendorConnectionsRequest_FieldTerminalPath struct {
	selector ListVendorConnectionsRequest_FieldPathSelector
}

var _ ListVendorConnectionsRequest_FieldPath = (*ListVendorConnectionsRequest_FieldTerminalPath)(nil)

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) Selector() ListVendorConnectionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListVendorConnectionsRequest
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) Get(source *ListVendorConnectionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListVendorConnectionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListVendorConnectionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListVendorConnectionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListVendorConnectionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListVendorConnectionsRequest
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) GetSingle(source *ListVendorConnectionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListVendorConnectionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		return (*vendor_connection.ParentName)(nil)
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return (*vendor_connection.OrderBy)(nil)
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		return (*vendor_connection.Filter)(nil)
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) ClearValue(item *ListVendorConnectionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListVendorConnectionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListVendorConnectionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListVendorConnectionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListVendorConnectionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListVendorConnectionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListVendorConnectionsRequest_FieldPathSelectorParent ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListVendorConnectionsRequest_FieldPathSelectorView
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListVendorConnectionsRequest_FieldPathValue {
	switch fp.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.ParentName)}
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.OrderBy)}
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Filter)}
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		return &ListVendorConnectionsRequest_FieldTerminalPathValue{ListVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov := &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.ParentName)}
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.OrderBy)}
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Filter)}
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		return &ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues{ListVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListVendorConnectionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListVendorConnectionsRequest_FieldPathValue allows storing values for ListVendorConnectionsRequest fields according to their type
type ListVendorConnectionsRequest_FieldPathValue interface {
	ListVendorConnectionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListVendorConnectionsRequest)
	CompareWith(*ListVendorConnectionsRequest) (cmp int, comparable bool)
}

func ParseListVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) (ListVendorConnectionsRequest_FieldPathValue, error) {
	fp, err := ParseListVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListVendorConnectionsRequest_FieldPathValue), nil
}

func MustParseListVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) ListVendorConnectionsRequest_FieldPathValue {
	fpv, err := ParseListVendorConnectionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListVendorConnectionsRequest_FieldTerminalPathValue struct {
	ListVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListVendorConnectionsRequest_FieldPathValue = (*ListVendorConnectionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListVendorConnectionsRequest' as interface{}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsParentValue() (*vendor_connection.ParentName, bool) {
	res, ok := fpv.value.(*vendor_connection.ParentName)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsOrderByValue() (*vendor_connection.OrderBy, bool) {
	res, ok := fpv.value.(*vendor_connection.OrderBy)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsFilterValue() (*vendor_connection.Filter, bool) {
	res, ok := fpv.value.(*vendor_connection.Filter)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListVendorConnectionsRequest
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) SetTo(target **ListVendorConnectionsRequest) {
	if *target == nil {
		*target = new(ListVendorConnectionsRequest)
	}
	switch fpv.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*vendor_connection.ParentName)
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*vendor_connection.PagerCursor)
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*vendor_connection.OrderBy)
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*vendor_connection.Filter)
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListVendorConnectionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListVendorConnectionsRequest_FieldTerminalPathValue' with the value under path in 'ListVendorConnectionsRequest'.
func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) CompareWith(source *ListVendorConnectionsRequest) (int, bool) {
	switch fpv.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*vendor_connection.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListVendorConnectionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListVendorConnectionsRequest))
}

// ListVendorConnectionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListVendorConnectionsRequest according to their type
// Present only for array (repeated) types.
type ListVendorConnectionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListVendorConnectionsRequest_FieldPath
	ContainsValue(*ListVendorConnectionsRequest) bool
}

// ParseListVendorConnectionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListVendorConnectionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListVendorConnectionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListVendorConnectionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue struct {
	ListVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListVendorConnectionsRequest_FieldPathArrayItemValue = (*ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListVendorConnectionsRequest as interface{}
func (fpaiv *ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListVendorConnectionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListVendorConnectionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListVendorConnectionsRequest'
func (fpaiv *ListVendorConnectionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListVendorConnectionsRequest) bool {
	slice := fpaiv.ListVendorConnectionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListVendorConnectionsRequest_FieldPathArrayOfValues allows storing slice of values for ListVendorConnectionsRequest fields according to their type
type ListVendorConnectionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListVendorConnectionsRequest_FieldPath
}

func ParseListVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListVendorConnectionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListVendorConnectionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues struct {
	ListVendorConnectionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListVendorConnectionsRequest_FieldPathArrayOfValues = (*ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListVendorConnectionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*vendor_connection.ParentName) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*vendor_connection.OrderBy) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*vendor_connection.Filter) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case ListVendorConnectionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*vendor_connection.ParentName, bool) {
	res, ok := fpaov.values.([]*vendor_connection.ParentName)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*vendor_connection.OrderBy, bool) {
	res, ok := fpaov.values.([]*vendor_connection.OrderBy)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*vendor_connection.Filter, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Filter)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *ListVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListVendorConnectionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListVendorConnectionsResponse_FieldPathSelector
	Get(source *ListVendorConnectionsResponse) []interface{}
	GetSingle(source *ListVendorConnectionsResponse) (interface{}, bool)
	ClearValue(item *ListVendorConnectionsResponse)

	// Those methods build corresponding ListVendorConnectionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListVendorConnectionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListVendorConnectionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListVendorConnectionsResponse_FieldPathArrayItemValue
}

type ListVendorConnectionsResponse_FieldPathSelector int32

const (
	ListVendorConnectionsResponse_FieldPathSelectorVendorConnections ListVendorConnectionsResponse_FieldPathSelector = 0
	ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken     ListVendorConnectionsResponse_FieldPathSelector = 1
	ListVendorConnectionsResponse_FieldPathSelectorNextPageToken     ListVendorConnectionsResponse_FieldPathSelector = 2
)

func (s ListVendorConnectionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return "vendor_connections"
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", s))
	}
}

func BuildListVendorConnectionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListVendorConnectionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListVendorConnectionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor_connections", "vendorConnections", "vendor-connections":
			return &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListVendorConnectionsResponse_FieldTerminalPath{selector: ListVendorConnectionsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "vendor_connections", "vendorConnections", "vendor-connections":
			if subpath, err := vendor_connection.BuildVendorConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListVendorConnectionsResponse_FieldSubPath{selector: ListVendorConnectionsResponse_FieldPathSelectorVendorConnections, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListVendorConnectionsResponse", fp)
}

func ParseListVendorConnectionsResponse_FieldPath(rawField string) (ListVendorConnectionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListVendorConnectionsResponse_FieldPath(fp)
}

func MustParseListVendorConnectionsResponse_FieldPath(rawField string) ListVendorConnectionsResponse_FieldPath {
	fp, err := ParseListVendorConnectionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListVendorConnectionsResponse_FieldTerminalPath struct {
	selector ListVendorConnectionsResponse_FieldPathSelector
}

var _ ListVendorConnectionsResponse_FieldPath = (*ListVendorConnectionsResponse_FieldTerminalPath)(nil)

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) Selector() ListVendorConnectionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListVendorConnectionsResponse
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) Get(source *ListVendorConnectionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			for _, value := range source.GetVendorConnections() {
				values = append(values, value)
			}
		case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListVendorConnectionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListVendorConnectionsResponse
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) GetSingle(source *ListVendorConnectionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		res := source.GetVendorConnections()
		return res, res != nil
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return ([]*vendor_connection.VendorConnection)(nil)
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) ClearValue(item *ListVendorConnectionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			item.VendorConnections = nil
		case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListVendorConnectionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListVendorConnectionsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListVendorConnectionsResponse_FieldPathValue {
	switch fp.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &ListVendorConnectionsResponse_FieldTerminalPathValue{ListVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.([]*vendor_connection.VendorConnection)}
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		return &ListVendorConnectionsResponse_FieldTerminalPathValue{ListVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		return &ListVendorConnectionsResponse_FieldTerminalPathValue{ListVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov := &ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues{ListVendorConnectionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues{ListVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([][]*vendor_connection.VendorConnection)}
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		return &ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues{ListVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		return &ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues{ListVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListVendorConnectionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return &ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue{ListVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListVendorConnectionsResponse_FieldSubPath struct {
	selector ListVendorConnectionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListVendorConnectionsResponse_FieldPath = (*ListVendorConnectionsResponse_FieldSubPath)(nil)

func (fps *ListVendorConnectionsResponse_FieldSubPath) Selector() ListVendorConnectionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListVendorConnectionsResponse_FieldSubPath) AsVendorConnectionsSubPath() (vendor_connection.VendorConnection_FieldPath, bool) {
	res, ok := fps.subPath.(vendor_connection.VendorConnection_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListVendorConnectionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListVendorConnectionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListVendorConnectionsResponse
func (fps *ListVendorConnectionsResponse_FieldSubPath) Get(source *ListVendorConnectionsResponse) (values []interface{}) {
	if asVendorConnectionFieldPath, ok := fps.AsVendorConnectionsSubPath(); ok {
		for _, item := range source.GetVendorConnections() {
			values = append(values, asVendorConnectionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListVendorConnectionsResponse))
}

// GetSingle returns value of selected field from source ListVendorConnectionsResponse
func (fps *ListVendorConnectionsResponse_FieldSubPath) GetSingle(source *ListVendorConnectionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		if len(source.GetVendorConnections()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorConnections()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fps.selector))
	}
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListVendorConnectionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) ClearValue(item *ListVendorConnectionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
			for _, subItem := range item.VendorConnections {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListVendorConnectionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithIValue(value interface{}) ListVendorConnectionsResponse_FieldPathValue {
	return &ListVendorConnectionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListVendorConnectionsResponse_FieldPathArrayOfValues {
	return &ListVendorConnectionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListVendorConnectionsResponse_FieldPathArrayItemValue {
	return &ListVendorConnectionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListVendorConnectionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListVendorConnectionsResponse_FieldPathValue allows storing values for ListVendorConnectionsResponse fields according to their type
type ListVendorConnectionsResponse_FieldPathValue interface {
	ListVendorConnectionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListVendorConnectionsResponse)
	CompareWith(*ListVendorConnectionsResponse) (cmp int, comparable bool)
}

func ParseListVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) (ListVendorConnectionsResponse_FieldPathValue, error) {
	fp, err := ParseListVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListVendorConnectionsResponse_FieldPathValue), nil
}

func MustParseListVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) ListVendorConnectionsResponse_FieldPathValue {
	fpv, err := ParseListVendorConnectionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListVendorConnectionsResponse_FieldTerminalPathValue struct {
	ListVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListVendorConnectionsResponse_FieldPathValue = (*ListVendorConnectionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListVendorConnectionsResponse' as interface{}
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) AsVendorConnectionsValue() ([]*vendor_connection.VendorConnection, bool) {
	res, ok := fpv.value.([]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListVendorConnectionsResponse
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) SetTo(target **ListVendorConnectionsResponse) {
	if *target == nil {
		*target = new(ListVendorConnectionsResponse)
	}
	switch fpv.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		(*target).VendorConnections = fpv.value.([]*vendor_connection.VendorConnection)
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*vendor_connection.PagerCursor)
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*vendor_connection.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListVendorConnectionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListVendorConnectionsResponse_FieldTerminalPathValue' with the value under path in 'ListVendorConnectionsResponse'.
func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) CompareWith(source *ListVendorConnectionsResponse) (int, bool) {
	switch fpv.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return 0, false
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListVendorConnectionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListVendorConnectionsResponse))
}

type ListVendorConnectionsResponse_FieldSubPathValue struct {
	ListVendorConnectionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListVendorConnectionsResponse_FieldPathValue = (*ListVendorConnectionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) AsVendorConnectionsPathValue() (vendor_connection.VendorConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue)
	return res, ok
}

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) SetTo(target **ListVendorConnectionsResponse) {
	if *target == nil {
		*target = new(ListVendorConnectionsResponse)
	}
	switch fpvs.Selector() {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListVendorConnectionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) CompareWith(source *ListVendorConnectionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListVendorConnectionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListVendorConnectionsResponse))
}

// ListVendorConnectionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListVendorConnectionsResponse according to their type
// Present only for array (repeated) types.
type ListVendorConnectionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListVendorConnectionsResponse_FieldPath
	ContainsValue(*ListVendorConnectionsResponse) bool
}

// ParseListVendorConnectionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListVendorConnectionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListVendorConnectionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListVendorConnectionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue struct {
	ListVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListVendorConnectionsResponse_FieldPathArrayItemValue = (*ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListVendorConnectionsResponse as interface{}
func (fpaiv *ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue) AsVendorConnectionsItemValue() (*vendor_connection.VendorConnection, bool) {
	res, ok := fpaiv.value.(*vendor_connection.VendorConnection)
	return res, ok
}

func (fpaiv *ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListVendorConnectionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListVendorConnectionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListVendorConnectionsResponse'
func (fpaiv *ListVendorConnectionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListVendorConnectionsResponse) bool {
	slice := fpaiv.ListVendorConnectionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListVendorConnectionsResponse_FieldSubPathArrayItemValue struct {
	ListVendorConnectionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListVendorConnectionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListVendorConnectionsResponse_FieldSubPathArrayItemValue) AsVendorConnectionsPathItemValue() (vendor_connection.VendorConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListVendorConnectionsResponse'
func (fpaivs *ListVendorConnectionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListVendorConnectionsResponse) bool {
	switch fpaivs.Selector() {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListVendorConnectionsResponse: %d", fpaivs.Selector()))
	}
}

// ListVendorConnectionsResponse_FieldPathArrayOfValues allows storing slice of values for ListVendorConnectionsResponse fields according to their type
type ListVendorConnectionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListVendorConnectionsResponse_FieldPath
}

func ParseListVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListVendorConnectionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListVendorConnectionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListVendorConnectionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues struct {
	ListVendorConnectionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListVendorConnectionsResponse_FieldPathArrayOfValues = (*ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListVendorConnectionsResponse_FieldPathSelectorVendorConnections:
		for _, v := range fpaov.values.([][]*vendor_connection.VendorConnection) {
			values = append(values, v)
		}
	case ListVendorConnectionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	case ListVendorConnectionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsVendorConnectionsArrayOfValues() ([][]*vendor_connection.VendorConnection, bool) {
	res, ok := fpaov.values.([][]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpaov *ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}
func (fpaov *ListVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}

type ListVendorConnectionsResponse_FieldSubPathArrayOfValues struct {
	ListVendorConnectionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListVendorConnectionsResponse_FieldPathArrayOfValues = (*ListVendorConnectionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListVendorConnectionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListVendorConnectionsResponse_FieldSubPathArrayOfValues) AsVendorConnectionsPathArrayOfValues() (vendor_connection.VendorConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(vendor_connection.VendorConnection_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchVendorConnectionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchVendorConnectionRequest_FieldPathSelector
	Get(source *WatchVendorConnectionRequest) []interface{}
	GetSingle(source *WatchVendorConnectionRequest) (interface{}, bool)
	ClearValue(item *WatchVendorConnectionRequest)

	// Those methods build corresponding WatchVendorConnectionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchVendorConnectionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchVendorConnectionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchVendorConnectionRequest_FieldPathArrayItemValue
}

type WatchVendorConnectionRequest_FieldPathSelector int32

const (
	WatchVendorConnectionRequest_FieldPathSelectorName      WatchVendorConnectionRequest_FieldPathSelector = 0
	WatchVendorConnectionRequest_FieldPathSelectorFieldMask WatchVendorConnectionRequest_FieldPathSelector = 1
	WatchVendorConnectionRequest_FieldPathSelectorView      WatchVendorConnectionRequest_FieldPathSelector = 2
)

func (s WatchVendorConnectionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		return "name"
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", s))
	}
}

func BuildWatchVendorConnectionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchVendorConnectionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchVendorConnectionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchVendorConnectionRequest_FieldTerminalPath{selector: WatchVendorConnectionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchVendorConnectionRequest", fp)
}

func ParseWatchVendorConnectionRequest_FieldPath(rawField string) (WatchVendorConnectionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchVendorConnectionRequest_FieldPath(fp)
}

func MustParseWatchVendorConnectionRequest_FieldPath(rawField string) WatchVendorConnectionRequest_FieldPath {
	fp, err := ParseWatchVendorConnectionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchVendorConnectionRequest_FieldTerminalPath struct {
	selector WatchVendorConnectionRequest_FieldPathSelector
}

var _ WatchVendorConnectionRequest_FieldPath = (*WatchVendorConnectionRequest_FieldTerminalPath)(nil)

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) Selector() WatchVendorConnectionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchVendorConnectionRequest
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) Get(source *WatchVendorConnectionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchVendorConnectionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchVendorConnectionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchVendorConnectionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchVendorConnectionRequest
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) GetSingle(source *WatchVendorConnectionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		return (*vendor_connection.Reference)(nil)
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) ClearValue(item *WatchVendorConnectionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchVendorConnectionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchVendorConnectionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchVendorConnectionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchVendorConnectionRequest_FieldPathSelectorName ||
		fp.selector == WatchVendorConnectionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchVendorConnectionRequest_FieldPathSelectorView
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchVendorConnectionRequest_FieldPathValue {
	switch fp.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		return &WatchVendorConnectionRequest_FieldTerminalPathValue{WatchVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		return &WatchVendorConnectionRequest_FieldTerminalPathValue{WatchVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		return &WatchVendorConnectionRequest_FieldTerminalPathValue{WatchVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov := &WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		return &WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Reference)}
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		return &WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		return &WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchVendorConnectionRequest_FieldPathValue allows storing values for WatchVendorConnectionRequest fields according to their type
type WatchVendorConnectionRequest_FieldPathValue interface {
	WatchVendorConnectionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchVendorConnectionRequest)
	CompareWith(*WatchVendorConnectionRequest) (cmp int, comparable bool)
}

func ParseWatchVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) (WatchVendorConnectionRequest_FieldPathValue, error) {
	fp, err := ParseWatchVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchVendorConnectionRequest_FieldPathValue), nil
}

func MustParseWatchVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) WatchVendorConnectionRequest_FieldPathValue {
	fpv, err := ParseWatchVendorConnectionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchVendorConnectionRequest_FieldTerminalPathValue struct {
	WatchVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionRequest_FieldPathValue = (*WatchVendorConnectionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchVendorConnectionRequest' as interface{}
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) AsNameValue() (*vendor_connection.Reference, bool) {
	res, ok := fpv.value.(*vendor_connection.Reference)
	return res, ok
}
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchVendorConnectionRequest
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) SetTo(target **WatchVendorConnectionRequest) {
	if *target == nil {
		*target = new(WatchVendorConnectionRequest)
	}
	switch fpv.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*vendor_connection.Reference)
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchVendorConnectionRequest_FieldTerminalPathValue' with the value under path in 'WatchVendorConnectionRequest'.
func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) CompareWith(source *WatchVendorConnectionRequest) (int, bool) {
	switch fpv.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*vendor_connection.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchVendorConnectionRequest))
}

// WatchVendorConnectionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchVendorConnectionRequest according to their type
// Present only for array (repeated) types.
type WatchVendorConnectionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchVendorConnectionRequest_FieldPath
	ContainsValue(*WatchVendorConnectionRequest) bool
}

// ParseWatchVendorConnectionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchVendorConnectionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchVendorConnectionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchVendorConnectionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue struct {
	WatchVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionRequest_FieldPathArrayItemValue = (*WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchVendorConnectionRequest as interface{}
func (fpaiv *WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchVendorConnectionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchVendorConnectionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchVendorConnectionRequest'
func (fpaiv *WatchVendorConnectionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchVendorConnectionRequest) bool {
	slice := fpaiv.WatchVendorConnectionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchVendorConnectionRequest_FieldPathArrayOfValues allows storing slice of values for WatchVendorConnectionRequest fields according to their type
type WatchVendorConnectionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchVendorConnectionRequest_FieldPath
}

func ParseWatchVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchVendorConnectionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchVendorConnectionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues struct {
	WatchVendorConnectionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchVendorConnectionRequest_FieldPathArrayOfValues = (*WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchVendorConnectionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*vendor_connection.Reference) {
			values = append(values, v)
		}
	case WatchVendorConnectionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case WatchVendorConnectionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Reference)
	return res, ok
}
func (fpaov *WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *WatchVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchVendorConnectionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchVendorConnectionResponse_FieldPathSelector
	Get(source *WatchVendorConnectionResponse) []interface{}
	GetSingle(source *WatchVendorConnectionResponse) (interface{}, bool)
	ClearValue(item *WatchVendorConnectionResponse)

	// Those methods build corresponding WatchVendorConnectionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchVendorConnectionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchVendorConnectionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchVendorConnectionResponse_FieldPathArrayItemValue
}

type WatchVendorConnectionResponse_FieldPathSelector int32

const (
	WatchVendorConnectionResponse_FieldPathSelectorChange WatchVendorConnectionResponse_FieldPathSelector = 0
)

func (s WatchVendorConnectionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", s))
	}
}

func BuildWatchVendorConnectionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchVendorConnectionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchVendorConnectionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchVendorConnectionResponse_FieldTerminalPath{selector: WatchVendorConnectionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchVendorConnectionResponse", fp)
}

func ParseWatchVendorConnectionResponse_FieldPath(rawField string) (WatchVendorConnectionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchVendorConnectionResponse_FieldPath(fp)
}

func MustParseWatchVendorConnectionResponse_FieldPath(rawField string) WatchVendorConnectionResponse_FieldPath {
	fp, err := ParseWatchVendorConnectionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchVendorConnectionResponse_FieldTerminalPath struct {
	selector WatchVendorConnectionResponse_FieldPathSelector
}

var _ WatchVendorConnectionResponse_FieldPath = (*WatchVendorConnectionResponse_FieldTerminalPath)(nil)

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) Selector() WatchVendorConnectionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchVendorConnectionResponse
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) Get(source *WatchVendorConnectionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchVendorConnectionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchVendorConnectionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchVendorConnectionResponse
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) GetSingle(source *WatchVendorConnectionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchVendorConnectionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		return (*vendor_connection.VendorConnectionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) ClearValue(item *WatchVendorConnectionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchVendorConnectionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchVendorConnectionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchVendorConnectionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchVendorConnectionResponse_FieldPathSelectorChange
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchVendorConnectionResponse_FieldPathValue {
	switch fp.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		return &WatchVendorConnectionResponse_FieldTerminalPathValue{WatchVendorConnectionResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnectionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionResponse_FieldPathArrayOfValues {
	fpaov := &WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		return &WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionResponse_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnectionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchVendorConnectionResponse_FieldPathValue allows storing values for WatchVendorConnectionResponse fields according to their type
type WatchVendorConnectionResponse_FieldPathValue interface {
	WatchVendorConnectionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchVendorConnectionResponse)
	CompareWith(*WatchVendorConnectionResponse) (cmp int, comparable bool)
}

func ParseWatchVendorConnectionResponse_FieldPathValue(pathStr, valueStr string) (WatchVendorConnectionResponse_FieldPathValue, error) {
	fp, err := ParseWatchVendorConnectionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchVendorConnectionResponse_FieldPathValue), nil
}

func MustParseWatchVendorConnectionResponse_FieldPathValue(pathStr, valueStr string) WatchVendorConnectionResponse_FieldPathValue {
	fpv, err := ParseWatchVendorConnectionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchVendorConnectionResponse_FieldTerminalPathValue struct {
	WatchVendorConnectionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionResponse_FieldPathValue = (*WatchVendorConnectionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchVendorConnectionResponse' as interface{}
func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) AsChangeValue() (*vendor_connection.VendorConnectionChange, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnectionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchVendorConnectionResponse
func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) SetTo(target **WatchVendorConnectionResponse) {
	if *target == nil {
		*target = new(WatchVendorConnectionResponse)
	}
	switch fpv.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*vendor_connection.VendorConnectionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchVendorConnectionResponse_FieldTerminalPathValue' with the value under path in 'WatchVendorConnectionResponse'.
func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) CompareWith(source *WatchVendorConnectionResponse) (int, bool) {
	switch fpv.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchVendorConnectionResponse))
}

// WatchVendorConnectionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchVendorConnectionResponse according to their type
// Present only for array (repeated) types.
type WatchVendorConnectionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchVendorConnectionResponse_FieldPath
	ContainsValue(*WatchVendorConnectionResponse) bool
}

// ParseWatchVendorConnectionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchVendorConnectionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchVendorConnectionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchVendorConnectionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchVendorConnectionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchVendorConnectionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchVendorConnectionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchVendorConnectionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue struct {
	WatchVendorConnectionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionResponse_FieldPathArrayItemValue = (*WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchVendorConnectionResponse as interface{}
func (fpaiv *WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchVendorConnectionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchVendorConnectionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchVendorConnectionResponse'
func (fpaiv *WatchVendorConnectionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchVendorConnectionResponse) bool {
	slice := fpaiv.WatchVendorConnectionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchVendorConnectionResponse_FieldPathArrayOfValues allows storing slice of values for WatchVendorConnectionResponse fields according to their type
type WatchVendorConnectionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchVendorConnectionResponse_FieldPath
}

func ParseWatchVendorConnectionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchVendorConnectionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchVendorConnectionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchVendorConnectionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchVendorConnectionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchVendorConnectionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchVendorConnectionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues struct {
	WatchVendorConnectionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchVendorConnectionResponse_FieldPathArrayOfValues = (*WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchVendorConnectionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnectionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchVendorConnectionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*vendor_connection.VendorConnectionChange, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnectionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchVendorConnectionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchVendorConnectionsRequest_FieldPathSelector
	Get(source *WatchVendorConnectionsRequest) []interface{}
	GetSingle(source *WatchVendorConnectionsRequest) (interface{}, bool)
	ClearValue(item *WatchVendorConnectionsRequest)

	// Those methods build corresponding WatchVendorConnectionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchVendorConnectionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchVendorConnectionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchVendorConnectionsRequest_FieldPathArrayItemValue
}

type WatchVendorConnectionsRequest_FieldPathSelector int32

const (
	WatchVendorConnectionsRequest_FieldPathSelectorType         WatchVendorConnectionsRequest_FieldPathSelector = 0
	WatchVendorConnectionsRequest_FieldPathSelectorParent       WatchVendorConnectionsRequest_FieldPathSelector = 1
	WatchVendorConnectionsRequest_FieldPathSelectorPageSize     WatchVendorConnectionsRequest_FieldPathSelector = 2
	WatchVendorConnectionsRequest_FieldPathSelectorPageToken    WatchVendorConnectionsRequest_FieldPathSelector = 3
	WatchVendorConnectionsRequest_FieldPathSelectorOrderBy      WatchVendorConnectionsRequest_FieldPathSelector = 4
	WatchVendorConnectionsRequest_FieldPathSelectorResumeToken  WatchVendorConnectionsRequest_FieldPathSelector = 5
	WatchVendorConnectionsRequest_FieldPathSelectorFilter       WatchVendorConnectionsRequest_FieldPathSelector = 6
	WatchVendorConnectionsRequest_FieldPathSelectorFieldMask    WatchVendorConnectionsRequest_FieldPathSelector = 7
	WatchVendorConnectionsRequest_FieldPathSelectorView         WatchVendorConnectionsRequest_FieldPathSelector = 8
	WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize WatchVendorConnectionsRequest_FieldPathSelector = 9
)

func (s WatchVendorConnectionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		return "type"
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		return "view"
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", s))
	}
}

func BuildWatchVendorConnectionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchVendorConnectionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchVendorConnectionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchVendorConnectionsRequest_FieldTerminalPath{selector: WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchVendorConnectionsRequest", fp)
}

func ParseWatchVendorConnectionsRequest_FieldPath(rawField string) (WatchVendorConnectionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchVendorConnectionsRequest_FieldPath(fp)
}

func MustParseWatchVendorConnectionsRequest_FieldPath(rawField string) WatchVendorConnectionsRequest_FieldPath {
	fp, err := ParseWatchVendorConnectionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchVendorConnectionsRequest_FieldTerminalPath struct {
	selector WatchVendorConnectionsRequest_FieldPathSelector
}

var _ WatchVendorConnectionsRequest_FieldPath = (*WatchVendorConnectionsRequest_FieldTerminalPath)(nil)

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) Selector() WatchVendorConnectionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchVendorConnectionsRequest
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) Get(source *WatchVendorConnectionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchVendorConnectionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchVendorConnectionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchVendorConnectionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchVendorConnectionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchVendorConnectionsRequest
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) GetSingle(source *WatchVendorConnectionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchVendorConnectionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		return (*vendor_connection.ParentReference)(nil)
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return (*vendor_connection.OrderBy)(nil)
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		return (*vendor_connection.Filter)(nil)
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) ClearValue(item *WatchVendorConnectionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchVendorConnectionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchVendorConnectionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchVendorConnectionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchVendorConnectionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorType ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorParent ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorView ||
		fp.selector == WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchVendorConnectionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.ParentReference)}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.OrderBy)}
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Filter)}
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchVendorConnectionsRequest_FieldTerminalPathValue{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.ParentReference)}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.OrderBy)}
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Filter)}
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues{WatchVendorConnectionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchVendorConnectionsRequest_FieldPathValue allows storing values for WatchVendorConnectionsRequest fields according to their type
type WatchVendorConnectionsRequest_FieldPathValue interface {
	WatchVendorConnectionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchVendorConnectionsRequest)
	CompareWith(*WatchVendorConnectionsRequest) (cmp int, comparable bool)
}

func ParseWatchVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) (WatchVendorConnectionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchVendorConnectionsRequest_FieldPathValue), nil
}

func MustParseWatchVendorConnectionsRequest_FieldPathValue(pathStr, valueStr string) WatchVendorConnectionsRequest_FieldPathValue {
	fpv, err := ParseWatchVendorConnectionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchVendorConnectionsRequest_FieldTerminalPathValue struct {
	WatchVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsRequest_FieldPathValue = (*WatchVendorConnectionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchVendorConnectionsRequest' as interface{}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsParentValue() (*vendor_connection.ParentReference, bool) {
	res, ok := fpv.value.(*vendor_connection.ParentReference)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsOrderByValue() (*vendor_connection.OrderBy, bool) {
	res, ok := fpv.value.(*vendor_connection.OrderBy)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsFilterValue() (*vendor_connection.Filter, bool) {
	res, ok := fpv.value.(*vendor_connection.Filter)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchVendorConnectionsRequest
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) SetTo(target **WatchVendorConnectionsRequest) {
	if *target == nil {
		*target = new(WatchVendorConnectionsRequest)
	}
	switch fpv.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*vendor_connection.ParentReference)
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*vendor_connection.PagerCursor)
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*vendor_connection.OrderBy)
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*vendor_connection.Filter)
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchVendorConnectionsRequest_FieldTerminalPathValue' with the value under path in 'WatchVendorConnectionsRequest'.
func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) CompareWith(source *WatchVendorConnectionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*vendor_connection.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchVendorConnectionsRequest))
}

// WatchVendorConnectionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchVendorConnectionsRequest according to their type
// Present only for array (repeated) types.
type WatchVendorConnectionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchVendorConnectionsRequest_FieldPath
	ContainsValue(*WatchVendorConnectionsRequest) bool
}

// ParseWatchVendorConnectionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchVendorConnectionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchVendorConnectionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchVendorConnectionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchVendorConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchVendorConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsRequest_FieldPathArrayItemValue = (*WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchVendorConnectionsRequest as interface{}
func (fpaiv *WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchVendorConnectionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchVendorConnectionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchVendorConnectionsRequest'
func (fpaiv *WatchVendorConnectionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchVendorConnectionsRequest) bool {
	slice := fpaiv.WatchVendorConnectionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchVendorConnectionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchVendorConnectionsRequest fields according to their type
type WatchVendorConnectionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchVendorConnectionsRequest_FieldPath
}

func ParseWatchVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchVendorConnectionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchVendorConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchVendorConnectionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchVendorConnectionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchVendorConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchVendorConnectionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchVendorConnectionsRequest_FieldPathArrayOfValues = (*WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchVendorConnectionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*vendor_connection.ParentReference) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*vendor_connection.OrderBy) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*vendor_connection.Filter) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchVendorConnectionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*vendor_connection.ParentReference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.ParentReference)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*vendor_connection.OrderBy, bool) {
	res, ok := fpaov.values.([]*vendor_connection.OrderBy)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*vendor_connection.Filter, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Filter)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchVendorConnectionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchVendorConnectionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchVendorConnectionsResponse_FieldPathSelector
	Get(source *WatchVendorConnectionsResponse) []interface{}
	GetSingle(source *WatchVendorConnectionsResponse) (interface{}, bool)
	ClearValue(item *WatchVendorConnectionsResponse)

	// Those methods build corresponding WatchVendorConnectionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchVendorConnectionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchVendorConnectionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchVendorConnectionsResponse_FieldPathArrayItemValue
}

type WatchVendorConnectionsResponse_FieldPathSelector int32

const (
	WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges WatchVendorConnectionsResponse_FieldPathSelector = 0
	WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent               WatchVendorConnectionsResponse_FieldPathSelector = 1
	WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange         WatchVendorConnectionsResponse_FieldPathSelector = 2
	WatchVendorConnectionsResponse_FieldPathSelectorResumeToken             WatchVendorConnectionsResponse_FieldPathSelector = 3
	WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize            WatchVendorConnectionsResponse_FieldPathSelector = 4
	WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset             WatchVendorConnectionsResponse_FieldPathSelector = 5
	WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset             WatchVendorConnectionsResponse_FieldPathSelector = 6
)

func (s WatchVendorConnectionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return "vendor_connection_changes"
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", s))
	}
}

func BuildWatchVendorConnectionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchVendorConnectionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchVendorConnectionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor_connection_changes", "vendorConnectionChanges", "vendor-connection-changes":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchVendorConnectionsResponse_FieldTerminalPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchVendorConnectionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchVendorConnectionsResponse_FieldSubPath{selector: WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchVendorConnectionsResponse", fp)
}

func ParseWatchVendorConnectionsResponse_FieldPath(rawField string) (WatchVendorConnectionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchVendorConnectionsResponse_FieldPath(fp)
}

func MustParseWatchVendorConnectionsResponse_FieldPath(rawField string) WatchVendorConnectionsResponse_FieldPath {
	fp, err := ParseWatchVendorConnectionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchVendorConnectionsResponse_FieldTerminalPath struct {
	selector WatchVendorConnectionsResponse_FieldPathSelector
}

var _ WatchVendorConnectionsResponse_FieldPath = (*WatchVendorConnectionsResponse_FieldTerminalPath)(nil)

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) Selector() WatchVendorConnectionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchVendorConnectionsResponse
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) Get(source *WatchVendorConnectionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
			for _, value := range source.GetVendorConnectionChanges() {
				values = append(values, value)
			}
		case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchVendorConnectionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchVendorConnectionsResponse
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) GetSingle(source *WatchVendorConnectionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		res := source.GetVendorConnectionChanges()
		return res, res != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return ([]*vendor_connection.VendorConnectionChange)(nil)
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchVendorConnectionsResponse_PageTokenChange)(nil)
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) ClearValue(item *WatchVendorConnectionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
			item.VendorConnectionChanges = nil
		case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges ||
		fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchVendorConnectionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.([]*vendor_connection.VendorConnectionChange)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*WatchVendorConnectionsResponse_PageTokenChange)}
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		return &WatchVendorConnectionsResponse_FieldTerminalPathValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([][]*vendor_connection.VendorConnectionChange)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchVendorConnectionsResponse_PageTokenChange)}
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return &WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue{WatchVendorConnectionsResponse_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnectionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchVendorConnectionsResponse_FieldSubPath struct {
	selector WatchVendorConnectionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchVendorConnectionsResponse_FieldPath = (*WatchVendorConnectionsResponse_FieldSubPath)(nil)

func (fps *WatchVendorConnectionsResponse_FieldSubPath) Selector() WatchVendorConnectionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchVendorConnectionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchVendorConnectionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchVendorConnectionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchVendorConnectionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchVendorConnectionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchVendorConnectionsResponse
func (fps *WatchVendorConnectionsResponse_FieldSubPath) Get(source *WatchVendorConnectionsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchVendorConnectionsResponse))
}

// GetSingle returns value of selected field from source WatchVendorConnectionsResponse
func (fps *WatchVendorConnectionsResponse_FieldSubPath) GetSingle(source *WatchVendorConnectionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fps.selector))
	}
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchVendorConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchVendorConnectionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) ClearValue(item *WatchVendorConnectionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchVendorConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchVendorConnectionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithIValue(value interface{}) WatchVendorConnectionsResponse_FieldPathValue {
	return &WatchVendorConnectionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionsResponse_FieldPathArrayOfValues {
	return &WatchVendorConnectionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionsResponse_FieldPathArrayItemValue {
	return &WatchVendorConnectionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchVendorConnectionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchVendorConnectionsResponse_FieldPathValue allows storing values for WatchVendorConnectionsResponse fields according to their type
type WatchVendorConnectionsResponse_FieldPathValue interface {
	WatchVendorConnectionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchVendorConnectionsResponse)
	CompareWith(*WatchVendorConnectionsResponse) (cmp int, comparable bool)
}

func ParseWatchVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) (WatchVendorConnectionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchVendorConnectionsResponse_FieldPathValue), nil
}

func MustParseWatchVendorConnectionsResponse_FieldPathValue(pathStr, valueStr string) WatchVendorConnectionsResponse_FieldPathValue {
	fpv, err := ParseWatchVendorConnectionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchVendorConnectionsResponse_FieldTerminalPathValue struct {
	WatchVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsResponse_FieldPathValue = (*WatchVendorConnectionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchVendorConnectionsResponse' as interface{}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsVendorConnectionChangesValue() ([]*vendor_connection.VendorConnectionChange, bool) {
	res, ok := fpv.value.([]*vendor_connection.VendorConnectionChange)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchVendorConnectionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchVendorConnectionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchVendorConnectionsResponse
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) SetTo(target **WatchVendorConnectionsResponse) {
	if *target == nil {
		*target = new(WatchVendorConnectionsResponse)
	}
	switch fpv.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		(*target).VendorConnectionChanges = fpv.value.([]*vendor_connection.VendorConnectionChange)
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchVendorConnectionsResponse_PageTokenChange)
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchVendorConnectionsResponse_FieldTerminalPathValue' with the value under path in 'WatchVendorConnectionsResponse'.
func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) CompareWith(source *WatchVendorConnectionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		return 0, false
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchVendorConnectionsResponse))
}

type WatchVendorConnectionsResponse_FieldSubPathValue struct {
	WatchVendorConnectionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchVendorConnectionsResponse_FieldPathValue = (*WatchVendorConnectionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchVendorConnectionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchVendorConnectionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) SetTo(target **WatchVendorConnectionsResponse) {
	if *target == nil {
		*target = new(WatchVendorConnectionsResponse)
	}
	switch fpvs.Selector() {
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchVendorConnectionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) CompareWith(source *WatchVendorConnectionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchVendorConnectionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchVendorConnectionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchVendorConnectionsResponse))
}

// WatchVendorConnectionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchVendorConnectionsResponse according to their type
// Present only for array (repeated) types.
type WatchVendorConnectionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchVendorConnectionsResponse_FieldPath
	ContainsValue(*WatchVendorConnectionsResponse) bool
}

// ParseWatchVendorConnectionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchVendorConnectionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchVendorConnectionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchVendorConnectionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchVendorConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchVendorConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsResponse_FieldPathArrayItemValue = (*WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchVendorConnectionsResponse as interface{}
func (fpaiv *WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue) AsVendorConnectionChangesItemValue() (*vendor_connection.VendorConnectionChange, bool) {
	res, ok := fpaiv.value.(*vendor_connection.VendorConnectionChange)
	return res, ok
}

func (fpaiv *WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchVendorConnectionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchVendorConnectionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchVendorConnectionsResponse'
func (fpaiv *WatchVendorConnectionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchVendorConnectionsResponse) bool {
	slice := fpaiv.WatchVendorConnectionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchVendorConnectionsResponse_FieldSubPathArrayItemValue struct {
	WatchVendorConnectionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchVendorConnectionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchVendorConnectionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchVendorConnectionsResponse'
func (fpaivs *WatchVendorConnectionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchVendorConnectionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchVendorConnectionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchVendorConnectionsResponse fields according to their type
type WatchVendorConnectionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchVendorConnectionsResponse_FieldPath
}

func ParseWatchVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchVendorConnectionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchVendorConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchVendorConnectionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchVendorConnectionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchVendorConnectionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchVendorConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchVendorConnectionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchVendorConnectionsResponse_FieldPathArrayOfValues = (*WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchVendorConnectionsResponse_FieldPathSelectorVendorConnectionChanges:
		for _, v := range fpaov.values.([][]*vendor_connection.VendorConnectionChange) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchVendorConnectionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsVendorConnectionChangesArrayOfValues() ([][]*vendor_connection.VendorConnectionChange, bool) {
	res, ok := fpaov.values.([][]*vendor_connection.VendorConnectionChange)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchVendorConnectionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchVendorConnectionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchVendorConnectionsResponse_FieldSubPathArrayOfValues struct {
	WatchVendorConnectionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchVendorConnectionsResponse_FieldPathArrayOfValues = (*WatchVendorConnectionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchVendorConnectionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchVendorConnectionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchVendorConnectionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchVendorConnectionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchVendorConnectionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchVendorConnectionsResponse_PageTokenChange)

	// Those methods build corresponding WatchVendorConnectionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector = 0
	WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchVendorConnectionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchVendorConnectionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchVendorConnectionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath{selector: WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchVendorConnectionsResponse_PageTokenChange", fp)
}

func ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(rawField string) (WatchVendorConnectionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchVendorConnectionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(rawField string) WatchVendorConnectionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchVendorConnectionsResponsePageTokenChange_FieldPath = (*WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchVendorConnectionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchVendorConnectionsResponse_PageTokenChange
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchVendorConnectionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchVendorConnectionsResponse_PageTokenChange
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchVendorConnectionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*vendor_connection.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchVendorConnectionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchVendorConnectionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue{WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue{WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*vendor_connection.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*vendor_connection.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchVendorConnectionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchVendorConnectionsResponsePageTokenChange_FieldPathValue interface {
	WatchVendorConnectionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchVendorConnectionsResponse_PageTokenChange)
	CompareWith(*WatchVendorConnectionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchVendorConnectionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchVendorConnectionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchVendorConnectionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchVendorConnectionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsResponsePageTokenChange_FieldPathValue = (*WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}
func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*vendor_connection.PagerCursor, bool) {
	res, ok := fpv.value.(*vendor_connection.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchVendorConnectionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchVendorConnectionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*vendor_connection.PagerCursor)
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*vendor_connection.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchVendorConnectionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchVendorConnectionsResponse_PageTokenChange'.
func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchVendorConnectionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchVendorConnectionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

// WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchVendorConnectionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchVendorConnectionsResponse_PageTokenChange) bool
}

// ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchVendorConnectionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchVendorConnectionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchVendorConnectionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchVendorConnectionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchVendorConnectionsResponsePageTokenChange_FieldPath
}

func ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchVendorConnectionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	case WatchVendorConnectionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*vendor_connection.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}
func (fpaov *WatchVendorConnectionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*vendor_connection.PagerCursor, bool) {
	res, ok := fpaov.values.([]*vendor_connection.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateVendorConnectionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateVendorConnectionRequest_FieldPathSelector
	Get(source *CreateVendorConnectionRequest) []interface{}
	GetSingle(source *CreateVendorConnectionRequest) (interface{}, bool)
	ClearValue(item *CreateVendorConnectionRequest)

	// Those methods build corresponding CreateVendorConnectionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateVendorConnectionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateVendorConnectionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateVendorConnectionRequest_FieldPathArrayItemValue
}

type CreateVendorConnectionRequest_FieldPathSelector int32

const (
	CreateVendorConnectionRequest_FieldPathSelectorParent           CreateVendorConnectionRequest_FieldPathSelector = 0
	CreateVendorConnectionRequest_FieldPathSelectorVendorConnection CreateVendorConnectionRequest_FieldPathSelector = 1
)

func (s CreateVendorConnectionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		return "parent"
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return "vendor_connection"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", s))
	}
}

func BuildCreateVendorConnectionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateVendorConnectionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateVendorConnectionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorParent}, nil
		case "vendor_connection", "vendorConnection", "vendor-connection":
			return &CreateVendorConnectionRequest_FieldTerminalPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection}, nil
		}
	} else {
		switch fp[0] {
		case "vendor_connection", "vendorConnection", "vendor-connection":
			if subpath, err := vendor_connection.BuildVendorConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateVendorConnectionRequest_FieldSubPath{selector: CreateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateVendorConnectionRequest", fp)
}

func ParseCreateVendorConnectionRequest_FieldPath(rawField string) (CreateVendorConnectionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateVendorConnectionRequest_FieldPath(fp)
}

func MustParseCreateVendorConnectionRequest_FieldPath(rawField string) CreateVendorConnectionRequest_FieldPath {
	fp, err := ParseCreateVendorConnectionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateVendorConnectionRequest_FieldTerminalPath struct {
	selector CreateVendorConnectionRequest_FieldPathSelector
}

var _ CreateVendorConnectionRequest_FieldPath = (*CreateVendorConnectionRequest_FieldTerminalPath)(nil)

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) Selector() CreateVendorConnectionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateVendorConnectionRequest
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) Get(source *CreateVendorConnectionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateVendorConnectionRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			if source.VendorConnection != nil {
				values = append(values, source.VendorConnection)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateVendorConnectionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateVendorConnectionRequest
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) GetSingle(source *CreateVendorConnectionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		res := source.GetVendorConnection()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		return (*vendor_connection.ParentReference)(nil)
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return (*vendor_connection.VendorConnection)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) ClearValue(item *CreateVendorConnectionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateVendorConnectionRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			item.VendorConnection = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateVendorConnectionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateVendorConnectionRequest_FieldPathSelectorParent
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateVendorConnectionRequest_FieldPathValue {
	switch fp.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		return &CreateVendorConnectionRequest_FieldTerminalPathValue{CreateVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.ParentReference)}
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return &CreateVendorConnectionRequest_FieldTerminalPathValue{CreateVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov := &CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues{CreateVendorConnectionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		return &CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues{CreateVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.ParentReference)}
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return &CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues{CreateVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateVendorConnectionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *CreateVendorConnectionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateVendorConnectionRequest_FieldSubPath struct {
	selector CreateVendorConnectionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateVendorConnectionRequest_FieldPath = (*CreateVendorConnectionRequest_FieldSubPath)(nil)

func (fps *CreateVendorConnectionRequest_FieldSubPath) Selector() CreateVendorConnectionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateVendorConnectionRequest_FieldSubPath) AsVendorConnectionSubPath() (vendor_connection.VendorConnection_FieldPath, bool) {
	res, ok := fps.subPath.(vendor_connection.VendorConnection_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateVendorConnectionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateVendorConnectionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateVendorConnectionRequest
func (fps *CreateVendorConnectionRequest_FieldSubPath) Get(source *CreateVendorConnectionRequest) (values []interface{}) {
	if asVendorConnectionFieldPath, ok := fps.AsVendorConnectionSubPath(); ok {
		values = append(values, asVendorConnectionFieldPath.Get(source.GetVendorConnection())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateVendorConnectionRequest))
}

// GetSingle returns value of selected field from source CreateVendorConnectionRequest
func (fps *CreateVendorConnectionRequest_FieldSubPath) GetSingle(source *CreateVendorConnectionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		if source.GetVendorConnection() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fps.selector))
	}
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateVendorConnectionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) ClearValue(item *CreateVendorConnectionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			fps.subPath.ClearValueRaw(item.VendorConnection)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateVendorConnectionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithIValue(value interface{}) CreateVendorConnectionRequest_FieldPathValue {
	return &CreateVendorConnectionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateVendorConnectionRequest_FieldPathArrayOfValues {
	return &CreateVendorConnectionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateVendorConnectionRequest_FieldPathArrayItemValue {
	return &CreateVendorConnectionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateVendorConnectionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateVendorConnectionRequest_FieldPathValue allows storing values for CreateVendorConnectionRequest fields according to their type
type CreateVendorConnectionRequest_FieldPathValue interface {
	CreateVendorConnectionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateVendorConnectionRequest)
	CompareWith(*CreateVendorConnectionRequest) (cmp int, comparable bool)
}

func ParseCreateVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) (CreateVendorConnectionRequest_FieldPathValue, error) {
	fp, err := ParseCreateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateVendorConnectionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateVendorConnectionRequest_FieldPathValue), nil
}

func MustParseCreateVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) CreateVendorConnectionRequest_FieldPathValue {
	fpv, err := ParseCreateVendorConnectionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateVendorConnectionRequest_FieldTerminalPathValue struct {
	CreateVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateVendorConnectionRequest_FieldPathValue = (*CreateVendorConnectionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateVendorConnectionRequest' as interface{}
func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) AsParentValue() (*vendor_connection.ParentReference, bool) {
	res, ok := fpv.value.(*vendor_connection.ParentReference)
	return res, ok
}
func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) AsVendorConnectionValue() (*vendor_connection.VendorConnection, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection)
	return res, ok
}

// SetTo stores value for selected field for object CreateVendorConnectionRequest
func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) SetTo(target **CreateVendorConnectionRequest) {
	if *target == nil {
		*target = new(CreateVendorConnectionRequest)
	}
	switch fpv.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*vendor_connection.ParentReference)
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		(*target).VendorConnection = fpv.value.(*vendor_connection.VendorConnection)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateVendorConnectionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateVendorConnectionRequest_FieldTerminalPathValue' with the value under path in 'CreateVendorConnectionRequest'.
func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) CompareWith(source *CreateVendorConnectionRequest) (int, bool) {
	switch fpv.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*vendor_connection.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateVendorConnectionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateVendorConnectionRequest))
}

type CreateVendorConnectionRequest_FieldSubPathValue struct {
	CreateVendorConnectionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateVendorConnectionRequest_FieldPathValue = (*CreateVendorConnectionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) AsVendorConnectionPathValue() (vendor_connection.VendorConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue)
	return res, ok
}

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) SetTo(target **CreateVendorConnectionRequest) {
	if *target == nil {
		*target = new(CreateVendorConnectionRequest)
	}
	switch fpvs.Selector() {
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).SetTo(&(*target).VendorConnection)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateVendorConnectionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) CompareWith(source *CreateVendorConnectionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).CompareWith(source.GetVendorConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateVendorConnectionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateVendorConnectionRequest))
}

// CreateVendorConnectionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateVendorConnectionRequest according to their type
// Present only for array (repeated) types.
type CreateVendorConnectionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateVendorConnectionRequest_FieldPath
	ContainsValue(*CreateVendorConnectionRequest) bool
}

// ParseCreateVendorConnectionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateVendorConnectionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateVendorConnectionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateVendorConnectionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateVendorConnectionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue struct {
	CreateVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateVendorConnectionRequest_FieldPathArrayItemValue = (*CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateVendorConnectionRequest as interface{}
func (fpaiv *CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateVendorConnectionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateVendorConnectionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateVendorConnectionRequest'
func (fpaiv *CreateVendorConnectionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateVendorConnectionRequest) bool {
	slice := fpaiv.CreateVendorConnectionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateVendorConnectionRequest_FieldSubPathArrayItemValue struct {
	CreateVendorConnectionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateVendorConnectionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateVendorConnectionRequest_FieldSubPathArrayItemValue) AsVendorConnectionPathItemValue() (vendor_connection.VendorConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateVendorConnectionRequest'
func (fpaivs *CreateVendorConnectionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateVendorConnectionRequest) bool {
	switch fpaivs.Selector() {
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue).ContainsValue(source.GetVendorConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateVendorConnectionRequest: %d", fpaivs.Selector()))
	}
}

// CreateVendorConnectionRequest_FieldPathArrayOfValues allows storing slice of values for CreateVendorConnectionRequest fields according to their type
type CreateVendorConnectionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateVendorConnectionRequest_FieldPath
}

func ParseCreateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateVendorConnectionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateVendorConnectionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateVendorConnectionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues struct {
	CreateVendorConnectionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateVendorConnectionRequest_FieldPathArrayOfValues = (*CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateVendorConnectionRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*vendor_connection.ParentReference) {
			values = append(values, v)
		}
	case CreateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*vendor_connection.ParentReference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.ParentReference)
	return res, ok
}
func (fpaov *CreateVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsVendorConnectionArrayOfValues() ([]*vendor_connection.VendorConnection, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection)
	return res, ok
}

type CreateVendorConnectionRequest_FieldSubPathArrayOfValues struct {
	CreateVendorConnectionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateVendorConnectionRequest_FieldPathArrayOfValues = (*CreateVendorConnectionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateVendorConnectionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateVendorConnectionRequest_FieldSubPathArrayOfValues) AsVendorConnectionPathArrayOfValues() (vendor_connection.VendorConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(vendor_connection.VendorConnection_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateVendorConnectionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateVendorConnectionRequest_FieldPathSelector
	Get(source *UpdateVendorConnectionRequest) []interface{}
	GetSingle(source *UpdateVendorConnectionRequest) (interface{}, bool)
	ClearValue(item *UpdateVendorConnectionRequest)

	// Those methods build corresponding UpdateVendorConnectionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateVendorConnectionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequest_FieldPathArrayItemValue
}

type UpdateVendorConnectionRequest_FieldPathSelector int32

const (
	UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection UpdateVendorConnectionRequest_FieldPathSelector = 0
	UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask       UpdateVendorConnectionRequest_FieldPathSelector = 1
	UpdateVendorConnectionRequest_FieldPathSelectorCas              UpdateVendorConnectionRequest_FieldPathSelector = 2
)

func (s UpdateVendorConnectionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return "vendor_connection"
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", s))
	}
}

func BuildUpdateVendorConnectionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateVendorConnectionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateVendorConnectionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor_connection", "vendorConnection", "vendor-connection":
			return &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateVendorConnectionRequest_FieldTerminalPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "vendor_connection", "vendorConnection", "vendor-connection":
			if subpath, err := vendor_connection.BuildVendorConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateVendorConnectionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateVendorConnectionRequest_FieldSubPath{selector: UpdateVendorConnectionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateVendorConnectionRequest", fp)
}

func ParseUpdateVendorConnectionRequest_FieldPath(rawField string) (UpdateVendorConnectionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateVendorConnectionRequest_FieldPath(fp)
}

func MustParseUpdateVendorConnectionRequest_FieldPath(rawField string) UpdateVendorConnectionRequest_FieldPath {
	fp, err := ParseUpdateVendorConnectionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateVendorConnectionRequest_FieldTerminalPath struct {
	selector UpdateVendorConnectionRequest_FieldPathSelector
}

var _ UpdateVendorConnectionRequest_FieldPath = (*UpdateVendorConnectionRequest_FieldTerminalPath)(nil)

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) Selector() UpdateVendorConnectionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateVendorConnectionRequest
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) Get(source *UpdateVendorConnectionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			if source.VendorConnection != nil {
				values = append(values, source.VendorConnection)
			}
		case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateVendorConnectionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateVendorConnectionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateVendorConnectionRequest
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) GetSingle(source *UpdateVendorConnectionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		res := source.GetVendorConnection()
		return res, res != nil
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return (*vendor_connection.VendorConnection)(nil)
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return (*UpdateVendorConnectionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) ClearValue(item *UpdateVendorConnectionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			item.VendorConnection = nil
		case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateVendorConnectionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateVendorConnectionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return &UpdateVendorConnectionRequest_FieldTerminalPathValue{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection)}
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		return &UpdateVendorConnectionRequest_FieldTerminalPathValue{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return &UpdateVendorConnectionRequest_FieldTerminalPathValue{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*UpdateVendorConnectionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return &UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection)}
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		return &UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return &UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateVendorConnectionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateVendorConnectionRequest_FieldSubPath struct {
	selector UpdateVendorConnectionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateVendorConnectionRequest_FieldPath = (*UpdateVendorConnectionRequest_FieldSubPath)(nil)

func (fps *UpdateVendorConnectionRequest_FieldSubPath) Selector() UpdateVendorConnectionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateVendorConnectionRequest_FieldSubPath) AsVendorConnectionSubPath() (vendor_connection.VendorConnection_FieldPath, bool) {
	res, ok := fps.subPath.(vendor_connection.VendorConnection_FieldPath)
	return res, ok
}
func (fps *UpdateVendorConnectionRequest_FieldSubPath) AsCasSubPath() (UpdateVendorConnectionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateVendorConnectionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateVendorConnectionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateVendorConnectionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateVendorConnectionRequest
func (fps *UpdateVendorConnectionRequest_FieldSubPath) Get(source *UpdateVendorConnectionRequest) (values []interface{}) {
	if asVendorConnectionFieldPath, ok := fps.AsVendorConnectionSubPath(); ok {
		values = append(values, asVendorConnectionFieldPath.Get(source.GetVendorConnection())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateVendorConnectionRequest))
}

// GetSingle returns value of selected field from source UpdateVendorConnectionRequest
func (fps *UpdateVendorConnectionRequest_FieldSubPath) GetSingle(source *UpdateVendorConnectionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		if source.GetVendorConnection() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorConnection())
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fps.selector))
	}
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateVendorConnectionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) ClearValue(item *UpdateVendorConnectionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
			fps.subPath.ClearValueRaw(item.VendorConnection)
		case UpdateVendorConnectionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateVendorConnectionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithIValue(value interface{}) UpdateVendorConnectionRequest_FieldPathValue {
	return &UpdateVendorConnectionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequest_FieldPathArrayOfValues {
	return &UpdateVendorConnectionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequest_FieldPathArrayItemValue {
	return &UpdateVendorConnectionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateVendorConnectionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateVendorConnectionRequest_FieldPathValue allows storing values for UpdateVendorConnectionRequest fields according to their type
type UpdateVendorConnectionRequest_FieldPathValue interface {
	UpdateVendorConnectionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateVendorConnectionRequest)
	CompareWith(*UpdateVendorConnectionRequest) (cmp int, comparable bool)
}

func ParseUpdateVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) (UpdateVendorConnectionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateVendorConnectionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateVendorConnectionRequest_FieldPathValue), nil
}

func MustParseUpdateVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) UpdateVendorConnectionRequest_FieldPathValue {
	fpv, err := ParseUpdateVendorConnectionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateVendorConnectionRequest_FieldTerminalPathValue struct {
	UpdateVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateVendorConnectionRequest_FieldPathValue = (*UpdateVendorConnectionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateVendorConnectionRequest' as interface{}
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) AsVendorConnectionValue() (*vendor_connection.VendorConnection, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection)
	return res, ok
}
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateVendorConnectionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateVendorConnectionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateVendorConnectionRequest
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) SetTo(target **UpdateVendorConnectionRequest) {
	if *target == nil {
		*target = new(UpdateVendorConnectionRequest)
	}
	switch fpv.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		(*target).VendorConnection = fpv.value.(*vendor_connection.VendorConnection)
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateVendorConnectionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateVendorConnectionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateVendorConnectionRequest_FieldTerminalPathValue' with the value under path in 'UpdateVendorConnectionRequest'.
func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) CompareWith(source *UpdateVendorConnectionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return 0, false
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateVendorConnectionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateVendorConnectionRequest))
}

type UpdateVendorConnectionRequest_FieldSubPathValue struct {
	UpdateVendorConnectionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateVendorConnectionRequest_FieldPathValue = (*UpdateVendorConnectionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) AsVendorConnectionPathValue() (vendor_connection.VendorConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) AsCasPathValue() (UpdateVendorConnectionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateVendorConnectionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) SetTo(target **UpdateVendorConnectionRequest) {
	if *target == nil {
		*target = new(UpdateVendorConnectionRequest)
	}
	switch fpvs.Selector() {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).SetTo(&(*target).VendorConnection)
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateVendorConnectionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateVendorConnectionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) CompareWith(source *UpdateVendorConnectionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).CompareWith(source.GetVendorConnection())
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateVendorConnectionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateVendorConnectionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateVendorConnectionRequest))
}

// UpdateVendorConnectionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateVendorConnectionRequest according to their type
// Present only for array (repeated) types.
type UpdateVendorConnectionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateVendorConnectionRequest_FieldPath
	ContainsValue(*UpdateVendorConnectionRequest) bool
}

// ParseUpdateVendorConnectionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateVendorConnectionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateVendorConnectionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateVendorConnectionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateVendorConnectionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateVendorConnectionRequest_FieldPathArrayItemValue = (*UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateVendorConnectionRequest as interface{}
func (fpaiv *UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateVendorConnectionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateVendorConnectionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateVendorConnectionRequest'
func (fpaiv *UpdateVendorConnectionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateVendorConnectionRequest) bool {
	slice := fpaiv.UpdateVendorConnectionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateVendorConnectionRequest_FieldSubPathArrayItemValue struct {
	UpdateVendorConnectionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateVendorConnectionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateVendorConnectionRequest_FieldSubPathArrayItemValue) AsVendorConnectionPathItemValue() (vendor_connection.VendorConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateVendorConnectionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateVendorConnectionRequest'
func (fpaivs *UpdateVendorConnectionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateVendorConnectionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		return fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue).ContainsValue(source.GetVendorConnection())
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateVendorConnectionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateVendorConnectionRequest fields according to their type
type UpdateVendorConnectionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateVendorConnectionRequest_FieldPath
}

func ParseUpdateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateVendorConnectionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateVendorConnectionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateVendorConnectionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateVendorConnectionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateVendorConnectionRequest_FieldPathArrayOfValues = (*UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateVendorConnectionRequest_FieldPathSelectorVendorConnection:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection) {
			values = append(values, v)
		}
	case UpdateVendorConnectionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	case UpdateVendorConnectionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateVendorConnectionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsVendorConnectionArrayOfValues() ([]*vendor_connection.VendorConnection, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpaov *UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}
func (fpaov *UpdateVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateVendorConnectionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateVendorConnectionRequest_CAS)
	return res, ok
}

type UpdateVendorConnectionRequest_FieldSubPathArrayOfValues struct {
	UpdateVendorConnectionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateVendorConnectionRequest_FieldPathArrayOfValues = (*UpdateVendorConnectionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateVendorConnectionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateVendorConnectionRequest_FieldSubPathArrayOfValues) AsVendorConnectionPathArrayOfValues() (vendor_connection.VendorConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(vendor_connection.VendorConnection_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateVendorConnectionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateVendorConnectionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateVendorConnectionRequestCAS_FieldPathSelector
	Get(source *UpdateVendorConnectionRequest_CAS) []interface{}
	GetSingle(source *UpdateVendorConnectionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateVendorConnectionRequest_CAS)

	// Those methods build corresponding UpdateVendorConnectionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue
}

type UpdateVendorConnectionRequestCAS_FieldPathSelector int32

const (
	UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState UpdateVendorConnectionRequestCAS_FieldPathSelector = 0
	UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask        UpdateVendorConnectionRequestCAS_FieldPathSelector = 1
)

func (s UpdateVendorConnectionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", s))
	}
}

func BuildUpdateVendorConnectionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateVendorConnectionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateVendorConnectionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateVendorConnectionRequestCAS_FieldTerminalPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := vendor_connection.BuildVendorConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateVendorConnectionRequestCAS_FieldSubPath{selector: UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateVendorConnectionRequest_CAS", fp)
}

func ParseUpdateVendorConnectionRequestCAS_FieldPath(rawField string) (UpdateVendorConnectionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateVendorConnectionRequestCAS_FieldPath(fp)
}

func MustParseUpdateVendorConnectionRequestCAS_FieldPath(rawField string) UpdateVendorConnectionRequestCAS_FieldPath {
	fp, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateVendorConnectionRequestCAS_FieldTerminalPath struct {
	selector UpdateVendorConnectionRequestCAS_FieldPathSelector
}

var _ UpdateVendorConnectionRequestCAS_FieldPath = (*UpdateVendorConnectionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) Selector() UpdateVendorConnectionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateVendorConnectionRequest_CAS
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) Get(source *UpdateVendorConnectionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateVendorConnectionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateVendorConnectionRequest_CAS
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateVendorConnectionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateVendorConnectionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return (*vendor_connection.VendorConnection)(nil)
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		return (*vendor_connection.VendorConnection_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateVendorConnectionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateVendorConnectionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateVendorConnectionRequestCAS_FieldTerminalPathValue{UpdateVendorConnectionRequestCAS_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection)}
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateVendorConnectionRequestCAS_FieldTerminalPathValue{UpdateVendorConnectionRequestCAS_FieldTerminalPath: *fp, value: value.(*vendor_connection.VendorConnection_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequestCAS_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection)}
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues{UpdateVendorConnectionRequestCAS_FieldTerminalPath: *fp, values: values.([]*vendor_connection.VendorConnection_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateVendorConnectionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateVendorConnectionRequestCAS_FieldSubPath struct {
	selector UpdateVendorConnectionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateVendorConnectionRequestCAS_FieldPath = (*UpdateVendorConnectionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) Selector() UpdateVendorConnectionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (vendor_connection.VendorConnection_FieldPath, bool) {
	res, ok := fps.subPath.(vendor_connection.VendorConnection_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateVendorConnectionRequest_CAS
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) Get(source *UpdateVendorConnectionRequest_CAS) (values []interface{}) {
	if asVendorConnectionFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asVendorConnectionFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateVendorConnectionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateVendorConnectionRequest_CAS
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) GetSingle(source *UpdateVendorConnectionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateVendorConnectionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) ClearValue(item *UpdateVendorConnectionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateVendorConnectionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathValue {
	return &UpdateVendorConnectionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues {
	return &UpdateVendorConnectionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue {
	return &UpdateVendorConnectionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateVendorConnectionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateVendorConnectionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateVendorConnectionRequestCAS_FieldPathValue interface {
	UpdateVendorConnectionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateVendorConnectionRequest_CAS)
	CompareWith(*UpdateVendorConnectionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateVendorConnectionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateVendorConnectionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateVendorConnectionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateVendorConnectionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateVendorConnectionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateVendorConnectionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateVendorConnectionRequestCAS_FieldTerminalPathValue struct {
	UpdateVendorConnectionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateVendorConnectionRequestCAS_FieldPathValue = (*UpdateVendorConnectionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*vendor_connection.VendorConnection, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection)
	return res, ok
}
func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateVendorConnectionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateVendorConnectionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*vendor_connection.VendorConnection)
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*vendor_connection.VendorConnection_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateVendorConnectionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateVendorConnectionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateVendorConnectionRequest_CAS'.
func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateVendorConnectionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateVendorConnectionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateVendorConnectionRequest_CAS))
}

type UpdateVendorConnectionRequestCAS_FieldSubPathValue struct {
	UpdateVendorConnectionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateVendorConnectionRequestCAS_FieldPathValue = (*UpdateVendorConnectionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (vendor_connection.VendorConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) SetTo(target **UpdateVendorConnectionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateVendorConnectionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateVendorConnectionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateVendorConnectionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(vendor_connection.VendorConnection_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateVendorConnectionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateVendorConnectionRequest_CAS))
}

// UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateVendorConnectionRequestCAS_FieldPath
	ContainsValue(*UpdateVendorConnectionRequest_CAS) bool
}

// ParseUpdateVendorConnectionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateVendorConnectionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateVendorConnectionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateVendorConnectionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateVendorConnectionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateVendorConnectionRequestCAS_FieldPathArrayItemValue = (*UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateVendorConnectionRequest_CAS as interface{}
func (fpaiv *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateVendorConnectionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateVendorConnectionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateVendorConnectionRequest_CAS) bool {
	slice := fpaiv.UpdateVendorConnectionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateVendorConnectionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateVendorConnectionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateVendorConnectionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateVendorConnectionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (vendor_connection.VendorConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateVendorConnectionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateVendorConnectionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(vendor_connection.VendorConnection_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateVendorConnectionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateVendorConnectionRequestCAS_FieldPath
}

func ParseUpdateVendorConnectionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateVendorConnectionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateVendorConnectionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateVendorConnectionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateVendorConnectionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues = (*UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection) {
			values = append(values, v)
		}
	case UpdateVendorConnectionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*vendor_connection.VendorConnection_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*vendor_connection.VendorConnection, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection)
	return res, ok
}
func (fpaov *UpdateVendorConnectionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*vendor_connection.VendorConnection_FieldMask, bool) {
	res, ok := fpaov.values.([]*vendor_connection.VendorConnection_FieldMask)
	return res, ok
}

type UpdateVendorConnectionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateVendorConnectionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateVendorConnectionRequestCAS_FieldPathArrayOfValues = (*UpdateVendorConnectionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateVendorConnectionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateVendorConnectionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (vendor_connection.VendorConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(vendor_connection.VendorConnection_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteVendorConnectionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteVendorConnectionRequest_FieldPathSelector
	Get(source *DeleteVendorConnectionRequest) []interface{}
	GetSingle(source *DeleteVendorConnectionRequest) (interface{}, bool)
	ClearValue(item *DeleteVendorConnectionRequest)

	// Those methods build corresponding DeleteVendorConnectionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteVendorConnectionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteVendorConnectionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteVendorConnectionRequest_FieldPathArrayItemValue
}

type DeleteVendorConnectionRequest_FieldPathSelector int32

const (
	DeleteVendorConnectionRequest_FieldPathSelectorName DeleteVendorConnectionRequest_FieldPathSelector = 0
)

func (s DeleteVendorConnectionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", s))
	}
}

func BuildDeleteVendorConnectionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteVendorConnectionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteVendorConnectionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteVendorConnectionRequest_FieldTerminalPath{selector: DeleteVendorConnectionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteVendorConnectionRequest", fp)
}

func ParseDeleteVendorConnectionRequest_FieldPath(rawField string) (DeleteVendorConnectionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteVendorConnectionRequest_FieldPath(fp)
}

func MustParseDeleteVendorConnectionRequest_FieldPath(rawField string) DeleteVendorConnectionRequest_FieldPath {
	fp, err := ParseDeleteVendorConnectionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteVendorConnectionRequest_FieldTerminalPath struct {
	selector DeleteVendorConnectionRequest_FieldPathSelector
}

var _ DeleteVendorConnectionRequest_FieldPath = (*DeleteVendorConnectionRequest_FieldTerminalPath)(nil)

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) Selector() DeleteVendorConnectionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteVendorConnectionRequest
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) Get(source *DeleteVendorConnectionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteVendorConnectionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteVendorConnectionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteVendorConnectionRequest
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) GetSingle(source *DeleteVendorConnectionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteVendorConnectionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		return (*vendor_connection.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) ClearValue(item *DeleteVendorConnectionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteVendorConnectionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteVendorConnectionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteVendorConnectionRequest_FieldPathSelectorName
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteVendorConnectionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		return &DeleteVendorConnectionRequest_FieldTerminalPathValue{DeleteVendorConnectionRequest_FieldTerminalPath: *fp, value: value.(*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues{DeleteVendorConnectionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		return &DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues{DeleteVendorConnectionRequest_FieldTerminalPath: *fp, values: values.([]*vendor_connection.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteVendorConnectionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fp.selector))
	}
}

func (fp *DeleteVendorConnectionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteVendorConnectionRequest_FieldPathValue allows storing values for DeleteVendorConnectionRequest fields according to their type
type DeleteVendorConnectionRequest_FieldPathValue interface {
	DeleteVendorConnectionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteVendorConnectionRequest)
	CompareWith(*DeleteVendorConnectionRequest) (cmp int, comparable bool)
}

func ParseDeleteVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) (DeleteVendorConnectionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteVendorConnectionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteVendorConnectionRequest_FieldPathValue), nil
}

func MustParseDeleteVendorConnectionRequest_FieldPathValue(pathStr, valueStr string) DeleteVendorConnectionRequest_FieldPathValue {
	fpv, err := ParseDeleteVendorConnectionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteVendorConnectionRequest_FieldTerminalPathValue struct {
	DeleteVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteVendorConnectionRequest_FieldPathValue = (*DeleteVendorConnectionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteVendorConnectionRequest' as interface{}
func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) AsNameValue() (*vendor_connection.Reference, bool) {
	res, ok := fpv.value.(*vendor_connection.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteVendorConnectionRequest
func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) SetTo(target **DeleteVendorConnectionRequest) {
	if *target == nil {
		*target = new(DeleteVendorConnectionRequest)
	}
	switch fpv.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*vendor_connection.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteVendorConnectionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteVendorConnectionRequest_FieldTerminalPathValue' with the value under path in 'DeleteVendorConnectionRequest'.
func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) CompareWith(source *DeleteVendorConnectionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*vendor_connection.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteVendorConnectionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteVendorConnectionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteVendorConnectionRequest))
}

// DeleteVendorConnectionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteVendorConnectionRequest according to their type
// Present only for array (repeated) types.
type DeleteVendorConnectionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteVendorConnectionRequest_FieldPath
	ContainsValue(*DeleteVendorConnectionRequest) bool
}

// ParseDeleteVendorConnectionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteVendorConnectionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteVendorConnectionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteVendorConnectionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteVendorConnectionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteVendorConnectionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteVendorConnectionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteVendorConnectionRequest_FieldPathArrayItemValue = (*DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteVendorConnectionRequest as interface{}
func (fpaiv *DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteVendorConnectionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteVendorConnectionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteVendorConnectionRequest'
func (fpaiv *DeleteVendorConnectionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteVendorConnectionRequest) bool {
	slice := fpaiv.DeleteVendorConnectionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteVendorConnectionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteVendorConnectionRequest fields according to their type
type DeleteVendorConnectionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteVendorConnectionRequest_FieldPath
}

func ParseDeleteVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteVendorConnectionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteVendorConnectionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteVendorConnectionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteVendorConnectionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteVendorConnectionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteVendorConnectionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteVendorConnectionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteVendorConnectionRequest_FieldPathArrayOfValues = (*DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteVendorConnectionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*vendor_connection.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteVendorConnectionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*vendor_connection.Reference, bool) {
	res, ok := fpaov.values.([]*vendor_connection.Reference)
	return res, ok
}
