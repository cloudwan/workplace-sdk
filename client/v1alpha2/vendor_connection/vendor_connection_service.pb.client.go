// Code generated by protoc-gen-goten-client
// API: VendorConnectionService
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha2/vendor_connection"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &vendor_connection.PointGrab{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VendorConnectionServiceClient is the client API for VendorConnectionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VendorConnectionServiceClient interface {
	GetVendorConnection(ctx context.Context, in *GetVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error)
	BatchGetVendorConnections(ctx context.Context, in *BatchGetVendorConnectionsRequest, opts ...grpc.CallOption) (*BatchGetVendorConnectionsResponse, error)
	ListVendorConnections(ctx context.Context, in *ListVendorConnectionsRequest, opts ...grpc.CallOption) (*ListVendorConnectionsResponse, error)
	WatchVendorConnection(ctx context.Context, in *WatchVendorConnectionRequest, opts ...grpc.CallOption) (WatchVendorConnectionClientStream, error)
	WatchVendorConnections(ctx context.Context, in *WatchVendorConnectionsRequest, opts ...grpc.CallOption) (WatchVendorConnectionsClientStream, error)
	CreateVendorConnection(ctx context.Context, in *CreateVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error)
	UpdateVendorConnection(ctx context.Context, in *UpdateVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error)
	DeleteVendorConnection(ctx context.Context, in *DeleteVendorConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PointGrabTelemetryNotify(ctx context.Context, in *PointGrabTelemetryNotifyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewVendorConnectionServiceClient(cc grpc.ClientConnInterface) VendorConnectionServiceClient {
	return &client{cc}
}

func (c *client) GetVendorConnection(ctx context.Context, in *GetVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error) {
	out := new(vendor_connection.VendorConnection)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/GetVendorConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetVendorConnections(ctx context.Context, in *BatchGetVendorConnectionsRequest, opts ...grpc.CallOption) (*BatchGetVendorConnectionsResponse, error) {
	out := new(BatchGetVendorConnectionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/BatchGetVendorConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListVendorConnections(ctx context.Context, in *ListVendorConnectionsRequest, opts ...grpc.CallOption) (*ListVendorConnectionsResponse, error) {
	out := new(ListVendorConnectionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/ListVendorConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchVendorConnection(ctx context.Context, in *WatchVendorConnectionRequest, opts ...grpc.CallOption) (WatchVendorConnectionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchVendorConnection",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.VendorConnectionService/WatchVendorConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchVendorConnectionWatchVendorConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchVendorConnectionClientStream interface {
	Recv() (*WatchVendorConnectionResponse, error)
	grpc.ClientStream
}

type watchVendorConnectionWatchVendorConnectionClient struct {
	grpc.ClientStream
}

func (x *watchVendorConnectionWatchVendorConnectionClient) Recv() (*WatchVendorConnectionResponse, error) {
	m := new(WatchVendorConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchVendorConnections(ctx context.Context, in *WatchVendorConnectionsRequest, opts ...grpc.CallOption) (WatchVendorConnectionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchVendorConnections",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha2.VendorConnectionService/WatchVendorConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchVendorConnectionsWatchVendorConnectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchVendorConnectionsClientStream interface {
	Recv() (*WatchVendorConnectionsResponse, error)
	grpc.ClientStream
}

type watchVendorConnectionsWatchVendorConnectionsClient struct {
	grpc.ClientStream
}

func (x *watchVendorConnectionsWatchVendorConnectionsClient) Recv() (*WatchVendorConnectionsResponse, error) {
	m := new(WatchVendorConnectionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateVendorConnection(ctx context.Context, in *CreateVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error) {
	out := new(vendor_connection.VendorConnection)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/CreateVendorConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateVendorConnection(ctx context.Context, in *UpdateVendorConnectionRequest, opts ...grpc.CallOption) (*vendor_connection.VendorConnection, error) {
	out := new(vendor_connection.VendorConnection)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/UpdateVendorConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteVendorConnection(ctx context.Context, in *DeleteVendorConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/DeleteVendorConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) PointGrabTelemetryNotify(ctx context.Context, in *PointGrabTelemetryNotifyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha2.VendorConnectionService/PointGrabTelemetryNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
