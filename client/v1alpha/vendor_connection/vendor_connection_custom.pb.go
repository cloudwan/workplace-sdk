// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha/vendor_connection_custom.proto
// DO NOT EDIT!!!

package vendor_connection_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	vendor_connection "github.com/cloudwan/workplace-sdk/resources/v1alpha/vendor_connection"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &workplace_common.BBox{}
	_ = &vendor_connection.PointGrab{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [PointGrabTelemetryNotifyRequest][ntt.workplace.v1alpha.PointGrabTelemetryNotifyRequest]
type PointGrabTelemetryNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.workplace.v1alpha.VendorConnection
	Name *vendor_connection.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// PointGrab floorId
	FloorId string `protobuf:"bytes,2,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty" firestore:"floorId"`
	// PointGrab areaId (Workplace zone)
	AreaId string `protobuf:"bytes,3,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty" firestore:"areaId"`
	// list of devices that contribute to this data
	Devices []string `protobuf:"bytes,4,rep,name=devices,proto3" json:"devices,omitempty" firestore:"devices"`
	// Notification Type - currently only `COUNTING` is supported
	Type vendor_connection.PointGrab_Telemetry_NotificationType `protobuf:"varint,5,opt,name=type,proto3,enum=ntt.workplace.v1alpha.PointGrab_Telemetry_NotificationType" json:"type,omitempty" firestore:"type"`
	// unix timestamp in milliseconds
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" firestore:"timestamp"`
	// `COUNTING` notification result
	Count int64 `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty" firestore:"count"`
	// `TRAFFIC` type people count in
	CountIn int64 `protobuf:"varint,12,opt,name=count_in,json=countIn,proto3" json:"count_in,omitempty" firestore:"countIn"`
	// `TRAFFIC` type people count out
	CountOut int64 `protobuf:"varint,13,opt,name=count_out,json=countOut,proto3" json:"count_out,omitempty" firestore:"countOut"`
	// PointGrab relative people positions
	PcPositions []*workplace_common.Point `protobuf:"bytes,11,rep,name=pc_positions,json=pcPositions,proto3" json:"pc_positions,omitempty" firestore:"pcPositions"`
}

func (m *PointGrabTelemetryNotifyRequest) Reset() {
	*m = PointGrabTelemetryNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_vendor_connection_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PointGrabTelemetryNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PointGrabTelemetryNotifyRequest) ProtoMessage() {}

func (m *PointGrabTelemetryNotifyRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_vendor_connection_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PointGrabTelemetryNotifyRequest) GotenMessage() {}

// Deprecated, Use PointGrabTelemetryNotifyRequest.ProtoReflect.Descriptor instead.
func (*PointGrabTelemetryNotifyRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescGZIP(), []int{0}
}

func (m *PointGrabTelemetryNotifyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PointGrabTelemetryNotifyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PointGrabTelemetryNotifyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PointGrabTelemetryNotifyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PointGrabTelemetryNotifyRequest) GetName() *vendor_connection.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PointGrabTelemetryNotifyRequest) GetFloorId() string {
	if m != nil {
		return m.FloorId
	}
	return ""
}

func (m *PointGrabTelemetryNotifyRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

func (m *PointGrabTelemetryNotifyRequest) GetDevices() []string {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *PointGrabTelemetryNotifyRequest) GetType() vendor_connection.PointGrab_Telemetry_NotificationType {
	if m != nil {
		return m.Type
	}
	return vendor_connection.PointGrab_Telemetry_NOTIFICATION_TYPE_UNSPECIFIED
}

func (m *PointGrabTelemetryNotifyRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return int64(0)
}

func (m *PointGrabTelemetryNotifyRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return int64(0)
}

func (m *PointGrabTelemetryNotifyRequest) GetCountIn() int64 {
	if m != nil {
		return m.CountIn
	}
	return int64(0)
}

func (m *PointGrabTelemetryNotifyRequest) GetCountOut() int64 {
	if m != nil {
		return m.CountOut
	}
	return int64(0)
}

func (m *PointGrabTelemetryNotifyRequest) GetPcPositions() []*workplace_common.Point {
	if m != nil {
		return m.PcPositions
	}
	return nil
}

func (m *PointGrabTelemetryNotifyRequest) SetName(fv *vendor_connection.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "PointGrabTelemetryNotifyRequest"))
	}
	m.Name = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetFloorId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FloorId", "PointGrabTelemetryNotifyRequest"))
	}
	m.FloorId = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetAreaId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AreaId", "PointGrabTelemetryNotifyRequest"))
	}
	m.AreaId = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetDevices(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Devices", "PointGrabTelemetryNotifyRequest"))
	}
	m.Devices = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetType(fv vendor_connection.PointGrab_Telemetry_NotificationType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "PointGrabTelemetryNotifyRequest"))
	}
	m.Type = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetTimestamp(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Timestamp", "PointGrabTelemetryNotifyRequest"))
	}
	m.Timestamp = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Count", "PointGrabTelemetryNotifyRequest"))
	}
	m.Count = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetCountIn(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountIn", "PointGrabTelemetryNotifyRequest"))
	}
	m.CountIn = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetCountOut(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountOut", "PointGrabTelemetryNotifyRequest"))
	}
	m.CountOut = fv
}

func (m *PointGrabTelemetryNotifyRequest) SetPcPositions(fv []*workplace_common.Point) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PcPositions", "PointGrabTelemetryNotifyRequest"))
	}
	m.PcPositions = fv
}

var workplace_proto_v1alpha_vendor_connection_custom_proto preflect.FileDescriptor

var workplace_proto_v1alpha_vendor_connection_custom_proto_rawDesc = []byte{
	0x0a, 0x36, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xca, 0x03, 0x0a, 0x1f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x62, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x10, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x63, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x29, 0xfa, 0xde, 0x21, 0x25, 0x0a, 0x1f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02,
	0x42, 0xc4, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x92, 0x8c, 0xd1, 0x02, 0x62, 0x0a, 0x1c, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x15, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84,
	0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescData = workplace_proto_v1alpha_vendor_connection_custom_proto_rawDesc
)

func workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescData)
	})
	return workplace_proto_v1alpha_vendor_connection_custom_proto_rawDescData
}

var workplace_proto_v1alpha_vendor_connection_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var workplace_proto_v1alpha_vendor_connection_custom_proto_goTypes = []interface{}{
	(*PointGrabTelemetryNotifyRequest)(nil),                     // 0: ntt.workplace.v1alpha.PointGrabTelemetryNotifyRequest
	(vendor_connection.PointGrab_Telemetry_NotificationType)(0), // 1: ntt.workplace.v1alpha.PointGrab_Telemetry_NotificationType
	(*workplace_common.Point)(nil),                              // 2: ntt.workplace.v1alpha.Point
}
var workplace_proto_v1alpha_vendor_connection_custom_proto_depIdxs = []int32{
	1, // 0: ntt.workplace.v1alpha.PointGrabTelemetryNotifyRequest.type:type_name -> ntt.workplace.v1alpha.PointGrab_Telemetry_NotificationType
	2, // 1: ntt.workplace.v1alpha.PointGrabTelemetryNotifyRequest.pc_positions:type_name -> ntt.workplace.v1alpha.Point
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha_vendor_connection_custom_proto_init() }
func workplace_proto_v1alpha_vendor_connection_custom_proto_init() {
	if workplace_proto_v1alpha_vendor_connection_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha_vendor_connection_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointGrabTelemetryNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha_vendor_connection_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           workplace_proto_v1alpha_vendor_connection_custom_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha_vendor_connection_custom_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha_vendor_connection_custom_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha_vendor_connection_custom_proto = out.File
	workplace_proto_v1alpha_vendor_connection_custom_proto_rawDesc = nil
	workplace_proto_v1alpha_vendor_connection_custom_proto_goTypes = nil
	workplace_proto_v1alpha_vendor_connection_custom_proto_depIdxs = nil
}
