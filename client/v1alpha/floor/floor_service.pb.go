// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha/floor_service.proto
// DO NOT EDIT!!!

package floor_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &building.Building{}
	_ = &floor.Floor{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetFloor][ntt.workplace.v1alpha.GetFloor]
type GetFloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha.Floor
	Name *floor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,3,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetFloorRequest) Reset() {
	*m = GetFloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetFloorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetFloorRequest) ProtoMessage() {}

func (m *GetFloorRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetFloorRequest) GotenMessage() {}

// Deprecated, Use GetFloorRequest.ProtoReflect.Descriptor instead.
func (*GetFloorRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetFloorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetFloorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetFloorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetFloorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetFloorRequest) GetName() *floor.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetFloorRequest) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetFloorRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetFloorRequest) SetName(fv *floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetFloorRequest"))
	}
	m.Name = fv
}

func (m *GetFloorRequest) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetFloorRequest"))
	}
	m.FieldMask = fv
}

func (m *GetFloorRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetFloorRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetFloors][ntt.workplace.v1alpha.BatchGetFloors]
type BatchGetFloorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional parent ntt.workplace.v1alpha.Floor
	Parent *floor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Names of Floors
	Names []*floor.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,3,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetFloorsRequest) Reset() {
	*m = BatchGetFloorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetFloorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetFloorsRequest) ProtoMessage() {}

func (m *BatchGetFloorsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetFloorsRequest) GotenMessage() {}

// Deprecated, Use BatchGetFloorsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetFloorsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetFloorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetFloorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetFloorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetFloorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetFloorsRequest) GetParent() *floor.Reference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *BatchGetFloorsRequest) GetNames() []*floor.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetFloorsRequest) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetFloorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetFloorsRequest) SetParent(fv *floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "BatchGetFloorsRequest"))
	}
	m.Parent = fv
}

func (m *BatchGetFloorsRequest) SetNames(fv []*floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetFloorsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetFloorsRequest) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetFloorsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetFloorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetFloorsRequest"))
	}
	m.View = fv
}

// BatchGetFloorsResponse
type BatchGetFloorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found Floors
	Floors []*floor.Floor `protobuf:"bytes,1,rep,name=floors,proto3" json:"floors,omitempty" firestore:"floors"`
	// list of not found Floors
	Missing []*floor.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetFloorsResponse) Reset() {
	*m = BatchGetFloorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetFloorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetFloorsResponse) ProtoMessage() {}

func (m *BatchGetFloorsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetFloorsResponse) GotenMessage() {}

// Deprecated, Use BatchGetFloorsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetFloorsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetFloorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetFloorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetFloorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetFloorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetFloorsResponse) GetFloors() []*floor.Floor {
	if m != nil {
		return m.Floors
	}
	return nil
}

func (m *BatchGetFloorsResponse) GetMissing() []*floor.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetFloorsResponse) SetFloors(fv []*floor.Floor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Floors", "BatchGetFloorsResponse"))
	}
	m.Floors = fv
}

func (m *BatchGetFloorsResponse) SetMissing(fv []*floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetFloorsResponse"))
	}
	m.Missing = fv
}

// Request message for method [ListFloors][ntt.workplace.v1alpha.ListFloors]
type ListFloorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.workplace.v1alpha.Floor
	Parent *floor.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Floors than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListFloorsResponse.next_page_token][ntt.workplace.v1alpha.ListFloorsResponse.next_page_token]
	PageToken *floor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *floor.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *floor.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,6,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListFloorsRequest) Reset() {
	*m = ListFloorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListFloorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListFloorsRequest) ProtoMessage() {}

func (m *ListFloorsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListFloorsRequest) GotenMessage() {}

// Deprecated, Use ListFloorsRequest.ProtoReflect.Descriptor instead.
func (*ListFloorsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListFloorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListFloorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListFloorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListFloorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListFloorsRequest) GetParent() *floor.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListFloorsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListFloorsRequest) GetPageToken() *floor.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListFloorsRequest) GetOrderBy() *floor.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListFloorsRequest) GetFilter() *floor.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListFloorsRequest) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListFloorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListFloorsRequest) SetParent(fv *floor.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListFloorsRequest"))
	}
	m.Parent = fv
}

func (m *ListFloorsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListFloorsRequest"))
	}
	m.PageSize = fv
}

func (m *ListFloorsRequest) SetPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListFloorsRequest"))
	}
	m.PageToken = fv
}

func (m *ListFloorsRequest) SetOrderBy(fv *floor.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListFloorsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListFloorsRequest) SetFilter(fv *floor.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListFloorsRequest"))
	}
	m.Filter = fv
}

func (m *ListFloorsRequest) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListFloorsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListFloorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListFloorsRequest"))
	}
	m.View = fv
}

// Request message for method [ListFloors][ntt.workplace.v1alpha.ListFloors]
type ListFloorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Floors
	Floors []*floor.Floor `protobuf:"bytes,1,rep,name=floors,proto3" json:"floors,omitempty" firestore:"floors"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListFloorsRequest.page_token][ntt.workplace.v1alpha.ListFloorsRequest.page_token]
	PrevPageToken *floor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListFloorsRequest.page_token][ntt.workplace.v1alpha.ListFloorsRequest.page_token]
	NextPageToken *floor.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListFloorsResponse) Reset() {
	*m = ListFloorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListFloorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListFloorsResponse) ProtoMessage() {}

func (m *ListFloorsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListFloorsResponse) GotenMessage() {}

// Deprecated, Use ListFloorsResponse.ProtoReflect.Descriptor instead.
func (*ListFloorsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListFloorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListFloorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListFloorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListFloorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListFloorsResponse) GetFloors() []*floor.Floor {
	if m != nil {
		return m.Floors
	}
	return nil
}

func (m *ListFloorsResponse) GetPrevPageToken() *floor.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListFloorsResponse) GetNextPageToken() *floor.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListFloorsResponse) SetFloors(fv []*floor.Floor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Floors", "ListFloorsResponse"))
	}
	m.Floors = fv
}

func (m *ListFloorsResponse) SetPrevPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListFloorsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListFloorsResponse) SetNextPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListFloorsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method [WatchFloor][ntt.workplace.v1alpha.WatchFloor]
type WatchFloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.workplace.v1alpha.Floor
	Name *floor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,2,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchFloorRequest) Reset() {
	*m = WatchFloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchFloorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchFloorRequest) ProtoMessage() {}

func (m *WatchFloorRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchFloorRequest) GotenMessage() {}

// Deprecated, Use WatchFloorRequest.ProtoReflect.Descriptor instead.
func (*WatchFloorRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchFloorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchFloorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchFloorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchFloorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchFloorRequest) GetName() *floor.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchFloorRequest) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchFloorRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchFloorRequest) SetName(fv *floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchFloorRequest"))
	}
	m.Name = fv
}

func (m *WatchFloorRequest) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchFloorRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchFloorRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchFloorRequest"))
	}
	m.View = fv
}

// WatchFloorResponse
type WatchFloorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *floor.FloorChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchFloorResponse) Reset() {
	*m = WatchFloorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchFloorResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchFloorResponse) ProtoMessage() {}

func (m *WatchFloorResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchFloorResponse) GotenMessage() {}

// Deprecated, Use WatchFloorResponse.ProtoReflect.Descriptor instead.
func (*WatchFloorResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchFloorResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchFloorResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchFloorResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchFloorResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchFloorResponse) GetChange() *floor.FloorChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchFloorResponse) SetChange(fv *floor.FloorChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchFloorResponse"))
	}
	m.Change = fv
}

// Request message for method [WatchFloors][ntt.workplace.v1alpha.WatchFloors]
type WatchFloorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.workplace.v1alpha.Floor
	Parent *floor.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer Floors than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *floor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *floor.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *floor.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to Floor that don't affect any
	// of masked fields won't be sent back.
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,6,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// Floor that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchFloorsRequest) Reset() {
	*m = WatchFloorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchFloorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchFloorsRequest) ProtoMessage() {}

func (m *WatchFloorsRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchFloorsRequest) GotenMessage() {}

// Deprecated, Use WatchFloorsRequest.ProtoReflect.Descriptor instead.
func (*WatchFloorsRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchFloorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchFloorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchFloorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchFloorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchFloorsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchFloorsRequest) GetParent() *floor.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchFloorsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchFloorsRequest) GetPageToken() *floor.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchFloorsRequest) GetOrderBy() *floor.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchFloorsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchFloorsRequest) GetFilter() *floor.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchFloorsRequest) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchFloorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchFloorsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchFloorsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchFloorsRequest"))
	}
	m.Type = fv
}

func (m *WatchFloorsRequest) SetParent(fv *floor.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchFloorsRequest"))
	}
	m.Parent = fv
}

func (m *WatchFloorsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchFloorsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchFloorsRequest) SetPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchFloorsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchFloorsRequest) SetOrderBy(fv *floor.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchFloorsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchFloorsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchFloorsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchFloorsRequest) SetFilter(fv *floor.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchFloorsRequest"))
	}
	m.Filter = fv
}

func (m *WatchFloorsRequest) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchFloorsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchFloorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchFloorsRequest"))
	}
	m.View = fv
}

func (m *WatchFloorsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchFloorsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchFloorsResponse
type WatchFloorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of Floors
	FloorChanges []*floor.FloorChange `protobuf:"bytes,2,rep,name=floor_changes,json=floorChanges,proto3" json:"floor_changes,omitempty" firestore:"floorChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All Floors will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchFloorsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (Floors will contains changes of
	// type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchFloorsResponse) Reset() {
	*m = WatchFloorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchFloorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchFloorsResponse) ProtoMessage() {}

func (m *WatchFloorsResponse) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchFloorsResponse) GotenMessage() {}

// Deprecated, Use WatchFloorsResponse.ProtoReflect.Descriptor instead.
func (*WatchFloorsResponse) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchFloorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchFloorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchFloorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchFloorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchFloorsResponse) GetFloorChanges() []*floor.FloorChange {
	if m != nil {
		return m.FloorChanges
	}
	return nil
}

func (m *WatchFloorsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchFloorsResponse) GetPageTokenChange() *WatchFloorsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchFloorsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchFloorsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchFloorsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchFloorsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchFloorsResponse) SetFloorChanges(fv []*floor.FloorChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FloorChanges", "WatchFloorsResponse"))
	}
	m.FloorChanges = fv
}

func (m *WatchFloorsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchFloorsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchFloorsResponse) SetPageTokenChange(fv *WatchFloorsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchFloorsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchFloorsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchFloorsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchFloorsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchFloorsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchFloorsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchFloorsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchFloorsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchFloorsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method [CreateFloor][ntt.workplace.v1alpha.CreateFloor]
type CreateFloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.workplace.v1alpha.Floor
	Parent *floor.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Floor resource body
	Floor *floor.Floor `protobuf:"bytes,2,opt,name=floor,proto3" json:"floor,omitempty" firestore:"floor"`
}

func (m *CreateFloorRequest) Reset() {
	*m = CreateFloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateFloorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateFloorRequest) ProtoMessage() {}

func (m *CreateFloorRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateFloorRequest) GotenMessage() {}

// Deprecated, Use CreateFloorRequest.ProtoReflect.Descriptor instead.
func (*CreateFloorRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateFloorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateFloorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateFloorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateFloorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateFloorRequest) GetParent() *floor.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateFloorRequest) GetFloor() *floor.Floor {
	if m != nil {
		return m.Floor
	}
	return nil
}

func (m *CreateFloorRequest) SetParent(fv *floor.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateFloorRequest"))
	}
	m.Parent = fv
}

func (m *CreateFloorRequest) SetFloor(fv *floor.Floor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Floor", "CreateFloorRequest"))
	}
	m.Floor = fv
}

// Request message for method [UpdateFloor][ntt.workplace.v1alpha.UpdateFloor]
type UpdateFloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Floor resource body
	Floor *floor.Floor `protobuf:"bytes,2,opt,name=floor,proto3" json:"floor,omitempty" firestore:"floor"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *floor.Floor_FieldMask `protobuf:"bytes,3,opt,customtype=Floor_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateFloorRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateFloorRequest) Reset() {
	*m = UpdateFloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateFloorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateFloorRequest) ProtoMessage() {}

func (m *UpdateFloorRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateFloorRequest) GotenMessage() {}

// Deprecated, Use UpdateFloorRequest.ProtoReflect.Descriptor instead.
func (*UpdateFloorRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateFloorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateFloorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateFloorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateFloorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateFloorRequest) GetFloor() *floor.Floor {
	if m != nil {
		return m.Floor
	}
	return nil
}

func (m *UpdateFloorRequest) GetUpdateMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateFloorRequest) GetCas() *UpdateFloorRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateFloorRequest) SetFloor(fv *floor.Floor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Floor", "UpdateFloorRequest"))
	}
	m.Floor = fv
}

func (m *UpdateFloorRequest) SetUpdateMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateFloorRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateFloorRequest) SetCas(fv *UpdateFloorRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateFloorRequest"))
	}
	m.Cas = fv
}

// Request message for method [DeleteFloor][ntt.workplace.v1alpha.DeleteFloor]
type DeleteFloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.workplace.v1alpha.Floor
	Name *floor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteFloorRequest) Reset() {
	*m = DeleteFloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteFloorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteFloorRequest) ProtoMessage() {}

func (m *DeleteFloorRequest) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteFloorRequest) GotenMessage() {}

// Deprecated, Use DeleteFloorRequest.ProtoReflect.Descriptor instead.
func (*DeleteFloorRequest) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteFloorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteFloorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteFloorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteFloorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteFloorRequest) GetName() *floor.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteFloorRequest) SetName(fv *floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteFloorRequest"))
	}
	m.Name = fv
}

type WatchFloorsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *floor.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *floor.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchFloorsResponse_PageTokenChange) Reset() {
	*m = WatchFloorsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchFloorsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchFloorsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchFloorsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchFloorsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchFloorsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchFloorsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchFloorsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchFloorsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchFloorsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchFloorsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchFloorsResponse_PageTokenChange) GetPrevPageToken() *floor.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchFloorsResponse_PageTokenChange) GetNextPageToken() *floor.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchFloorsResponse_PageTokenChange) SetPrevPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchFloorsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchFloorsResponse_PageTokenChange) SetNextPageToken(fv *floor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchFloorsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateFloorRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *floor.Floor `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *floor.Floor_FieldMask `protobuf:"bytes,2,opt,customtype=Floor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateFloorRequest_CAS) Reset() {
	*m = UpdateFloorRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateFloorRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateFloorRequest_CAS) ProtoMessage() {}

func (m *UpdateFloorRequest_CAS) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha_floor_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateFloorRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateFloorRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateFloorRequest_CAS) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha_floor_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateFloorRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateFloorRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateFloorRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateFloorRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateFloorRequest_CAS) GetConditionalState() *floor.Floor {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateFloorRequest_CAS) GetFieldMask() *floor.Floor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateFloorRequest_CAS) SetConditionalState(fv *floor.Floor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateFloorRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateFloorRequest_CAS) SetFieldMask(fv *floor.Floor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateFloorRequest_CAS"))
	}
	m.FieldMask = fv
}

var workplace_proto_v1alpha_floor_service_proto preflect.FileDescriptor

var workplace_proto_v1alpha_floor_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda, 0x21,
	0x09, 0x32, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x19, 0xfa, 0xde, 0x21,
	0x15, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda,
	0x21, 0x09, 0x32, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x1f, 0xfa, 0xde,
	0x21, 0x1b, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x22, 0x99, 0x01,
	0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0xfa, 0xde, 0x21, 0x1c, 0x0a, 0x16, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x22, 0xf3, 0x02, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xb2, 0xda, 0x21, 0x09, 0x3a, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xba, 0x9d,
	0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca,
	0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x22, 0x07, 0x0a,
	0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x2a, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21,
	0x09, 0x1a, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x32, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x3a, 0x1b, 0xfa, 0xde, 0x21, 0x17, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x22,
	0xd6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x22, 0x07, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda,
	0x21, 0x09, 0x22, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x1c, 0xfa, 0xde, 0x21, 0x18,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda,
	0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xba, 0x9d, 0x22, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x32, 0x07, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x1b, 0xfa, 0xde, 0x21, 0x17, 0x0a, 0x11, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01,
	0x18, 0x02, 0x22, 0x6e, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x3a, 0x1c, 0xfa, 0xde, 0x21, 0x18, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01,
	0x18, 0x01, 0x22, 0x85, 0x04, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09,
	0x42, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x22, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xb2, 0xda, 0x21, 0x09, 0x2a, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x1a,
	0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x32, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x1c, 0xfa, 0xde,
	0x21, 0x18, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x22, 0x95, 0x04, 0x0a, 0x13, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x11, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x1a, 0x7f, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xb2, 0xda, 0x21, 0x09, 0x22, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x22, 0x07, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x1d, 0xfa, 0xde, 0x21, 0x19, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01,
	0x18, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x42,
	0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x3a, 0x34, 0xfa, 0xde, 0x21, 0x18, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c, 0x14, 0x32, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x03, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x32, 0x07, 0x0a, 0x05,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x3f, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63,
	0x61, 0x73, 0x1a, 0x9a, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x32, 0x07, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a,
	0x38, 0xfa, 0xde, 0x21, 0x18, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c,
	0x18, 0x32, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x0a, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2,
	0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xba, 0x9d, 0x22, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x2c, 0xfa, 0xde, 0x21, 0x18, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0xf0, 0x10, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x82, 0xdb, 0x21, 0x0c, 0x0a,
	0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x03, 0x67, 0x65, 0x74, 0x8a, 0xdb, 0x21, 0x15, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x12, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xa0, 0x02,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73,
	0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01,
	0x82, 0xdb, 0x21, 0x15, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x8a, 0xdb, 0x21, 0x1b, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x3a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x22, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00,
	0x12, 0x80, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12,
	0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xdb, 0x21, 0x11, 0x0a, 0x05, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x8a, 0xdb, 0x21, 0x17,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x92, 0x97, 0x22, 0x1f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8,
	0xd5, 0x22, 0x00, 0x12, 0x84, 0x02, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x82, 0xdb, 0x21, 0x0e, 0x0a, 0x05,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xdb, 0x21, 0x17,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x92, 0x97, 0x22, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8e, 0x02, 0x0a, 0x0b, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x82, 0xdb, 0x21, 0x12, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x8a, 0xdb, 0x21, 0x18, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x92, 0x97, 0x22, 0x20, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0x83, 0x02, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x29, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x22, 0xaa, 0x01, 0x82, 0xdb, 0x21, 0x11, 0x0a, 0x05, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x8a, 0xdb, 0x21, 0x18,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x40, 0x3a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x37, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x73, 0x92, 0x97, 0x22, 0x21, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22,
	0x03, 0x12, 0x8b, 0x02, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0xb2, 0x01, 0x82, 0xdb, 0x21,
	0x0f, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x8a, 0xdb, 0x21, 0x18, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0xa2, 0xdc, 0x21, 0x02,
	0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x1a,
	0x3d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97,
	0x22, 0x25, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73,
	0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12,
	0xf2, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x9f, 0x01, 0x82, 0xdb, 0x21, 0x0f, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x8a, 0xdb, 0x21, 0x18, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x2a, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01,
	0xd0, 0xd5, 0x22, 0x03, 0x1a, 0x31, 0xca, 0x41, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x9e, 0x03, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff,
	0xd0, 0x02, 0x42, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x8a, 0xff, 0xd0, 0x02, 0x42, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x92, 0x8c, 0xd1, 0x02,
	0x4a, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x11, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x3b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2,
	0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha_floor_service_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha_floor_service_proto_rawDescData = workplace_proto_v1alpha_floor_service_proto_rawDesc
)

func workplace_proto_v1alpha_floor_service_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha_floor_service_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha_floor_service_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha_floor_service_proto_rawDescData)
	})
	return workplace_proto_v1alpha_floor_service_proto_rawDescData
}

var workplace_proto_v1alpha_floor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var workplace_proto_v1alpha_floor_service_proto_goTypes = []interface{}{
	(*GetFloorRequest)(nil),                     // 0: ntt.workplace.v1alpha.GetFloorRequest
	(*BatchGetFloorsRequest)(nil),               // 1: ntt.workplace.v1alpha.BatchGetFloorsRequest
	(*BatchGetFloorsResponse)(nil),              // 2: ntt.workplace.v1alpha.BatchGetFloorsResponse
	(*ListFloorsRequest)(nil),                   // 3: ntt.workplace.v1alpha.ListFloorsRequest
	(*ListFloorsResponse)(nil),                  // 4: ntt.workplace.v1alpha.ListFloorsResponse
	(*WatchFloorRequest)(nil),                   // 5: ntt.workplace.v1alpha.WatchFloorRequest
	(*WatchFloorResponse)(nil),                  // 6: ntt.workplace.v1alpha.WatchFloorResponse
	(*WatchFloorsRequest)(nil),                  // 7: ntt.workplace.v1alpha.WatchFloorsRequest
	(*WatchFloorsResponse)(nil),                 // 8: ntt.workplace.v1alpha.WatchFloorsResponse
	(*CreateFloorRequest)(nil),                  // 9: ntt.workplace.v1alpha.CreateFloorRequest
	(*UpdateFloorRequest)(nil),                  // 10: ntt.workplace.v1alpha.UpdateFloorRequest
	(*DeleteFloorRequest)(nil),                  // 11: ntt.workplace.v1alpha.DeleteFloorRequest
	(*WatchFloorsResponse_PageTokenChange)(nil), // 12: ntt.workplace.v1alpha.WatchFloorsResponse.PageTokenChange
	(*UpdateFloorRequest_CAS)(nil),              // 13: ntt.workplace.v1alpha.UpdateFloorRequest.CAS
	(*floor.Floor_FieldMask)(nil),               // 14: ntt.workplace.v1alpha.Floor_FieldMask
	(view.View)(0),                              // 15: goten.view.View
	(*floor.Floor)(nil),                         // 16: ntt.workplace.v1alpha.Floor
	(*floor.FloorChange)(nil),                   // 17: ntt.workplace.v1alpha.FloorChange
	(watch_type.WatchType)(0),                   // 18: goten.watch_type.WatchType
	(*empty.Empty)(nil),                         // 19: google.protobuf.Empty
}
var workplace_proto_v1alpha_floor_service_proto_depIdxs = []int32{
	14, // 0: ntt.workplace.v1alpha.GetFloorRequest.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	15, // 1: ntt.workplace.v1alpha.GetFloorRequest.view:type_name -> goten.view.View
	14, // 2: ntt.workplace.v1alpha.BatchGetFloorsRequest.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	15, // 3: ntt.workplace.v1alpha.BatchGetFloorsRequest.view:type_name -> goten.view.View
	16, // 4: ntt.workplace.v1alpha.BatchGetFloorsResponse.floors:type_name -> ntt.workplace.v1alpha.Floor
	14, // 5: ntt.workplace.v1alpha.ListFloorsRequest.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	15, // 6: ntt.workplace.v1alpha.ListFloorsRequest.view:type_name -> goten.view.View
	16, // 7: ntt.workplace.v1alpha.ListFloorsResponse.floors:type_name -> ntt.workplace.v1alpha.Floor
	14, // 8: ntt.workplace.v1alpha.WatchFloorRequest.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	15, // 9: ntt.workplace.v1alpha.WatchFloorRequest.view:type_name -> goten.view.View
	17, // 10: ntt.workplace.v1alpha.WatchFloorResponse.change:type_name -> ntt.workplace.v1alpha.FloorChange
	18, // 11: ntt.workplace.v1alpha.WatchFloorsRequest.type:type_name -> goten.watch_type.WatchType
	14, // 12: ntt.workplace.v1alpha.WatchFloorsRequest.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	15, // 13: ntt.workplace.v1alpha.WatchFloorsRequest.view:type_name -> goten.view.View
	17, // 14: ntt.workplace.v1alpha.WatchFloorsResponse.floor_changes:type_name -> ntt.workplace.v1alpha.FloorChange
	12, // 15: ntt.workplace.v1alpha.WatchFloorsResponse.page_token_change:type_name -> ntt.workplace.v1alpha.WatchFloorsResponse.PageTokenChange
	16, // 16: ntt.workplace.v1alpha.CreateFloorRequest.floor:type_name -> ntt.workplace.v1alpha.Floor
	16, // 17: ntt.workplace.v1alpha.UpdateFloorRequest.floor:type_name -> ntt.workplace.v1alpha.Floor
	14, // 18: ntt.workplace.v1alpha.UpdateFloorRequest.update_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	13, // 19: ntt.workplace.v1alpha.UpdateFloorRequest.cas:type_name -> ntt.workplace.v1alpha.UpdateFloorRequest.CAS
	16, // 20: ntt.workplace.v1alpha.UpdateFloorRequest.CAS.conditional_state:type_name -> ntt.workplace.v1alpha.Floor
	14, // 21: ntt.workplace.v1alpha.UpdateFloorRequest.CAS.field_mask:type_name -> ntt.workplace.v1alpha.Floor_FieldMask
	0,  // 22: ntt.workplace.v1alpha.FloorService.GetFloor:input_type -> ntt.workplace.v1alpha.GetFloorRequest
	1,  // 23: ntt.workplace.v1alpha.FloorService.BatchGetFloors:input_type -> ntt.workplace.v1alpha.BatchGetFloorsRequest
	3,  // 24: ntt.workplace.v1alpha.FloorService.ListFloors:input_type -> ntt.workplace.v1alpha.ListFloorsRequest
	5,  // 25: ntt.workplace.v1alpha.FloorService.WatchFloor:input_type -> ntt.workplace.v1alpha.WatchFloorRequest
	7,  // 26: ntt.workplace.v1alpha.FloorService.WatchFloors:input_type -> ntt.workplace.v1alpha.WatchFloorsRequest
	9,  // 27: ntt.workplace.v1alpha.FloorService.CreateFloor:input_type -> ntt.workplace.v1alpha.CreateFloorRequest
	10, // 28: ntt.workplace.v1alpha.FloorService.UpdateFloor:input_type -> ntt.workplace.v1alpha.UpdateFloorRequest
	11, // 29: ntt.workplace.v1alpha.FloorService.DeleteFloor:input_type -> ntt.workplace.v1alpha.DeleteFloorRequest
	16, // 30: ntt.workplace.v1alpha.FloorService.GetFloor:output_type -> ntt.workplace.v1alpha.Floor
	2,  // 31: ntt.workplace.v1alpha.FloorService.BatchGetFloors:output_type -> ntt.workplace.v1alpha.BatchGetFloorsResponse
	4,  // 32: ntt.workplace.v1alpha.FloorService.ListFloors:output_type -> ntt.workplace.v1alpha.ListFloorsResponse
	6,  // 33: ntt.workplace.v1alpha.FloorService.WatchFloor:output_type -> ntt.workplace.v1alpha.WatchFloorResponse
	8,  // 34: ntt.workplace.v1alpha.FloorService.WatchFloors:output_type -> ntt.workplace.v1alpha.WatchFloorsResponse
	16, // 35: ntt.workplace.v1alpha.FloorService.CreateFloor:output_type -> ntt.workplace.v1alpha.Floor
	16, // 36: ntt.workplace.v1alpha.FloorService.UpdateFloor:output_type -> ntt.workplace.v1alpha.Floor
	19, // 37: ntt.workplace.v1alpha.FloorService.DeleteFloor:output_type -> google.protobuf.Empty
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha_floor_service_proto_init() }
func workplace_proto_v1alpha_floor_service_proto_init() {
	if workplace_proto_v1alpha_floor_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha_floor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetFloorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetFloorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFloorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFloorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFloorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFloorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFloorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFloorsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha_floor_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFloorRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha_floor_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           workplace_proto_v1alpha_floor_service_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha_floor_service_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha_floor_service_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha_floor_service_proto = out.File
	workplace_proto_v1alpha_floor_service_proto_rawDesc = nil
	workplace_proto_v1alpha_floor_service_proto_goTypes = nil
	workplace_proto_v1alpha_floor_service_proto_depIdxs = nil
}
