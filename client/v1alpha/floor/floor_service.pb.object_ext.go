// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/floor_service.proto
// DO NOT EDIT!!!

package floor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &building.Building{}
	_ = &floor.Floor{}
)

func (o *GetFloorRequest) GotenObjectExt() {}

func (o *GetFloorRequest) MakeFullFieldMask() *GetFloorRequest_FieldMask {
	return FullGetFloorRequest_FieldMask()
}

func (o *GetFloorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetFloorRequest_FieldMask()
}

func (o *GetFloorRequest) MakeDiffFieldMask(other *GetFloorRequest) *GetFloorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetFloorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetFloorRequest_FieldMask()
	}

	res := &GetFloorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetFloorRequest_FieldTerminalPath{selector: GetFloorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetFloorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetFloorRequest))
}

func (o *GetFloorRequest) Clone() *GetFloorRequest {
	if o == nil {
		return nil
	}
	result := &GetFloorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &floor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetFloorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetFloorRequest) Merge(source *GetFloorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &floor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetFloorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetFloorRequest))
}

func (o *BatchGetFloorsRequest) GotenObjectExt() {}

func (o *BatchGetFloorsRequest) MakeFullFieldMask() *BatchGetFloorsRequest_FieldMask {
	return FullBatchGetFloorsRequest_FieldMask()
}

func (o *BatchGetFloorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetFloorsRequest_FieldMask()
}

func (o *BatchGetFloorsRequest) MakeDiffFieldMask(other *BatchGetFloorsRequest) *BatchGetFloorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetFloorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetFloorsRequest_FieldMask()
	}

	res := &BatchGetFloorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetFloorsRequest_FieldTerminalPath{selector: BatchGetFloorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetFloorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetFloorsRequest))
}

func (o *BatchGetFloorsRequest) Clone() *BatchGetFloorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetFloorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &floor.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*floor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &floor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetFloorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetFloorsRequest) Merge(source *BatchGetFloorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &floor.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *floor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &floor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetFloorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetFloorsRequest))
}

func (o *BatchGetFloorsResponse) GotenObjectExt() {}

func (o *BatchGetFloorsResponse) MakeFullFieldMask() *BatchGetFloorsResponse_FieldMask {
	return FullBatchGetFloorsResponse_FieldMask()
}

func (o *BatchGetFloorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetFloorsResponse_FieldMask()
}

func (o *BatchGetFloorsResponse) MakeDiffFieldMask(other *BatchGetFloorsResponse) *BatchGetFloorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetFloorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetFloorsResponse_FieldMask()
	}

	res := &BatchGetFloorsResponse_FieldMask{}

	if len(o.GetFloors()) == len(other.GetFloors()) {
		for i, lValue := range o.GetFloors() {
			rValue := other.GetFloors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorFloors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorFloors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetFloorsResponse_FieldTerminalPath{selector: BatchGetFloorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetFloorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetFloorsResponse))
}

func (o *BatchGetFloorsResponse) Clone() *BatchGetFloorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetFloorsResponse{}
	result.Floors = make([]*floor.Floor, len(o.Floors))
	for i, sourceValue := range o.Floors {
		result.Floors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*floor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &floor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetFloorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetFloorsResponse) Merge(source *BatchGetFloorsResponse) {
	for _, sourceValue := range source.GetFloors() {
		exists := false
		for _, currentValue := range o.Floors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *floor.Floor
			if sourceValue != nil {
				newDstElement = new(floor.Floor)
				newDstElement.Merge(sourceValue)
			}
			o.Floors = append(o.Floors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *floor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &floor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetFloorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetFloorsResponse))
}

func (o *ListFloorsRequest) GotenObjectExt() {}

func (o *ListFloorsRequest) MakeFullFieldMask() *ListFloorsRequest_FieldMask {
	return FullListFloorsRequest_FieldMask()
}

func (o *ListFloorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListFloorsRequest_FieldMask()
}

func (o *ListFloorsRequest) MakeDiffFieldMask(other *ListFloorsRequest) *ListFloorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListFloorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListFloorsRequest_FieldMask()
	}

	res := &ListFloorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListFloorsRequest_FieldTerminalPath{selector: ListFloorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListFloorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListFloorsRequest))
}

func (o *ListFloorsRequest) Clone() *ListFloorsRequest {
	if o == nil {
		return nil
	}
	result := &ListFloorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &floor.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &floor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &floor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &floor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	result.View = o.View
	return result
}

func (o *ListFloorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListFloorsRequest) Merge(source *ListFloorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &floor.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &floor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &floor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &floor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListFloorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListFloorsRequest))
}

func (o *ListFloorsResponse) GotenObjectExt() {}

func (o *ListFloorsResponse) MakeFullFieldMask() *ListFloorsResponse_FieldMask {
	return FullListFloorsResponse_FieldMask()
}

func (o *ListFloorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListFloorsResponse_FieldMask()
}

func (o *ListFloorsResponse) MakeDiffFieldMask(other *ListFloorsResponse) *ListFloorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListFloorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListFloorsResponse_FieldMask()
	}

	res := &ListFloorsResponse_FieldMask{}

	if len(o.GetFloors()) == len(other.GetFloors()) {
		for i, lValue := range o.GetFloors() {
			rValue := other.GetFloors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorFloors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorFloors})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListFloorsResponse_FieldTerminalPath{selector: ListFloorsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListFloorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListFloorsResponse))
}

func (o *ListFloorsResponse) Clone() *ListFloorsResponse {
	if o == nil {
		return nil
	}
	result := &ListFloorsResponse{}
	result.Floors = make([]*floor.Floor, len(o.Floors))
	for i, sourceValue := range o.Floors {
		result.Floors[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &floor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &floor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListFloorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListFloorsResponse) Merge(source *ListFloorsResponse) {
	for _, sourceValue := range source.GetFloors() {
		exists := false
		for _, currentValue := range o.Floors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *floor.Floor
			if sourceValue != nil {
				newDstElement = new(floor.Floor)
				newDstElement.Merge(sourceValue)
			}
			o.Floors = append(o.Floors, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &floor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &floor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListFloorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListFloorsResponse))
}

func (o *WatchFloorRequest) GotenObjectExt() {}

func (o *WatchFloorRequest) MakeFullFieldMask() *WatchFloorRequest_FieldMask {
	return FullWatchFloorRequest_FieldMask()
}

func (o *WatchFloorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchFloorRequest_FieldMask()
}

func (o *WatchFloorRequest) MakeDiffFieldMask(other *WatchFloorRequest) *WatchFloorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchFloorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchFloorRequest_FieldMask()
	}

	res := &WatchFloorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchFloorRequest_FieldTerminalPath{selector: WatchFloorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchFloorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchFloorRequest))
}

func (o *WatchFloorRequest) Clone() *WatchFloorRequest {
	if o == nil {
		return nil
	}
	result := &WatchFloorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &floor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchFloorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchFloorRequest) Merge(source *WatchFloorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &floor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchFloorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchFloorRequest))
}

func (o *WatchFloorResponse) GotenObjectExt() {}

func (o *WatchFloorResponse) MakeFullFieldMask() *WatchFloorResponse_FieldMask {
	return FullWatchFloorResponse_FieldMask()
}

func (o *WatchFloorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchFloorResponse_FieldMask()
}

func (o *WatchFloorResponse) MakeDiffFieldMask(other *WatchFloorResponse) *WatchFloorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchFloorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchFloorResponse_FieldMask()
	}

	res := &WatchFloorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchFloorResponse_FieldTerminalPath{selector: WatchFloorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchFloorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchFloorResponse))
}

func (o *WatchFloorResponse) Clone() *WatchFloorResponse {
	if o == nil {
		return nil
	}
	result := &WatchFloorResponse{}
	result.Change = proto.Clone(o.Change).(*floor.FloorChange)
	return result
}

func (o *WatchFloorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchFloorResponse) Merge(source *WatchFloorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(floor.FloorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchFloorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchFloorResponse))
}

func (o *WatchFloorsRequest) GotenObjectExt() {}

func (o *WatchFloorsRequest) MakeFullFieldMask() *WatchFloorsRequest_FieldMask {
	return FullWatchFloorsRequest_FieldMask()
}

func (o *WatchFloorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchFloorsRequest_FieldMask()
}

func (o *WatchFloorsRequest) MakeDiffFieldMask(other *WatchFloorsRequest) *WatchFloorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchFloorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchFloorsRequest_FieldMask()
	}

	res := &WatchFloorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchFloorsRequest_FieldTerminalPath{selector: WatchFloorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchFloorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchFloorsRequest))
}

func (o *WatchFloorsRequest) Clone() *WatchFloorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchFloorsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &floor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &floor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &floor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &floor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchFloorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchFloorsRequest) Merge(source *WatchFloorsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &floor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &floor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &floor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &floor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchFloorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchFloorsRequest))
}

func (o *WatchFloorsResponse) GotenObjectExt() {}

func (o *WatchFloorsResponse) MakeFullFieldMask() *WatchFloorsResponse_FieldMask {
	return FullWatchFloorsResponse_FieldMask()
}

func (o *WatchFloorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchFloorsResponse_FieldMask()
}

func (o *WatchFloorsResponse) MakeDiffFieldMask(other *WatchFloorsResponse) *WatchFloorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchFloorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchFloorsResponse_FieldMask()
	}

	res := &WatchFloorsResponse_FieldMask{}

	if len(o.GetFloorChanges()) == len(other.GetFloorChanges()) {
		for i, lValue := range o.GetFloorChanges() {
			rValue := other.GetFloorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorFloorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorFloorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchFloorsResponse_FieldSubPath{selector: WatchFloorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchFloorsResponse_FieldTerminalPath{selector: WatchFloorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchFloorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchFloorsResponse))
}

func (o *WatchFloorsResponse) Clone() *WatchFloorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchFloorsResponse{}
	result.FloorChanges = make([]*floor.FloorChange, len(o.FloorChanges))
	for i, sourceValue := range o.FloorChanges {
		result.FloorChanges[i] = proto.Clone(sourceValue).(*floor.FloorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchFloorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchFloorsResponse) Merge(source *WatchFloorsResponse) {
	for _, sourceValue := range source.GetFloorChanges() {
		exists := false
		for _, currentValue := range o.FloorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *floor.FloorChange
			if sourceValue != nil {
				newDstElement = new(floor.FloorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.FloorChanges = append(o.FloorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchFloorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchFloorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchFloorsResponse))
}

func (o *WatchFloorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchFloorsResponse_PageTokenChange) MakeFullFieldMask() *WatchFloorsResponse_PageTokenChange_FieldMask {
	return FullWatchFloorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchFloorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchFloorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchFloorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchFloorsResponse_PageTokenChange) *WatchFloorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchFloorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchFloorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchFloorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchFloorsResponsePageTokenChange_FieldTerminalPath{selector: WatchFloorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchFloorsResponsePageTokenChange_FieldTerminalPath{selector: WatchFloorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchFloorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchFloorsResponse_PageTokenChange))
}

func (o *WatchFloorsResponse_PageTokenChange) Clone() *WatchFloorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchFloorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &floor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &floor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchFloorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchFloorsResponse_PageTokenChange) Merge(source *WatchFloorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &floor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &floor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchFloorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchFloorsResponse_PageTokenChange))
}

func (o *CreateFloorRequest) GotenObjectExt() {}

func (o *CreateFloorRequest) MakeFullFieldMask() *CreateFloorRequest_FieldMask {
	return FullCreateFloorRequest_FieldMask()
}

func (o *CreateFloorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateFloorRequest_FieldMask()
}

func (o *CreateFloorRequest) MakeDiffFieldMask(other *CreateFloorRequest) *CreateFloorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateFloorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateFloorRequest_FieldMask()
	}

	res := &CreateFloorRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateFloorRequest_FieldTerminalPath{selector: CreateFloorRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetFloor().MakeDiffFieldMask(other.GetFloor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateFloorRequest_FieldTerminalPath{selector: CreateFloorRequest_FieldPathSelectorFloor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateFloorRequest_FieldSubPath{selector: CreateFloorRequest_FieldPathSelectorFloor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateFloorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateFloorRequest))
}

func (o *CreateFloorRequest) Clone() *CreateFloorRequest {
	if o == nil {
		return nil
	}
	result := &CreateFloorRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &floor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Floor = o.Floor.Clone()
	return result
}

func (o *CreateFloorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateFloorRequest) Merge(source *CreateFloorRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &floor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetFloor() != nil {
		if o.Floor == nil {
			o.Floor = new(floor.Floor)
		}
		o.Floor.Merge(source.GetFloor())
	}
}

func (o *CreateFloorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateFloorRequest))
}

func (o *UpdateFloorRequest) GotenObjectExt() {}

func (o *UpdateFloorRequest) MakeFullFieldMask() *UpdateFloorRequest_FieldMask {
	return FullUpdateFloorRequest_FieldMask()
}

func (o *UpdateFloorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateFloorRequest_FieldMask()
}

func (o *UpdateFloorRequest) MakeDiffFieldMask(other *UpdateFloorRequest) *UpdateFloorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateFloorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateFloorRequest_FieldMask()
	}

	res := &UpdateFloorRequest_FieldMask{}
	{
		subMask := o.GetFloor().MakeDiffFieldMask(other.GetFloor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorFloor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateFloorRequest_FieldSubPath{selector: UpdateFloorRequest_FieldPathSelectorFloor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateFloorRequest_FieldTerminalPath{selector: UpdateFloorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateFloorRequest_FieldSubPath{selector: UpdateFloorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateFloorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateFloorRequest))
}

func (o *UpdateFloorRequest) Clone() *UpdateFloorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateFloorRequest{}
	result.Floor = o.Floor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*floor.Floor_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateFloorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateFloorRequest) Merge(source *UpdateFloorRequest) {
	if source.GetFloor() != nil {
		if o.Floor == nil {
			o.Floor = new(floor.Floor)
		}
		o.Floor.Merge(source.GetFloor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateFloorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateFloorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateFloorRequest))
}

func (o *UpdateFloorRequest_CAS) GotenObjectExt() {}

func (o *UpdateFloorRequest_CAS) MakeFullFieldMask() *UpdateFloorRequest_CAS_FieldMask {
	return FullUpdateFloorRequest_CAS_FieldMask()
}

func (o *UpdateFloorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateFloorRequest_CAS_FieldMask()
}

func (o *UpdateFloorRequest_CAS) MakeDiffFieldMask(other *UpdateFloorRequest_CAS) *UpdateFloorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateFloorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateFloorRequest_CAS_FieldMask()
	}

	res := &UpdateFloorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateFloorRequestCAS_FieldTerminalPath{selector: UpdateFloorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateFloorRequestCAS_FieldSubPath{selector: UpdateFloorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateFloorRequestCAS_FieldTerminalPath{selector: UpdateFloorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateFloorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateFloorRequest_CAS))
}

func (o *UpdateFloorRequest_CAS) Clone() *UpdateFloorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateFloorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*floor.Floor_FieldMask)
	return result
}

func (o *UpdateFloorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateFloorRequest_CAS) Merge(source *UpdateFloorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(floor.Floor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(floor.Floor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateFloorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateFloorRequest_CAS))
}

func (o *DeleteFloorRequest) GotenObjectExt() {}

func (o *DeleteFloorRequest) MakeFullFieldMask() *DeleteFloorRequest_FieldMask {
	return FullDeleteFloorRequest_FieldMask()
}

func (o *DeleteFloorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteFloorRequest_FieldMask()
}

func (o *DeleteFloorRequest) MakeDiffFieldMask(other *DeleteFloorRequest) *DeleteFloorRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteFloorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteFloorRequest_FieldMask()
	}

	res := &DeleteFloorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteFloorRequest_FieldTerminalPath{selector: DeleteFloorRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteFloorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteFloorRequest))
}

func (o *DeleteFloorRequest) Clone() *DeleteFloorRequest {
	if o == nil {
		return nil
	}
	result := &DeleteFloorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &floor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteFloorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteFloorRequest) Merge(source *DeleteFloorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &floor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteFloorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteFloorRequest))
}
