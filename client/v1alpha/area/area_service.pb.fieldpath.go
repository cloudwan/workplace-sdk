// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/area_service.proto
// DO NOT EDIT!!!

package area_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &floor.Floor{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAreaRequest_FieldPathSelector
	Get(source *GetAreaRequest) []interface{}
	GetSingle(source *GetAreaRequest) (interface{}, bool)
	ClearValue(item *GetAreaRequest)

	// Those methods build corresponding GetAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAreaRequest_FieldPathArrayItemValue
}

type GetAreaRequest_FieldPathSelector int32

const (
	GetAreaRequest_FieldPathSelectorName      GetAreaRequest_FieldPathSelector = 0
	GetAreaRequest_FieldPathSelectorFieldMask GetAreaRequest_FieldPathSelector = 1
	GetAreaRequest_FieldPathSelectorView      GetAreaRequest_FieldPathSelector = 2
)

func (s GetAreaRequest_FieldPathSelector) String() string {
	switch s {
	case GetAreaRequest_FieldPathSelectorName:
		return "name"
	case GetAreaRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAreaRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", s))
	}
}

func BuildGetAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAreaRequest_FieldTerminalPath{selector: GetAreaRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAreaRequest", fp)
}

func ParseGetAreaRequest_FieldPath(rawField string) (GetAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAreaRequest_FieldPath(fp)
}

func MustParseGetAreaRequest_FieldPath(rawField string) GetAreaRequest_FieldPath {
	fp, err := ParseGetAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAreaRequest_FieldTerminalPath struct {
	selector GetAreaRequest_FieldPathSelector
}

var _ GetAreaRequest_FieldPath = (*GetAreaRequest_FieldTerminalPath)(nil)

func (fp *GetAreaRequest_FieldTerminalPath) Selector() GetAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAreaRequest
func (fp *GetAreaRequest_FieldTerminalPath) Get(source *GetAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAreaRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAreaRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAreaRequest))
}

// GetSingle returns value pointed by specific field of from source GetAreaRequest
func (fp *GetAreaRequest_FieldTerminalPath) GetSingle(source *GetAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAreaRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAreaRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAreaRequest_FieldPathSelectorName:
		return (*area.Reference)(nil)
	case GetAreaRequest_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	case GetAreaRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAreaRequest_FieldTerminalPath) ClearValue(item *GetAreaRequest) {
	if item != nil {
		switch fp.selector {
		case GetAreaRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAreaRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAreaRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAreaRequest_FieldPathSelectorName ||
		fp.selector == GetAreaRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAreaRequest_FieldPathSelectorView
}

func (fp *GetAreaRequest_FieldTerminalPath) WithIValue(value interface{}) GetAreaRequest_FieldPathValue {
	switch fp.selector {
	case GetAreaRequest_FieldPathSelectorName:
		return &GetAreaRequest_FieldTerminalPathValue{GetAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	case GetAreaRequest_FieldPathSelectorFieldMask:
		return &GetAreaRequest_FieldTerminalPathValue{GetAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case GetAreaRequest_FieldPathSelectorView:
		return &GetAreaRequest_FieldTerminalPathValue{GetAreaRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAreaRequest_FieldPathArrayOfValues {
	fpaov := &GetAreaRequest_FieldTerminalPathArrayOfValues{GetAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAreaRequest_FieldPathSelectorName:
		return &GetAreaRequest_FieldTerminalPathArrayOfValues{GetAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	case GetAreaRequest_FieldPathSelectorFieldMask:
		return &GetAreaRequest_FieldTerminalPathArrayOfValues{GetAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case GetAreaRequest_FieldPathSelectorView:
		return &GetAreaRequest_FieldTerminalPathArrayOfValues{GetAreaRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAreaRequest_FieldPathValue allows storing values for GetAreaRequest fields according to their type
type GetAreaRequest_FieldPathValue interface {
	GetAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAreaRequest)
	CompareWith(*GetAreaRequest) (cmp int, comparable bool)
}

func ParseGetAreaRequest_FieldPathValue(pathStr, valueStr string) (GetAreaRequest_FieldPathValue, error) {
	fp, err := ParseGetAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAreaRequest_FieldPathValue), nil
}

func MustParseGetAreaRequest_FieldPathValue(pathStr, valueStr string) GetAreaRequest_FieldPathValue {
	fpv, err := ParseGetAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAreaRequest_FieldTerminalPathValue struct {
	GetAreaRequest_FieldTerminalPath
	value interface{}
}

var _ GetAreaRequest_FieldPathValue = (*GetAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAreaRequest' as interface{}
func (fpv *GetAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAreaRequest_FieldTerminalPathValue) AsNameValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}
func (fpv *GetAreaRequest_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *GetAreaRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAreaRequest
func (fpv *GetAreaRequest_FieldTerminalPathValue) SetTo(target **GetAreaRequest) {
	if *target == nil {
		*target = new(GetAreaRequest)
	}
	switch fpv.selector {
	case GetAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*area.Reference)
	case GetAreaRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	case GetAreaRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fpv.selector))
	}
}

func (fpv *GetAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAreaRequest_FieldTerminalPathValue' with the value under path in 'GetAreaRequest'.
func (fpv *GetAreaRequest_FieldTerminalPathValue) CompareWith(source *GetAreaRequest) (int, bool) {
	switch fpv.selector {
	case GetAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAreaRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAreaRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAreaRequest: %d", fpv.selector))
	}
}

func (fpv *GetAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAreaRequest))
}

// GetAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAreaRequest according to their type
// Present only for array (repeated) types.
type GetAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAreaRequest_FieldPath
	ContainsValue(*GetAreaRequest) bool
}

// ParseGetAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAreaRequest_FieldTerminalPathArrayItemValue struct {
	GetAreaRequest_FieldTerminalPath
	value interface{}
}

var _ GetAreaRequest_FieldPathArrayItemValue = (*GetAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAreaRequest as interface{}
func (fpaiv *GetAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAreaRequest'
func (fpaiv *GetAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAreaRequest) bool {
	slice := fpaiv.GetAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAreaRequest_FieldPathArrayOfValues allows storing slice of values for GetAreaRequest fields according to their type
type GetAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAreaRequest_FieldPath
}

func ParseGetAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAreaRequest_FieldTerminalPathArrayOfValues struct {
	GetAreaRequest_FieldTerminalPath
	values interface{}
}

var _ GetAreaRequest_FieldPathArrayOfValues = (*GetAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	case GetAreaRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case GetAreaRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
func (fpaov *GetAreaRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *GetAreaRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAreasRequest_FieldPathSelector
	Get(source *BatchGetAreasRequest) []interface{}
	GetSingle(source *BatchGetAreasRequest) (interface{}, bool)
	ClearValue(item *BatchGetAreasRequest)

	// Those methods build corresponding BatchGetAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAreasRequest_FieldPathArrayItemValue
}

type BatchGetAreasRequest_FieldPathSelector int32

const (
	BatchGetAreasRequest_FieldPathSelectorParent    BatchGetAreasRequest_FieldPathSelector = 0
	BatchGetAreasRequest_FieldPathSelectorNames     BatchGetAreasRequest_FieldPathSelector = 1
	BatchGetAreasRequest_FieldPathSelectorFieldMask BatchGetAreasRequest_FieldPathSelector = 2
	BatchGetAreasRequest_FieldPathSelectorView      BatchGetAreasRequest_FieldPathSelector = 3
)

func (s BatchGetAreasRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAreasRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", s))
	}
}

func BuildBatchGetAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAreasRequest_FieldTerminalPath{selector: BatchGetAreasRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAreasRequest", fp)
}

func ParseBatchGetAreasRequest_FieldPath(rawField string) (BatchGetAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAreasRequest_FieldPath(fp)
}

func MustParseBatchGetAreasRequest_FieldPath(rawField string) BatchGetAreasRequest_FieldPath {
	fp, err := ParseBatchGetAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAreasRequest_FieldTerminalPath struct {
	selector BatchGetAreasRequest_FieldPathSelector
}

var _ BatchGetAreasRequest_FieldPath = (*BatchGetAreasRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAreasRequest_FieldTerminalPath) Selector() BatchGetAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAreasRequest
func (fp *BatchGetAreasRequest_FieldTerminalPath) Get(source *BatchGetAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAreasRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetAreasRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAreasRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAreasRequest
func (fp *BatchGetAreasRequest_FieldTerminalPath) GetSingle(source *BatchGetAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetAreasRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		return (*area.Reference)(nil)
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return ([]*area.Reference)(nil)
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	case BatchGetAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) ClearValue(item *BatchGetAreasRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAreasRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetAreasRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAreasRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetAreasRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAreasRequest_FieldPathSelectorView
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAreasRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		return &BatchGetAreasRequest_FieldTerminalPathValue{BatchGetAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return &BatchGetAreasRequest_FieldTerminalPathValue{BatchGetAreasRequest_FieldTerminalPath: *fp, value: value.([]*area.Reference)}
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		return &BatchGetAreasRequest_FieldTerminalPathValue{BatchGetAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case BatchGetAreasRequest_FieldPathSelectorView:
		return &BatchGetAreasRequest_FieldTerminalPathValue{BatchGetAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAreasRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		return &BatchGetAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return &BatchGetAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAreasRequest_FieldTerminalPath: *fp, values: values.([][]*area.Reference)}
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		return &BatchGetAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case BatchGetAreasRequest_FieldPathSelectorView:
		return &BatchGetAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return &BatchGetAreasRequest_FieldTerminalPathArrayItemValue{BatchGetAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAreasRequest_FieldPathValue allows storing values for BatchGetAreasRequest fields according to their type
type BatchGetAreasRequest_FieldPathValue interface {
	BatchGetAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAreasRequest)
	CompareWith(*BatchGetAreasRequest) (cmp int, comparable bool)
}

func ParseBatchGetAreasRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAreasRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAreasRequest_FieldPathValue), nil
}

func MustParseBatchGetAreasRequest_FieldPathValue(pathStr, valueStr string) BatchGetAreasRequest_FieldPathValue {
	fpv, err := ParseBatchGetAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAreasRequest_FieldTerminalPathValue struct {
	BatchGetAreasRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAreasRequest_FieldPathValue = (*BatchGetAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAreasRequest' as interface{}
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) AsParentValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) AsNamesValue() ([]*area.Reference, bool) {
	res, ok := fpv.value.([]*area.Reference)
	return res, ok
}
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAreasRequest
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) SetTo(target **BatchGetAreasRequest) {
	if *target == nil {
		*target = new(BatchGetAreasRequest)
	}
	switch fpv.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*area.Reference)
	case BatchGetAreasRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*area.Reference)
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	case BatchGetAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAreasRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAreasRequest'.
func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAreasRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetAreasRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAreasRequest))
}

// BatchGetAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAreasRequest according to their type
// Present only for array (repeated) types.
type BatchGetAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAreasRequest_FieldPath
	ContainsValue(*BatchGetAreasRequest) bool
}

// ParseBatchGetAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAreasRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAreasRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAreasRequest_FieldPathArrayItemValue = (*BatchGetAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAreasRequest as interface{}
func (fpaiv *BatchGetAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAreasRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*area.Reference, bool) {
	res, ok := fpaiv.value.(*area.Reference)
	return res, ok
}

func (fpaiv *BatchGetAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAreasRequest'
func (fpaiv *BatchGetAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAreasRequest) bool {
	slice := fpaiv.BatchGetAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAreasRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAreasRequest fields according to their type
type BatchGetAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAreasRequest_FieldPath
}

func ParseBatchGetAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAreasRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAreasRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAreasRequest_FieldPathArrayOfValues = (*BatchGetAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAreasRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	case BatchGetAreasRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*area.Reference) {
			values = append(values, v)
		}
	case BatchGetAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAreasRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
func (fpaov *BatchGetAreasRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*area.Reference, bool) {
	res, ok := fpaov.values.([][]*area.Reference)
	return res, ok
}
func (fpaov *BatchGetAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAreasResponse_FieldPathSelector
	Get(source *BatchGetAreasResponse) []interface{}
	GetSingle(source *BatchGetAreasResponse) (interface{}, bool)
	ClearValue(item *BatchGetAreasResponse)

	// Those methods build corresponding BatchGetAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAreasResponse_FieldPathArrayItemValue
}

type BatchGetAreasResponse_FieldPathSelector int32

const (
	BatchGetAreasResponse_FieldPathSelectorAreas   BatchGetAreasResponse_FieldPathSelector = 0
	BatchGetAreasResponse_FieldPathSelectorMissing BatchGetAreasResponse_FieldPathSelector = 1
)

func (s BatchGetAreasResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return "areas"
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", s))
	}
}

func BuildBatchGetAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "areas":
			return &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorAreas}, nil
		case "missing":
			return &BatchGetAreasResponse_FieldTerminalPath{selector: BatchGetAreasResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "areas":
			if subpath, err := area.BuildArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAreasResponse_FieldSubPath{selector: BatchGetAreasResponse_FieldPathSelectorAreas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAreasResponse", fp)
}

func ParseBatchGetAreasResponse_FieldPath(rawField string) (BatchGetAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAreasResponse_FieldPath(fp)
}

func MustParseBatchGetAreasResponse_FieldPath(rawField string) BatchGetAreasResponse_FieldPath {
	fp, err := ParseBatchGetAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAreasResponse_FieldTerminalPath struct {
	selector BatchGetAreasResponse_FieldPathSelector
}

var _ BatchGetAreasResponse_FieldPath = (*BatchGetAreasResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAreasResponse_FieldTerminalPath) Selector() BatchGetAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAreasResponse
func (fp *BatchGetAreasResponse_FieldTerminalPath) Get(source *BatchGetAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAreasResponse_FieldPathSelectorAreas:
			for _, value := range source.GetAreas() {
				values = append(values, value)
			}
		case BatchGetAreasResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAreasResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAreasResponse
func (fp *BatchGetAreasResponse_FieldTerminalPath) GetSingle(source *BatchGetAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		res := source.GetAreas()
		return res, res != nil
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return ([]*area.Area)(nil)
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return ([]*area.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) ClearValue(item *BatchGetAreasResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAreasResponse_FieldPathSelectorAreas:
			item.Areas = nil
		case BatchGetAreasResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAreasResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAreasResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return &BatchGetAreasResponse_FieldTerminalPathValue{BatchGetAreasResponse_FieldTerminalPath: *fp, value: value.([]*area.Area)}
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAreasResponse_FieldTerminalPathValue{BatchGetAreasResponse_FieldTerminalPath: *fp, value: value.([]*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAreasResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return &BatchGetAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAreasResponse_FieldTerminalPath: *fp, values: values.([][]*area.Area)}
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAreasResponse_FieldTerminalPath: *fp, values: values.([][]*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return &BatchGetAreasResponse_FieldTerminalPathArrayItemValue{BatchGetAreasResponse_FieldTerminalPath: *fp, value: value.(*area.Area)}
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAreasResponse_FieldTerminalPathArrayItemValue{BatchGetAreasResponse_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAreasResponse_FieldSubPath struct {
	selector BatchGetAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAreasResponse_FieldPath = (*BatchGetAreasResponse_FieldSubPath)(nil)

func (fps *BatchGetAreasResponse_FieldSubPath) Selector() BatchGetAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAreasResponse_FieldSubPath) AsAreasSubPath() (area.Area_FieldPath, bool) {
	res, ok := fps.subPath.(area.Area_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAreasResponse
func (fps *BatchGetAreasResponse_FieldSubPath) Get(source *BatchGetAreasResponse) (values []interface{}) {
	if asAreaFieldPath, ok := fps.AsAreasSubPath(); ok {
		for _, item := range source.GetAreas() {
			values = append(values, asAreaFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAreasResponse))
}

// GetSingle returns value of selected field from source BatchGetAreasResponse
func (fps *BatchGetAreasResponse_FieldSubPath) GetSingle(source *BatchGetAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		if len(source.GetAreas()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAreas()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAreasResponse_FieldSubPath) ClearValue(item *BatchGetAreasResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAreasResponse_FieldPathSelectorAreas:
			for _, subItem := range item.Areas {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAreasResponse_FieldPathValue {
	return &BatchGetAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAreasResponse_FieldPathArrayOfValues {
	return &BatchGetAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAreasResponse_FieldPathArrayItemValue {
	return &BatchGetAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAreasResponse_FieldPathValue allows storing values for BatchGetAreasResponse fields according to their type
type BatchGetAreasResponse_FieldPathValue interface {
	BatchGetAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAreasResponse)
	CompareWith(*BatchGetAreasResponse) (cmp int, comparable bool)
}

func ParseBatchGetAreasResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAreasResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAreasResponse_FieldPathValue), nil
}

func MustParseBatchGetAreasResponse_FieldPathValue(pathStr, valueStr string) BatchGetAreasResponse_FieldPathValue {
	fpv, err := ParseBatchGetAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAreasResponse_FieldTerminalPathValue struct {
	BatchGetAreasResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAreasResponse_FieldPathValue = (*BatchGetAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAreasResponse' as interface{}
func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) AsAreasValue() ([]*area.Area, bool) {
	res, ok := fpv.value.([]*area.Area)
	return res, ok
}
func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) AsMissingValue() ([]*area.Reference, bool) {
	res, ok := fpv.value.([]*area.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAreasResponse
func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) SetTo(target **BatchGetAreasResponse) {
	if *target == nil {
		*target = new(BatchGetAreasResponse)
	}
	switch fpv.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		(*target).Areas = fpv.value.([]*area.Area)
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*area.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAreasResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAreasResponse'.
func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAreasResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return 0, false
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAreasResponse))
}

type BatchGetAreasResponse_FieldSubPathValue struct {
	BatchGetAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAreasResponse_FieldPathValue = (*BatchGetAreasResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) AsAreasPathValue() (area.Area_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(area.Area_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) SetTo(target **BatchGetAreasResponse) {
	if *target == nil {
		*target = new(BatchGetAreasResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) CompareWith(source *BatchGetAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAreasResponse))
}

// BatchGetAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAreasResponse according to their type
// Present only for array (repeated) types.
type BatchGetAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAreasResponse_FieldPath
	ContainsValue(*BatchGetAreasResponse) bool
}

// ParseBatchGetAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAreasResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAreasResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAreasResponse_FieldPathArrayItemValue = (*BatchGetAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAreasResponse as interface{}
func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) AsAreasItemValue() (*area.Area, bool) {
	res, ok := fpaiv.value.(*area.Area)
	return res, ok
}
func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*area.Reference, bool) {
	res, ok := fpaiv.value.(*area.Reference)
	return res, ok
}

func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAreasResponse'
func (fpaiv *BatchGetAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAreasResponse) bool {
	slice := fpaiv.BatchGetAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAreasResponse_FieldSubPathArrayItemValue struct {
	BatchGetAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAreasResponse_FieldSubPathArrayItemValue) AsAreasPathItemValue() (area.Area_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAreasResponse'
func (fpaivs *BatchGetAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAreasResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAreasResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAreasResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAreasResponse fields according to their type
type BatchGetAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAreasResponse_FieldPath
}

func ParseBatchGetAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAreasResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAreasResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAreasResponse_FieldPathArrayOfValues = (*BatchGetAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAreasResponse_FieldPathSelectorAreas:
		for _, v := range fpaov.values.([][]*area.Area) {
			values = append(values, v)
		}
	case BatchGetAreasResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*area.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAreasResponse_FieldTerminalPathArrayOfValues) AsAreasArrayOfValues() ([][]*area.Area, bool) {
	res, ok := fpaov.values.([][]*area.Area)
	return res, ok
}
func (fpaov *BatchGetAreasResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*area.Reference, bool) {
	res, ok := fpaov.values.([][]*area.Reference)
	return res, ok
}

type BatchGetAreasResponse_FieldSubPathArrayOfValues struct {
	BatchGetAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAreasResponse_FieldPathArrayOfValues = (*BatchGetAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAreasResponse_FieldSubPathArrayOfValues) AsAreasPathArrayOfValues() (area.Area_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(area.Area_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAreasRequest_FieldPathSelector
	Get(source *ListAreasRequest) []interface{}
	GetSingle(source *ListAreasRequest) (interface{}, bool)
	ClearValue(item *ListAreasRequest)

	// Those methods build corresponding ListAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAreasRequest_FieldPathArrayItemValue
}

type ListAreasRequest_FieldPathSelector int32

const (
	ListAreasRequest_FieldPathSelectorParent    ListAreasRequest_FieldPathSelector = 0
	ListAreasRequest_FieldPathSelectorPageSize  ListAreasRequest_FieldPathSelector = 1
	ListAreasRequest_FieldPathSelectorPageToken ListAreasRequest_FieldPathSelector = 2
	ListAreasRequest_FieldPathSelectorOrderBy   ListAreasRequest_FieldPathSelector = 3
	ListAreasRequest_FieldPathSelectorFilter    ListAreasRequest_FieldPathSelector = 4
	ListAreasRequest_FieldPathSelectorFieldMask ListAreasRequest_FieldPathSelector = 5
	ListAreasRequest_FieldPathSelectorView      ListAreasRequest_FieldPathSelector = 6
)

func (s ListAreasRequest_FieldPathSelector) String() string {
	switch s {
	case ListAreasRequest_FieldPathSelectorParent:
		return "parent"
	case ListAreasRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAreasRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAreasRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAreasRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAreasRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", s))
	}
}

func BuildListAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAreasRequest_FieldTerminalPath{selector: ListAreasRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAreasRequest", fp)
}

func ParseListAreasRequest_FieldPath(rawField string) (ListAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAreasRequest_FieldPath(fp)
}

func MustParseListAreasRequest_FieldPath(rawField string) ListAreasRequest_FieldPath {
	fp, err := ParseListAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAreasRequest_FieldTerminalPath struct {
	selector ListAreasRequest_FieldPathSelector
}

var _ ListAreasRequest_FieldPath = (*ListAreasRequest_FieldTerminalPath)(nil)

func (fp *ListAreasRequest_FieldTerminalPath) Selector() ListAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAreasRequest
func (fp *ListAreasRequest_FieldTerminalPath) Get(source *ListAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAreasRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAreasRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAreasRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAreasRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAreasRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAreasRequest))
}

// GetSingle returns value pointed by specific field of from source ListAreasRequest
func (fp *ListAreasRequest_FieldTerminalPath) GetSingle(source *ListAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAreasRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAreasRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAreasRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAreasRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		return (*area.ParentName)(nil)
	case ListAreasRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAreasRequest_FieldPathSelectorPageToken:
		return (*area.PagerCursor)(nil)
	case ListAreasRequest_FieldPathSelectorOrderBy:
		return (*area.OrderBy)(nil)
	case ListAreasRequest_FieldPathSelectorFilter:
		return (*area.Filter)(nil)
	case ListAreasRequest_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	case ListAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAreasRequest_FieldTerminalPath) ClearValue(item *ListAreasRequest) {
	if item != nil {
		switch fp.selector {
		case ListAreasRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAreasRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAreasRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAreasRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAreasRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAreasRequest_FieldPathSelectorParent ||
		fp.selector == ListAreasRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAreasRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAreasRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAreasRequest_FieldPathSelectorFilter ||
		fp.selector == ListAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAreasRequest_FieldPathSelectorView
}

func (fp *ListAreasRequest_FieldTerminalPath) WithIValue(value interface{}) ListAreasRequest_FieldPathValue {
	switch fp.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(*area.ParentName)}
	case ListAreasRequest_FieldPathSelectorPageSize:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAreasRequest_FieldPathSelectorPageToken:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	case ListAreasRequest_FieldPathSelectorOrderBy:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(*area.OrderBy)}
	case ListAreasRequest_FieldPathSelectorFilter:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Filter)}
	case ListAreasRequest_FieldPathSelectorFieldMask:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case ListAreasRequest_FieldPathSelectorView:
		return &ListAreasRequest_FieldTerminalPathValue{ListAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAreasRequest_FieldPathArrayOfValues {
	fpaov := &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.ParentName)}
	case ListAreasRequest_FieldPathSelectorPageSize:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAreasRequest_FieldPathSelectorPageToken:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	case ListAreasRequest_FieldPathSelectorOrderBy:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.OrderBy)}
	case ListAreasRequest_FieldPathSelectorFilter:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Filter)}
	case ListAreasRequest_FieldPathSelectorFieldMask:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case ListAreasRequest_FieldPathSelectorView:
		return &ListAreasRequest_FieldTerminalPathArrayOfValues{ListAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAreasRequest_FieldPathValue allows storing values for ListAreasRequest fields according to their type
type ListAreasRequest_FieldPathValue interface {
	ListAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAreasRequest)
	CompareWith(*ListAreasRequest) (cmp int, comparable bool)
}

func ParseListAreasRequest_FieldPathValue(pathStr, valueStr string) (ListAreasRequest_FieldPathValue, error) {
	fp, err := ParseListAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAreasRequest_FieldPathValue), nil
}

func MustParseListAreasRequest_FieldPathValue(pathStr, valueStr string) ListAreasRequest_FieldPathValue {
	fpv, err := ParseListAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAreasRequest_FieldTerminalPathValue struct {
	ListAreasRequest_FieldTerminalPath
	value interface{}
}

var _ ListAreasRequest_FieldPathValue = (*ListAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAreasRequest' as interface{}
func (fpv *ListAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsParentValue() (*area.ParentName, bool) {
	res, ok := fpv.value.(*area.ParentName)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsOrderByValue() (*area.OrderBy, bool) {
	res, ok := fpv.value.(*area.OrderBy)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsFilterValue() (*area.Filter, bool) {
	res, ok := fpv.value.(*area.Filter)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *ListAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAreasRequest
func (fpv *ListAreasRequest_FieldTerminalPathValue) SetTo(target **ListAreasRequest) {
	if *target == nil {
		*target = new(ListAreasRequest)
	}
	switch fpv.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*area.ParentName)
	case ListAreasRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAreasRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*area.PagerCursor)
	case ListAreasRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*area.OrderBy)
	case ListAreasRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*area.Filter)
	case ListAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	case ListAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fpv.selector))
	}
}

func (fpv *ListAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAreasRequest_FieldTerminalPathValue' with the value under path in 'ListAreasRequest'.
func (fpv *ListAreasRequest_FieldTerminalPathValue) CompareWith(source *ListAreasRequest) (int, bool) {
	switch fpv.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*area.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAreasRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAreasRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAreasRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAreasRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasRequest: %d", fpv.selector))
	}
}

func (fpv *ListAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAreasRequest))
}

// ListAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAreasRequest according to their type
// Present only for array (repeated) types.
type ListAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAreasRequest_FieldPath
	ContainsValue(*ListAreasRequest) bool
}

// ParseListAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseListAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAreasRequest_FieldTerminalPathArrayItemValue struct {
	ListAreasRequest_FieldTerminalPath
	value interface{}
}

var _ ListAreasRequest_FieldPathArrayItemValue = (*ListAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAreasRequest as interface{}
func (fpaiv *ListAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAreasRequest'
func (fpaiv *ListAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAreasRequest) bool {
	slice := fpaiv.ListAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAreasRequest_FieldPathArrayOfValues allows storing slice of values for ListAreasRequest fields according to their type
type ListAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAreasRequest_FieldPath
}

func ParseListAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseListAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAreasRequest_FieldTerminalPathArrayOfValues struct {
	ListAreasRequest_FieldTerminalPath
	values interface{}
}

var _ ListAreasRequest_FieldPathArrayOfValues = (*ListAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAreasRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*area.ParentName) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*area.OrderBy) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*area.Filter) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case ListAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*area.ParentName, bool) {
	res, ok := fpaov.values.([]*area.ParentName)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*area.OrderBy, bool) {
	res, ok := fpaov.values.([]*area.OrderBy)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*area.Filter, bool) {
	res, ok := fpaov.values.([]*area.Filter)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *ListAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAreasResponse_FieldPathSelector
	Get(source *ListAreasResponse) []interface{}
	GetSingle(source *ListAreasResponse) (interface{}, bool)
	ClearValue(item *ListAreasResponse)

	// Those methods build corresponding ListAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAreasResponse_FieldPathArrayItemValue
}

type ListAreasResponse_FieldPathSelector int32

const (
	ListAreasResponse_FieldPathSelectorAreas         ListAreasResponse_FieldPathSelector = 0
	ListAreasResponse_FieldPathSelectorPrevPageToken ListAreasResponse_FieldPathSelector = 1
	ListAreasResponse_FieldPathSelectorNextPageToken ListAreasResponse_FieldPathSelector = 2
)

func (s ListAreasResponse_FieldPathSelector) String() string {
	switch s {
	case ListAreasResponse_FieldPathSelectorAreas:
		return "areas"
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", s))
	}
}

func BuildListAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "areas":
			return &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorAreas}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAreasResponse_FieldTerminalPath{selector: ListAreasResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "areas":
			if subpath, err := area.BuildArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAreasResponse_FieldSubPath{selector: ListAreasResponse_FieldPathSelectorAreas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAreasResponse", fp)
}

func ParseListAreasResponse_FieldPath(rawField string) (ListAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAreasResponse_FieldPath(fp)
}

func MustParseListAreasResponse_FieldPath(rawField string) ListAreasResponse_FieldPath {
	fp, err := ParseListAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAreasResponse_FieldTerminalPath struct {
	selector ListAreasResponse_FieldPathSelector
}

var _ ListAreasResponse_FieldPath = (*ListAreasResponse_FieldTerminalPath)(nil)

func (fp *ListAreasResponse_FieldTerminalPath) Selector() ListAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAreasResponse
func (fp *ListAreasResponse_FieldTerminalPath) Get(source *ListAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAreasResponse_FieldPathSelectorAreas:
			for _, value := range source.GetAreas() {
				values = append(values, value)
			}
		case ListAreasResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAreasResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAreasResponse))
}

// GetSingle returns value pointed by specific field of from source ListAreasResponse
func (fp *ListAreasResponse_FieldTerminalPath) GetSingle(source *ListAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		res := source.GetAreas()
		return res, res != nil
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		return ([]*area.Area)(nil)
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		return (*area.PagerCursor)(nil)
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		return (*area.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAreasResponse_FieldTerminalPath) ClearValue(item *ListAreasResponse) {
	if item != nil {
		switch fp.selector {
		case ListAreasResponse_FieldPathSelectorAreas:
			item.Areas = nil
		case ListAreasResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAreasResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAreasResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAreasResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAreasResponse_FieldTerminalPath) WithIValue(value interface{}) ListAreasResponse_FieldPathValue {
	switch fp.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		return &ListAreasResponse_FieldTerminalPathValue{ListAreasResponse_FieldTerminalPath: *fp, value: value.([]*area.Area)}
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		return &ListAreasResponse_FieldTerminalPathValue{ListAreasResponse_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		return &ListAreasResponse_FieldTerminalPathValue{ListAreasResponse_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAreasResponse_FieldPathArrayOfValues {
	fpaov := &ListAreasResponse_FieldTerminalPathArrayOfValues{ListAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		return &ListAreasResponse_FieldTerminalPathArrayOfValues{ListAreasResponse_FieldTerminalPath: *fp, values: values.([][]*area.Area)}
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		return &ListAreasResponse_FieldTerminalPathArrayOfValues{ListAreasResponse_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		return &ListAreasResponse_FieldTerminalPathArrayOfValues{ListAreasResponse_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		return &ListAreasResponse_FieldTerminalPathArrayItemValue{ListAreasResponse_FieldTerminalPath: *fp, value: value.(*area.Area)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAreasResponse_FieldSubPath struct {
	selector ListAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAreasResponse_FieldPath = (*ListAreasResponse_FieldSubPath)(nil)

func (fps *ListAreasResponse_FieldSubPath) Selector() ListAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAreasResponse_FieldSubPath) AsAreasSubPath() (area.Area_FieldPath, bool) {
	res, ok := fps.subPath.(area.Area_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAreasResponse
func (fps *ListAreasResponse_FieldSubPath) Get(source *ListAreasResponse) (values []interface{}) {
	if asAreaFieldPath, ok := fps.AsAreasSubPath(); ok {
		for _, item := range source.GetAreas() {
			values = append(values, asAreaFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAreasResponse))
}

// GetSingle returns value of selected field from source ListAreasResponse
func (fps *ListAreasResponse_FieldSubPath) GetSingle(source *ListAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		if len(source.GetAreas()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAreas()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fps.selector))
	}
}

func (fps *ListAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAreasResponse_FieldSubPath) ClearValue(item *ListAreasResponse) {
	if item != nil {
		switch fps.selector {
		case ListAreasResponse_FieldPathSelectorAreas:
			for _, subItem := range item.Areas {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAreasResponse_FieldSubPath) WithIValue(value interface{}) ListAreasResponse_FieldPathValue {
	return &ListAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAreasResponse_FieldPathArrayOfValues {
	return &ListAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAreasResponse_FieldPathArrayItemValue {
	return &ListAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAreasResponse_FieldPathValue allows storing values for ListAreasResponse fields according to their type
type ListAreasResponse_FieldPathValue interface {
	ListAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAreasResponse)
	CompareWith(*ListAreasResponse) (cmp int, comparable bool)
}

func ParseListAreasResponse_FieldPathValue(pathStr, valueStr string) (ListAreasResponse_FieldPathValue, error) {
	fp, err := ParseListAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAreasResponse_FieldPathValue), nil
}

func MustParseListAreasResponse_FieldPathValue(pathStr, valueStr string) ListAreasResponse_FieldPathValue {
	fpv, err := ParseListAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAreasResponse_FieldTerminalPathValue struct {
	ListAreasResponse_FieldTerminalPath
	value interface{}
}

var _ ListAreasResponse_FieldPathValue = (*ListAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAreasResponse' as interface{}
func (fpv *ListAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAreasResponse_FieldTerminalPathValue) AsAreasValue() ([]*area.Area, bool) {
	res, ok := fpv.value.([]*area.Area)
	return res, ok
}
func (fpv *ListAreasResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}
func (fpv *ListAreasResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAreasResponse
func (fpv *ListAreasResponse_FieldTerminalPathValue) SetTo(target **ListAreasResponse) {
	if *target == nil {
		*target = new(ListAreasResponse)
	}
	switch fpv.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		(*target).Areas = fpv.value.([]*area.Area)
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*area.PagerCursor)
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*area.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fpv.selector))
	}
}

func (fpv *ListAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAreasResponse_FieldTerminalPathValue' with the value under path in 'ListAreasResponse'.
func (fpv *ListAreasResponse_FieldTerminalPathValue) CompareWith(source *ListAreasResponse) (int, bool) {
	switch fpv.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		return 0, false
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fpv.selector))
	}
}

func (fpv *ListAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAreasResponse))
}

type ListAreasResponse_FieldSubPathValue struct {
	ListAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAreasResponse_FieldPathValue = (*ListAreasResponse_FieldSubPathValue)(nil)

func (fpvs *ListAreasResponse_FieldSubPathValue) AsAreasPathValue() (area.Area_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(area.Area_FieldPathValue)
	return res, ok
}

func (fpvs *ListAreasResponse_FieldSubPathValue) SetTo(target **ListAreasResponse) {
	if *target == nil {
		*target = new(ListAreasResponse)
	}
	switch fpvs.Selector() {
	case ListAreasResponse_FieldPathSelectorAreas:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAreasResponse_FieldSubPathValue) CompareWith(source *ListAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAreasResponse_FieldPathSelectorAreas:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAreasResponse))
}

// ListAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAreasResponse according to their type
// Present only for array (repeated) types.
type ListAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAreasResponse_FieldPath
	ContainsValue(*ListAreasResponse) bool
}

// ParseListAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseListAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAreasResponse_FieldTerminalPathArrayItemValue struct {
	ListAreasResponse_FieldTerminalPath
	value interface{}
}

var _ ListAreasResponse_FieldPathArrayItemValue = (*ListAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAreasResponse as interface{}
func (fpaiv *ListAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAreasResponse_FieldTerminalPathArrayItemValue) AsAreasItemValue() (*area.Area, bool) {
	res, ok := fpaiv.value.(*area.Area)
	return res, ok
}

func (fpaiv *ListAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAreasResponse'
func (fpaiv *ListAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAreasResponse) bool {
	slice := fpaiv.ListAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAreasResponse_FieldSubPathArrayItemValue struct {
	ListAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAreasResponse_FieldSubPathArrayItemValue) AsAreasPathItemValue() (area.Area_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAreasResponse'
func (fpaivs *ListAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAreasResponse) bool {
	switch fpaivs.Selector() {
	case ListAreasResponse_FieldPathSelectorAreas:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAreasResponse: %d", fpaivs.Selector()))
	}
}

// ListAreasResponse_FieldPathArrayOfValues allows storing slice of values for ListAreasResponse fields according to their type
type ListAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAreasResponse_FieldPath
}

func ParseListAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseListAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAreasResponse_FieldTerminalPathArrayOfValues struct {
	ListAreasResponse_FieldTerminalPath
	values interface{}
}

var _ ListAreasResponse_FieldPathArrayOfValues = (*ListAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAreasResponse_FieldPathSelectorAreas:
		for _, v := range fpaov.values.([][]*area.Area) {
			values = append(values, v)
		}
	case ListAreasResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	case ListAreasResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAreasResponse_FieldTerminalPathArrayOfValues) AsAreasArrayOfValues() ([][]*area.Area, bool) {
	res, ok := fpaov.values.([][]*area.Area)
	return res, ok
}
func (fpaov *ListAreasResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}
func (fpaov *ListAreasResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}

type ListAreasResponse_FieldSubPathArrayOfValues struct {
	ListAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAreasResponse_FieldPathArrayOfValues = (*ListAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAreasResponse_FieldSubPathArrayOfValues) AsAreasPathArrayOfValues() (area.Area_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(area.Area_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAreaRequest_FieldPathSelector
	Get(source *WatchAreaRequest) []interface{}
	GetSingle(source *WatchAreaRequest) (interface{}, bool)
	ClearValue(item *WatchAreaRequest)

	// Those methods build corresponding WatchAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAreaRequest_FieldPathArrayItemValue
}

type WatchAreaRequest_FieldPathSelector int32

const (
	WatchAreaRequest_FieldPathSelectorName      WatchAreaRequest_FieldPathSelector = 0
	WatchAreaRequest_FieldPathSelectorFieldMask WatchAreaRequest_FieldPathSelector = 1
	WatchAreaRequest_FieldPathSelectorView      WatchAreaRequest_FieldPathSelector = 2
)

func (s WatchAreaRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAreaRequest_FieldPathSelectorName:
		return "name"
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAreaRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", s))
	}
}

func BuildWatchAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAreaRequest_FieldTerminalPath{selector: WatchAreaRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAreaRequest", fp)
}

func ParseWatchAreaRequest_FieldPath(rawField string) (WatchAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAreaRequest_FieldPath(fp)
}

func MustParseWatchAreaRequest_FieldPath(rawField string) WatchAreaRequest_FieldPath {
	fp, err := ParseWatchAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAreaRequest_FieldTerminalPath struct {
	selector WatchAreaRequest_FieldPathSelector
}

var _ WatchAreaRequest_FieldPath = (*WatchAreaRequest_FieldTerminalPath)(nil)

func (fp *WatchAreaRequest_FieldTerminalPath) Selector() WatchAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAreaRequest
func (fp *WatchAreaRequest_FieldTerminalPath) Get(source *WatchAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAreaRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAreaRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAreaRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAreaRequest
func (fp *WatchAreaRequest_FieldTerminalPath) GetSingle(source *WatchAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAreaRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		return (*area.Reference)(nil)
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	case WatchAreaRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAreaRequest_FieldTerminalPath) ClearValue(item *WatchAreaRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAreaRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAreaRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAreaRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAreaRequest_FieldPathSelectorName ||
		fp.selector == WatchAreaRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAreaRequest_FieldPathSelectorView
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAreaRequest_FieldPathValue {
	switch fp.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		return &WatchAreaRequest_FieldTerminalPathValue{WatchAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		return &WatchAreaRequest_FieldTerminalPathValue{WatchAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case WatchAreaRequest_FieldPathSelectorView:
		return &WatchAreaRequest_FieldTerminalPathValue{WatchAreaRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAreaRequest_FieldPathArrayOfValues {
	fpaov := &WatchAreaRequest_FieldTerminalPathArrayOfValues{WatchAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		return &WatchAreaRequest_FieldTerminalPathArrayOfValues{WatchAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		return &WatchAreaRequest_FieldTerminalPathArrayOfValues{WatchAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case WatchAreaRequest_FieldPathSelectorView:
		return &WatchAreaRequest_FieldTerminalPathArrayOfValues{WatchAreaRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAreaRequest_FieldPathValue allows storing values for WatchAreaRequest fields according to their type
type WatchAreaRequest_FieldPathValue interface {
	WatchAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAreaRequest)
	CompareWith(*WatchAreaRequest) (cmp int, comparable bool)
}

func ParseWatchAreaRequest_FieldPathValue(pathStr, valueStr string) (WatchAreaRequest_FieldPathValue, error) {
	fp, err := ParseWatchAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAreaRequest_FieldPathValue), nil
}

func MustParseWatchAreaRequest_FieldPathValue(pathStr, valueStr string) WatchAreaRequest_FieldPathValue {
	fpv, err := ParseWatchAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAreaRequest_FieldTerminalPathValue struct {
	WatchAreaRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAreaRequest_FieldPathValue = (*WatchAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAreaRequest' as interface{}
func (fpv *WatchAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAreaRequest_FieldTerminalPathValue) AsNameValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}
func (fpv *WatchAreaRequest_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *WatchAreaRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAreaRequest
func (fpv *WatchAreaRequest_FieldTerminalPathValue) SetTo(target **WatchAreaRequest) {
	if *target == nil {
		*target = new(WatchAreaRequest)
	}
	switch fpv.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*area.Reference)
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	case WatchAreaRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAreaRequest_FieldTerminalPathValue' with the value under path in 'WatchAreaRequest'.
func (fpv *WatchAreaRequest_FieldTerminalPathValue) CompareWith(source *WatchAreaRequest) (int, bool) {
	switch fpv.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAreaRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAreaRequest))
}

// WatchAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAreaRequest according to their type
// Present only for array (repeated) types.
type WatchAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAreaRequest_FieldPath
	ContainsValue(*WatchAreaRequest) bool
}

// ParseWatchAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAreaRequest_FieldTerminalPathArrayItemValue struct {
	WatchAreaRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAreaRequest_FieldPathArrayItemValue = (*WatchAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAreaRequest as interface{}
func (fpaiv *WatchAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAreaRequest'
func (fpaiv *WatchAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAreaRequest) bool {
	slice := fpaiv.WatchAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAreaRequest_FieldPathArrayOfValues allows storing slice of values for WatchAreaRequest fields according to their type
type WatchAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAreaRequest_FieldPath
}

func ParseWatchAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAreaRequest_FieldTerminalPathArrayOfValues struct {
	WatchAreaRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAreaRequest_FieldPathArrayOfValues = (*WatchAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	case WatchAreaRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case WatchAreaRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
func (fpaov *WatchAreaRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *WatchAreaRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAreaResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAreaResponse_FieldPathSelector
	Get(source *WatchAreaResponse) []interface{}
	GetSingle(source *WatchAreaResponse) (interface{}, bool)
	ClearValue(item *WatchAreaResponse)

	// Those methods build corresponding WatchAreaResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAreaResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAreaResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAreaResponse_FieldPathArrayItemValue
}

type WatchAreaResponse_FieldPathSelector int32

const (
	WatchAreaResponse_FieldPathSelectorChange WatchAreaResponse_FieldPathSelector = 0
)

func (s WatchAreaResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAreaResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", s))
	}
}

func BuildWatchAreaResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAreaResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAreaResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAreaResponse_FieldTerminalPath{selector: WatchAreaResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAreaResponse", fp)
}

func ParseWatchAreaResponse_FieldPath(rawField string) (WatchAreaResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAreaResponse_FieldPath(fp)
}

func MustParseWatchAreaResponse_FieldPath(rawField string) WatchAreaResponse_FieldPath {
	fp, err := ParseWatchAreaResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAreaResponse_FieldTerminalPath struct {
	selector WatchAreaResponse_FieldPathSelector
}

var _ WatchAreaResponse_FieldPath = (*WatchAreaResponse_FieldTerminalPath)(nil)

func (fp *WatchAreaResponse_FieldTerminalPath) Selector() WatchAreaResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAreaResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAreaResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAreaResponse
func (fp *WatchAreaResponse_FieldTerminalPath) Get(source *WatchAreaResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAreaResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAreaResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAreaResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAreaResponse
func (fp *WatchAreaResponse_FieldTerminalPath) GetSingle(source *WatchAreaResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAreaResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAreaResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAreaResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		return (*area.AreaChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAreaResponse_FieldTerminalPath) ClearValue(item *WatchAreaResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAreaResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAreaResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAreaResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAreaResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAreaResponse_FieldPathSelectorChange
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAreaResponse_FieldPathValue {
	switch fp.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		return &WatchAreaResponse_FieldTerminalPathValue{WatchAreaResponse_FieldTerminalPath: *fp, value: value.(*area.AreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAreaResponse_FieldPathArrayOfValues {
	fpaov := &WatchAreaResponse_FieldTerminalPathArrayOfValues{WatchAreaResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		return &WatchAreaResponse_FieldTerminalPathArrayOfValues{WatchAreaResponse_FieldTerminalPath: *fp, values: values.([]*area.AreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAreaResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAreaResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAreaResponse_FieldPathValue allows storing values for WatchAreaResponse fields according to their type
type WatchAreaResponse_FieldPathValue interface {
	WatchAreaResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAreaResponse)
	CompareWith(*WatchAreaResponse) (cmp int, comparable bool)
}

func ParseWatchAreaResponse_FieldPathValue(pathStr, valueStr string) (WatchAreaResponse_FieldPathValue, error) {
	fp, err := ParseWatchAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAreaResponse_FieldPathValue), nil
}

func MustParseWatchAreaResponse_FieldPathValue(pathStr, valueStr string) WatchAreaResponse_FieldPathValue {
	fpv, err := ParseWatchAreaResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAreaResponse_FieldTerminalPathValue struct {
	WatchAreaResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAreaResponse_FieldPathValue = (*WatchAreaResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAreaResponse' as interface{}
func (fpv *WatchAreaResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAreaResponse_FieldTerminalPathValue) AsChangeValue() (*area.AreaChange, bool) {
	res, ok := fpv.value.(*area.AreaChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAreaResponse
func (fpv *WatchAreaResponse_FieldTerminalPathValue) SetTo(target **WatchAreaResponse) {
	if *target == nil {
		*target = new(WatchAreaResponse)
	}
	switch fpv.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*area.AreaChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAreaResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreaResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAreaResponse_FieldTerminalPathValue' with the value under path in 'WatchAreaResponse'.
func (fpv *WatchAreaResponse_FieldTerminalPathValue) CompareWith(source *WatchAreaResponse) (int, bool) {
	switch fpv.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreaResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAreaResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAreaResponse))
}

// WatchAreaResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAreaResponse according to their type
// Present only for array (repeated) types.
type WatchAreaResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAreaResponse_FieldPath
	ContainsValue(*WatchAreaResponse) bool
}

// ParseWatchAreaResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAreaResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAreaResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAreaResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAreaResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAreaResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAreaResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAreaResponse_FieldTerminalPathArrayItemValue struct {
	WatchAreaResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAreaResponse_FieldPathArrayItemValue = (*WatchAreaResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAreaResponse as interface{}
func (fpaiv *WatchAreaResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAreaResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAreaResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAreaResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAreaResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAreaResponse'
func (fpaiv *WatchAreaResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAreaResponse) bool {
	slice := fpaiv.WatchAreaResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAreaResponse_FieldPathArrayOfValues allows storing slice of values for WatchAreaResponse fields according to their type
type WatchAreaResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAreaResponse_FieldPath
}

func ParseWatchAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAreaResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreaResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAreaResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAreaResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAreaResponse_FieldTerminalPathArrayOfValues struct {
	WatchAreaResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAreaResponse_FieldPathArrayOfValues = (*WatchAreaResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAreaResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAreaResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*area.AreaChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAreaResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*area.AreaChange, bool) {
	res, ok := fpaov.values.([]*area.AreaChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAreasRequest_FieldPathSelector
	Get(source *WatchAreasRequest) []interface{}
	GetSingle(source *WatchAreasRequest) (interface{}, bool)
	ClearValue(item *WatchAreasRequest)

	// Those methods build corresponding WatchAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAreasRequest_FieldPathArrayItemValue
}

type WatchAreasRequest_FieldPathSelector int32

const (
	WatchAreasRequest_FieldPathSelectorType         WatchAreasRequest_FieldPathSelector = 0
	WatchAreasRequest_FieldPathSelectorParent       WatchAreasRequest_FieldPathSelector = 1
	WatchAreasRequest_FieldPathSelectorPageSize     WatchAreasRequest_FieldPathSelector = 2
	WatchAreasRequest_FieldPathSelectorPageToken    WatchAreasRequest_FieldPathSelector = 3
	WatchAreasRequest_FieldPathSelectorOrderBy      WatchAreasRequest_FieldPathSelector = 4
	WatchAreasRequest_FieldPathSelectorResumeToken  WatchAreasRequest_FieldPathSelector = 5
	WatchAreasRequest_FieldPathSelectorFilter       WatchAreasRequest_FieldPathSelector = 6
	WatchAreasRequest_FieldPathSelectorFieldMask    WatchAreasRequest_FieldPathSelector = 7
	WatchAreasRequest_FieldPathSelectorView         WatchAreasRequest_FieldPathSelector = 8
	WatchAreasRequest_FieldPathSelectorMaxChunkSize WatchAreasRequest_FieldPathSelector = 9
)

func (s WatchAreasRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAreasRequest_FieldPathSelectorType:
		return "type"
	case WatchAreasRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAreasRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAreasRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAreasRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAreasRequest_FieldPathSelectorView:
		return "view"
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", s))
	}
}

func BuildWatchAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAreasRequest_FieldTerminalPath{selector: WatchAreasRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAreasRequest", fp)
}

func ParseWatchAreasRequest_FieldPath(rawField string) (WatchAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAreasRequest_FieldPath(fp)
}

func MustParseWatchAreasRequest_FieldPath(rawField string) WatchAreasRequest_FieldPath {
	fp, err := ParseWatchAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAreasRequest_FieldTerminalPath struct {
	selector WatchAreasRequest_FieldPathSelector
}

var _ WatchAreasRequest_FieldPath = (*WatchAreasRequest_FieldTerminalPath)(nil)

func (fp *WatchAreasRequest_FieldTerminalPath) Selector() WatchAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAreasRequest
func (fp *WatchAreasRequest_FieldTerminalPath) Get(source *WatchAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAreasRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAreasRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAreasRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAreasRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAreasRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAreasRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAreasRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAreasRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAreasRequest
func (fp *WatchAreasRequest_FieldTerminalPath) GetSingle(source *WatchAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAreasRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAreasRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAreasRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAreasRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAreasRequest_FieldPathSelectorParent:
		return (*area.ParentReference)(nil)
	case WatchAreasRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAreasRequest_FieldPathSelectorPageToken:
		return (*area.PagerCursor)(nil)
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		return (*area.OrderBy)(nil)
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAreasRequest_FieldPathSelectorFilter:
		return (*area.Filter)(nil)
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	case WatchAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAreasRequest_FieldTerminalPath) ClearValue(item *WatchAreasRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAreasRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAreasRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAreasRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAreasRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAreasRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAreasRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAreasRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAreasRequest_FieldPathSelectorType ||
		fp.selector == WatchAreasRequest_FieldPathSelectorParent ||
		fp.selector == WatchAreasRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAreasRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAreasRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAreasRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAreasRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAreasRequest_FieldPathSelectorView ||
		fp.selector == WatchAreasRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAreasRequest_FieldPathValue {
	switch fp.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAreasRequest_FieldPathSelectorParent:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(*area.ParentReference)}
	case WatchAreasRequest_FieldPathSelectorPageSize:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAreasRequest_FieldPathSelectorPageToken:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(*area.OrderBy)}
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAreasRequest_FieldPathSelectorFilter:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Filter)}
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case WatchAreasRequest_FieldPathSelectorView:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAreasRequest_FieldTerminalPathValue{WatchAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAreasRequest_FieldPathArrayOfValues {
	fpaov := &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAreasRequest_FieldPathSelectorParent:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.ParentReference)}
	case WatchAreasRequest_FieldPathSelectorPageSize:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAreasRequest_FieldPathSelectorPageToken:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.OrderBy)}
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAreasRequest_FieldPathSelectorFilter:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Filter)}
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case WatchAreasRequest_FieldPathSelectorView:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAreasRequest_FieldTerminalPathArrayOfValues{WatchAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAreasRequest_FieldPathValue allows storing values for WatchAreasRequest fields according to their type
type WatchAreasRequest_FieldPathValue interface {
	WatchAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAreasRequest)
	CompareWith(*WatchAreasRequest) (cmp int, comparable bool)
}

func ParseWatchAreasRequest_FieldPathValue(pathStr, valueStr string) (WatchAreasRequest_FieldPathValue, error) {
	fp, err := ParseWatchAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAreasRequest_FieldPathValue), nil
}

func MustParseWatchAreasRequest_FieldPathValue(pathStr, valueStr string) WatchAreasRequest_FieldPathValue {
	fpv, err := ParseWatchAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAreasRequest_FieldTerminalPathValue struct {
	WatchAreasRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAreasRequest_FieldPathValue = (*WatchAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAreasRequest' as interface{}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsParentValue() (*area.ParentReference, bool) {
	res, ok := fpv.value.(*area.ParentReference)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsOrderByValue() (*area.OrderBy, bool) {
	res, ok := fpv.value.(*area.OrderBy)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsFilterValue() (*area.Filter, bool) {
	res, ok := fpv.value.(*area.Filter)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAreasRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAreasRequest
func (fpv *WatchAreasRequest_FieldTerminalPathValue) SetTo(target **WatchAreasRequest) {
	if *target == nil {
		*target = new(WatchAreasRequest)
	}
	switch fpv.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAreasRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*area.ParentReference)
	case WatchAreasRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAreasRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*area.PagerCursor)
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*area.OrderBy)
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAreasRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*area.Filter)
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	case WatchAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAreasRequest_FieldTerminalPathValue' with the value under path in 'WatchAreasRequest'.
func (fpv *WatchAreasRequest_FieldTerminalPathValue) CompareWith(source *WatchAreasRequest) (int, bool) {
	switch fpv.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*area.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAreasRequest))
}

// WatchAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAreasRequest according to their type
// Present only for array (repeated) types.
type WatchAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAreasRequest_FieldPath
	ContainsValue(*WatchAreasRequest) bool
}

// ParseWatchAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAreasRequest_FieldTerminalPathArrayItemValue struct {
	WatchAreasRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAreasRequest_FieldPathArrayItemValue = (*WatchAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAreasRequest as interface{}
func (fpaiv *WatchAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAreasRequest'
func (fpaiv *WatchAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAreasRequest) bool {
	slice := fpaiv.WatchAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAreasRequest_FieldPathArrayOfValues allows storing slice of values for WatchAreasRequest fields according to their type
type WatchAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAreasRequest_FieldPath
}

func ParseWatchAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAreasRequest_FieldTerminalPathArrayOfValues struct {
	WatchAreasRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAreasRequest_FieldPathArrayOfValues = (*WatchAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAreasRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*area.ParentReference) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*area.OrderBy) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*area.Filter) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAreasRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*area.ParentReference, bool) {
	res, ok := fpaov.values.([]*area.ParentReference)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*area.OrderBy, bool) {
	res, ok := fpaov.values.([]*area.OrderBy)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*area.Filter, bool) {
	res, ok := fpaov.values.([]*area.Filter)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAreasRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAreasResponse_FieldPathSelector
	Get(source *WatchAreasResponse) []interface{}
	GetSingle(source *WatchAreasResponse) (interface{}, bool)
	ClearValue(item *WatchAreasResponse)

	// Those methods build corresponding WatchAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAreasResponse_FieldPathArrayItemValue
}

type WatchAreasResponse_FieldPathSelector int32

const (
	WatchAreasResponse_FieldPathSelectorAreaChanges     WatchAreasResponse_FieldPathSelector = 0
	WatchAreasResponse_FieldPathSelectorIsCurrent       WatchAreasResponse_FieldPathSelector = 1
	WatchAreasResponse_FieldPathSelectorPageTokenChange WatchAreasResponse_FieldPathSelector = 2
	WatchAreasResponse_FieldPathSelectorResumeToken     WatchAreasResponse_FieldPathSelector = 3
	WatchAreasResponse_FieldPathSelectorSnapshotSize    WatchAreasResponse_FieldPathSelector = 4
	WatchAreasResponse_FieldPathSelectorIsSoftReset     WatchAreasResponse_FieldPathSelector = 5
	WatchAreasResponse_FieldPathSelectorIsHardReset     WatchAreasResponse_FieldPathSelector = 6
)

func (s WatchAreasResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return "area_changes"
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", s))
	}
}

func BuildWatchAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "area_changes", "areaChanges", "area-changes":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorAreaChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAreasResponse_FieldTerminalPath{selector: WatchAreasResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAreasResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAreasResponse_FieldSubPath{selector: WatchAreasResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAreasResponse", fp)
}

func ParseWatchAreasResponse_FieldPath(rawField string) (WatchAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAreasResponse_FieldPath(fp)
}

func MustParseWatchAreasResponse_FieldPath(rawField string) WatchAreasResponse_FieldPath {
	fp, err := ParseWatchAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAreasResponse_FieldTerminalPath struct {
	selector WatchAreasResponse_FieldPathSelector
}

var _ WatchAreasResponse_FieldPath = (*WatchAreasResponse_FieldTerminalPath)(nil)

func (fp *WatchAreasResponse_FieldTerminalPath) Selector() WatchAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAreasResponse
func (fp *WatchAreasResponse_FieldTerminalPath) Get(source *WatchAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAreasResponse_FieldPathSelectorAreaChanges:
			for _, value := range source.GetAreaChanges() {
				values = append(values, value)
			}
		case WatchAreasResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAreasResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAreasResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAreasResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAreasResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAreasResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAreasResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAreasResponse
func (fp *WatchAreasResponse_FieldTerminalPath) GetSingle(source *WatchAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		res := source.GetAreaChanges()
		return res, res != nil
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return ([]*area.AreaChange)(nil)
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAreasResponse_PageTokenChange)(nil)
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAreasResponse_FieldTerminalPath) ClearValue(item *WatchAreasResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAreasResponse_FieldPathSelectorAreaChanges:
			item.AreaChanges = nil
		case WatchAreasResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAreasResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAreasResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAreasResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAreasResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAreasResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAreasResponse_FieldPathSelectorAreaChanges ||
		fp.selector == WatchAreasResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAreasResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAreasResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAreasResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAreasResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAreasResponse_FieldPathValue {
	switch fp.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.([]*area.AreaChange)}
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(*WatchAreasResponse_PageTokenChange)}
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		return &WatchAreasResponse_FieldTerminalPathValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAreasResponse_FieldPathArrayOfValues {
	fpaov := &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([][]*area.AreaChange)}
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]*WatchAreasResponse_PageTokenChange)}
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		return &WatchAreasResponse_FieldTerminalPathArrayOfValues{WatchAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return &WatchAreasResponse_FieldTerminalPathArrayItemValue{WatchAreasResponse_FieldTerminalPath: *fp, value: value.(*area.AreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAreasResponse_FieldSubPath struct {
	selector WatchAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAreasResponse_FieldPath = (*WatchAreasResponse_FieldSubPath)(nil)

func (fps *WatchAreasResponse_FieldSubPath) Selector() WatchAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAreasResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAreasResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAreasResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAreasResponse
func (fps *WatchAreasResponse_FieldSubPath) Get(source *WatchAreasResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAreasResponse))
}

// GetSingle returns value of selected field from source WatchAreasResponse
func (fps *WatchAreasResponse_FieldSubPath) GetSingle(source *WatchAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fps.selector))
	}
}

func (fps *WatchAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAreasResponse_FieldSubPath) ClearValue(item *WatchAreasResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAreasResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAreasResponse_FieldSubPath) WithIValue(value interface{}) WatchAreasResponse_FieldPathValue {
	return &WatchAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAreasResponse_FieldPathArrayOfValues {
	return &WatchAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAreasResponse_FieldPathArrayItemValue {
	return &WatchAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAreasResponse_FieldPathValue allows storing values for WatchAreasResponse fields according to their type
type WatchAreasResponse_FieldPathValue interface {
	WatchAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAreasResponse)
	CompareWith(*WatchAreasResponse) (cmp int, comparable bool)
}

func ParseWatchAreasResponse_FieldPathValue(pathStr, valueStr string) (WatchAreasResponse_FieldPathValue, error) {
	fp, err := ParseWatchAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAreasResponse_FieldPathValue), nil
}

func MustParseWatchAreasResponse_FieldPathValue(pathStr, valueStr string) WatchAreasResponse_FieldPathValue {
	fpv, err := ParseWatchAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAreasResponse_FieldTerminalPathValue struct {
	WatchAreasResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAreasResponse_FieldPathValue = (*WatchAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAreasResponse' as interface{}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsAreaChangesValue() ([]*area.AreaChange, bool) {
	res, ok := fpv.value.([]*area.AreaChange)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAreasResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAreasResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAreasResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAreasResponse
func (fpv *WatchAreasResponse_FieldTerminalPathValue) SetTo(target **WatchAreasResponse) {
	if *target == nil {
		*target = new(WatchAreasResponse)
	}
	switch fpv.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		(*target).AreaChanges = fpv.value.([]*area.AreaChange)
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAreasResponse_PageTokenChange)
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAreasResponse_FieldTerminalPathValue' with the value under path in 'WatchAreasResponse'.
func (fpv *WatchAreasResponse_FieldTerminalPathValue) CompareWith(source *WatchAreasResponse) (int, bool) {
	switch fpv.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		return 0, false
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAreasResponse))
}

type WatchAreasResponse_FieldSubPathValue struct {
	WatchAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAreasResponse_FieldPathValue = (*WatchAreasResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAreasResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAreasResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAreasResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAreasResponse_FieldSubPathValue) SetTo(target **WatchAreasResponse) {
	if *target == nil {
		*target = new(WatchAreasResponse)
	}
	switch fpvs.Selector() {
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAreasResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAreasResponse_FieldSubPathValue) CompareWith(source *WatchAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAreasResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAreasResponse))
}

// WatchAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAreasResponse according to their type
// Present only for array (repeated) types.
type WatchAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAreasResponse_FieldPath
	ContainsValue(*WatchAreasResponse) bool
}

// ParseWatchAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAreasResponse_FieldTerminalPathArrayItemValue struct {
	WatchAreasResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAreasResponse_FieldPathArrayItemValue = (*WatchAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAreasResponse as interface{}
func (fpaiv *WatchAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAreasResponse_FieldTerminalPathArrayItemValue) AsAreaChangesItemValue() (*area.AreaChange, bool) {
	res, ok := fpaiv.value.(*area.AreaChange)
	return res, ok
}

func (fpaiv *WatchAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAreasResponse'
func (fpaiv *WatchAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAreasResponse) bool {
	slice := fpaiv.WatchAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAreasResponse_FieldSubPathArrayItemValue struct {
	WatchAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAreasResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAreasResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAreasResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAreasResponse'
func (fpaivs *WatchAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAreasResponse) bool {
	switch fpaivs.Selector() {
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAreasResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse: %d", fpaivs.Selector()))
	}
}

// WatchAreasResponse_FieldPathArrayOfValues allows storing slice of values for WatchAreasResponse fields according to their type
type WatchAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAreasResponse_FieldPath
}

func ParseWatchAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAreasResponse_FieldTerminalPathArrayOfValues struct {
	WatchAreasResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAreasResponse_FieldPathArrayOfValues = (*WatchAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAreasResponse_FieldPathSelectorAreaChanges:
		for _, v := range fpaov.values.([][]*area.AreaChange) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAreasResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAreasResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsAreaChangesArrayOfValues() ([][]*area.AreaChange, bool) {
	res, ok := fpaov.values.([][]*area.AreaChange)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAreasResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAreasResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAreasResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAreasResponse_FieldSubPathArrayOfValues struct {
	WatchAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAreasResponse_FieldPathArrayOfValues = (*WatchAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAreasResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAreasResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAreasResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAreasResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAreasResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAreasResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAreasResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAreasResponse_PageTokenChange)

	// Those methods build corresponding WatchAreasResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAreasResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAreasResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAreasResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAreasResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAreasResponsePageTokenChange_FieldPathSelector = 0
	WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAreasResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAreasResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAreasResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAreasResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAreasResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAreasResponse_PageTokenChange", fp)
}

func ParseWatchAreasResponsePageTokenChange_FieldPath(rawField string) (WatchAreasResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAreasResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAreasResponsePageTokenChange_FieldPath(rawField string) WatchAreasResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAreasResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAreasResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAreasResponsePageTokenChange_FieldPathSelector
}

var _ WatchAreasResponsePageTokenChange_FieldPath = (*WatchAreasResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) Selector() WatchAreasResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAreasResponse_PageTokenChange
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAreasResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAreasResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAreasResponse_PageTokenChange
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAreasResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAreasResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*area.PagerCursor)(nil)
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*area.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAreasResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAreasResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAreasResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAreasResponsePageTokenChange_FieldTerminalPathValue{WatchAreasResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAreasResponsePageTokenChange_FieldTerminalPathValue{WatchAreasResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAreasResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAreasResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAreasResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAreasResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAreasResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAreasResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAreasResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAreasResponsePageTokenChange_FieldPathValue interface {
	WatchAreasResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAreasResponse_PageTokenChange)
	CompareWith(*WatchAreasResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAreasResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAreasResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAreasResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAreasResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAreasResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAreasResponsePageTokenChange_FieldPathValue = (*WatchAreasResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}
func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*area.PagerCursor, bool) {
	res, ok := fpv.value.(*area.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAreasResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAreasResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*area.PagerCursor)
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*area.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAreasResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAreasResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAreasResponse_PageTokenChange'.
func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAreasResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAreasResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAreasResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAreasResponse_PageTokenChange))
}

// WatchAreasResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAreasResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAreasResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAreasResponse_PageTokenChange) bool
}

// ParseWatchAreasResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAreasResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAreasResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAreasResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAreasResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAreasResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAreasResponse_PageTokenChange as interface{}
func (fpaiv *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAreasResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAreasResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAreasResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAreasResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAreasResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAreasResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAreasResponsePageTokenChange_FieldPath
}

func ParseWatchAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAreasResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAreasResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAreasResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAreasResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAreasResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	case WatchAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*area.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}
func (fpaov *WatchAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*area.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAreaRequest_FieldPathSelector
	Get(source *CreateAreaRequest) []interface{}
	GetSingle(source *CreateAreaRequest) (interface{}, bool)
	ClearValue(item *CreateAreaRequest)

	// Those methods build corresponding CreateAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAreaRequest_FieldPathArrayItemValue
}

type CreateAreaRequest_FieldPathSelector int32

const (
	CreateAreaRequest_FieldPathSelectorParent CreateAreaRequest_FieldPathSelector = 0
	CreateAreaRequest_FieldPathSelectorArea   CreateAreaRequest_FieldPathSelector = 1
)

func (s CreateAreaRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAreaRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAreaRequest_FieldPathSelectorArea:
		return "area"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", s))
	}
}

func BuildCreateAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAreaRequest_FieldTerminalPath{selector: CreateAreaRequest_FieldPathSelectorParent}, nil
		case "area":
			return &CreateAreaRequest_FieldTerminalPath{selector: CreateAreaRequest_FieldPathSelectorArea}, nil
		}
	} else {
		switch fp[0] {
		case "area":
			if subpath, err := area.BuildArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAreaRequest_FieldSubPath{selector: CreateAreaRequest_FieldPathSelectorArea, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAreaRequest", fp)
}

func ParseCreateAreaRequest_FieldPath(rawField string) (CreateAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAreaRequest_FieldPath(fp)
}

func MustParseCreateAreaRequest_FieldPath(rawField string) CreateAreaRequest_FieldPath {
	fp, err := ParseCreateAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAreaRequest_FieldTerminalPath struct {
	selector CreateAreaRequest_FieldPathSelector
}

var _ CreateAreaRequest_FieldPath = (*CreateAreaRequest_FieldTerminalPath)(nil)

func (fp *CreateAreaRequest_FieldTerminalPath) Selector() CreateAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAreaRequest
func (fp *CreateAreaRequest_FieldTerminalPath) Get(source *CreateAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAreaRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAreaRequest_FieldPathSelectorArea:
			if source.Area != nil {
				values = append(values, source.Area)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAreaRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAreaRequest
func (fp *CreateAreaRequest_FieldTerminalPath) GetSingle(source *CreateAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAreaRequest_FieldPathSelectorArea:
		res := source.GetArea()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		return (*area.ParentReference)(nil)
	case CreateAreaRequest_FieldPathSelectorArea:
		return (*area.Area)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAreaRequest_FieldTerminalPath) ClearValue(item *CreateAreaRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAreaRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAreaRequest_FieldPathSelectorArea:
			item.Area = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAreaRequest_FieldPathSelectorParent
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAreaRequest_FieldPathValue {
	switch fp.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		return &CreateAreaRequest_FieldTerminalPathValue{CreateAreaRequest_FieldTerminalPath: *fp, value: value.(*area.ParentReference)}
	case CreateAreaRequest_FieldPathSelectorArea:
		return &CreateAreaRequest_FieldTerminalPathValue{CreateAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Area)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAreaRequest_FieldPathArrayOfValues {
	fpaov := &CreateAreaRequest_FieldTerminalPathArrayOfValues{CreateAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		return &CreateAreaRequest_FieldTerminalPathArrayOfValues{CreateAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.ParentReference)}
	case CreateAreaRequest_FieldPathSelectorArea:
		return &CreateAreaRequest_FieldTerminalPathArrayOfValues{CreateAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Area)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAreaRequest_FieldSubPath struct {
	selector CreateAreaRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAreaRequest_FieldPath = (*CreateAreaRequest_FieldSubPath)(nil)

func (fps *CreateAreaRequest_FieldSubPath) Selector() CreateAreaRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAreaRequest_FieldSubPath) AsAreaSubPath() (area.Area_FieldPath, bool) {
	res, ok := fps.subPath.(area.Area_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAreaRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAreaRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAreaRequest
func (fps *CreateAreaRequest_FieldSubPath) Get(source *CreateAreaRequest) (values []interface{}) {
	if asAreaFieldPath, ok := fps.AsAreaSubPath(); ok {
		values = append(values, asAreaFieldPath.Get(source.GetArea())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAreaRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAreaRequest))
}

// GetSingle returns value of selected field from source CreateAreaRequest
func (fps *CreateAreaRequest_FieldSubPath) GetSingle(source *CreateAreaRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAreaRequest_FieldPathSelectorArea:
		if source.GetArea() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fps.selector))
	}
}

func (fps *CreateAreaRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAreaRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAreaRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAreaRequest_FieldSubPath) ClearValue(item *CreateAreaRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAreaRequest_FieldPathSelectorArea:
			fps.subPath.ClearValueRaw(item.Area)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAreaRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAreaRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAreaRequest_FieldSubPath) WithIValue(value interface{}) CreateAreaRequest_FieldPathValue {
	return &CreateAreaRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAreaRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAreaRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAreaRequest_FieldPathArrayOfValues {
	return &CreateAreaRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAreaRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAreaRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAreaRequest_FieldPathArrayItemValue {
	return &CreateAreaRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAreaRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAreaRequest_FieldPathValue allows storing values for CreateAreaRequest fields according to their type
type CreateAreaRequest_FieldPathValue interface {
	CreateAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAreaRequest)
	CompareWith(*CreateAreaRequest) (cmp int, comparable bool)
}

func ParseCreateAreaRequest_FieldPathValue(pathStr, valueStr string) (CreateAreaRequest_FieldPathValue, error) {
	fp, err := ParseCreateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAreaRequest_FieldPathValue), nil
}

func MustParseCreateAreaRequest_FieldPathValue(pathStr, valueStr string) CreateAreaRequest_FieldPathValue {
	fpv, err := ParseCreateAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAreaRequest_FieldTerminalPathValue struct {
	CreateAreaRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAreaRequest_FieldPathValue = (*CreateAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAreaRequest' as interface{}
func (fpv *CreateAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAreaRequest_FieldTerminalPathValue) AsParentValue() (*area.ParentReference, bool) {
	res, ok := fpv.value.(*area.ParentReference)
	return res, ok
}
func (fpv *CreateAreaRequest_FieldTerminalPathValue) AsAreaValue() (*area.Area, bool) {
	res, ok := fpv.value.(*area.Area)
	return res, ok
}

// SetTo stores value for selected field for object CreateAreaRequest
func (fpv *CreateAreaRequest_FieldTerminalPathValue) SetTo(target **CreateAreaRequest) {
	if *target == nil {
		*target = new(CreateAreaRequest)
	}
	switch fpv.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*area.ParentReference)
	case CreateAreaRequest_FieldPathSelectorArea:
		(*target).Area = fpv.value.(*area.Area)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAreaRequest_FieldTerminalPathValue' with the value under path in 'CreateAreaRequest'.
func (fpv *CreateAreaRequest_FieldTerminalPathValue) CompareWith(source *CreateAreaRequest) (int, bool) {
	switch fpv.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*area.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAreaRequest_FieldPathSelectorArea:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAreaRequest))
}

type CreateAreaRequest_FieldSubPathValue struct {
	CreateAreaRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAreaRequest_FieldPathValue = (*CreateAreaRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAreaRequest_FieldSubPathValue) AsAreaPathValue() (area.Area_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(area.Area_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAreaRequest_FieldSubPathValue) SetTo(target **CreateAreaRequest) {
	if *target == nil {
		*target = new(CreateAreaRequest)
	}
	switch fpvs.Selector() {
	case CreateAreaRequest_FieldPathSelectorArea:
		fpvs.subPathValue.(area.Area_FieldPathValue).SetTo(&(*target).Area)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAreaRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAreaRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAreaRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAreaRequest_FieldSubPathValue) CompareWith(source *CreateAreaRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAreaRequest_FieldPathSelectorArea:
		return fpvs.subPathValue.(area.Area_FieldPathValue).CompareWith(source.GetArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAreaRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAreaRequest))
}

// CreateAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAreaRequest according to their type
// Present only for array (repeated) types.
type CreateAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAreaRequest_FieldPath
	ContainsValue(*CreateAreaRequest) bool
}

// ParseCreateAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAreaRequest_FieldTerminalPathArrayItemValue struct {
	CreateAreaRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAreaRequest_FieldPathArrayItemValue = (*CreateAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAreaRequest as interface{}
func (fpaiv *CreateAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAreaRequest'
func (fpaiv *CreateAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAreaRequest) bool {
	slice := fpaiv.CreateAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAreaRequest_FieldSubPathArrayItemValue struct {
	CreateAreaRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAreaRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAreaRequest_FieldSubPathArrayItemValue) AsAreaPathItemValue() (area.Area_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAreaRequest'
func (fpaivs *CreateAreaRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAreaRequest) bool {
	switch fpaivs.Selector() {
	case CreateAreaRequest_FieldPathSelectorArea:
		return fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue).ContainsValue(source.GetArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAreaRequest: %d", fpaivs.Selector()))
	}
}

// CreateAreaRequest_FieldPathArrayOfValues allows storing slice of values for CreateAreaRequest fields according to their type
type CreateAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAreaRequest_FieldPath
}

func ParseCreateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAreaRequest_FieldTerminalPathArrayOfValues struct {
	CreateAreaRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAreaRequest_FieldPathArrayOfValues = (*CreateAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAreaRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*area.ParentReference) {
			values = append(values, v)
		}
	case CreateAreaRequest_FieldPathSelectorArea:
		for _, v := range fpaov.values.([]*area.Area) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAreaRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*area.ParentReference, bool) {
	res, ok := fpaov.values.([]*area.ParentReference)
	return res, ok
}
func (fpaov *CreateAreaRequest_FieldTerminalPathArrayOfValues) AsAreaArrayOfValues() ([]*area.Area, bool) {
	res, ok := fpaov.values.([]*area.Area)
	return res, ok
}

type CreateAreaRequest_FieldSubPathArrayOfValues struct {
	CreateAreaRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAreaRequest_FieldPathArrayOfValues = (*CreateAreaRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAreaRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAreaRequest_FieldSubPathArrayOfValues) AsAreaPathArrayOfValues() (area.Area_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(area.Area_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAreaRequest_FieldPathSelector
	Get(source *UpdateAreaRequest) []interface{}
	GetSingle(source *UpdateAreaRequest) (interface{}, bool)
	ClearValue(item *UpdateAreaRequest)

	// Those methods build corresponding UpdateAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAreaRequest_FieldPathArrayItemValue
}

type UpdateAreaRequest_FieldPathSelector int32

const (
	UpdateAreaRequest_FieldPathSelectorArea       UpdateAreaRequest_FieldPathSelector = 0
	UpdateAreaRequest_FieldPathSelectorUpdateMask UpdateAreaRequest_FieldPathSelector = 1
	UpdateAreaRequest_FieldPathSelectorCas        UpdateAreaRequest_FieldPathSelector = 2
)

func (s UpdateAreaRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return "area"
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAreaRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", s))
	}
}

func BuildUpdateAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "area":
			return &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorArea}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAreaRequest_FieldTerminalPath{selector: UpdateAreaRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "area":
			if subpath, err := area.BuildArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAreaRequest_FieldSubPath{selector: UpdateAreaRequest_FieldPathSelectorArea, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAreaRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAreaRequest_FieldSubPath{selector: UpdateAreaRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAreaRequest", fp)
}

func ParseUpdateAreaRequest_FieldPath(rawField string) (UpdateAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAreaRequest_FieldPath(fp)
}

func MustParseUpdateAreaRequest_FieldPath(rawField string) UpdateAreaRequest_FieldPath {
	fp, err := ParseUpdateAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAreaRequest_FieldTerminalPath struct {
	selector UpdateAreaRequest_FieldPathSelector
}

var _ UpdateAreaRequest_FieldPath = (*UpdateAreaRequest_FieldTerminalPath)(nil)

func (fp *UpdateAreaRequest_FieldTerminalPath) Selector() UpdateAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAreaRequest
func (fp *UpdateAreaRequest_FieldTerminalPath) Get(source *UpdateAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAreaRequest_FieldPathSelectorArea:
			if source.Area != nil {
				values = append(values, source.Area)
			}
		case UpdateAreaRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAreaRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAreaRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAreaRequest
func (fp *UpdateAreaRequest_FieldTerminalPath) GetSingle(source *UpdateAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		res := source.GetArea()
		return res, res != nil
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAreaRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return (*area.Area)(nil)
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		return (*area.Area_FieldMask)(nil)
	case UpdateAreaRequest_FieldPathSelectorCas:
		return (*UpdateAreaRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequest_FieldTerminalPath) ClearValue(item *UpdateAreaRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAreaRequest_FieldPathSelectorArea:
			item.Area = nil
		case UpdateAreaRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAreaRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAreaRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAreaRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return &UpdateAreaRequest_FieldTerminalPathValue{UpdateAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Area)}
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		return &UpdateAreaRequest_FieldTerminalPathValue{UpdateAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	case UpdateAreaRequest_FieldPathSelectorCas:
		return &UpdateAreaRequest_FieldTerminalPathValue{UpdateAreaRequest_FieldTerminalPath: *fp, value: value.(*UpdateAreaRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAreaRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAreaRequest_FieldTerminalPathArrayOfValues{UpdateAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return &UpdateAreaRequest_FieldTerminalPathArrayOfValues{UpdateAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Area)}
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		return &UpdateAreaRequest_FieldTerminalPathArrayOfValues{UpdateAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	case UpdateAreaRequest_FieldPathSelectorCas:
		return &UpdateAreaRequest_FieldTerminalPathArrayOfValues{UpdateAreaRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAreaRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAreaRequest_FieldSubPath struct {
	selector UpdateAreaRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAreaRequest_FieldPath = (*UpdateAreaRequest_FieldSubPath)(nil)

func (fps *UpdateAreaRequest_FieldSubPath) Selector() UpdateAreaRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAreaRequest_FieldSubPath) AsAreaSubPath() (area.Area_FieldPath, bool) {
	res, ok := fps.subPath.(area.Area_FieldPath)
	return res, ok
}
func (fps *UpdateAreaRequest_FieldSubPath) AsCasSubPath() (UpdateAreaRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAreaRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAreaRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAreaRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAreaRequest
func (fps *UpdateAreaRequest_FieldSubPath) Get(source *UpdateAreaRequest) (values []interface{}) {
	if asAreaFieldPath, ok := fps.AsAreaSubPath(); ok {
		values = append(values, asAreaFieldPath.Get(source.GetArea())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAreaRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAreaRequest))
}

// GetSingle returns value of selected field from source UpdateAreaRequest
func (fps *UpdateAreaRequest_FieldSubPath) GetSingle(source *UpdateAreaRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		if source.GetArea() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetArea())
	case UpdateAreaRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fps.selector))
	}
}

func (fps *UpdateAreaRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAreaRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAreaRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAreaRequest_FieldSubPath) ClearValue(item *UpdateAreaRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAreaRequest_FieldPathSelectorArea:
			fps.subPath.ClearValueRaw(item.Area)
		case UpdateAreaRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAreaRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAreaRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAreaRequest_FieldSubPath) WithIValue(value interface{}) UpdateAreaRequest_FieldPathValue {
	return &UpdateAreaRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAreaRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAreaRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAreaRequest_FieldPathArrayOfValues {
	return &UpdateAreaRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAreaRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAreaRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAreaRequest_FieldPathArrayItemValue {
	return &UpdateAreaRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAreaRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAreaRequest_FieldPathValue allows storing values for UpdateAreaRequest fields according to their type
type UpdateAreaRequest_FieldPathValue interface {
	UpdateAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAreaRequest)
	CompareWith(*UpdateAreaRequest) (cmp int, comparable bool)
}

func ParseUpdateAreaRequest_FieldPathValue(pathStr, valueStr string) (UpdateAreaRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAreaRequest_FieldPathValue), nil
}

func MustParseUpdateAreaRequest_FieldPathValue(pathStr, valueStr string) UpdateAreaRequest_FieldPathValue {
	fpv, err := ParseUpdateAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAreaRequest_FieldTerminalPathValue struct {
	UpdateAreaRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAreaRequest_FieldPathValue = (*UpdateAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAreaRequest' as interface{}
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) AsAreaValue() (*area.Area, bool) {
	res, ok := fpv.value.(*area.Area)
	return res, ok
}
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAreaRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAreaRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAreaRequest
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) SetTo(target **UpdateAreaRequest) {
	if *target == nil {
		*target = new(UpdateAreaRequest)
	}
	switch fpv.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		(*target).Area = fpv.value.(*area.Area)
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*area.Area_FieldMask)
	case UpdateAreaRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAreaRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAreaRequest_FieldTerminalPathValue' with the value under path in 'UpdateAreaRequest'.
func (fpv *UpdateAreaRequest_FieldTerminalPathValue) CompareWith(source *UpdateAreaRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return 0, false
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAreaRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAreaRequest))
}

type UpdateAreaRequest_FieldSubPathValue struct {
	UpdateAreaRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAreaRequest_FieldPathValue = (*UpdateAreaRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAreaRequest_FieldSubPathValue) AsAreaPathValue() (area.Area_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(area.Area_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAreaRequest_FieldSubPathValue) AsCasPathValue() (UpdateAreaRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAreaRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAreaRequest_FieldSubPathValue) SetTo(target **UpdateAreaRequest) {
	if *target == nil {
		*target = new(UpdateAreaRequest)
	}
	switch fpvs.Selector() {
	case UpdateAreaRequest_FieldPathSelectorArea:
		fpvs.subPathValue.(area.Area_FieldPathValue).SetTo(&(*target).Area)
	case UpdateAreaRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAreaRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAreaRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAreaRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAreaRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAreaRequest_FieldSubPathValue) CompareWith(source *UpdateAreaRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return fpvs.subPathValue.(area.Area_FieldPathValue).CompareWith(source.GetArea())
	case UpdateAreaRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAreaRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAreaRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAreaRequest))
}

// UpdateAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAreaRequest according to their type
// Present only for array (repeated) types.
type UpdateAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAreaRequest_FieldPath
	ContainsValue(*UpdateAreaRequest) bool
}

// ParseUpdateAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAreaRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAreaRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAreaRequest_FieldPathArrayItemValue = (*UpdateAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAreaRequest as interface{}
func (fpaiv *UpdateAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAreaRequest'
func (fpaiv *UpdateAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAreaRequest) bool {
	slice := fpaiv.UpdateAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAreaRequest_FieldSubPathArrayItemValue struct {
	UpdateAreaRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAreaRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAreaRequest_FieldSubPathArrayItemValue) AsAreaPathItemValue() (area.Area_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAreaRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAreaRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAreaRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAreaRequest'
func (fpaivs *UpdateAreaRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAreaRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAreaRequest_FieldPathSelectorArea:
		return fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue).ContainsValue(source.GetArea())
	case UpdateAreaRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAreaRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAreaRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAreaRequest fields according to their type
type UpdateAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAreaRequest_FieldPath
}

func ParseUpdateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAreaRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAreaRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAreaRequest_FieldPathArrayOfValues = (*UpdateAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAreaRequest_FieldPathSelectorArea:
		for _, v := range fpaov.values.([]*area.Area) {
			values = append(values, v)
		}
	case UpdateAreaRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	case UpdateAreaRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAreaRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAreaRequest_FieldTerminalPathArrayOfValues) AsAreaArrayOfValues() ([]*area.Area, bool) {
	res, ok := fpaov.values.([]*area.Area)
	return res, ok
}
func (fpaov *UpdateAreaRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}
func (fpaov *UpdateAreaRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAreaRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAreaRequest_CAS)
	return res, ok
}

type UpdateAreaRequest_FieldSubPathArrayOfValues struct {
	UpdateAreaRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAreaRequest_FieldPathArrayOfValues = (*UpdateAreaRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAreaRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAreaRequest_FieldSubPathArrayOfValues) AsAreaPathArrayOfValues() (area.Area_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(area.Area_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAreaRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAreaRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAreaRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAreaRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAreaRequestCAS_FieldPathSelector
	Get(source *UpdateAreaRequest_CAS) []interface{}
	GetSingle(source *UpdateAreaRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAreaRequest_CAS)

	// Those methods build corresponding UpdateAreaRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAreaRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAreaRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAreaRequestCAS_FieldPathArrayItemValue
}

type UpdateAreaRequestCAS_FieldPathSelector int32

const (
	UpdateAreaRequestCAS_FieldPathSelectorConditionalState UpdateAreaRequestCAS_FieldPathSelector = 0
	UpdateAreaRequestCAS_FieldPathSelectorFieldMask        UpdateAreaRequestCAS_FieldPathSelector = 1
)

func (s UpdateAreaRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", s))
	}
}

func BuildUpdateAreaRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAreaRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAreaRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAreaRequestCAS_FieldTerminalPath{selector: UpdateAreaRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAreaRequestCAS_FieldTerminalPath{selector: UpdateAreaRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := area.BuildArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAreaRequestCAS_FieldSubPath{selector: UpdateAreaRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAreaRequest_CAS", fp)
}

func ParseUpdateAreaRequestCAS_FieldPath(rawField string) (UpdateAreaRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAreaRequestCAS_FieldPath(fp)
}

func MustParseUpdateAreaRequestCAS_FieldPath(rawField string) UpdateAreaRequestCAS_FieldPath {
	fp, err := ParseUpdateAreaRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAreaRequestCAS_FieldTerminalPath struct {
	selector UpdateAreaRequestCAS_FieldPathSelector
}

var _ UpdateAreaRequestCAS_FieldPath = (*UpdateAreaRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) Selector() UpdateAreaRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAreaRequest_CAS
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) Get(source *UpdateAreaRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAreaRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAreaRequest_CAS
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAreaRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAreaRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return (*area.Area)(nil)
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		return (*area.Area_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAreaRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAreaRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAreaRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAreaRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAreaRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAreaRequestCAS_FieldTerminalPathValue{UpdateAreaRequestCAS_FieldTerminalPath: *fp, value: value.(*area.Area)}
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAreaRequestCAS_FieldTerminalPathValue{UpdateAreaRequestCAS_FieldTerminalPath: *fp, value: value.(*area.Area_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAreaRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAreaRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAreaRequestCAS_FieldTerminalPath: *fp, values: values.([]*area.Area)}
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAreaRequestCAS_FieldTerminalPath: *fp, values: values.([]*area.Area_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAreaRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAreaRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAreaRequestCAS_FieldSubPath struct {
	selector UpdateAreaRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAreaRequestCAS_FieldPath = (*UpdateAreaRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAreaRequestCAS_FieldSubPath) Selector() UpdateAreaRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAreaRequestCAS_FieldSubPath) AsConditionalStateSubPath() (area.Area_FieldPath, bool) {
	res, ok := fps.subPath.(area.Area_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAreaRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAreaRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAreaRequest_CAS
func (fps *UpdateAreaRequestCAS_FieldSubPath) Get(source *UpdateAreaRequest_CAS) (values []interface{}) {
	if asAreaFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAreaFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAreaRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAreaRequest_CAS
func (fps *UpdateAreaRequestCAS_FieldSubPath) GetSingle(source *UpdateAreaRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAreaRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAreaRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) ClearValue(item *UpdateAreaRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAreaRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAreaRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAreaRequestCAS_FieldPathValue {
	return &UpdateAreaRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAreaRequestCAS_FieldPathArrayOfValues {
	return &UpdateAreaRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAreaRequestCAS_FieldPathArrayItemValue {
	return &UpdateAreaRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAreaRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAreaRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAreaRequestCAS_FieldPathValue interface {
	UpdateAreaRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAreaRequest_CAS)
	CompareWith(*UpdateAreaRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAreaRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAreaRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAreaRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAreaRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAreaRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAreaRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAreaRequestCAS_FieldTerminalPathValue struct {
	UpdateAreaRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAreaRequestCAS_FieldPathValue = (*UpdateAreaRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*area.Area, bool) {
	res, ok := fpv.value.(*area.Area)
	return res, ok
}
func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*area.Area_FieldMask, bool) {
	res, ok := fpv.value.(*area.Area_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAreaRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAreaRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*area.Area)
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*area.Area_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAreaRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAreaRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAreaRequest_CAS'.
func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAreaRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAreaRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAreaRequest_CAS))
}

type UpdateAreaRequestCAS_FieldSubPathValue struct {
	UpdateAreaRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAreaRequestCAS_FieldPathValue = (*UpdateAreaRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (area.Area_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(area.Area_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) SetTo(target **UpdateAreaRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAreaRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(area.Area_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAreaRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAreaRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(area.Area_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAreaRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAreaRequest_CAS))
}

// UpdateAreaRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAreaRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAreaRequestCAS_FieldPath
	ContainsValue(*UpdateAreaRequest_CAS) bool
}

// ParseUpdateAreaRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAreaRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAreaRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAreaRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAreaRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAreaRequestCAS_FieldPathArrayItemValue = (*UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAreaRequest_CAS as interface{}
func (fpaiv *UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAreaRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAreaRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAreaRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAreaRequest_CAS) bool {
	slice := fpaiv.UpdateAreaRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAreaRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAreaRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAreaRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAreaRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (area.Area_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAreaRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAreaRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(area.Area_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAreaRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAreaRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAreaRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAreaRequestCAS_FieldPath
}

func ParseUpdateAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAreaRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAreaRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAreaRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAreaRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAreaRequestCAS_FieldPathArrayOfValues = (*UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAreaRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*area.Area) {
			values = append(values, v)
		}
	case UpdateAreaRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*area.Area_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*area.Area, bool) {
	res, ok := fpaov.values.([]*area.Area)
	return res, ok
}
func (fpaov *UpdateAreaRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*area.Area_FieldMask, bool) {
	res, ok := fpaov.values.([]*area.Area_FieldMask)
	return res, ok
}

type UpdateAreaRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAreaRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAreaRequestCAS_FieldPathArrayOfValues = (*UpdateAreaRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAreaRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAreaRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (area.Area_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(area.Area_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAreaRequest_FieldPathSelector
	Get(source *DeleteAreaRequest) []interface{}
	GetSingle(source *DeleteAreaRequest) (interface{}, bool)
	ClearValue(item *DeleteAreaRequest)

	// Those methods build corresponding DeleteAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAreaRequest_FieldPathArrayItemValue
}

type DeleteAreaRequest_FieldPathSelector int32

const (
	DeleteAreaRequest_FieldPathSelectorName DeleteAreaRequest_FieldPathSelector = 0
)

func (s DeleteAreaRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAreaRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", s))
	}
}

func BuildDeleteAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAreaRequest_FieldTerminalPath{selector: DeleteAreaRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAreaRequest", fp)
}

func ParseDeleteAreaRequest_FieldPath(rawField string) (DeleteAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAreaRequest_FieldPath(fp)
}

func MustParseDeleteAreaRequest_FieldPath(rawField string) DeleteAreaRequest_FieldPath {
	fp, err := ParseDeleteAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAreaRequest_FieldTerminalPath struct {
	selector DeleteAreaRequest_FieldPathSelector
}

var _ DeleteAreaRequest_FieldPath = (*DeleteAreaRequest_FieldTerminalPath)(nil)

func (fp *DeleteAreaRequest_FieldTerminalPath) Selector() DeleteAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAreaRequest
func (fp *DeleteAreaRequest_FieldTerminalPath) Get(source *DeleteAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAreaRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAreaRequest
func (fp *DeleteAreaRequest_FieldTerminalPath) GetSingle(source *DeleteAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		return (*area.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAreaRequest_FieldTerminalPath) ClearValue(item *DeleteAreaRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAreaRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAreaRequest_FieldPathSelectorName
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAreaRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		return &DeleteAreaRequest_FieldTerminalPathValue{DeleteAreaRequest_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAreaRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAreaRequest_FieldTerminalPathArrayOfValues{DeleteAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		return &DeleteAreaRequest_FieldTerminalPathArrayOfValues{DeleteAreaRequest_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAreaRequest_FieldPathValue allows storing values for DeleteAreaRequest fields according to their type
type DeleteAreaRequest_FieldPathValue interface {
	DeleteAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAreaRequest)
	CompareWith(*DeleteAreaRequest) (cmp int, comparable bool)
}

func ParseDeleteAreaRequest_FieldPathValue(pathStr, valueStr string) (DeleteAreaRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAreaRequest_FieldPathValue), nil
}

func MustParseDeleteAreaRequest_FieldPathValue(pathStr, valueStr string) DeleteAreaRequest_FieldPathValue {
	fpv, err := ParseDeleteAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAreaRequest_FieldTerminalPathValue struct {
	DeleteAreaRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAreaRequest_FieldPathValue = (*DeleteAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAreaRequest' as interface{}
func (fpv *DeleteAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAreaRequest_FieldTerminalPathValue) AsNameValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAreaRequest
func (fpv *DeleteAreaRequest_FieldTerminalPathValue) SetTo(target **DeleteAreaRequest) {
	if *target == nil {
		*target = new(DeleteAreaRequest)
	}
	switch fpv.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*area.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAreaRequest_FieldTerminalPathValue' with the value under path in 'DeleteAreaRequest'.
func (fpv *DeleteAreaRequest_FieldTerminalPathValue) CompareWith(source *DeleteAreaRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAreaRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAreaRequest))
}

// DeleteAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAreaRequest according to their type
// Present only for array (repeated) types.
type DeleteAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAreaRequest_FieldPath
	ContainsValue(*DeleteAreaRequest) bool
}

// ParseDeleteAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAreaRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAreaRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAreaRequest_FieldPathArrayItemValue = (*DeleteAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAreaRequest as interface{}
func (fpaiv *DeleteAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAreaRequest'
func (fpaiv *DeleteAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAreaRequest) bool {
	slice := fpaiv.DeleteAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAreaRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAreaRequest fields according to their type
type DeleteAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAreaRequest_FieldPath
}

func ParseDeleteAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAreaRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAreaRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAreaRequest_FieldPathArrayOfValues = (*DeleteAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
