// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/zone_service.proto
// DO NOT EDIT!!!

package zone_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetZoneRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetZoneRequest_FieldPathSelector
	Get(source *GetZoneRequest) []interface{}
	GetSingle(source *GetZoneRequest) (interface{}, bool)
	ClearValue(item *GetZoneRequest)

	// Those methods build corresponding GetZoneRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetZoneRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetZoneRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetZoneRequest_FieldPathArrayItemValue
}

type GetZoneRequest_FieldPathSelector int32

const (
	GetZoneRequest_FieldPathSelectorName      GetZoneRequest_FieldPathSelector = 0
	GetZoneRequest_FieldPathSelectorFieldMask GetZoneRequest_FieldPathSelector = 1
	GetZoneRequest_FieldPathSelectorView      GetZoneRequest_FieldPathSelector = 2
)

func (s GetZoneRequest_FieldPathSelector) String() string {
	switch s {
	case GetZoneRequest_FieldPathSelectorName:
		return "name"
	case GetZoneRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetZoneRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", s))
	}
}

func BuildGetZoneRequest_FieldPath(fp gotenobject.RawFieldPath) (GetZoneRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetZoneRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetZoneRequest_FieldTerminalPath{selector: GetZoneRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetZoneRequest", fp)
}

func ParseGetZoneRequest_FieldPath(rawField string) (GetZoneRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetZoneRequest_FieldPath(fp)
}

func MustParseGetZoneRequest_FieldPath(rawField string) GetZoneRequest_FieldPath {
	fp, err := ParseGetZoneRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetZoneRequest_FieldTerminalPath struct {
	selector GetZoneRequest_FieldPathSelector
}

var _ GetZoneRequest_FieldPath = (*GetZoneRequest_FieldTerminalPath)(nil)

func (fp *GetZoneRequest_FieldTerminalPath) Selector() GetZoneRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetZoneRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetZoneRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetZoneRequest
func (fp *GetZoneRequest_FieldTerminalPath) Get(source *GetZoneRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetZoneRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetZoneRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetZoneRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetZoneRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetZoneRequest))
}

// GetSingle returns value pointed by specific field of from source GetZoneRequest
func (fp *GetZoneRequest_FieldTerminalPath) GetSingle(source *GetZoneRequest) (interface{}, bool) {
	switch fp.selector {
	case GetZoneRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetZoneRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetZoneRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
	}
}

func (fp *GetZoneRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetZoneRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetZoneRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetZoneRequest_FieldPathSelectorName:
		return (*zone.Reference)(nil)
	case GetZoneRequest_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	case GetZoneRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
	}
}

func (fp *GetZoneRequest_FieldTerminalPath) ClearValue(item *GetZoneRequest) {
	if item != nil {
		switch fp.selector {
		case GetZoneRequest_FieldPathSelectorName:
			item.Name = nil
		case GetZoneRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetZoneRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
		}
	}
}

func (fp *GetZoneRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetZoneRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetZoneRequest_FieldPathSelectorName ||
		fp.selector == GetZoneRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetZoneRequest_FieldPathSelectorView
}

func (fp *GetZoneRequest_FieldTerminalPath) WithIValue(value interface{}) GetZoneRequest_FieldPathValue {
	switch fp.selector {
	case GetZoneRequest_FieldPathSelectorName:
		return &GetZoneRequest_FieldTerminalPathValue{GetZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	case GetZoneRequest_FieldPathSelectorFieldMask:
		return &GetZoneRequest_FieldTerminalPathValue{GetZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case GetZoneRequest_FieldPathSelectorView:
		return &GetZoneRequest_FieldTerminalPathValue{GetZoneRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
	}
}

func (fp *GetZoneRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetZoneRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetZoneRequest_FieldPathArrayOfValues {
	fpaov := &GetZoneRequest_FieldTerminalPathArrayOfValues{GetZoneRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetZoneRequest_FieldPathSelectorName:
		return &GetZoneRequest_FieldTerminalPathArrayOfValues{GetZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	case GetZoneRequest_FieldPathSelectorFieldMask:
		return &GetZoneRequest_FieldTerminalPathArrayOfValues{GetZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case GetZoneRequest_FieldPathSelectorView:
		return &GetZoneRequest_FieldTerminalPathArrayOfValues{GetZoneRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetZoneRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetZoneRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetZoneRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fp.selector))
	}
}

func (fp *GetZoneRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetZoneRequest_FieldPathValue allows storing values for GetZoneRequest fields according to their type
type GetZoneRequest_FieldPathValue interface {
	GetZoneRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetZoneRequest)
	CompareWith(*GetZoneRequest) (cmp int, comparable bool)
}

func ParseGetZoneRequest_FieldPathValue(pathStr, valueStr string) (GetZoneRequest_FieldPathValue, error) {
	fp, err := ParseGetZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetZoneRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetZoneRequest_FieldPathValue), nil
}

func MustParseGetZoneRequest_FieldPathValue(pathStr, valueStr string) GetZoneRequest_FieldPathValue {
	fpv, err := ParseGetZoneRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetZoneRequest_FieldTerminalPathValue struct {
	GetZoneRequest_FieldTerminalPath
	value interface{}
}

var _ GetZoneRequest_FieldPathValue = (*GetZoneRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetZoneRequest' as interface{}
func (fpv *GetZoneRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetZoneRequest_FieldTerminalPathValue) AsNameValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}
func (fpv *GetZoneRequest_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *GetZoneRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetZoneRequest
func (fpv *GetZoneRequest_FieldTerminalPathValue) SetTo(target **GetZoneRequest) {
	if *target == nil {
		*target = new(GetZoneRequest)
	}
	switch fpv.selector {
	case GetZoneRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*zone.Reference)
	case GetZoneRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	case GetZoneRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fpv.selector))
	}
}

func (fpv *GetZoneRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetZoneRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetZoneRequest_FieldTerminalPathValue' with the value under path in 'GetZoneRequest'.
func (fpv *GetZoneRequest_FieldTerminalPathValue) CompareWith(source *GetZoneRequest) (int, bool) {
	switch fpv.selector {
	case GetZoneRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetZoneRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetZoneRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetZoneRequest: %d", fpv.selector))
	}
}

func (fpv *GetZoneRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetZoneRequest))
}

// GetZoneRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetZoneRequest according to their type
// Present only for array (repeated) types.
type GetZoneRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetZoneRequest_FieldPath
	ContainsValue(*GetZoneRequest) bool
}

// ParseGetZoneRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetZoneRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetZoneRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetZoneRequest_FieldPathArrayItemValue), nil
}

func MustParseGetZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetZoneRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetZoneRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetZoneRequest_FieldTerminalPathArrayItemValue struct {
	GetZoneRequest_FieldTerminalPath
	value interface{}
}

var _ GetZoneRequest_FieldPathArrayItemValue = (*GetZoneRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetZoneRequest as interface{}
func (fpaiv *GetZoneRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetZoneRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetZoneRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetZoneRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetZoneRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetZoneRequest'
func (fpaiv *GetZoneRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetZoneRequest) bool {
	slice := fpaiv.GetZoneRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetZoneRequest_FieldPathArrayOfValues allows storing slice of values for GetZoneRequest fields according to their type
type GetZoneRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetZoneRequest_FieldPath
}

func ParseGetZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetZoneRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetZoneRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetZoneRequest_FieldPathArrayOfValues), nil
}

func MustParseGetZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetZoneRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetZoneRequest_FieldTerminalPathArrayOfValues struct {
	GetZoneRequest_FieldTerminalPath
	values interface{}
}

var _ GetZoneRequest_FieldPathArrayOfValues = (*GetZoneRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetZoneRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetZoneRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	case GetZoneRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case GetZoneRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetZoneRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}
func (fpaov *GetZoneRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *GetZoneRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetZonesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetZonesRequest_FieldPathSelector
	Get(source *BatchGetZonesRequest) []interface{}
	GetSingle(source *BatchGetZonesRequest) (interface{}, bool)
	ClearValue(item *BatchGetZonesRequest)

	// Those methods build corresponding BatchGetZonesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetZonesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetZonesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetZonesRequest_FieldPathArrayItemValue
}

type BatchGetZonesRequest_FieldPathSelector int32

const (
	BatchGetZonesRequest_FieldPathSelectorParent    BatchGetZonesRequest_FieldPathSelector = 0
	BatchGetZonesRequest_FieldPathSelectorNames     BatchGetZonesRequest_FieldPathSelector = 1
	BatchGetZonesRequest_FieldPathSelectorFieldMask BatchGetZonesRequest_FieldPathSelector = 2
	BatchGetZonesRequest_FieldPathSelectorView      BatchGetZonesRequest_FieldPathSelector = 3
)

func (s BatchGetZonesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetZonesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", s))
	}
}

func BuildBatchGetZonesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetZonesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetZonesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetZonesRequest_FieldTerminalPath{selector: BatchGetZonesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetZonesRequest", fp)
}

func ParseBatchGetZonesRequest_FieldPath(rawField string) (BatchGetZonesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetZonesRequest_FieldPath(fp)
}

func MustParseBatchGetZonesRequest_FieldPath(rawField string) BatchGetZonesRequest_FieldPath {
	fp, err := ParseBatchGetZonesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetZonesRequest_FieldTerminalPath struct {
	selector BatchGetZonesRequest_FieldPathSelector
}

var _ BatchGetZonesRequest_FieldPath = (*BatchGetZonesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetZonesRequest_FieldTerminalPath) Selector() BatchGetZonesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetZonesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetZonesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetZonesRequest
func (fp *BatchGetZonesRequest_FieldTerminalPath) Get(source *BatchGetZonesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetZonesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetZonesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetZonesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetZonesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetZonesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetZonesRequest
func (fp *BatchGetZonesRequest_FieldTerminalPath) GetSingle(source *BatchGetZonesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetZonesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetZonesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetZonesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetZonesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		return (*zone.Reference)(nil)
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return ([]*zone.Reference)(nil)
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	case BatchGetZonesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) ClearValue(item *BatchGetZonesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetZonesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetZonesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetZonesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetZonesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetZonesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetZonesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetZonesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetZonesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetZonesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetZonesRequest_FieldPathSelectorView
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetZonesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		return &BatchGetZonesRequest_FieldTerminalPathValue{BatchGetZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return &BatchGetZonesRequest_FieldTerminalPathValue{BatchGetZonesRequest_FieldTerminalPath: *fp, value: value.([]*zone.Reference)}
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		return &BatchGetZonesRequest_FieldTerminalPathValue{BatchGetZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case BatchGetZonesRequest_FieldPathSelectorView:
		return &BatchGetZonesRequest_FieldTerminalPathValue{BatchGetZonesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetZonesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetZonesRequest_FieldTerminalPathArrayOfValues{BatchGetZonesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		return &BatchGetZonesRequest_FieldTerminalPathArrayOfValues{BatchGetZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return &BatchGetZonesRequest_FieldTerminalPathArrayOfValues{BatchGetZonesRequest_FieldTerminalPath: *fp, values: values.([][]*zone.Reference)}
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		return &BatchGetZonesRequest_FieldTerminalPathArrayOfValues{BatchGetZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case BatchGetZonesRequest_FieldPathSelectorView:
		return &BatchGetZonesRequest_FieldTerminalPathArrayOfValues{BatchGetZonesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetZonesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return &BatchGetZonesRequest_FieldTerminalPathArrayItemValue{BatchGetZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetZonesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetZonesRequest_FieldPathValue allows storing values for BatchGetZonesRequest fields according to their type
type BatchGetZonesRequest_FieldPathValue interface {
	BatchGetZonesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetZonesRequest)
	CompareWith(*BatchGetZonesRequest) (cmp int, comparable bool)
}

func ParseBatchGetZonesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetZonesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetZonesRequest_FieldPathValue), nil
}

func MustParseBatchGetZonesRequest_FieldPathValue(pathStr, valueStr string) BatchGetZonesRequest_FieldPathValue {
	fpv, err := ParseBatchGetZonesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetZonesRequest_FieldTerminalPathValue struct {
	BatchGetZonesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetZonesRequest_FieldPathValue = (*BatchGetZonesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetZonesRequest' as interface{}
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) AsParentValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) AsNamesValue() ([]*zone.Reference, bool) {
	res, ok := fpv.value.([]*zone.Reference)
	return res, ok
}
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetZonesRequest
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) SetTo(target **BatchGetZonesRequest) {
	if *target == nil {
		*target = new(BatchGetZonesRequest)
	}
	switch fpv.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*zone.Reference)
	case BatchGetZonesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*zone.Reference)
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	case BatchGetZonesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetZonesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetZonesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetZonesRequest'.
func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetZonesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetZonesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetZonesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetZonesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetZonesRequest))
}

// BatchGetZonesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetZonesRequest according to their type
// Present only for array (repeated) types.
type BatchGetZonesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetZonesRequest_FieldPath
	ContainsValue(*BatchGetZonesRequest) bool
}

// ParseBatchGetZonesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetZonesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetZonesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetZonesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetZonesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetZonesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetZonesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetZonesRequest_FieldPathArrayItemValue = (*BatchGetZonesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetZonesRequest as interface{}
func (fpaiv *BatchGetZonesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetZonesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*zone.Reference, bool) {
	res, ok := fpaiv.value.(*zone.Reference)
	return res, ok
}

func (fpaiv *BatchGetZonesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetZonesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetZonesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetZonesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetZonesRequest'
func (fpaiv *BatchGetZonesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetZonesRequest) bool {
	slice := fpaiv.BatchGetZonesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetZonesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetZonesRequest fields according to their type
type BatchGetZonesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetZonesRequest_FieldPath
}

func ParseBatchGetZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetZonesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetZonesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetZonesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetZonesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetZonesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetZonesRequest_FieldPathArrayOfValues = (*BatchGetZonesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetZonesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetZonesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	case BatchGetZonesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*zone.Reference) {
			values = append(values, v)
		}
	case BatchGetZonesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case BatchGetZonesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetZonesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}
func (fpaov *BatchGetZonesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*zone.Reference, bool) {
	res, ok := fpaov.values.([][]*zone.Reference)
	return res, ok
}
func (fpaov *BatchGetZonesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *BatchGetZonesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetZonesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetZonesResponse_FieldPathSelector
	Get(source *BatchGetZonesResponse) []interface{}
	GetSingle(source *BatchGetZonesResponse) (interface{}, bool)
	ClearValue(item *BatchGetZonesResponse)

	// Those methods build corresponding BatchGetZonesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetZonesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetZonesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetZonesResponse_FieldPathArrayItemValue
}

type BatchGetZonesResponse_FieldPathSelector int32

const (
	BatchGetZonesResponse_FieldPathSelectorZones   BatchGetZonesResponse_FieldPathSelector = 0
	BatchGetZonesResponse_FieldPathSelectorMissing BatchGetZonesResponse_FieldPathSelector = 1
)

func (s BatchGetZonesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return "zones"
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", s))
	}
}

func BuildBatchGetZonesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetZonesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetZonesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "zones":
			return &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorZones}, nil
		case "missing":
			return &BatchGetZonesResponse_FieldTerminalPath{selector: BatchGetZonesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "zones":
			if subpath, err := zone.BuildZone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetZonesResponse_FieldSubPath{selector: BatchGetZonesResponse_FieldPathSelectorZones, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetZonesResponse", fp)
}

func ParseBatchGetZonesResponse_FieldPath(rawField string) (BatchGetZonesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetZonesResponse_FieldPath(fp)
}

func MustParseBatchGetZonesResponse_FieldPath(rawField string) BatchGetZonesResponse_FieldPath {
	fp, err := ParseBatchGetZonesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetZonesResponse_FieldTerminalPath struct {
	selector BatchGetZonesResponse_FieldPathSelector
}

var _ BatchGetZonesResponse_FieldPath = (*BatchGetZonesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetZonesResponse_FieldTerminalPath) Selector() BatchGetZonesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetZonesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetZonesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetZonesResponse
func (fp *BatchGetZonesResponse_FieldTerminalPath) Get(source *BatchGetZonesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetZonesResponse_FieldPathSelectorZones:
			for _, value := range source.GetZones() {
				values = append(values, value)
			}
		case BatchGetZonesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetZonesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetZonesResponse
func (fp *BatchGetZonesResponse_FieldTerminalPath) GetSingle(source *BatchGetZonesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		res := source.GetZones()
		return res, res != nil
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetZonesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetZonesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return ([]*zone.Zone)(nil)
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return ([]*zone.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) ClearValue(item *BatchGetZonesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetZonesResponse_FieldPathSelectorZones:
			item.Zones = nil
		case BatchGetZonesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetZonesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetZonesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetZonesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return &BatchGetZonesResponse_FieldTerminalPathValue{BatchGetZonesResponse_FieldTerminalPath: *fp, value: value.([]*zone.Zone)}
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return &BatchGetZonesResponse_FieldTerminalPathValue{BatchGetZonesResponse_FieldTerminalPath: *fp, value: value.([]*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetZonesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetZonesResponse_FieldTerminalPathArrayOfValues{BatchGetZonesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return &BatchGetZonesResponse_FieldTerminalPathArrayOfValues{BatchGetZonesResponse_FieldTerminalPath: *fp, values: values.([][]*zone.Zone)}
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return &BatchGetZonesResponse_FieldTerminalPathArrayOfValues{BatchGetZonesResponse_FieldTerminalPath: *fp, values: values.([][]*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetZonesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return &BatchGetZonesResponse_FieldTerminalPathArrayItemValue{BatchGetZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.Zone)}
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return &BatchGetZonesResponse_FieldTerminalPathArrayItemValue{BatchGetZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetZonesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetZonesResponse_FieldSubPath struct {
	selector BatchGetZonesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetZonesResponse_FieldPath = (*BatchGetZonesResponse_FieldSubPath)(nil)

func (fps *BatchGetZonesResponse_FieldSubPath) Selector() BatchGetZonesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetZonesResponse_FieldSubPath) AsZonesSubPath() (zone.Zone_FieldPath, bool) {
	res, ok := fps.subPath.(zone.Zone_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetZonesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetZonesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetZonesResponse
func (fps *BatchGetZonesResponse_FieldSubPath) Get(source *BatchGetZonesResponse) (values []interface{}) {
	if asZoneFieldPath, ok := fps.AsZonesSubPath(); ok {
		for _, item := range source.GetZones() {
			values = append(values, asZoneFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetZonesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetZonesResponse))
}

// GetSingle returns value of selected field from source BatchGetZonesResponse
func (fps *BatchGetZonesResponse_FieldSubPath) GetSingle(source *BatchGetZonesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		if len(source.GetZones()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetZones()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetZonesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetZonesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetZonesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetZonesResponse_FieldSubPath) ClearValue(item *BatchGetZonesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetZonesResponse_FieldPathSelectorZones:
			for _, subItem := range item.Zones {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetZonesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetZonesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetZonesResponse_FieldPathValue {
	return &BatchGetZonesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetZonesResponse_FieldPathArrayOfValues {
	return &BatchGetZonesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetZonesResponse_FieldPathArrayItemValue {
	return &BatchGetZonesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetZonesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetZonesResponse_FieldPathValue allows storing values for BatchGetZonesResponse fields according to their type
type BatchGetZonesResponse_FieldPathValue interface {
	BatchGetZonesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetZonesResponse)
	CompareWith(*BatchGetZonesResponse) (cmp int, comparable bool)
}

func ParseBatchGetZonesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetZonesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetZonesResponse_FieldPathValue), nil
}

func MustParseBatchGetZonesResponse_FieldPathValue(pathStr, valueStr string) BatchGetZonesResponse_FieldPathValue {
	fpv, err := ParseBatchGetZonesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetZonesResponse_FieldTerminalPathValue struct {
	BatchGetZonesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetZonesResponse_FieldPathValue = (*BatchGetZonesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetZonesResponse' as interface{}
func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) AsZonesValue() ([]*zone.Zone, bool) {
	res, ok := fpv.value.([]*zone.Zone)
	return res, ok
}
func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) AsMissingValue() ([]*zone.Reference, bool) {
	res, ok := fpv.value.([]*zone.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetZonesResponse
func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) SetTo(target **BatchGetZonesResponse) {
	if *target == nil {
		*target = new(BatchGetZonesResponse)
	}
	switch fpv.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		(*target).Zones = fpv.value.([]*zone.Zone)
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*zone.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetZonesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetZonesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetZonesResponse'.
func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetZonesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return 0, false
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetZonesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetZonesResponse))
}

type BatchGetZonesResponse_FieldSubPathValue struct {
	BatchGetZonesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetZonesResponse_FieldPathValue = (*BatchGetZonesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) AsZonesPathValue() (zone.Zone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(zone.Zone_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) SetTo(target **BatchGetZonesResponse) {
	if *target == nil {
		*target = new(BatchGetZonesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetZonesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) CompareWith(source *BatchGetZonesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetZonesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetZonesResponse))
}

// BatchGetZonesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetZonesResponse according to their type
// Present only for array (repeated) types.
type BatchGetZonesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetZonesResponse_FieldPath
	ContainsValue(*BatchGetZonesResponse) bool
}

// ParseBatchGetZonesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetZonesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetZonesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetZonesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetZonesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetZonesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetZonesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetZonesResponse_FieldPathArrayItemValue = (*BatchGetZonesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetZonesResponse as interface{}
func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) AsZonesItemValue() (*zone.Zone, bool) {
	res, ok := fpaiv.value.(*zone.Zone)
	return res, ok
}
func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*zone.Reference, bool) {
	res, ok := fpaiv.value.(*zone.Reference)
	return res, ok
}

func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetZonesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetZonesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetZonesResponse'
func (fpaiv *BatchGetZonesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetZonesResponse) bool {
	slice := fpaiv.BatchGetZonesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetZonesResponse_FieldSubPathArrayItemValue struct {
	BatchGetZonesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetZonesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetZonesResponse_FieldSubPathArrayItemValue) AsZonesPathItemValue() (zone.Zone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetZonesResponse'
func (fpaivs *BatchGetZonesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetZonesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetZonesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetZonesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetZonesResponse fields according to their type
type BatchGetZonesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetZonesResponse_FieldPath
}

func ParseBatchGetZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetZonesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetZonesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetZonesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetZonesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetZonesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetZonesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetZonesResponse_FieldPathArrayOfValues = (*BatchGetZonesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetZonesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetZonesResponse_FieldPathSelectorZones:
		for _, v := range fpaov.values.([][]*zone.Zone) {
			values = append(values, v)
		}
	case BatchGetZonesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*zone.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetZonesResponse_FieldTerminalPathArrayOfValues) AsZonesArrayOfValues() ([][]*zone.Zone, bool) {
	res, ok := fpaov.values.([][]*zone.Zone)
	return res, ok
}
func (fpaov *BatchGetZonesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*zone.Reference, bool) {
	res, ok := fpaov.values.([][]*zone.Reference)
	return res, ok
}

type BatchGetZonesResponse_FieldSubPathArrayOfValues struct {
	BatchGetZonesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetZonesResponse_FieldPathArrayOfValues = (*BatchGetZonesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetZonesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetZonesResponse_FieldSubPathArrayOfValues) AsZonesPathArrayOfValues() (zone.Zone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(zone.Zone_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListZonesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListZonesRequest_FieldPathSelector
	Get(source *ListZonesRequest) []interface{}
	GetSingle(source *ListZonesRequest) (interface{}, bool)
	ClearValue(item *ListZonesRequest)

	// Those methods build corresponding ListZonesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListZonesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListZonesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListZonesRequest_FieldPathArrayItemValue
}

type ListZonesRequest_FieldPathSelector int32

const (
	ListZonesRequest_FieldPathSelectorParent    ListZonesRequest_FieldPathSelector = 0
	ListZonesRequest_FieldPathSelectorPageSize  ListZonesRequest_FieldPathSelector = 1
	ListZonesRequest_FieldPathSelectorPageToken ListZonesRequest_FieldPathSelector = 2
	ListZonesRequest_FieldPathSelectorOrderBy   ListZonesRequest_FieldPathSelector = 3
	ListZonesRequest_FieldPathSelectorFilter    ListZonesRequest_FieldPathSelector = 4
	ListZonesRequest_FieldPathSelectorFieldMask ListZonesRequest_FieldPathSelector = 5
	ListZonesRequest_FieldPathSelectorView      ListZonesRequest_FieldPathSelector = 6
)

func (s ListZonesRequest_FieldPathSelector) String() string {
	switch s {
	case ListZonesRequest_FieldPathSelectorParent:
		return "parent"
	case ListZonesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListZonesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListZonesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListZonesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListZonesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListZonesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", s))
	}
}

func BuildListZonesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListZonesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListZonesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListZonesRequest_FieldTerminalPath{selector: ListZonesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListZonesRequest", fp)
}

func ParseListZonesRequest_FieldPath(rawField string) (ListZonesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListZonesRequest_FieldPath(fp)
}

func MustParseListZonesRequest_FieldPath(rawField string) ListZonesRequest_FieldPath {
	fp, err := ParseListZonesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListZonesRequest_FieldTerminalPath struct {
	selector ListZonesRequest_FieldPathSelector
}

var _ ListZonesRequest_FieldPath = (*ListZonesRequest_FieldTerminalPath)(nil)

func (fp *ListZonesRequest_FieldTerminalPath) Selector() ListZonesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListZonesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListZonesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListZonesRequest
func (fp *ListZonesRequest_FieldTerminalPath) Get(source *ListZonesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListZonesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListZonesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListZonesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListZonesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListZonesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListZonesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListZonesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListZonesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListZonesRequest))
}

// GetSingle returns value pointed by specific field of from source ListZonesRequest
func (fp *ListZonesRequest_FieldTerminalPath) GetSingle(source *ListZonesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListZonesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListZonesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListZonesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListZonesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListZonesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListZonesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
	}
}

func (fp *ListZonesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListZonesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListZonesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		return (*zone.ParentName)(nil)
	case ListZonesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListZonesRequest_FieldPathSelectorPageToken:
		return (*zone.PagerCursor)(nil)
	case ListZonesRequest_FieldPathSelectorOrderBy:
		return (*zone.OrderBy)(nil)
	case ListZonesRequest_FieldPathSelectorFilter:
		return (*zone.Filter)(nil)
	case ListZonesRequest_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	case ListZonesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
	}
}

func (fp *ListZonesRequest_FieldTerminalPath) ClearValue(item *ListZonesRequest) {
	if item != nil {
		switch fp.selector {
		case ListZonesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListZonesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListZonesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListZonesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListZonesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListZonesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListZonesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListZonesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListZonesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListZonesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListZonesRequest_FieldPathSelectorParent ||
		fp.selector == ListZonesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListZonesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListZonesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListZonesRequest_FieldPathSelectorFilter ||
		fp.selector == ListZonesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListZonesRequest_FieldPathSelectorView
}

func (fp *ListZonesRequest_FieldTerminalPath) WithIValue(value interface{}) ListZonesRequest_FieldPathValue {
	switch fp.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.ParentName)}
	case ListZonesRequest_FieldPathSelectorPageSize:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListZonesRequest_FieldPathSelectorPageToken:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	case ListZonesRequest_FieldPathSelectorOrderBy:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.OrderBy)}
	case ListZonesRequest_FieldPathSelectorFilter:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Filter)}
	case ListZonesRequest_FieldPathSelectorFieldMask:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case ListZonesRequest_FieldPathSelectorView:
		return &ListZonesRequest_FieldTerminalPathValue{ListZonesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
	}
}

func (fp *ListZonesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListZonesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListZonesRequest_FieldPathArrayOfValues {
	fpaov := &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.ParentName)}
	case ListZonesRequest_FieldPathSelectorPageSize:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListZonesRequest_FieldPathSelectorPageToken:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	case ListZonesRequest_FieldPathSelectorOrderBy:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.OrderBy)}
	case ListZonesRequest_FieldPathSelectorFilter:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Filter)}
	case ListZonesRequest_FieldPathSelectorFieldMask:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case ListZonesRequest_FieldPathSelectorView:
		return &ListZonesRequest_FieldTerminalPathArrayOfValues{ListZonesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListZonesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListZonesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListZonesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fp.selector))
	}
}

func (fp *ListZonesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListZonesRequest_FieldPathValue allows storing values for ListZonesRequest fields according to their type
type ListZonesRequest_FieldPathValue interface {
	ListZonesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListZonesRequest)
	CompareWith(*ListZonesRequest) (cmp int, comparable bool)
}

func ParseListZonesRequest_FieldPathValue(pathStr, valueStr string) (ListZonesRequest_FieldPathValue, error) {
	fp, err := ParseListZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListZonesRequest_FieldPathValue), nil
}

func MustParseListZonesRequest_FieldPathValue(pathStr, valueStr string) ListZonesRequest_FieldPathValue {
	fpv, err := ParseListZonesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListZonesRequest_FieldTerminalPathValue struct {
	ListZonesRequest_FieldTerminalPath
	value interface{}
}

var _ ListZonesRequest_FieldPathValue = (*ListZonesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListZonesRequest' as interface{}
func (fpv *ListZonesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsParentValue() (*zone.ParentName, bool) {
	res, ok := fpv.value.(*zone.ParentName)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsOrderByValue() (*zone.OrderBy, bool) {
	res, ok := fpv.value.(*zone.OrderBy)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsFilterValue() (*zone.Filter, bool) {
	res, ok := fpv.value.(*zone.Filter)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *ListZonesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListZonesRequest
func (fpv *ListZonesRequest_FieldTerminalPathValue) SetTo(target **ListZonesRequest) {
	if *target == nil {
		*target = new(ListZonesRequest)
	}
	switch fpv.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*zone.ParentName)
	case ListZonesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListZonesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*zone.PagerCursor)
	case ListZonesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*zone.OrderBy)
	case ListZonesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*zone.Filter)
	case ListZonesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	case ListZonesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fpv.selector))
	}
}

func (fpv *ListZonesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListZonesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListZonesRequest_FieldTerminalPathValue' with the value under path in 'ListZonesRequest'.
func (fpv *ListZonesRequest_FieldTerminalPathValue) CompareWith(source *ListZonesRequest) (int, bool) {
	switch fpv.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*zone.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListZonesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListZonesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListZonesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListZonesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListZonesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListZonesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesRequest: %d", fpv.selector))
	}
}

func (fpv *ListZonesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListZonesRequest))
}

// ListZonesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListZonesRequest according to their type
// Present only for array (repeated) types.
type ListZonesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListZonesRequest_FieldPath
	ContainsValue(*ListZonesRequest) bool
}

// ParseListZonesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListZonesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListZonesRequest_FieldPathArrayItemValue), nil
}

func MustParseListZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListZonesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListZonesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListZonesRequest_FieldTerminalPathArrayItemValue struct {
	ListZonesRequest_FieldTerminalPath
	value interface{}
}

var _ ListZonesRequest_FieldPathArrayItemValue = (*ListZonesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListZonesRequest as interface{}
func (fpaiv *ListZonesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListZonesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListZonesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListZonesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListZonesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListZonesRequest'
func (fpaiv *ListZonesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListZonesRequest) bool {
	slice := fpaiv.ListZonesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListZonesRequest_FieldPathArrayOfValues allows storing slice of values for ListZonesRequest fields according to their type
type ListZonesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListZonesRequest_FieldPath
}

func ParseListZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListZonesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListZonesRequest_FieldPathArrayOfValues), nil
}

func MustParseListZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListZonesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListZonesRequest_FieldTerminalPathArrayOfValues struct {
	ListZonesRequest_FieldTerminalPath
	values interface{}
}

var _ ListZonesRequest_FieldPathArrayOfValues = (*ListZonesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListZonesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*zone.ParentName) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*zone.OrderBy) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*zone.Filter) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case ListZonesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*zone.ParentName, bool) {
	res, ok := fpaov.values.([]*zone.ParentName)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*zone.OrderBy, bool) {
	res, ok := fpaov.values.([]*zone.OrderBy)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*zone.Filter, bool) {
	res, ok := fpaov.values.([]*zone.Filter)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *ListZonesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListZonesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListZonesResponse_FieldPathSelector
	Get(source *ListZonesResponse) []interface{}
	GetSingle(source *ListZonesResponse) (interface{}, bool)
	ClearValue(item *ListZonesResponse)

	// Those methods build corresponding ListZonesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListZonesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListZonesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListZonesResponse_FieldPathArrayItemValue
}

type ListZonesResponse_FieldPathSelector int32

const (
	ListZonesResponse_FieldPathSelectorZones         ListZonesResponse_FieldPathSelector = 0
	ListZonesResponse_FieldPathSelectorPrevPageToken ListZonesResponse_FieldPathSelector = 1
	ListZonesResponse_FieldPathSelectorNextPageToken ListZonesResponse_FieldPathSelector = 2
)

func (s ListZonesResponse_FieldPathSelector) String() string {
	switch s {
	case ListZonesResponse_FieldPathSelectorZones:
		return "zones"
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", s))
	}
}

func BuildListZonesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListZonesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListZonesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "zones":
			return &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorZones}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListZonesResponse_FieldTerminalPath{selector: ListZonesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "zones":
			if subpath, err := zone.BuildZone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListZonesResponse_FieldSubPath{selector: ListZonesResponse_FieldPathSelectorZones, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListZonesResponse", fp)
}

func ParseListZonesResponse_FieldPath(rawField string) (ListZonesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListZonesResponse_FieldPath(fp)
}

func MustParseListZonesResponse_FieldPath(rawField string) ListZonesResponse_FieldPath {
	fp, err := ParseListZonesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListZonesResponse_FieldTerminalPath struct {
	selector ListZonesResponse_FieldPathSelector
}

var _ ListZonesResponse_FieldPath = (*ListZonesResponse_FieldTerminalPath)(nil)

func (fp *ListZonesResponse_FieldTerminalPath) Selector() ListZonesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListZonesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListZonesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListZonesResponse
func (fp *ListZonesResponse_FieldTerminalPath) Get(source *ListZonesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListZonesResponse_FieldPathSelectorZones:
			for _, value := range source.GetZones() {
				values = append(values, value)
			}
		case ListZonesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListZonesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListZonesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListZonesResponse))
}

// GetSingle returns value pointed by specific field of from source ListZonesResponse
func (fp *ListZonesResponse_FieldTerminalPath) GetSingle(source *ListZonesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		res := source.GetZones()
		return res, res != nil
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
	}
}

func (fp *ListZonesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListZonesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListZonesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		return ([]*zone.Zone)(nil)
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		return (*zone.PagerCursor)(nil)
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		return (*zone.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
	}
}

func (fp *ListZonesResponse_FieldTerminalPath) ClearValue(item *ListZonesResponse) {
	if item != nil {
		switch fp.selector {
		case ListZonesResponse_FieldPathSelectorZones:
			item.Zones = nil
		case ListZonesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListZonesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListZonesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListZonesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListZonesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListZonesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListZonesResponse_FieldTerminalPath) WithIValue(value interface{}) ListZonesResponse_FieldPathValue {
	switch fp.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		return &ListZonesResponse_FieldTerminalPathValue{ListZonesResponse_FieldTerminalPath: *fp, value: value.([]*zone.Zone)}
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		return &ListZonesResponse_FieldTerminalPathValue{ListZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		return &ListZonesResponse_FieldTerminalPathValue{ListZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
	}
}

func (fp *ListZonesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListZonesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListZonesResponse_FieldPathArrayOfValues {
	fpaov := &ListZonesResponse_FieldTerminalPathArrayOfValues{ListZonesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		return &ListZonesResponse_FieldTerminalPathArrayOfValues{ListZonesResponse_FieldTerminalPath: *fp, values: values.([][]*zone.Zone)}
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		return &ListZonesResponse_FieldTerminalPathArrayOfValues{ListZonesResponse_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		return &ListZonesResponse_FieldTerminalPathArrayOfValues{ListZonesResponse_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListZonesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListZonesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListZonesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		return &ListZonesResponse_FieldTerminalPathArrayItemValue{ListZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.Zone)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fp.selector))
	}
}

func (fp *ListZonesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListZonesResponse_FieldSubPath struct {
	selector ListZonesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListZonesResponse_FieldPath = (*ListZonesResponse_FieldSubPath)(nil)

func (fps *ListZonesResponse_FieldSubPath) Selector() ListZonesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListZonesResponse_FieldSubPath) AsZonesSubPath() (zone.Zone_FieldPath, bool) {
	res, ok := fps.subPath.(zone.Zone_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListZonesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListZonesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListZonesResponse
func (fps *ListZonesResponse_FieldSubPath) Get(source *ListZonesResponse) (values []interface{}) {
	if asZoneFieldPath, ok := fps.AsZonesSubPath(); ok {
		for _, item := range source.GetZones() {
			values = append(values, asZoneFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListZonesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListZonesResponse))
}

// GetSingle returns value of selected field from source ListZonesResponse
func (fps *ListZonesResponse_FieldSubPath) GetSingle(source *ListZonesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		if len(source.GetZones()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetZones()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fps.selector))
	}
}

func (fps *ListZonesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListZonesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListZonesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListZonesResponse_FieldSubPath) ClearValue(item *ListZonesResponse) {
	if item != nil {
		switch fps.selector {
		case ListZonesResponse_FieldPathSelectorZones:
			for _, subItem := range item.Zones {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListZonesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListZonesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListZonesResponse_FieldSubPath) WithIValue(value interface{}) ListZonesResponse_FieldPathValue {
	return &ListZonesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListZonesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListZonesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListZonesResponse_FieldPathArrayOfValues {
	return &ListZonesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListZonesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListZonesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListZonesResponse_FieldPathArrayItemValue {
	return &ListZonesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListZonesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListZonesResponse_FieldPathValue allows storing values for ListZonesResponse fields according to their type
type ListZonesResponse_FieldPathValue interface {
	ListZonesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListZonesResponse)
	CompareWith(*ListZonesResponse) (cmp int, comparable bool)
}

func ParseListZonesResponse_FieldPathValue(pathStr, valueStr string) (ListZonesResponse_FieldPathValue, error) {
	fp, err := ParseListZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListZonesResponse_FieldPathValue), nil
}

func MustParseListZonesResponse_FieldPathValue(pathStr, valueStr string) ListZonesResponse_FieldPathValue {
	fpv, err := ParseListZonesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListZonesResponse_FieldTerminalPathValue struct {
	ListZonesResponse_FieldTerminalPath
	value interface{}
}

var _ ListZonesResponse_FieldPathValue = (*ListZonesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListZonesResponse' as interface{}
func (fpv *ListZonesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListZonesResponse_FieldTerminalPathValue) AsZonesValue() ([]*zone.Zone, bool) {
	res, ok := fpv.value.([]*zone.Zone)
	return res, ok
}
func (fpv *ListZonesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}
func (fpv *ListZonesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListZonesResponse
func (fpv *ListZonesResponse_FieldTerminalPathValue) SetTo(target **ListZonesResponse) {
	if *target == nil {
		*target = new(ListZonesResponse)
	}
	switch fpv.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		(*target).Zones = fpv.value.([]*zone.Zone)
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*zone.PagerCursor)
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*zone.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fpv.selector))
	}
}

func (fpv *ListZonesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListZonesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListZonesResponse_FieldTerminalPathValue' with the value under path in 'ListZonesResponse'.
func (fpv *ListZonesResponse_FieldTerminalPathValue) CompareWith(source *ListZonesResponse) (int, bool) {
	switch fpv.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		return 0, false
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fpv.selector))
	}
}

func (fpv *ListZonesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListZonesResponse))
}

type ListZonesResponse_FieldSubPathValue struct {
	ListZonesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListZonesResponse_FieldPathValue = (*ListZonesResponse_FieldSubPathValue)(nil)

func (fpvs *ListZonesResponse_FieldSubPathValue) AsZonesPathValue() (zone.Zone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(zone.Zone_FieldPathValue)
	return res, ok
}

func (fpvs *ListZonesResponse_FieldSubPathValue) SetTo(target **ListZonesResponse) {
	if *target == nil {
		*target = new(ListZonesResponse)
	}
	switch fpvs.Selector() {
	case ListZonesResponse_FieldPathSelectorZones:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListZonesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListZonesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListZonesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListZonesResponse_FieldSubPathValue) CompareWith(source *ListZonesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListZonesResponse_FieldPathSelectorZones:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListZonesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListZonesResponse))
}

// ListZonesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListZonesResponse according to their type
// Present only for array (repeated) types.
type ListZonesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListZonesResponse_FieldPath
	ContainsValue(*ListZonesResponse) bool
}

// ParseListZonesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListZonesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListZonesResponse_FieldPathArrayItemValue), nil
}

func MustParseListZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListZonesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListZonesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListZonesResponse_FieldTerminalPathArrayItemValue struct {
	ListZonesResponse_FieldTerminalPath
	value interface{}
}

var _ ListZonesResponse_FieldPathArrayItemValue = (*ListZonesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListZonesResponse as interface{}
func (fpaiv *ListZonesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListZonesResponse_FieldTerminalPathArrayItemValue) AsZonesItemValue() (*zone.Zone, bool) {
	res, ok := fpaiv.value.(*zone.Zone)
	return res, ok
}

func (fpaiv *ListZonesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListZonesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListZonesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListZonesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListZonesResponse'
func (fpaiv *ListZonesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListZonesResponse) bool {
	slice := fpaiv.ListZonesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListZonesResponse_FieldSubPathArrayItemValue struct {
	ListZonesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListZonesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListZonesResponse_FieldSubPathArrayItemValue) AsZonesPathItemValue() (zone.Zone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListZonesResponse'
func (fpaivs *ListZonesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListZonesResponse) bool {
	switch fpaivs.Selector() {
	case ListZonesResponse_FieldPathSelectorZones:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListZonesResponse: %d", fpaivs.Selector()))
	}
}

// ListZonesResponse_FieldPathArrayOfValues allows storing slice of values for ListZonesResponse fields according to their type
type ListZonesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListZonesResponse_FieldPath
}

func ParseListZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListZonesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListZonesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListZonesResponse_FieldPathArrayOfValues), nil
}

func MustParseListZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListZonesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListZonesResponse_FieldTerminalPathArrayOfValues struct {
	ListZonesResponse_FieldTerminalPath
	values interface{}
}

var _ ListZonesResponse_FieldPathArrayOfValues = (*ListZonesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListZonesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListZonesResponse_FieldPathSelectorZones:
		for _, v := range fpaov.values.([][]*zone.Zone) {
			values = append(values, v)
		}
	case ListZonesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	case ListZonesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListZonesResponse_FieldTerminalPathArrayOfValues) AsZonesArrayOfValues() ([][]*zone.Zone, bool) {
	res, ok := fpaov.values.([][]*zone.Zone)
	return res, ok
}
func (fpaov *ListZonesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}
func (fpaov *ListZonesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}

type ListZonesResponse_FieldSubPathArrayOfValues struct {
	ListZonesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListZonesResponse_FieldPathArrayOfValues = (*ListZonesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListZonesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListZonesResponse_FieldSubPathArrayOfValues) AsZonesPathArrayOfValues() (zone.Zone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(zone.Zone_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchZoneRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchZoneRequest_FieldPathSelector
	Get(source *WatchZoneRequest) []interface{}
	GetSingle(source *WatchZoneRequest) (interface{}, bool)
	ClearValue(item *WatchZoneRequest)

	// Those methods build corresponding WatchZoneRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchZoneRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchZoneRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchZoneRequest_FieldPathArrayItemValue
}

type WatchZoneRequest_FieldPathSelector int32

const (
	WatchZoneRequest_FieldPathSelectorName      WatchZoneRequest_FieldPathSelector = 0
	WatchZoneRequest_FieldPathSelectorFieldMask WatchZoneRequest_FieldPathSelector = 1
	WatchZoneRequest_FieldPathSelectorView      WatchZoneRequest_FieldPathSelector = 2
)

func (s WatchZoneRequest_FieldPathSelector) String() string {
	switch s {
	case WatchZoneRequest_FieldPathSelectorName:
		return "name"
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchZoneRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", s))
	}
}

func BuildWatchZoneRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchZoneRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchZoneRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchZoneRequest_FieldTerminalPath{selector: WatchZoneRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchZoneRequest", fp)
}

func ParseWatchZoneRequest_FieldPath(rawField string) (WatchZoneRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchZoneRequest_FieldPath(fp)
}

func MustParseWatchZoneRequest_FieldPath(rawField string) WatchZoneRequest_FieldPath {
	fp, err := ParseWatchZoneRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchZoneRequest_FieldTerminalPath struct {
	selector WatchZoneRequest_FieldPathSelector
}

var _ WatchZoneRequest_FieldPath = (*WatchZoneRequest_FieldTerminalPath)(nil)

func (fp *WatchZoneRequest_FieldTerminalPath) Selector() WatchZoneRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchZoneRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchZoneRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchZoneRequest
func (fp *WatchZoneRequest_FieldTerminalPath) Get(source *WatchZoneRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchZoneRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchZoneRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchZoneRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchZoneRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchZoneRequest))
}

// GetSingle returns value pointed by specific field of from source WatchZoneRequest
func (fp *WatchZoneRequest_FieldTerminalPath) GetSingle(source *WatchZoneRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchZoneRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
	}
}

func (fp *WatchZoneRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchZoneRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchZoneRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		return (*zone.Reference)(nil)
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	case WatchZoneRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
	}
}

func (fp *WatchZoneRequest_FieldTerminalPath) ClearValue(item *WatchZoneRequest) {
	if item != nil {
		switch fp.selector {
		case WatchZoneRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchZoneRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchZoneRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchZoneRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchZoneRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchZoneRequest_FieldPathSelectorName ||
		fp.selector == WatchZoneRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchZoneRequest_FieldPathSelectorView
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithIValue(value interface{}) WatchZoneRequest_FieldPathValue {
	switch fp.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		return &WatchZoneRequest_FieldTerminalPathValue{WatchZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		return &WatchZoneRequest_FieldTerminalPathValue{WatchZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case WatchZoneRequest_FieldPathSelectorView:
		return &WatchZoneRequest_FieldTerminalPathValue{WatchZoneRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
	}
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchZoneRequest_FieldPathArrayOfValues {
	fpaov := &WatchZoneRequest_FieldTerminalPathArrayOfValues{WatchZoneRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		return &WatchZoneRequest_FieldTerminalPathArrayOfValues{WatchZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		return &WatchZoneRequest_FieldTerminalPathArrayOfValues{WatchZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case WatchZoneRequest_FieldPathSelectorView:
		return &WatchZoneRequest_FieldTerminalPathArrayOfValues{WatchZoneRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchZoneRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fp.selector))
	}
}

func (fp *WatchZoneRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchZoneRequest_FieldPathValue allows storing values for WatchZoneRequest fields according to their type
type WatchZoneRequest_FieldPathValue interface {
	WatchZoneRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchZoneRequest)
	CompareWith(*WatchZoneRequest) (cmp int, comparable bool)
}

func ParseWatchZoneRequest_FieldPathValue(pathStr, valueStr string) (WatchZoneRequest_FieldPathValue, error) {
	fp, err := ParseWatchZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchZoneRequest_FieldPathValue), nil
}

func MustParseWatchZoneRequest_FieldPathValue(pathStr, valueStr string) WatchZoneRequest_FieldPathValue {
	fpv, err := ParseWatchZoneRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchZoneRequest_FieldTerminalPathValue struct {
	WatchZoneRequest_FieldTerminalPath
	value interface{}
}

var _ WatchZoneRequest_FieldPathValue = (*WatchZoneRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchZoneRequest' as interface{}
func (fpv *WatchZoneRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchZoneRequest_FieldTerminalPathValue) AsNameValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}
func (fpv *WatchZoneRequest_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *WatchZoneRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchZoneRequest
func (fpv *WatchZoneRequest_FieldTerminalPathValue) SetTo(target **WatchZoneRequest) {
	if *target == nil {
		*target = new(WatchZoneRequest)
	}
	switch fpv.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*zone.Reference)
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	case WatchZoneRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fpv.selector))
	}
}

func (fpv *WatchZoneRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZoneRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchZoneRequest_FieldTerminalPathValue' with the value under path in 'WatchZoneRequest'.
func (fpv *WatchZoneRequest_FieldTerminalPathValue) CompareWith(source *WatchZoneRequest) (int, bool) {
	switch fpv.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchZoneRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneRequest: %d", fpv.selector))
	}
}

func (fpv *WatchZoneRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchZoneRequest))
}

// WatchZoneRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchZoneRequest according to their type
// Present only for array (repeated) types.
type WatchZoneRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchZoneRequest_FieldPath
	ContainsValue(*WatchZoneRequest) bool
}

// ParseWatchZoneRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchZoneRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchZoneRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchZoneRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchZoneRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchZoneRequest_FieldTerminalPathArrayItemValue struct {
	WatchZoneRequest_FieldTerminalPath
	value interface{}
}

var _ WatchZoneRequest_FieldPathArrayItemValue = (*WatchZoneRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchZoneRequest as interface{}
func (fpaiv *WatchZoneRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchZoneRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchZoneRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchZoneRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchZoneRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchZoneRequest'
func (fpaiv *WatchZoneRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchZoneRequest) bool {
	slice := fpaiv.WatchZoneRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchZoneRequest_FieldPathArrayOfValues allows storing slice of values for WatchZoneRequest fields according to their type
type WatchZoneRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchZoneRequest_FieldPath
}

func ParseWatchZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchZoneRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchZoneRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchZoneRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchZoneRequest_FieldTerminalPathArrayOfValues struct {
	WatchZoneRequest_FieldTerminalPath
	values interface{}
}

var _ WatchZoneRequest_FieldPathArrayOfValues = (*WatchZoneRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchZoneRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchZoneRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	case WatchZoneRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case WatchZoneRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchZoneRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}
func (fpaov *WatchZoneRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *WatchZoneRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchZoneResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchZoneResponse_FieldPathSelector
	Get(source *WatchZoneResponse) []interface{}
	GetSingle(source *WatchZoneResponse) (interface{}, bool)
	ClearValue(item *WatchZoneResponse)

	// Those methods build corresponding WatchZoneResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchZoneResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchZoneResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchZoneResponse_FieldPathArrayItemValue
}

type WatchZoneResponse_FieldPathSelector int32

const (
	WatchZoneResponse_FieldPathSelectorChange WatchZoneResponse_FieldPathSelector = 0
)

func (s WatchZoneResponse_FieldPathSelector) String() string {
	switch s {
	case WatchZoneResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", s))
	}
}

func BuildWatchZoneResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchZoneResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchZoneResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchZoneResponse_FieldTerminalPath{selector: WatchZoneResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchZoneResponse", fp)
}

func ParseWatchZoneResponse_FieldPath(rawField string) (WatchZoneResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchZoneResponse_FieldPath(fp)
}

func MustParseWatchZoneResponse_FieldPath(rawField string) WatchZoneResponse_FieldPath {
	fp, err := ParseWatchZoneResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchZoneResponse_FieldTerminalPath struct {
	selector WatchZoneResponse_FieldPathSelector
}

var _ WatchZoneResponse_FieldPath = (*WatchZoneResponse_FieldTerminalPath)(nil)

func (fp *WatchZoneResponse_FieldTerminalPath) Selector() WatchZoneResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchZoneResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchZoneResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchZoneResponse
func (fp *WatchZoneResponse_FieldTerminalPath) Get(source *WatchZoneResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchZoneResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchZoneResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchZoneResponse))
}

// GetSingle returns value pointed by specific field of from source WatchZoneResponse
func (fp *WatchZoneResponse_FieldTerminalPath) GetSingle(source *WatchZoneResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
	}
}

func (fp *WatchZoneResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchZoneResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchZoneResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		return (*zone.ZoneChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
	}
}

func (fp *WatchZoneResponse_FieldTerminalPath) ClearValue(item *WatchZoneResponse) {
	if item != nil {
		switch fp.selector {
		case WatchZoneResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchZoneResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchZoneResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchZoneResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchZoneResponse_FieldPathSelectorChange
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithIValue(value interface{}) WatchZoneResponse_FieldPathValue {
	switch fp.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		return &WatchZoneResponse_FieldTerminalPathValue{WatchZoneResponse_FieldTerminalPath: *fp, value: value.(*zone.ZoneChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
	}
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchZoneResponse_FieldPathArrayOfValues {
	fpaov := &WatchZoneResponse_FieldTerminalPathArrayOfValues{WatchZoneResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		return &WatchZoneResponse_FieldTerminalPathArrayOfValues{WatchZoneResponse_FieldTerminalPath: *fp, values: values.([]*zone.ZoneChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchZoneResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fp.selector))
	}
}

func (fp *WatchZoneResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchZoneResponse_FieldPathValue allows storing values for WatchZoneResponse fields according to their type
type WatchZoneResponse_FieldPathValue interface {
	WatchZoneResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchZoneResponse)
	CompareWith(*WatchZoneResponse) (cmp int, comparable bool)
}

func ParseWatchZoneResponse_FieldPathValue(pathStr, valueStr string) (WatchZoneResponse_FieldPathValue, error) {
	fp, err := ParseWatchZoneResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchZoneResponse_FieldPathValue), nil
}

func MustParseWatchZoneResponse_FieldPathValue(pathStr, valueStr string) WatchZoneResponse_FieldPathValue {
	fpv, err := ParseWatchZoneResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchZoneResponse_FieldTerminalPathValue struct {
	WatchZoneResponse_FieldTerminalPath
	value interface{}
}

var _ WatchZoneResponse_FieldPathValue = (*WatchZoneResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchZoneResponse' as interface{}
func (fpv *WatchZoneResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchZoneResponse_FieldTerminalPathValue) AsChangeValue() (*zone.ZoneChange, bool) {
	res, ok := fpv.value.(*zone.ZoneChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchZoneResponse
func (fpv *WatchZoneResponse_FieldTerminalPathValue) SetTo(target **WatchZoneResponse) {
	if *target == nil {
		*target = new(WatchZoneResponse)
	}
	switch fpv.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*zone.ZoneChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fpv.selector))
	}
}

func (fpv *WatchZoneResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZoneResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchZoneResponse_FieldTerminalPathValue' with the value under path in 'WatchZoneResponse'.
func (fpv *WatchZoneResponse_FieldTerminalPathValue) CompareWith(source *WatchZoneResponse) (int, bool) {
	switch fpv.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZoneResponse: %d", fpv.selector))
	}
}

func (fpv *WatchZoneResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchZoneResponse))
}

// WatchZoneResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchZoneResponse according to their type
// Present only for array (repeated) types.
type WatchZoneResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchZoneResponse_FieldPath
	ContainsValue(*WatchZoneResponse) bool
}

// ParseWatchZoneResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchZoneResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchZoneResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchZoneResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchZoneResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchZoneResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchZoneResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchZoneResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchZoneResponse_FieldTerminalPathArrayItemValue struct {
	WatchZoneResponse_FieldTerminalPath
	value interface{}
}

var _ WatchZoneResponse_FieldPathArrayItemValue = (*WatchZoneResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchZoneResponse as interface{}
func (fpaiv *WatchZoneResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchZoneResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchZoneResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchZoneResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchZoneResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchZoneResponse'
func (fpaiv *WatchZoneResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchZoneResponse) bool {
	slice := fpaiv.WatchZoneResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchZoneResponse_FieldPathArrayOfValues allows storing slice of values for WatchZoneResponse fields according to their type
type WatchZoneResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchZoneResponse_FieldPath
}

func ParseWatchZoneResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchZoneResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchZoneResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZoneResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchZoneResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchZoneResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchZoneResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchZoneResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchZoneResponse_FieldTerminalPathArrayOfValues struct {
	WatchZoneResponse_FieldTerminalPath
	values interface{}
}

var _ WatchZoneResponse_FieldPathArrayOfValues = (*WatchZoneResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchZoneResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchZoneResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*zone.ZoneChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchZoneResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*zone.ZoneChange, bool) {
	res, ok := fpaov.values.([]*zone.ZoneChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchZonesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchZonesRequest_FieldPathSelector
	Get(source *WatchZonesRequest) []interface{}
	GetSingle(source *WatchZonesRequest) (interface{}, bool)
	ClearValue(item *WatchZonesRequest)

	// Those methods build corresponding WatchZonesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchZonesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchZonesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchZonesRequest_FieldPathArrayItemValue
}

type WatchZonesRequest_FieldPathSelector int32

const (
	WatchZonesRequest_FieldPathSelectorType         WatchZonesRequest_FieldPathSelector = 0
	WatchZonesRequest_FieldPathSelectorParent       WatchZonesRequest_FieldPathSelector = 1
	WatchZonesRequest_FieldPathSelectorPageSize     WatchZonesRequest_FieldPathSelector = 2
	WatchZonesRequest_FieldPathSelectorPageToken    WatchZonesRequest_FieldPathSelector = 3
	WatchZonesRequest_FieldPathSelectorOrderBy      WatchZonesRequest_FieldPathSelector = 4
	WatchZonesRequest_FieldPathSelectorResumeToken  WatchZonesRequest_FieldPathSelector = 5
	WatchZonesRequest_FieldPathSelectorFilter       WatchZonesRequest_FieldPathSelector = 6
	WatchZonesRequest_FieldPathSelectorFieldMask    WatchZonesRequest_FieldPathSelector = 7
	WatchZonesRequest_FieldPathSelectorView         WatchZonesRequest_FieldPathSelector = 8
	WatchZonesRequest_FieldPathSelectorMaxChunkSize WatchZonesRequest_FieldPathSelector = 9
)

func (s WatchZonesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchZonesRequest_FieldPathSelectorType:
		return "type"
	case WatchZonesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchZonesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchZonesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchZonesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchZonesRequest_FieldPathSelectorView:
		return "view"
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", s))
	}
}

func BuildWatchZonesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchZonesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchZonesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchZonesRequest_FieldTerminalPath{selector: WatchZonesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchZonesRequest", fp)
}

func ParseWatchZonesRequest_FieldPath(rawField string) (WatchZonesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchZonesRequest_FieldPath(fp)
}

func MustParseWatchZonesRequest_FieldPath(rawField string) WatchZonesRequest_FieldPath {
	fp, err := ParseWatchZonesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchZonesRequest_FieldTerminalPath struct {
	selector WatchZonesRequest_FieldPathSelector
}

var _ WatchZonesRequest_FieldPath = (*WatchZonesRequest_FieldTerminalPath)(nil)

func (fp *WatchZonesRequest_FieldTerminalPath) Selector() WatchZonesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchZonesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchZonesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchZonesRequest
func (fp *WatchZonesRequest_FieldTerminalPath) Get(source *WatchZonesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchZonesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchZonesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchZonesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchZonesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchZonesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchZonesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchZonesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchZonesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchZonesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchZonesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchZonesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchZonesRequest
func (fp *WatchZonesRequest_FieldTerminalPath) GetSingle(source *WatchZonesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchZonesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchZonesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchZonesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchZonesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchZonesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
	}
}

func (fp *WatchZonesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchZonesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchZonesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchZonesRequest_FieldPathSelectorParent:
		return (*zone.ParentReference)(nil)
	case WatchZonesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchZonesRequest_FieldPathSelectorPageToken:
		return (*zone.PagerCursor)(nil)
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		return (*zone.OrderBy)(nil)
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchZonesRequest_FieldPathSelectorFilter:
		return (*zone.Filter)(nil)
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	case WatchZonesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
	}
}

func (fp *WatchZonesRequest_FieldTerminalPath) ClearValue(item *WatchZonesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchZonesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchZonesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchZonesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchZonesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchZonesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchZonesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchZonesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchZonesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchZonesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchZonesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchZonesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchZonesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchZonesRequest_FieldPathSelectorType ||
		fp.selector == WatchZonesRequest_FieldPathSelectorParent ||
		fp.selector == WatchZonesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchZonesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchZonesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchZonesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchZonesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchZonesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchZonesRequest_FieldPathSelectorView ||
		fp.selector == WatchZonesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchZonesRequest_FieldPathValue {
	switch fp.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchZonesRequest_FieldPathSelectorParent:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.ParentReference)}
	case WatchZonesRequest_FieldPathSelectorPageSize:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchZonesRequest_FieldPathSelectorPageToken:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.OrderBy)}
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchZonesRequest_FieldPathSelectorFilter:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Filter)}
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case WatchZonesRequest_FieldPathSelectorView:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchZonesRequest_FieldTerminalPathValue{WatchZonesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
	}
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchZonesRequest_FieldPathArrayOfValues {
	fpaov := &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchZonesRequest_FieldPathSelectorParent:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.ParentReference)}
	case WatchZonesRequest_FieldPathSelectorPageSize:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchZonesRequest_FieldPathSelectorPageToken:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.OrderBy)}
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchZonesRequest_FieldPathSelectorFilter:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Filter)}
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case WatchZonesRequest_FieldPathSelectorView:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchZonesRequest_FieldTerminalPathArrayOfValues{WatchZonesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchZonesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fp.selector))
	}
}

func (fp *WatchZonesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchZonesRequest_FieldPathValue allows storing values for WatchZonesRequest fields according to their type
type WatchZonesRequest_FieldPathValue interface {
	WatchZonesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchZonesRequest)
	CompareWith(*WatchZonesRequest) (cmp int, comparable bool)
}

func ParseWatchZonesRequest_FieldPathValue(pathStr, valueStr string) (WatchZonesRequest_FieldPathValue, error) {
	fp, err := ParseWatchZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchZonesRequest_FieldPathValue), nil
}

func MustParseWatchZonesRequest_FieldPathValue(pathStr, valueStr string) WatchZonesRequest_FieldPathValue {
	fpv, err := ParseWatchZonesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchZonesRequest_FieldTerminalPathValue struct {
	WatchZonesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchZonesRequest_FieldPathValue = (*WatchZonesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchZonesRequest' as interface{}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsParentValue() (*zone.ParentReference, bool) {
	res, ok := fpv.value.(*zone.ParentReference)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsOrderByValue() (*zone.OrderBy, bool) {
	res, ok := fpv.value.(*zone.OrderBy)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsFilterValue() (*zone.Filter, bool) {
	res, ok := fpv.value.(*zone.Filter)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchZonesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchZonesRequest
func (fpv *WatchZonesRequest_FieldTerminalPathValue) SetTo(target **WatchZonesRequest) {
	if *target == nil {
		*target = new(WatchZonesRequest)
	}
	switch fpv.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchZonesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*zone.ParentReference)
	case WatchZonesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchZonesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*zone.PagerCursor)
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*zone.OrderBy)
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchZonesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*zone.Filter)
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	case WatchZonesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchZonesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZonesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchZonesRequest_FieldTerminalPathValue' with the value under path in 'WatchZonesRequest'.
func (fpv *WatchZonesRequest_FieldTerminalPathValue) CompareWith(source *WatchZonesRequest) (int, bool) {
	switch fpv.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*zone.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchZonesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchZonesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchZonesRequest))
}

// WatchZonesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchZonesRequest according to their type
// Present only for array (repeated) types.
type WatchZonesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchZonesRequest_FieldPath
	ContainsValue(*WatchZonesRequest) bool
}

// ParseWatchZonesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchZonesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchZonesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchZonesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchZonesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchZonesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchZonesRequest_FieldTerminalPathArrayItemValue struct {
	WatchZonesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchZonesRequest_FieldPathArrayItemValue = (*WatchZonesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchZonesRequest as interface{}
func (fpaiv *WatchZonesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchZonesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchZonesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchZonesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchZonesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchZonesRequest'
func (fpaiv *WatchZonesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchZonesRequest) bool {
	slice := fpaiv.WatchZonesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchZonesRequest_FieldPathArrayOfValues allows storing slice of values for WatchZonesRequest fields according to their type
type WatchZonesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchZonesRequest_FieldPath
}

func ParseWatchZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchZonesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchZonesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchZonesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchZonesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchZonesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchZonesRequest_FieldTerminalPathArrayOfValues struct {
	WatchZonesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchZonesRequest_FieldPathArrayOfValues = (*WatchZonesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchZonesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*zone.ParentReference) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*zone.OrderBy) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*zone.Filter) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchZonesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*zone.ParentReference, bool) {
	res, ok := fpaov.values.([]*zone.ParentReference)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*zone.OrderBy, bool) {
	res, ok := fpaov.values.([]*zone.OrderBy)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*zone.Filter, bool) {
	res, ok := fpaov.values.([]*zone.Filter)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchZonesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchZonesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchZonesResponse_FieldPathSelector
	Get(source *WatchZonesResponse) []interface{}
	GetSingle(source *WatchZonesResponse) (interface{}, bool)
	ClearValue(item *WatchZonesResponse)

	// Those methods build corresponding WatchZonesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchZonesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchZonesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchZonesResponse_FieldPathArrayItemValue
}

type WatchZonesResponse_FieldPathSelector int32

const (
	WatchZonesResponse_FieldPathSelectorZoneChanges     WatchZonesResponse_FieldPathSelector = 0
	WatchZonesResponse_FieldPathSelectorIsCurrent       WatchZonesResponse_FieldPathSelector = 1
	WatchZonesResponse_FieldPathSelectorPageTokenChange WatchZonesResponse_FieldPathSelector = 2
	WatchZonesResponse_FieldPathSelectorResumeToken     WatchZonesResponse_FieldPathSelector = 3
	WatchZonesResponse_FieldPathSelectorSnapshotSize    WatchZonesResponse_FieldPathSelector = 4
	WatchZonesResponse_FieldPathSelectorIsSoftReset     WatchZonesResponse_FieldPathSelector = 5
	WatchZonesResponse_FieldPathSelectorIsHardReset     WatchZonesResponse_FieldPathSelector = 6
)

func (s WatchZonesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return "zone_changes"
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", s))
	}
}

func BuildWatchZonesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchZonesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchZonesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "zone_changes", "zoneChanges", "zone-changes":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorZoneChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchZonesResponse_FieldTerminalPath{selector: WatchZonesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchZonesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchZonesResponse_FieldSubPath{selector: WatchZonesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchZonesResponse", fp)
}

func ParseWatchZonesResponse_FieldPath(rawField string) (WatchZonesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchZonesResponse_FieldPath(fp)
}

func MustParseWatchZonesResponse_FieldPath(rawField string) WatchZonesResponse_FieldPath {
	fp, err := ParseWatchZonesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchZonesResponse_FieldTerminalPath struct {
	selector WatchZonesResponse_FieldPathSelector
}

var _ WatchZonesResponse_FieldPath = (*WatchZonesResponse_FieldTerminalPath)(nil)

func (fp *WatchZonesResponse_FieldTerminalPath) Selector() WatchZonesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchZonesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchZonesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchZonesResponse
func (fp *WatchZonesResponse_FieldTerminalPath) Get(source *WatchZonesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchZonesResponse_FieldPathSelectorZoneChanges:
			for _, value := range source.GetZoneChanges() {
				values = append(values, value)
			}
		case WatchZonesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchZonesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchZonesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchZonesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchZonesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchZonesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchZonesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchZonesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchZonesResponse
func (fp *WatchZonesResponse_FieldTerminalPath) GetSingle(source *WatchZonesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		res := source.GetZoneChanges()
		return res, res != nil
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
	}
}

func (fp *WatchZonesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchZonesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchZonesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return ([]*zone.ZoneChange)(nil)
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchZonesResponse_PageTokenChange)(nil)
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
	}
}

func (fp *WatchZonesResponse_FieldTerminalPath) ClearValue(item *WatchZonesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchZonesResponse_FieldPathSelectorZoneChanges:
			item.ZoneChanges = nil
		case WatchZonesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchZonesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchZonesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchZonesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchZonesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchZonesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchZonesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchZonesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchZonesResponse_FieldPathSelectorZoneChanges ||
		fp.selector == WatchZonesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchZonesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchZonesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchZonesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchZonesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchZonesResponse_FieldPathValue {
	switch fp.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.([]*zone.ZoneChange)}
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(*WatchZonesResponse_PageTokenChange)}
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		return &WatchZonesResponse_FieldTerminalPathValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
	}
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchZonesResponse_FieldPathArrayOfValues {
	fpaov := &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([][]*zone.ZoneChange)}
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]*WatchZonesResponse_PageTokenChange)}
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		return &WatchZonesResponse_FieldTerminalPathArrayOfValues{WatchZonesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchZonesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return &WatchZonesResponse_FieldTerminalPathArrayItemValue{WatchZonesResponse_FieldTerminalPath: *fp, value: value.(*zone.ZoneChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fp.selector))
	}
}

func (fp *WatchZonesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchZonesResponse_FieldSubPath struct {
	selector WatchZonesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchZonesResponse_FieldPath = (*WatchZonesResponse_FieldSubPath)(nil)

func (fps *WatchZonesResponse_FieldSubPath) Selector() WatchZonesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchZonesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchZonesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchZonesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchZonesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchZonesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchZonesResponse
func (fps *WatchZonesResponse_FieldSubPath) Get(source *WatchZonesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchZonesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchZonesResponse))
}

// GetSingle returns value of selected field from source WatchZonesResponse
func (fps *WatchZonesResponse_FieldSubPath) GetSingle(source *WatchZonesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fps.selector))
	}
}

func (fps *WatchZonesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchZonesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchZonesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchZonesResponse_FieldSubPath) ClearValue(item *WatchZonesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchZonesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchZonesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchZonesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchZonesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchZonesResponse_FieldSubPath) WithIValue(value interface{}) WatchZonesResponse_FieldPathValue {
	return &WatchZonesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchZonesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchZonesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchZonesResponse_FieldPathArrayOfValues {
	return &WatchZonesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchZonesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchZonesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchZonesResponse_FieldPathArrayItemValue {
	return &WatchZonesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchZonesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchZonesResponse_FieldPathValue allows storing values for WatchZonesResponse fields according to their type
type WatchZonesResponse_FieldPathValue interface {
	WatchZonesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchZonesResponse)
	CompareWith(*WatchZonesResponse) (cmp int, comparable bool)
}

func ParseWatchZonesResponse_FieldPathValue(pathStr, valueStr string) (WatchZonesResponse_FieldPathValue, error) {
	fp, err := ParseWatchZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchZonesResponse_FieldPathValue), nil
}

func MustParseWatchZonesResponse_FieldPathValue(pathStr, valueStr string) WatchZonesResponse_FieldPathValue {
	fpv, err := ParseWatchZonesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchZonesResponse_FieldTerminalPathValue struct {
	WatchZonesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchZonesResponse_FieldPathValue = (*WatchZonesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchZonesResponse' as interface{}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsZoneChangesValue() ([]*zone.ZoneChange, bool) {
	res, ok := fpv.value.([]*zone.ZoneChange)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchZonesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchZonesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchZonesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchZonesResponse
func (fpv *WatchZonesResponse_FieldTerminalPathValue) SetTo(target **WatchZonesResponse) {
	if *target == nil {
		*target = new(WatchZonesResponse)
	}
	switch fpv.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		(*target).ZoneChanges = fpv.value.([]*zone.ZoneChange)
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchZonesResponse_PageTokenChange)
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchZonesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZonesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchZonesResponse_FieldTerminalPathValue' with the value under path in 'WatchZonesResponse'.
func (fpv *WatchZonesResponse_FieldTerminalPathValue) CompareWith(source *WatchZonesResponse) (int, bool) {
	switch fpv.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		return 0, false
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchZonesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchZonesResponse))
}

type WatchZonesResponse_FieldSubPathValue struct {
	WatchZonesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchZonesResponse_FieldPathValue = (*WatchZonesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchZonesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchZonesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchZonesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchZonesResponse_FieldSubPathValue) SetTo(target **WatchZonesResponse) {
	if *target == nil {
		*target = new(WatchZonesResponse)
	}
	switch fpvs.Selector() {
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchZonesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchZonesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZonesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchZonesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchZonesResponse_FieldSubPathValue) CompareWith(source *WatchZonesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchZonesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchZonesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchZonesResponse))
}

// WatchZonesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchZonesResponse according to their type
// Present only for array (repeated) types.
type WatchZonesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchZonesResponse_FieldPath
	ContainsValue(*WatchZonesResponse) bool
}

// ParseWatchZonesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchZonesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchZonesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchZonesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchZonesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchZonesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchZonesResponse_FieldTerminalPathArrayItemValue struct {
	WatchZonesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchZonesResponse_FieldPathArrayItemValue = (*WatchZonesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchZonesResponse as interface{}
func (fpaiv *WatchZonesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchZonesResponse_FieldTerminalPathArrayItemValue) AsZoneChangesItemValue() (*zone.ZoneChange, bool) {
	res, ok := fpaiv.value.(*zone.ZoneChange)
	return res, ok
}

func (fpaiv *WatchZonesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchZonesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchZonesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchZonesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchZonesResponse'
func (fpaiv *WatchZonesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchZonesResponse) bool {
	slice := fpaiv.WatchZonesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchZonesResponse_FieldSubPathArrayItemValue struct {
	WatchZonesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchZonesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchZonesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchZonesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchZonesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchZonesResponse'
func (fpaivs *WatchZonesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchZonesResponse) bool {
	switch fpaivs.Selector() {
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchZonesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse: %d", fpaivs.Selector()))
	}
}

// WatchZonesResponse_FieldPathArrayOfValues allows storing slice of values for WatchZonesResponse fields according to their type
type WatchZonesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchZonesResponse_FieldPath
}

func ParseWatchZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchZonesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchZonesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchZonesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchZonesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchZonesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchZonesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchZonesResponse_FieldTerminalPathArrayOfValues struct {
	WatchZonesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchZonesResponse_FieldPathArrayOfValues = (*WatchZonesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchZonesResponse_FieldPathSelectorZoneChanges:
		for _, v := range fpaov.values.([][]*zone.ZoneChange) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchZonesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchZonesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsZoneChangesArrayOfValues() ([][]*zone.ZoneChange, bool) {
	res, ok := fpaov.values.([][]*zone.ZoneChange)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchZonesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchZonesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchZonesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchZonesResponse_FieldSubPathArrayOfValues struct {
	WatchZonesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchZonesResponse_FieldPathArrayOfValues = (*WatchZonesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchZonesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchZonesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchZonesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchZonesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchZonesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchZonesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchZonesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchZonesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchZonesResponse_PageTokenChange)

	// Those methods build corresponding WatchZonesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchZonesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchZonesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchZonesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchZonesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchZonesResponsePageTokenChange_FieldPathSelector = 0
	WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchZonesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchZonesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchZonesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchZonesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchZonesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchZonesResponsePageTokenChange_FieldTerminalPath{selector: WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchZonesResponsePageTokenChange_FieldTerminalPath{selector: WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchZonesResponse_PageTokenChange", fp)
}

func ParseWatchZonesResponsePageTokenChange_FieldPath(rawField string) (WatchZonesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchZonesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchZonesResponsePageTokenChange_FieldPath(rawField string) WatchZonesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchZonesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchZonesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchZonesResponsePageTokenChange_FieldPathSelector
}

var _ WatchZonesResponsePageTokenChange_FieldPath = (*WatchZonesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) Selector() WatchZonesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchZonesResponse_PageTokenChange
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchZonesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchZonesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchZonesResponse_PageTokenChange
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchZonesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchZonesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*zone.PagerCursor)(nil)
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*zone.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchZonesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchZonesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchZonesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchZonesResponsePageTokenChange_FieldTerminalPathValue{WatchZonesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchZonesResponsePageTokenChange_FieldTerminalPathValue{WatchZonesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*zone.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchZonesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchZonesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchZonesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchZonesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*zone.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchZonesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchZonesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchZonesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchZonesResponsePageTokenChange_FieldPathValue interface {
	WatchZonesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchZonesResponse_PageTokenChange)
	CompareWith(*WatchZonesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchZonesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchZonesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchZonesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchZonesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchZonesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchZonesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchZonesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchZonesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchZonesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchZonesResponsePageTokenChange_FieldPathValue = (*WatchZonesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}
func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*zone.PagerCursor, bool) {
	res, ok := fpv.value.(*zone.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchZonesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchZonesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*zone.PagerCursor)
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*zone.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchZonesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchZonesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchZonesResponse_PageTokenChange'.
func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchZonesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchZonesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchZonesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchZonesResponse_PageTokenChange))
}

// WatchZonesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchZonesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchZonesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchZonesResponse_PageTokenChange) bool
}

// ParseWatchZonesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchZonesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchZonesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchZonesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchZonesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchZonesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchZonesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchZonesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchZonesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchZonesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchZonesResponse_PageTokenChange as interface{}
func (fpaiv *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchZonesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchZonesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchZonesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchZonesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchZonesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchZonesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchZonesResponsePageTokenChange_FieldPath
}

func ParseWatchZonesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchZonesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchZonesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchZonesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchZonesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchZonesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchZonesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchZonesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchZonesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchZonesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	case WatchZonesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*zone.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}
func (fpaov *WatchZonesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*zone.PagerCursor, bool) {
	res, ok := fpaov.values.([]*zone.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateZoneRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateZoneRequest_FieldPathSelector
	Get(source *CreateZoneRequest) []interface{}
	GetSingle(source *CreateZoneRequest) (interface{}, bool)
	ClearValue(item *CreateZoneRequest)

	// Those methods build corresponding CreateZoneRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateZoneRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateZoneRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateZoneRequest_FieldPathArrayItemValue
}

type CreateZoneRequest_FieldPathSelector int32

const (
	CreateZoneRequest_FieldPathSelectorParent CreateZoneRequest_FieldPathSelector = 0
	CreateZoneRequest_FieldPathSelectorZone   CreateZoneRequest_FieldPathSelector = 1
)

func (s CreateZoneRequest_FieldPathSelector) String() string {
	switch s {
	case CreateZoneRequest_FieldPathSelectorParent:
		return "parent"
	case CreateZoneRequest_FieldPathSelectorZone:
		return "zone"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", s))
	}
}

func BuildCreateZoneRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateZoneRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateZoneRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateZoneRequest_FieldTerminalPath{selector: CreateZoneRequest_FieldPathSelectorParent}, nil
		case "zone":
			return &CreateZoneRequest_FieldTerminalPath{selector: CreateZoneRequest_FieldPathSelectorZone}, nil
		}
	} else {
		switch fp[0] {
		case "zone":
			if subpath, err := zone.BuildZone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateZoneRequest_FieldSubPath{selector: CreateZoneRequest_FieldPathSelectorZone, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateZoneRequest", fp)
}

func ParseCreateZoneRequest_FieldPath(rawField string) (CreateZoneRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateZoneRequest_FieldPath(fp)
}

func MustParseCreateZoneRequest_FieldPath(rawField string) CreateZoneRequest_FieldPath {
	fp, err := ParseCreateZoneRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateZoneRequest_FieldTerminalPath struct {
	selector CreateZoneRequest_FieldPathSelector
}

var _ CreateZoneRequest_FieldPath = (*CreateZoneRequest_FieldTerminalPath)(nil)

func (fp *CreateZoneRequest_FieldTerminalPath) Selector() CreateZoneRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateZoneRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateZoneRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateZoneRequest
func (fp *CreateZoneRequest_FieldTerminalPath) Get(source *CreateZoneRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateZoneRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateZoneRequest_FieldPathSelectorZone:
			if source.Zone != nil {
				values = append(values, source.Zone)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateZoneRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateZoneRequest))
}

// GetSingle returns value pointed by specific field of from source CreateZoneRequest
func (fp *CreateZoneRequest_FieldTerminalPath) GetSingle(source *CreateZoneRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateZoneRequest_FieldPathSelectorZone:
		res := source.GetZone()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
	}
}

func (fp *CreateZoneRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateZoneRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateZoneRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		return (*zone.ParentReference)(nil)
	case CreateZoneRequest_FieldPathSelectorZone:
		return (*zone.Zone)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
	}
}

func (fp *CreateZoneRequest_FieldTerminalPath) ClearValue(item *CreateZoneRequest) {
	if item != nil {
		switch fp.selector {
		case CreateZoneRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateZoneRequest_FieldPathSelectorZone:
			item.Zone = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateZoneRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateZoneRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateZoneRequest_FieldPathSelectorParent
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithIValue(value interface{}) CreateZoneRequest_FieldPathValue {
	switch fp.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		return &CreateZoneRequest_FieldTerminalPathValue{CreateZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.ParentReference)}
	case CreateZoneRequest_FieldPathSelectorZone:
		return &CreateZoneRequest_FieldTerminalPathValue{CreateZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
	}
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateZoneRequest_FieldPathArrayOfValues {
	fpaov := &CreateZoneRequest_FieldTerminalPathArrayOfValues{CreateZoneRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		return &CreateZoneRequest_FieldTerminalPathArrayOfValues{CreateZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.ParentReference)}
	case CreateZoneRequest_FieldPathSelectorZone:
		return &CreateZoneRequest_FieldTerminalPathArrayOfValues{CreateZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateZoneRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fp.selector))
	}
}

func (fp *CreateZoneRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateZoneRequest_FieldSubPath struct {
	selector CreateZoneRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateZoneRequest_FieldPath = (*CreateZoneRequest_FieldSubPath)(nil)

func (fps *CreateZoneRequest_FieldSubPath) Selector() CreateZoneRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateZoneRequest_FieldSubPath) AsZoneSubPath() (zone.Zone_FieldPath, bool) {
	res, ok := fps.subPath.(zone.Zone_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateZoneRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateZoneRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateZoneRequest
func (fps *CreateZoneRequest_FieldSubPath) Get(source *CreateZoneRequest) (values []interface{}) {
	if asZoneFieldPath, ok := fps.AsZoneSubPath(); ok {
		values = append(values, asZoneFieldPath.Get(source.GetZone())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateZoneRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateZoneRequest))
}

// GetSingle returns value of selected field from source CreateZoneRequest
func (fps *CreateZoneRequest_FieldSubPath) GetSingle(source *CreateZoneRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateZoneRequest_FieldPathSelectorZone:
		if source.GetZone() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetZone())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fps.selector))
	}
}

func (fps *CreateZoneRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateZoneRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateZoneRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateZoneRequest_FieldSubPath) ClearValue(item *CreateZoneRequest) {
	if item != nil {
		switch fps.selector {
		case CreateZoneRequest_FieldPathSelectorZone:
			fps.subPath.ClearValueRaw(item.Zone)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateZoneRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateZoneRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateZoneRequest_FieldSubPath) WithIValue(value interface{}) CreateZoneRequest_FieldPathValue {
	return &CreateZoneRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateZoneRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateZoneRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateZoneRequest_FieldPathArrayOfValues {
	return &CreateZoneRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateZoneRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateZoneRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateZoneRequest_FieldPathArrayItemValue {
	return &CreateZoneRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateZoneRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateZoneRequest_FieldPathValue allows storing values for CreateZoneRequest fields according to their type
type CreateZoneRequest_FieldPathValue interface {
	CreateZoneRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateZoneRequest)
	CompareWith(*CreateZoneRequest) (cmp int, comparable bool)
}

func ParseCreateZoneRequest_FieldPathValue(pathStr, valueStr string) (CreateZoneRequest_FieldPathValue, error) {
	fp, err := ParseCreateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateZoneRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateZoneRequest_FieldPathValue), nil
}

func MustParseCreateZoneRequest_FieldPathValue(pathStr, valueStr string) CreateZoneRequest_FieldPathValue {
	fpv, err := ParseCreateZoneRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateZoneRequest_FieldTerminalPathValue struct {
	CreateZoneRequest_FieldTerminalPath
	value interface{}
}

var _ CreateZoneRequest_FieldPathValue = (*CreateZoneRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateZoneRequest' as interface{}
func (fpv *CreateZoneRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateZoneRequest_FieldTerminalPathValue) AsParentValue() (*zone.ParentReference, bool) {
	res, ok := fpv.value.(*zone.ParentReference)
	return res, ok
}
func (fpv *CreateZoneRequest_FieldTerminalPathValue) AsZoneValue() (*zone.Zone, bool) {
	res, ok := fpv.value.(*zone.Zone)
	return res, ok
}

// SetTo stores value for selected field for object CreateZoneRequest
func (fpv *CreateZoneRequest_FieldTerminalPathValue) SetTo(target **CreateZoneRequest) {
	if *target == nil {
		*target = new(CreateZoneRequest)
	}
	switch fpv.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*zone.ParentReference)
	case CreateZoneRequest_FieldPathSelectorZone:
		(*target).Zone = fpv.value.(*zone.Zone)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fpv.selector))
	}
}

func (fpv *CreateZoneRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateZoneRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateZoneRequest_FieldTerminalPathValue' with the value under path in 'CreateZoneRequest'.
func (fpv *CreateZoneRequest_FieldTerminalPathValue) CompareWith(source *CreateZoneRequest) (int, bool) {
	switch fpv.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*zone.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateZoneRequest_FieldPathSelectorZone:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fpv.selector))
	}
}

func (fpv *CreateZoneRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateZoneRequest))
}

type CreateZoneRequest_FieldSubPathValue struct {
	CreateZoneRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateZoneRequest_FieldPathValue = (*CreateZoneRequest_FieldSubPathValue)(nil)

func (fpvs *CreateZoneRequest_FieldSubPathValue) AsZonePathValue() (zone.Zone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(zone.Zone_FieldPathValue)
	return res, ok
}

func (fpvs *CreateZoneRequest_FieldSubPathValue) SetTo(target **CreateZoneRequest) {
	if *target == nil {
		*target = new(CreateZoneRequest)
	}
	switch fpvs.Selector() {
	case CreateZoneRequest_FieldPathSelectorZone:
		fpvs.subPathValue.(zone.Zone_FieldPathValue).SetTo(&(*target).Zone)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateZoneRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateZoneRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateZoneRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateZoneRequest_FieldSubPathValue) CompareWith(source *CreateZoneRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateZoneRequest_FieldPathSelectorZone:
		return fpvs.subPathValue.(zone.Zone_FieldPathValue).CompareWith(source.GetZone())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateZoneRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateZoneRequest))
}

// CreateZoneRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateZoneRequest according to their type
// Present only for array (repeated) types.
type CreateZoneRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateZoneRequest_FieldPath
	ContainsValue(*CreateZoneRequest) bool
}

// ParseCreateZoneRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateZoneRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateZoneRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateZoneRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateZoneRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateZoneRequest_FieldTerminalPathArrayItemValue struct {
	CreateZoneRequest_FieldTerminalPath
	value interface{}
}

var _ CreateZoneRequest_FieldPathArrayItemValue = (*CreateZoneRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateZoneRequest as interface{}
func (fpaiv *CreateZoneRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateZoneRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateZoneRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateZoneRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateZoneRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateZoneRequest'
func (fpaiv *CreateZoneRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateZoneRequest) bool {
	slice := fpaiv.CreateZoneRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateZoneRequest_FieldSubPathArrayItemValue struct {
	CreateZoneRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateZoneRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateZoneRequest_FieldSubPathArrayItemValue) AsZonePathItemValue() (zone.Zone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateZoneRequest'
func (fpaivs *CreateZoneRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateZoneRequest) bool {
	switch fpaivs.Selector() {
	case CreateZoneRequest_FieldPathSelectorZone:
		return fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue).ContainsValue(source.GetZone())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateZoneRequest: %d", fpaivs.Selector()))
	}
}

// CreateZoneRequest_FieldPathArrayOfValues allows storing slice of values for CreateZoneRequest fields according to their type
type CreateZoneRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateZoneRequest_FieldPath
}

func ParseCreateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateZoneRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateZoneRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateZoneRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateZoneRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateZoneRequest_FieldTerminalPathArrayOfValues struct {
	CreateZoneRequest_FieldTerminalPath
	values interface{}
}

var _ CreateZoneRequest_FieldPathArrayOfValues = (*CreateZoneRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateZoneRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateZoneRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*zone.ParentReference) {
			values = append(values, v)
		}
	case CreateZoneRequest_FieldPathSelectorZone:
		for _, v := range fpaov.values.([]*zone.Zone) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateZoneRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*zone.ParentReference, bool) {
	res, ok := fpaov.values.([]*zone.ParentReference)
	return res, ok
}
func (fpaov *CreateZoneRequest_FieldTerminalPathArrayOfValues) AsZoneArrayOfValues() ([]*zone.Zone, bool) {
	res, ok := fpaov.values.([]*zone.Zone)
	return res, ok
}

type CreateZoneRequest_FieldSubPathArrayOfValues struct {
	CreateZoneRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateZoneRequest_FieldPathArrayOfValues = (*CreateZoneRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateZoneRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateZoneRequest_FieldSubPathArrayOfValues) AsZonePathArrayOfValues() (zone.Zone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(zone.Zone_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateZoneRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateZoneRequest_FieldPathSelector
	Get(source *UpdateZoneRequest) []interface{}
	GetSingle(source *UpdateZoneRequest) (interface{}, bool)
	ClearValue(item *UpdateZoneRequest)

	// Those methods build corresponding UpdateZoneRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateZoneRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateZoneRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateZoneRequest_FieldPathArrayItemValue
}

type UpdateZoneRequest_FieldPathSelector int32

const (
	UpdateZoneRequest_FieldPathSelectorZone       UpdateZoneRequest_FieldPathSelector = 0
	UpdateZoneRequest_FieldPathSelectorUpdateMask UpdateZoneRequest_FieldPathSelector = 1
	UpdateZoneRequest_FieldPathSelectorCas        UpdateZoneRequest_FieldPathSelector = 2
)

func (s UpdateZoneRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return "zone"
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateZoneRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", s))
	}
}

func BuildUpdateZoneRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateZoneRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateZoneRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "zone":
			return &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorZone}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateZoneRequest_FieldTerminalPath{selector: UpdateZoneRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "zone":
			if subpath, err := zone.BuildZone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateZoneRequest_FieldSubPath{selector: UpdateZoneRequest_FieldPathSelectorZone, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateZoneRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateZoneRequest_FieldSubPath{selector: UpdateZoneRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateZoneRequest", fp)
}

func ParseUpdateZoneRequest_FieldPath(rawField string) (UpdateZoneRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateZoneRequest_FieldPath(fp)
}

func MustParseUpdateZoneRequest_FieldPath(rawField string) UpdateZoneRequest_FieldPath {
	fp, err := ParseUpdateZoneRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateZoneRequest_FieldTerminalPath struct {
	selector UpdateZoneRequest_FieldPathSelector
}

var _ UpdateZoneRequest_FieldPath = (*UpdateZoneRequest_FieldTerminalPath)(nil)

func (fp *UpdateZoneRequest_FieldTerminalPath) Selector() UpdateZoneRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateZoneRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateZoneRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateZoneRequest
func (fp *UpdateZoneRequest_FieldTerminalPath) Get(source *UpdateZoneRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateZoneRequest_FieldPathSelectorZone:
			if source.Zone != nil {
				values = append(values, source.Zone)
			}
		case UpdateZoneRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateZoneRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateZoneRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateZoneRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateZoneRequest
func (fp *UpdateZoneRequest_FieldTerminalPath) GetSingle(source *UpdateZoneRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		res := source.GetZone()
		return res, res != nil
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateZoneRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateZoneRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateZoneRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return (*zone.Zone)(nil)
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		return (*zone.Zone_FieldMask)(nil)
	case UpdateZoneRequest_FieldPathSelectorCas:
		return (*UpdateZoneRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequest_FieldTerminalPath) ClearValue(item *UpdateZoneRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateZoneRequest_FieldPathSelectorZone:
			item.Zone = nil
		case UpdateZoneRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateZoneRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateZoneRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateZoneRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateZoneRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateZoneRequest_FieldPathValue {
	switch fp.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return &UpdateZoneRequest_FieldTerminalPathValue{UpdateZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone)}
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		return &UpdateZoneRequest_FieldTerminalPathValue{UpdateZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	case UpdateZoneRequest_FieldPathSelectorCas:
		return &UpdateZoneRequest_FieldTerminalPathValue{UpdateZoneRequest_FieldTerminalPath: *fp, value: value.(*UpdateZoneRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateZoneRequest_FieldPathArrayOfValues {
	fpaov := &UpdateZoneRequest_FieldTerminalPathArrayOfValues{UpdateZoneRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return &UpdateZoneRequest_FieldTerminalPathArrayOfValues{UpdateZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone)}
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		return &UpdateZoneRequest_FieldTerminalPathArrayOfValues{UpdateZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	case UpdateZoneRequest_FieldPathSelectorCas:
		return &UpdateZoneRequest_FieldTerminalPathArrayOfValues{UpdateZoneRequest_FieldTerminalPath: *fp, values: values.([]*UpdateZoneRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateZoneRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateZoneRequest_FieldSubPath struct {
	selector UpdateZoneRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateZoneRequest_FieldPath = (*UpdateZoneRequest_FieldSubPath)(nil)

func (fps *UpdateZoneRequest_FieldSubPath) Selector() UpdateZoneRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateZoneRequest_FieldSubPath) AsZoneSubPath() (zone.Zone_FieldPath, bool) {
	res, ok := fps.subPath.(zone.Zone_FieldPath)
	return res, ok
}
func (fps *UpdateZoneRequest_FieldSubPath) AsCasSubPath() (UpdateZoneRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateZoneRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateZoneRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateZoneRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateZoneRequest
func (fps *UpdateZoneRequest_FieldSubPath) Get(source *UpdateZoneRequest) (values []interface{}) {
	if asZoneFieldPath, ok := fps.AsZoneSubPath(); ok {
		values = append(values, asZoneFieldPath.Get(source.GetZone())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateZoneRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateZoneRequest))
}

// GetSingle returns value of selected field from source UpdateZoneRequest
func (fps *UpdateZoneRequest_FieldSubPath) GetSingle(source *UpdateZoneRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		if source.GetZone() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetZone())
	case UpdateZoneRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fps.selector))
	}
}

func (fps *UpdateZoneRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateZoneRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateZoneRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateZoneRequest_FieldSubPath) ClearValue(item *UpdateZoneRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateZoneRequest_FieldPathSelectorZone:
			fps.subPath.ClearValueRaw(item.Zone)
		case UpdateZoneRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateZoneRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateZoneRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateZoneRequest_FieldSubPath) WithIValue(value interface{}) UpdateZoneRequest_FieldPathValue {
	return &UpdateZoneRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateZoneRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateZoneRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateZoneRequest_FieldPathArrayOfValues {
	return &UpdateZoneRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateZoneRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateZoneRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateZoneRequest_FieldPathArrayItemValue {
	return &UpdateZoneRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateZoneRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateZoneRequest_FieldPathValue allows storing values for UpdateZoneRequest fields according to their type
type UpdateZoneRequest_FieldPathValue interface {
	UpdateZoneRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateZoneRequest)
	CompareWith(*UpdateZoneRequest) (cmp int, comparable bool)
}

func ParseUpdateZoneRequest_FieldPathValue(pathStr, valueStr string) (UpdateZoneRequest_FieldPathValue, error) {
	fp, err := ParseUpdateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateZoneRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateZoneRequest_FieldPathValue), nil
}

func MustParseUpdateZoneRequest_FieldPathValue(pathStr, valueStr string) UpdateZoneRequest_FieldPathValue {
	fpv, err := ParseUpdateZoneRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateZoneRequest_FieldTerminalPathValue struct {
	UpdateZoneRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateZoneRequest_FieldPathValue = (*UpdateZoneRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateZoneRequest' as interface{}
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) AsZoneValue() (*zone.Zone, bool) {
	res, ok := fpv.value.(*zone.Zone)
	return res, ok
}
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) AsCasValue() (*UpdateZoneRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateZoneRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateZoneRequest
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) SetTo(target **UpdateZoneRequest) {
	if *target == nil {
		*target = new(UpdateZoneRequest)
	}
	switch fpv.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		(*target).Zone = fpv.value.(*zone.Zone)
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*zone.Zone_FieldMask)
	case UpdateZoneRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateZoneRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateZoneRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateZoneRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateZoneRequest_FieldTerminalPathValue' with the value under path in 'UpdateZoneRequest'.
func (fpv *UpdateZoneRequest_FieldTerminalPathValue) CompareWith(source *UpdateZoneRequest) (int, bool) {
	switch fpv.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return 0, false
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateZoneRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateZoneRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateZoneRequest))
}

type UpdateZoneRequest_FieldSubPathValue struct {
	UpdateZoneRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateZoneRequest_FieldPathValue = (*UpdateZoneRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateZoneRequest_FieldSubPathValue) AsZonePathValue() (zone.Zone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(zone.Zone_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateZoneRequest_FieldSubPathValue) AsCasPathValue() (UpdateZoneRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateZoneRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateZoneRequest_FieldSubPathValue) SetTo(target **UpdateZoneRequest) {
	if *target == nil {
		*target = new(UpdateZoneRequest)
	}
	switch fpvs.Selector() {
	case UpdateZoneRequest_FieldPathSelectorZone:
		fpvs.subPathValue.(zone.Zone_FieldPathValue).SetTo(&(*target).Zone)
	case UpdateZoneRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateZoneRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateZoneRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateZoneRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateZoneRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateZoneRequest_FieldSubPathValue) CompareWith(source *UpdateZoneRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return fpvs.subPathValue.(zone.Zone_FieldPathValue).CompareWith(source.GetZone())
	case UpdateZoneRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateZoneRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateZoneRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateZoneRequest))
}

// UpdateZoneRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateZoneRequest according to their type
// Present only for array (repeated) types.
type UpdateZoneRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateZoneRequest_FieldPath
	ContainsValue(*UpdateZoneRequest) bool
}

// ParseUpdateZoneRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateZoneRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateZoneRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateZoneRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateZoneRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateZoneRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateZoneRequest_FieldTerminalPathArrayItemValue struct {
	UpdateZoneRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateZoneRequest_FieldPathArrayItemValue = (*UpdateZoneRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateZoneRequest as interface{}
func (fpaiv *UpdateZoneRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateZoneRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateZoneRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateZoneRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateZoneRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateZoneRequest'
func (fpaiv *UpdateZoneRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateZoneRequest) bool {
	slice := fpaiv.UpdateZoneRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateZoneRequest_FieldSubPathArrayItemValue struct {
	UpdateZoneRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateZoneRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateZoneRequest_FieldSubPathArrayItemValue) AsZonePathItemValue() (zone.Zone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateZoneRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateZoneRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateZoneRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateZoneRequest'
func (fpaivs *UpdateZoneRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateZoneRequest) bool {
	switch fpaivs.Selector() {
	case UpdateZoneRequest_FieldPathSelectorZone:
		return fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue).ContainsValue(source.GetZone())
	case UpdateZoneRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateZoneRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest: %d", fpaivs.Selector()))
	}
}

// UpdateZoneRequest_FieldPathArrayOfValues allows storing slice of values for UpdateZoneRequest fields according to their type
type UpdateZoneRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateZoneRequest_FieldPath
}

func ParseUpdateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateZoneRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateZoneRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateZoneRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateZoneRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateZoneRequest_FieldTerminalPathArrayOfValues struct {
	UpdateZoneRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateZoneRequest_FieldPathArrayOfValues = (*UpdateZoneRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateZoneRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateZoneRequest_FieldPathSelectorZone:
		for _, v := range fpaov.values.([]*zone.Zone) {
			values = append(values, v)
		}
	case UpdateZoneRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	case UpdateZoneRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateZoneRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateZoneRequest_FieldTerminalPathArrayOfValues) AsZoneArrayOfValues() ([]*zone.Zone, bool) {
	res, ok := fpaov.values.([]*zone.Zone)
	return res, ok
}
func (fpaov *UpdateZoneRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}
func (fpaov *UpdateZoneRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateZoneRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateZoneRequest_CAS)
	return res, ok
}

type UpdateZoneRequest_FieldSubPathArrayOfValues struct {
	UpdateZoneRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateZoneRequest_FieldPathArrayOfValues = (*UpdateZoneRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateZoneRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateZoneRequest_FieldSubPathArrayOfValues) AsZonePathArrayOfValues() (zone.Zone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(zone.Zone_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateZoneRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateZoneRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateZoneRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateZoneRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateZoneRequestCAS_FieldPathSelector
	Get(source *UpdateZoneRequest_CAS) []interface{}
	GetSingle(source *UpdateZoneRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateZoneRequest_CAS)

	// Those methods build corresponding UpdateZoneRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateZoneRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateZoneRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateZoneRequestCAS_FieldPathArrayItemValue
}

type UpdateZoneRequestCAS_FieldPathSelector int32

const (
	UpdateZoneRequestCAS_FieldPathSelectorConditionalState UpdateZoneRequestCAS_FieldPathSelector = 0
	UpdateZoneRequestCAS_FieldPathSelectorFieldMask        UpdateZoneRequestCAS_FieldPathSelector = 1
)

func (s UpdateZoneRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", s))
	}
}

func BuildUpdateZoneRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateZoneRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateZoneRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateZoneRequestCAS_FieldTerminalPath{selector: UpdateZoneRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateZoneRequestCAS_FieldTerminalPath{selector: UpdateZoneRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := zone.BuildZone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateZoneRequestCAS_FieldSubPath{selector: UpdateZoneRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateZoneRequest_CAS", fp)
}

func ParseUpdateZoneRequestCAS_FieldPath(rawField string) (UpdateZoneRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateZoneRequestCAS_FieldPath(fp)
}

func MustParseUpdateZoneRequestCAS_FieldPath(rawField string) UpdateZoneRequestCAS_FieldPath {
	fp, err := ParseUpdateZoneRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateZoneRequestCAS_FieldTerminalPath struct {
	selector UpdateZoneRequestCAS_FieldPathSelector
}

var _ UpdateZoneRequestCAS_FieldPath = (*UpdateZoneRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) Selector() UpdateZoneRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateZoneRequest_CAS
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) Get(source *UpdateZoneRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateZoneRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateZoneRequest_CAS
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) GetSingle(source *UpdateZoneRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateZoneRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return (*zone.Zone)(nil)
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		return (*zone.Zone_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) ClearValue(item *UpdateZoneRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateZoneRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateZoneRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateZoneRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateZoneRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateZoneRequestCAS_FieldTerminalPathValue{UpdateZoneRequestCAS_FieldTerminalPath: *fp, value: value.(*zone.Zone)}
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateZoneRequestCAS_FieldTerminalPathValue{UpdateZoneRequestCAS_FieldTerminalPath: *fp, value: value.(*zone.Zone_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateZoneRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues{UpdateZoneRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues{UpdateZoneRequestCAS_FieldTerminalPath: *fp, values: values.([]*zone.Zone)}
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues{UpdateZoneRequestCAS_FieldTerminalPath: *fp, values: values.([]*zone.Zone_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateZoneRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateZoneRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateZoneRequestCAS_FieldSubPath struct {
	selector UpdateZoneRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateZoneRequestCAS_FieldPath = (*UpdateZoneRequestCAS_FieldSubPath)(nil)

func (fps *UpdateZoneRequestCAS_FieldSubPath) Selector() UpdateZoneRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateZoneRequestCAS_FieldSubPath) AsConditionalStateSubPath() (zone.Zone_FieldPath, bool) {
	res, ok := fps.subPath.(zone.Zone_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateZoneRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateZoneRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateZoneRequest_CAS
func (fps *UpdateZoneRequestCAS_FieldSubPath) Get(source *UpdateZoneRequest_CAS) (values []interface{}) {
	if asZoneFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asZoneFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateZoneRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateZoneRequest_CAS
func (fps *UpdateZoneRequestCAS_FieldSubPath) GetSingle(source *UpdateZoneRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateZoneRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateZoneRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) ClearValue(item *UpdateZoneRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateZoneRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateZoneRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateZoneRequestCAS_FieldPathValue {
	return &UpdateZoneRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateZoneRequestCAS_FieldPathArrayOfValues {
	return &UpdateZoneRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateZoneRequestCAS_FieldPathArrayItemValue {
	return &UpdateZoneRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateZoneRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateZoneRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateZoneRequestCAS_FieldPathValue interface {
	UpdateZoneRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateZoneRequest_CAS)
	CompareWith(*UpdateZoneRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateZoneRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateZoneRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateZoneRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateZoneRequestCAS_FieldPathValue), nil
}

func MustParseUpdateZoneRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateZoneRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateZoneRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateZoneRequestCAS_FieldTerminalPathValue struct {
	UpdateZoneRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateZoneRequestCAS_FieldPathValue = (*UpdateZoneRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*zone.Zone, bool) {
	res, ok := fpv.value.(*zone.Zone)
	return res, ok
}
func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*zone.Zone_FieldMask, bool) {
	res, ok := fpv.value.(*zone.Zone_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateZoneRequest_CAS) {
	if *target == nil {
		*target = new(UpdateZoneRequest_CAS)
	}
	switch fpv.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*zone.Zone)
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*zone.Zone_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateZoneRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateZoneRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateZoneRequest_CAS'.
func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateZoneRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateZoneRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateZoneRequest_CAS))
}

type UpdateZoneRequestCAS_FieldSubPathValue struct {
	UpdateZoneRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateZoneRequestCAS_FieldPathValue = (*UpdateZoneRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (zone.Zone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(zone.Zone_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) SetTo(target **UpdateZoneRequest_CAS) {
	if *target == nil {
		*target = new(UpdateZoneRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(zone.Zone_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateZoneRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) CompareWith(source *UpdateZoneRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(zone.Zone_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateZoneRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateZoneRequest_CAS))
}

// UpdateZoneRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateZoneRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateZoneRequestCAS_FieldPath
	ContainsValue(*UpdateZoneRequest_CAS) bool
}

// ParseUpdateZoneRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateZoneRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateZoneRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateZoneRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateZoneRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateZoneRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateZoneRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateZoneRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateZoneRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateZoneRequestCAS_FieldPathArrayItemValue = (*UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateZoneRequest_CAS as interface{}
func (fpaiv *UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateZoneRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateZoneRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateZoneRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateZoneRequest_CAS) bool {
	slice := fpaiv.UpdateZoneRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateZoneRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateZoneRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateZoneRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateZoneRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (zone.Zone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateZoneRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateZoneRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(zone.Zone_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateZoneRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateZoneRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateZoneRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateZoneRequestCAS_FieldPath
}

func ParseUpdateZoneRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateZoneRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateZoneRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateZoneRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateZoneRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateZoneRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateZoneRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateZoneRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateZoneRequestCAS_FieldPathArrayOfValues = (*UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateZoneRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*zone.Zone) {
			values = append(values, v)
		}
	case UpdateZoneRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*zone.Zone_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*zone.Zone, bool) {
	res, ok := fpaov.values.([]*zone.Zone)
	return res, ok
}
func (fpaov *UpdateZoneRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*zone.Zone_FieldMask, bool) {
	res, ok := fpaov.values.([]*zone.Zone_FieldMask)
	return res, ok
}

type UpdateZoneRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateZoneRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateZoneRequestCAS_FieldPathArrayOfValues = (*UpdateZoneRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateZoneRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateZoneRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (zone.Zone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(zone.Zone_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteZoneRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteZoneRequest_FieldPathSelector
	Get(source *DeleteZoneRequest) []interface{}
	GetSingle(source *DeleteZoneRequest) (interface{}, bool)
	ClearValue(item *DeleteZoneRequest)

	// Those methods build corresponding DeleteZoneRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteZoneRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteZoneRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteZoneRequest_FieldPathArrayItemValue
}

type DeleteZoneRequest_FieldPathSelector int32

const (
	DeleteZoneRequest_FieldPathSelectorName DeleteZoneRequest_FieldPathSelector = 0
)

func (s DeleteZoneRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteZoneRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", s))
	}
}

func BuildDeleteZoneRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteZoneRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteZoneRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteZoneRequest_FieldTerminalPath{selector: DeleteZoneRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteZoneRequest", fp)
}

func ParseDeleteZoneRequest_FieldPath(rawField string) (DeleteZoneRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteZoneRequest_FieldPath(fp)
}

func MustParseDeleteZoneRequest_FieldPath(rawField string) DeleteZoneRequest_FieldPath {
	fp, err := ParseDeleteZoneRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteZoneRequest_FieldTerminalPath struct {
	selector DeleteZoneRequest_FieldPathSelector
}

var _ DeleteZoneRequest_FieldPath = (*DeleteZoneRequest_FieldTerminalPath)(nil)

func (fp *DeleteZoneRequest_FieldTerminalPath) Selector() DeleteZoneRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteZoneRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteZoneRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteZoneRequest
func (fp *DeleteZoneRequest_FieldTerminalPath) Get(source *DeleteZoneRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteZoneRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteZoneRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteZoneRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteZoneRequest
func (fp *DeleteZoneRequest_FieldTerminalPath) GetSingle(source *DeleteZoneRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
	}
}

func (fp *DeleteZoneRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteZoneRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteZoneRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		return (*zone.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
	}
}

func (fp *DeleteZoneRequest_FieldTerminalPath) ClearValue(item *DeleteZoneRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteZoneRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteZoneRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteZoneRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteZoneRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteZoneRequest_FieldPathSelectorName
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteZoneRequest_FieldPathValue {
	switch fp.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		return &DeleteZoneRequest_FieldTerminalPathValue{DeleteZoneRequest_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
	}
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteZoneRequest_FieldPathArrayOfValues {
	fpaov := &DeleteZoneRequest_FieldTerminalPathArrayOfValues{DeleteZoneRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		return &DeleteZoneRequest_FieldTerminalPathArrayOfValues{DeleteZoneRequest_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteZoneRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fp.selector))
	}
}

func (fp *DeleteZoneRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteZoneRequest_FieldPathValue allows storing values for DeleteZoneRequest fields according to their type
type DeleteZoneRequest_FieldPathValue interface {
	DeleteZoneRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteZoneRequest)
	CompareWith(*DeleteZoneRequest) (cmp int, comparable bool)
}

func ParseDeleteZoneRequest_FieldPathValue(pathStr, valueStr string) (DeleteZoneRequest_FieldPathValue, error) {
	fp, err := ParseDeleteZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteZoneRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteZoneRequest_FieldPathValue), nil
}

func MustParseDeleteZoneRequest_FieldPathValue(pathStr, valueStr string) DeleteZoneRequest_FieldPathValue {
	fpv, err := ParseDeleteZoneRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteZoneRequest_FieldTerminalPathValue struct {
	DeleteZoneRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteZoneRequest_FieldPathValue = (*DeleteZoneRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteZoneRequest' as interface{}
func (fpv *DeleteZoneRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteZoneRequest_FieldTerminalPathValue) AsNameValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteZoneRequest
func (fpv *DeleteZoneRequest_FieldTerminalPathValue) SetTo(target **DeleteZoneRequest) {
	if *target == nil {
		*target = new(DeleteZoneRequest)
	}
	switch fpv.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*zone.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteZoneRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteZoneRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteZoneRequest_FieldTerminalPathValue' with the value under path in 'DeleteZoneRequest'.
func (fpv *DeleteZoneRequest_FieldTerminalPathValue) CompareWith(source *DeleteZoneRequest) (int, bool) {
	switch fpv.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteZoneRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteZoneRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteZoneRequest))
}

// DeleteZoneRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteZoneRequest according to their type
// Present only for array (repeated) types.
type DeleteZoneRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteZoneRequest_FieldPath
	ContainsValue(*DeleteZoneRequest) bool
}

// ParseDeleteZoneRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteZoneRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteZoneRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteZoneRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteZoneRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteZoneRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteZoneRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteZoneRequest_FieldTerminalPathArrayItemValue struct {
	DeleteZoneRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteZoneRequest_FieldPathArrayItemValue = (*DeleteZoneRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteZoneRequest as interface{}
func (fpaiv *DeleteZoneRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteZoneRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteZoneRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteZoneRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteZoneRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteZoneRequest'
func (fpaiv *DeleteZoneRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteZoneRequest) bool {
	slice := fpaiv.DeleteZoneRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteZoneRequest_FieldPathArrayOfValues allows storing slice of values for DeleteZoneRequest fields according to their type
type DeleteZoneRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteZoneRequest_FieldPath
}

func ParseDeleteZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteZoneRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteZoneRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteZoneRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteZoneRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteZoneRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteZoneRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteZoneRequest_FieldTerminalPathArrayOfValues struct {
	DeleteZoneRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteZoneRequest_FieldPathArrayOfValues = (*DeleteZoneRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteZoneRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteZoneRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteZoneRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}
