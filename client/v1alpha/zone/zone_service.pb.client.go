// Code generated by protoc-gen-goten-client
// API: ZoneService
// DO NOT EDIT!!!

package zone_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &zone.Zone{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZoneServiceClient is the client API for ZoneService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZoneServiceClient interface {
	GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error)
	BatchGetZones(ctx context.Context, in *BatchGetZonesRequest, opts ...grpc.CallOption) (*BatchGetZonesResponse, error)
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error)
	WatchZone(ctx context.Context, in *WatchZoneRequest, opts ...grpc.CallOption) (WatchZoneClientStream, error)
	WatchZones(ctx context.Context, in *WatchZonesRequest, opts ...grpc.CallOption) (WatchZonesClientStream, error)
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error)
	UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error)
	DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewZoneServiceClient(cc grpc.ClientConnInterface) ZoneServiceClient {
	return &client{cc}
}

func (c *client) GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error) {
	out := new(zone.Zone)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/GetZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetZones(ctx context.Context, in *BatchGetZonesRequest, opts ...grpc.CallOption) (*BatchGetZonesResponse, error) {
	out := new(BatchGetZonesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/BatchGetZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error) {
	out := new(ListZonesResponse)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/ListZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchZone(ctx context.Context, in *WatchZoneRequest, opts ...grpc.CallOption) (WatchZoneClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchZone",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha.ZoneService/WatchZone", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchZoneWatchZoneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchZoneClientStream interface {
	Recv() (*WatchZoneResponse, error)
	grpc.ClientStream
}

type watchZoneWatchZoneClient struct {
	grpc.ClientStream
}

func (x *watchZoneWatchZoneClient) Recv() (*WatchZoneResponse, error) {
	m := new(WatchZoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchZones(ctx context.Context, in *WatchZonesRequest, opts ...grpc.CallOption) (WatchZonesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchZones",
			ServerStreams: true,
		},
		"/ntt.workplace.v1alpha.ZoneService/WatchZones", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchZonesWatchZonesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchZonesClientStream interface {
	Recv() (*WatchZonesResponse, error)
	grpc.ClientStream
}

type watchZonesWatchZonesClient struct {
	grpc.ClientStream
}

func (x *watchZonesWatchZonesClient) Recv() (*WatchZonesResponse, error) {
	m := new(WatchZonesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error) {
	out := new(zone.Zone)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/CreateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*zone.Zone, error) {
	out := new(zone.Zone)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/UpdateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.workplace.v1alpha.ZoneService/DeleteZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
