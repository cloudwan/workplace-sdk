// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/property_service.proto
// DO NOT EDIT!!!

package property_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	device "github.com/cloudwan/workplace-sdk/resources/v1alpha/device"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	property "github.com/cloudwan/workplace-sdk/resources/v1alpha/property"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &device.Device{}
	_ = &floor.Floor{}
	_ = &property.Property{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

func (o *GetPropertyRequest) GotenObjectExt() {}

func (o *GetPropertyRequest) MakeFullFieldMask() *GetPropertyRequest_FieldMask {
	return FullGetPropertyRequest_FieldMask()
}

func (o *GetPropertyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPropertyRequest_FieldMask()
}

func (o *GetPropertyRequest) MakeDiffFieldMask(other *GetPropertyRequest) *GetPropertyRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPropertyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPropertyRequest_FieldMask()
	}

	res := &GetPropertyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPropertyRequest_FieldTerminalPath{selector: GetPropertyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPropertyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPropertyRequest))
}

func (o *GetPropertyRequest) Clone() *GetPropertyRequest {
	if o == nil {
		return nil
	}
	result := &GetPropertyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &property.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPropertyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPropertyRequest) Merge(source *GetPropertyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &property.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPropertyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPropertyRequest))
}

func (o *BatchGetPropertiesRequest) GotenObjectExt() {}

func (o *BatchGetPropertiesRequest) MakeFullFieldMask() *BatchGetPropertiesRequest_FieldMask {
	return FullBatchGetPropertiesRequest_FieldMask()
}

func (o *BatchGetPropertiesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPropertiesRequest_FieldMask()
}

func (o *BatchGetPropertiesRequest) MakeDiffFieldMask(other *BatchGetPropertiesRequest) *BatchGetPropertiesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPropertiesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPropertiesRequest_FieldMask()
	}

	res := &BatchGetPropertiesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPropertiesRequest_FieldTerminalPath{selector: BatchGetPropertiesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPropertiesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPropertiesRequest))
}

func (o *BatchGetPropertiesRequest) Clone() *BatchGetPropertiesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPropertiesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &property.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*property.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &property.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPropertiesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPropertiesRequest) Merge(source *BatchGetPropertiesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &property.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *property.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &property.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPropertiesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPropertiesRequest))
}

func (o *BatchGetPropertiesResponse) GotenObjectExt() {}

func (o *BatchGetPropertiesResponse) MakeFullFieldMask() *BatchGetPropertiesResponse_FieldMask {
	return FullBatchGetPropertiesResponse_FieldMask()
}

func (o *BatchGetPropertiesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPropertiesResponse_FieldMask()
}

func (o *BatchGetPropertiesResponse) MakeDiffFieldMask(other *BatchGetPropertiesResponse) *BatchGetPropertiesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPropertiesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPropertiesResponse_FieldMask()
	}

	res := &BatchGetPropertiesResponse_FieldMask{}

	if len(o.GetProperties()) == len(other.GetProperties()) {
		for i, lValue := range o.GetProperties() {
			rValue := other.GetProperties()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorProperties})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorProperties})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPropertiesResponse_FieldTerminalPath{selector: BatchGetPropertiesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPropertiesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPropertiesResponse))
}

func (o *BatchGetPropertiesResponse) Clone() *BatchGetPropertiesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPropertiesResponse{}
	result.Properties = make([]*property.Property, len(o.Properties))
	for i, sourceValue := range o.Properties {
		result.Properties[i] = sourceValue.Clone()
	}
	result.Missing = make([]*property.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &property.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPropertiesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPropertiesResponse) Merge(source *BatchGetPropertiesResponse) {
	for _, sourceValue := range source.GetProperties() {
		exists := false
		for _, currentValue := range o.Properties {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *property.Property
			if sourceValue != nil {
				newDstElement = new(property.Property)
				newDstElement.Merge(sourceValue)
			}
			o.Properties = append(o.Properties, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *property.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &property.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPropertiesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPropertiesResponse))
}

func (o *ListPropertiesRequest) GotenObjectExt() {}

func (o *ListPropertiesRequest) MakeFullFieldMask() *ListPropertiesRequest_FieldMask {
	return FullListPropertiesRequest_FieldMask()
}

func (o *ListPropertiesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPropertiesRequest_FieldMask()
}

func (o *ListPropertiesRequest) MakeDiffFieldMask(other *ListPropertiesRequest) *ListPropertiesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPropertiesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPropertiesRequest_FieldMask()
	}

	res := &ListPropertiesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPropertiesRequest_FieldTerminalPath{selector: ListPropertiesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListPropertiesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPropertiesRequest))
}

func (o *ListPropertiesRequest) Clone() *ListPropertiesRequest {
	if o == nil {
		return nil
	}
	result := &ListPropertiesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &property.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &property.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &property.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &property.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	result.View = o.View
	return result
}

func (o *ListPropertiesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPropertiesRequest) Merge(source *ListPropertiesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &property.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &property.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &property.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &property.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListPropertiesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPropertiesRequest))
}

func (o *ListPropertiesResponse) GotenObjectExt() {}

func (o *ListPropertiesResponse) MakeFullFieldMask() *ListPropertiesResponse_FieldMask {
	return FullListPropertiesResponse_FieldMask()
}

func (o *ListPropertiesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPropertiesResponse_FieldMask()
}

func (o *ListPropertiesResponse) MakeDiffFieldMask(other *ListPropertiesResponse) *ListPropertiesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPropertiesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPropertiesResponse_FieldMask()
	}

	res := &ListPropertiesResponse_FieldMask{}

	if len(o.GetProperties()) == len(other.GetProperties()) {
		for i, lValue := range o.GetProperties() {
			rValue := other.GetProperties()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorProperties})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorProperties})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPropertiesResponse_FieldTerminalPath{selector: ListPropertiesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListPropertiesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPropertiesResponse))
}

func (o *ListPropertiesResponse) Clone() *ListPropertiesResponse {
	if o == nil {
		return nil
	}
	result := &ListPropertiesResponse{}
	result.Properties = make([]*property.Property, len(o.Properties))
	for i, sourceValue := range o.Properties {
		result.Properties[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &property.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &property.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListPropertiesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPropertiesResponse) Merge(source *ListPropertiesResponse) {
	for _, sourceValue := range source.GetProperties() {
		exists := false
		for _, currentValue := range o.Properties {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *property.Property
			if sourceValue != nil {
				newDstElement = new(property.Property)
				newDstElement.Merge(sourceValue)
			}
			o.Properties = append(o.Properties, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &property.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &property.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListPropertiesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPropertiesResponse))
}

func (o *WatchPropertyRequest) GotenObjectExt() {}

func (o *WatchPropertyRequest) MakeFullFieldMask() *WatchPropertyRequest_FieldMask {
	return FullWatchPropertyRequest_FieldMask()
}

func (o *WatchPropertyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPropertyRequest_FieldMask()
}

func (o *WatchPropertyRequest) MakeDiffFieldMask(other *WatchPropertyRequest) *WatchPropertyRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPropertyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPropertyRequest_FieldMask()
	}

	res := &WatchPropertyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPropertyRequest_FieldTerminalPath{selector: WatchPropertyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPropertyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPropertyRequest))
}

func (o *WatchPropertyRequest) Clone() *WatchPropertyRequest {
	if o == nil {
		return nil
	}
	result := &WatchPropertyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &property.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPropertyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPropertyRequest) Merge(source *WatchPropertyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &property.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPropertyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPropertyRequest))
}

func (o *WatchPropertyResponse) GotenObjectExt() {}

func (o *WatchPropertyResponse) MakeFullFieldMask() *WatchPropertyResponse_FieldMask {
	return FullWatchPropertyResponse_FieldMask()
}

func (o *WatchPropertyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPropertyResponse_FieldMask()
}

func (o *WatchPropertyResponse) MakeDiffFieldMask(other *WatchPropertyResponse) *WatchPropertyResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPropertyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPropertyResponse_FieldMask()
	}

	res := &WatchPropertyResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPropertyResponse_FieldTerminalPath{selector: WatchPropertyResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPropertyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPropertyResponse))
}

func (o *WatchPropertyResponse) Clone() *WatchPropertyResponse {
	if o == nil {
		return nil
	}
	result := &WatchPropertyResponse{}
	result.Change = proto.Clone(o.Change).(*property.PropertyChange)
	return result
}

func (o *WatchPropertyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPropertyResponse) Merge(source *WatchPropertyResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(property.PropertyChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPropertyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPropertyResponse))
}

func (o *WatchPropertiesRequest) GotenObjectExt() {}

func (o *WatchPropertiesRequest) MakeFullFieldMask() *WatchPropertiesRequest_FieldMask {
	return FullWatchPropertiesRequest_FieldMask()
}

func (o *WatchPropertiesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPropertiesRequest_FieldMask()
}

func (o *WatchPropertiesRequest) MakeDiffFieldMask(other *WatchPropertiesRequest) *WatchPropertiesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPropertiesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPropertiesRequest_FieldMask()
	}

	res := &WatchPropertiesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPropertiesRequest_FieldTerminalPath{selector: WatchPropertiesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPropertiesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPropertiesRequest))
}

func (o *WatchPropertiesRequest) Clone() *WatchPropertiesRequest {
	if o == nil {
		return nil
	}
	result := &WatchPropertiesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &property.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &property.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &property.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &property.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPropertiesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPropertiesRequest) Merge(source *WatchPropertiesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &property.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &property.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &property.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &property.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPropertiesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPropertiesRequest))
}

func (o *WatchPropertiesResponse) GotenObjectExt() {}

func (o *WatchPropertiesResponse) MakeFullFieldMask() *WatchPropertiesResponse_FieldMask {
	return FullWatchPropertiesResponse_FieldMask()
}

func (o *WatchPropertiesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPropertiesResponse_FieldMask()
}

func (o *WatchPropertiesResponse) MakeDiffFieldMask(other *WatchPropertiesResponse) *WatchPropertiesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPropertiesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPropertiesResponse_FieldMask()
	}

	res := &WatchPropertiesResponse_FieldMask{}

	if len(o.GetPropertyChanges()) == len(other.GetPropertyChanges()) {
		for i, lValue := range o.GetPropertyChanges() {
			rValue := other.GetPropertyChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorPropertyChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorPropertyChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldSubPath{selector: WatchPropertiesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPropertiesResponse_FieldTerminalPath{selector: WatchPropertiesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPropertiesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPropertiesResponse))
}

func (o *WatchPropertiesResponse) Clone() *WatchPropertiesResponse {
	if o == nil {
		return nil
	}
	result := &WatchPropertiesResponse{}
	result.PropertyChanges = make([]*property.PropertyChange, len(o.PropertyChanges))
	for i, sourceValue := range o.PropertyChanges {
		result.PropertyChanges[i] = proto.Clone(sourceValue).(*property.PropertyChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPropertiesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPropertiesResponse) Merge(source *WatchPropertiesResponse) {
	for _, sourceValue := range source.GetPropertyChanges() {
		exists := false
		for _, currentValue := range o.PropertyChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *property.PropertyChange
			if sourceValue != nil {
				newDstElement = new(property.PropertyChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PropertyChanges = append(o.PropertyChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPropertiesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPropertiesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPropertiesResponse))
}

func (o *WatchPropertiesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPropertiesResponse_PageTokenChange) MakeFullFieldMask() *WatchPropertiesResponse_PageTokenChange_FieldMask {
	return FullWatchPropertiesResponse_PageTokenChange_FieldMask()
}

func (o *WatchPropertiesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPropertiesResponse_PageTokenChange_FieldMask()
}

func (o *WatchPropertiesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPropertiesResponse_PageTokenChange) *WatchPropertiesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPropertiesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPropertiesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPropertiesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPropertiesResponsePageTokenChange_FieldTerminalPath{selector: WatchPropertiesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPropertiesResponsePageTokenChange_FieldTerminalPath{selector: WatchPropertiesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPropertiesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPropertiesResponse_PageTokenChange))
}

func (o *WatchPropertiesResponse_PageTokenChange) Clone() *WatchPropertiesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPropertiesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &property.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &property.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPropertiesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPropertiesResponse_PageTokenChange) Merge(source *WatchPropertiesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &property.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &property.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPropertiesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPropertiesResponse_PageTokenChange))
}

func (o *CreatePropertyRequest) GotenObjectExt() {}

func (o *CreatePropertyRequest) MakeFullFieldMask() *CreatePropertyRequest_FieldMask {
	return FullCreatePropertyRequest_FieldMask()
}

func (o *CreatePropertyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePropertyRequest_FieldMask()
}

func (o *CreatePropertyRequest) MakeDiffFieldMask(other *CreatePropertyRequest) *CreatePropertyRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePropertyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePropertyRequest_FieldMask()
	}

	res := &CreatePropertyRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreatePropertyRequest_FieldTerminalPath{selector: CreatePropertyRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProperty().MakeDiffFieldMask(other.GetProperty())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePropertyRequest_FieldTerminalPath{selector: CreatePropertyRequest_FieldPathSelectorProperty})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePropertyRequest_FieldSubPath{selector: CreatePropertyRequest_FieldPathSelectorProperty, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePropertyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePropertyRequest))
}

func (o *CreatePropertyRequest) Clone() *CreatePropertyRequest {
	if o == nil {
		return nil
	}
	result := &CreatePropertyRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &property.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Property = o.Property.Clone()
	return result
}

func (o *CreatePropertyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePropertyRequest) Merge(source *CreatePropertyRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &property.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProperty() != nil {
		if o.Property == nil {
			o.Property = new(property.Property)
		}
		o.Property.Merge(source.GetProperty())
	}
}

func (o *CreatePropertyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePropertyRequest))
}

func (o *UpdatePropertyRequest) GotenObjectExt() {}

func (o *UpdatePropertyRequest) MakeFullFieldMask() *UpdatePropertyRequest_FieldMask {
	return FullUpdatePropertyRequest_FieldMask()
}

func (o *UpdatePropertyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePropertyRequest_FieldMask()
}

func (o *UpdatePropertyRequest) MakeDiffFieldMask(other *UpdatePropertyRequest) *UpdatePropertyRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePropertyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePropertyRequest_FieldMask()
	}

	res := &UpdatePropertyRequest_FieldMask{}
	{
		subMask := o.GetProperty().MakeDiffFieldMask(other.GetProperty())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorProperty})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePropertyRequest_FieldSubPath{selector: UpdatePropertyRequest_FieldPathSelectorProperty, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePropertyRequest_FieldTerminalPath{selector: UpdatePropertyRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePropertyRequest_FieldSubPath{selector: UpdatePropertyRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdatePropertyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePropertyRequest))
}

func (o *UpdatePropertyRequest) Clone() *UpdatePropertyRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePropertyRequest{}
	result.Property = o.Property.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*property.Property_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdatePropertyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePropertyRequest) Merge(source *UpdatePropertyRequest) {
	if source.GetProperty() != nil {
		if o.Property == nil {
			o.Property = new(property.Property)
		}
		o.Property.Merge(source.GetProperty())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePropertyRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdatePropertyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePropertyRequest))
}

func (o *UpdatePropertyRequest_CAS) GotenObjectExt() {}

func (o *UpdatePropertyRequest_CAS) MakeFullFieldMask() *UpdatePropertyRequest_CAS_FieldMask {
	return FullUpdatePropertyRequest_CAS_FieldMask()
}

func (o *UpdatePropertyRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePropertyRequest_CAS_FieldMask()
}

func (o *UpdatePropertyRequest_CAS) MakeDiffFieldMask(other *UpdatePropertyRequest_CAS) *UpdatePropertyRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePropertyRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePropertyRequest_CAS_FieldMask()
	}

	res := &UpdatePropertyRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePropertyRequestCAS_FieldTerminalPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePropertyRequestCAS_FieldSubPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePropertyRequestCAS_FieldTerminalPath{selector: UpdatePropertyRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePropertyRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePropertyRequest_CAS))
}

func (o *UpdatePropertyRequest_CAS) Clone() *UpdatePropertyRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePropertyRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*property.Property_FieldMask)
	return result
}

func (o *UpdatePropertyRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePropertyRequest_CAS) Merge(source *UpdatePropertyRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(property.Property)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(property.Property_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePropertyRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePropertyRequest_CAS))
}

func (o *DeletePropertyRequest) GotenObjectExt() {}

func (o *DeletePropertyRequest) MakeFullFieldMask() *DeletePropertyRequest_FieldMask {
	return FullDeletePropertyRequest_FieldMask()
}

func (o *DeletePropertyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePropertyRequest_FieldMask()
}

func (o *DeletePropertyRequest) MakeDiffFieldMask(other *DeletePropertyRequest) *DeletePropertyRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePropertyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePropertyRequest_FieldMask()
	}

	res := &DeletePropertyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePropertyRequest_FieldTerminalPath{selector: DeletePropertyRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePropertyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePropertyRequest))
}

func (o *DeletePropertyRequest) Clone() *DeletePropertyRequest {
	if o == nil {
		return nil
	}
	result := &DeletePropertyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &property.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePropertyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePropertyRequest) Merge(source *DeletePropertyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &property.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePropertyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePropertyRequest))
}
