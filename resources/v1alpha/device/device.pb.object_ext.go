// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha/agent"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &agent.Agent{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

func (o *Device) GotenObjectExt() {}

func (o *Device) MakeFullFieldMask() *Device_FieldMask {
	return FullDevice_FieldMask()
}

func (o *Device) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_FieldMask()
}

func (o *Device) MakeDiffFieldMask(other *Device) *Device_FieldMask {
	if o == nil && other == nil {
		return &Device_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_FieldMask()
	}

	res := &Device_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorDisplayName})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorType})
	}
	{
		subMask := o.GetGeometry().MakeDiffFieldMask(other.GetGeometry())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorGeometry})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorGeometry, subPath: subpath})
			}
		}
	}
	if o.GetOwnerAgent().String() != other.GetOwnerAgent().String() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorOwnerAgent})
	}
	{
		subMask := o.GetSitePlacement().MakeDiffFieldMask(other.GetSitePlacement())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorSitePlacement})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorSitePlacement, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetVendorInfo().MakeDiffFieldMask(other.GetVendorInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorVendorInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorVendorInfo, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetState().MakeDiffFieldMask(other.GetState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorState, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device))
}

func (o *Device) Clone() *Device {
	if o == nil {
		return nil
	}
	result := &Device{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Type = o.Type
	result.Geometry = o.Geometry.Clone()
	if o.OwnerAgent == nil {
		result.OwnerAgent = nil
	} else if data, err := o.OwnerAgent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OwnerAgent = &agent.Reference{}
		if err := result.OwnerAgent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.SitePlacement = o.SitePlacement.Clone()
	result.VendorInfo = o.VendorInfo.Clone()
	result.State = o.State.Clone()
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Device) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device) Merge(source *Device) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.Type = source.GetType()
	if source.GetGeometry() != nil {
		if o.Geometry == nil {
			o.Geometry = new(workplace_common.Geometry)
		}
		o.Geometry.Merge(source.GetGeometry())
	}
	if source.GetOwnerAgent() != nil {
		if data, err := source.GetOwnerAgent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OwnerAgent = &agent.Reference{}
			if err := o.OwnerAgent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OwnerAgent = nil
	}
	if source.GetSitePlacement() != nil {
		if o.SitePlacement == nil {
			o.SitePlacement = new(Device_SitePlacement)
		}
		o.SitePlacement.Merge(source.GetSitePlacement())
	}
	if source.GetVendorInfo() != nil {
		if o.VendorInfo == nil {
			o.VendorInfo = new(Device_VendorInfo)
		}
		o.VendorInfo.Merge(source.GetVendorInfo())
	}
	if source.GetState() != nil {
		if o.State == nil {
			o.State = new(Device_State)
		}
		o.State.Merge(source.GetState())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Device) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device))
}

func (o *Device_SitePlacement) GotenObjectExt() {}

func (o *Device_SitePlacement) MakeFullFieldMask() *Device_SitePlacement_FieldMask {
	return FullDevice_SitePlacement_FieldMask()
}

func (o *Device_SitePlacement) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_SitePlacement_FieldMask()
}

func (o *Device_SitePlacement) MakeDiffFieldMask(other *Device_SitePlacement) *Device_SitePlacement_FieldMask {
	if o == nil && other == nil {
		return &Device_SitePlacement_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_SitePlacement_FieldMask()
	}

	res := &Device_SitePlacement_FieldMask{}
	if o.GetSite().String() != other.GetSite().String() {
		res.Paths = append(res.Paths, &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorSite})
	}
	if o.GetBuilding().String() != other.GetBuilding().String() {
		res.Paths = append(res.Paths, &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorBuilding})
	}
	if o.GetFloor().String() != other.GetFloor().String() {
		res.Paths = append(res.Paths, &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorFloor})
	}
	if o.GetArea().String() != other.GetArea().String() {
		res.Paths = append(res.Paths, &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorArea})
	}
	if o.GetZone().String() != other.GetZone().String() {
		res.Paths = append(res.Paths, &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorZone})
	}
	return res
}

func (o *Device_SitePlacement) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_SitePlacement))
}

func (o *Device_SitePlacement) Clone() *Device_SitePlacement {
	if o == nil {
		return nil
	}
	result := &Device_SitePlacement{}
	if o.Site == nil {
		result.Site = nil
	} else if data, err := o.Site.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Site = &site.Reference{}
		if err := result.Site.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Building == nil {
		result.Building = nil
	} else if data, err := o.Building.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Building = &building.Reference{}
		if err := result.Building.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Floor == nil {
		result.Floor = nil
	} else if data, err := o.Floor.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Floor = &floor.Reference{}
		if err := result.Floor.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Area == nil {
		result.Area = nil
	} else if data, err := o.Area.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Area = &area.Reference{}
		if err := result.Area.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Zone == nil {
		result.Zone = nil
	} else if data, err := o.Zone.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Zone = &zone.Reference{}
		if err := result.Zone.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *Device_SitePlacement) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_SitePlacement) Merge(source *Device_SitePlacement) {
	if source.GetSite() != nil {
		if data, err := source.GetSite().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Site = &site.Reference{}
			if err := o.Site.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Site = nil
	}
	if source.GetBuilding() != nil {
		if data, err := source.GetBuilding().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Building = &building.Reference{}
			if err := o.Building.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Building = nil
	}
	if source.GetFloor() != nil {
		if data, err := source.GetFloor().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Floor = &floor.Reference{}
			if err := o.Floor.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Floor = nil
	}
	if source.GetArea() != nil {
		if data, err := source.GetArea().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Area = &area.Reference{}
			if err := o.Area.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Area = nil
	}
	if source.GetZone() != nil {
		if data, err := source.GetZone().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Zone = &zone.Reference{}
			if err := o.Zone.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Zone = nil
	}
}

func (o *Device_SitePlacement) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_SitePlacement))
}

func (o *Device_VendorInfo) GotenObjectExt() {}

func (o *Device_VendorInfo) MakeFullFieldMask() *Device_VendorInfo_FieldMask {
	return FullDevice_VendorInfo_FieldMask()
}

func (o *Device_VendorInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_VendorInfo_FieldMask()
}

func (o *Device_VendorInfo) MakeDiffFieldMask(other *Device_VendorInfo) *Device_VendorInfo_FieldMask {
	if o == nil && other == nil {
		return &Device_VendorInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_VendorInfo_FieldMask()
	}

	res := &Device_VendorInfo_FieldMask{}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorVendor})
	}
	{
		subMask := o.GetBacnet().MakeDiffFieldMask(other.GetBacnet())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorBacnet})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceVendorInfo_FieldSubPath{selector: DeviceVendorInfo_FieldPathSelectorBacnet, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetPointGrab().MakeDiffFieldMask(other.GetPointGrab())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorPointGrab})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceVendorInfo_FieldSubPath{selector: DeviceVendorInfo_FieldPathSelectorPointGrab, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_VendorInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_VendorInfo))
}

func (o *Device_VendorInfo) Clone() *Device_VendorInfo {
	if o == nil {
		return nil
	}
	result := &Device_VendorInfo{}
	result.Vendor = o.Vendor
	result.Bacnet = o.Bacnet.Clone()
	result.PointGrab = o.PointGrab.Clone()
	return result
}

func (o *Device_VendorInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_VendorInfo) Merge(source *Device_VendorInfo) {
	o.Vendor = source.GetVendor()
	if source.GetBacnet() != nil {
		if o.Bacnet == nil {
			o.Bacnet = new(workplace_common.BACNetEntity)
		}
		o.Bacnet.Merge(source.GetBacnet())
	}
	if source.GetPointGrab() != nil {
		if o.PointGrab == nil {
			o.PointGrab = new(Device_VendorInfo_PointGrabInfo)
		}
		o.PointGrab.Merge(source.GetPointGrab())
	}
}

func (o *Device_VendorInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_VendorInfo))
}

func (o *Device_State) GotenObjectExt() {}

func (o *Device_State) MakeFullFieldMask() *Device_State_FieldMask {
	return FullDevice_State_FieldMask()
}

func (o *Device_State) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_State_FieldMask()
}

func (o *Device_State) MakeDiffFieldMask(other *Device_State) *Device_State_FieldMask {
	if o == nil && other == nil {
		return &Device_State_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_State_FieldMask()
	}

	res := &Device_State_FieldMask{}
	{
		subMask := o.GetConnection().MakeDiffFieldMask(other.GetConnection())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceState_FieldTerminalPath{selector: DeviceState_FieldPathSelectorConnection})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceState_FieldSubPath{selector: DeviceState_FieldPathSelectorConnection, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_State) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_State))
}

func (o *Device_State) Clone() *Device_State {
	if o == nil {
		return nil
	}
	result := &Device_State{}
	result.Connection = o.Connection.Clone()
	return result
}

func (o *Device_State) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_State) Merge(source *Device_State) {
	if source.GetConnection() != nil {
		if o.Connection == nil {
			o.Connection = new(Device_State_Connection)
		}
		o.Connection.Merge(source.GetConnection())
	}
}

func (o *Device_State) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_State))
}

func (o *Device_VendorInfo_PointGrabInfo) GotenObjectExt() {}

func (o *Device_VendorInfo_PointGrabInfo) MakeFullFieldMask() *Device_VendorInfo_PointGrabInfo_FieldMask {
	return FullDevice_VendorInfo_PointGrabInfo_FieldMask()
}

func (o *Device_VendorInfo_PointGrabInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_VendorInfo_PointGrabInfo_FieldMask()
}

func (o *Device_VendorInfo_PointGrabInfo) MakeDiffFieldMask(other *Device_VendorInfo_PointGrabInfo) *Device_VendorInfo_PointGrabInfo_FieldMask {
	if o == nil && other == nil {
		return &Device_VendorInfo_PointGrabInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_VendorInfo_PointGrabInfo_FieldMask()
	}

	res := &Device_VendorInfo_PointGrabInfo_FieldMask{}
	if o.GetDeviceId() != other.GetDeviceId() {
		res.Paths = append(res.Paths, &DeviceVendorInfoPointGrabInfo_FieldTerminalPath{selector: DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId})
	}
	if o.GetRotation() != other.GetRotation() {
		res.Paths = append(res.Paths, &DeviceVendorInfoPointGrabInfo_FieldTerminalPath{selector: DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation})
	}
	return res
}

func (o *Device_VendorInfo_PointGrabInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_VendorInfo_PointGrabInfo))
}

func (o *Device_VendorInfo_PointGrabInfo) Clone() *Device_VendorInfo_PointGrabInfo {
	if o == nil {
		return nil
	}
	result := &Device_VendorInfo_PointGrabInfo{}
	result.DeviceId = o.DeviceId
	result.Rotation = o.Rotation
	return result
}

func (o *Device_VendorInfo_PointGrabInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_VendorInfo_PointGrabInfo) Merge(source *Device_VendorInfo_PointGrabInfo) {
	o.DeviceId = source.GetDeviceId()
	o.Rotation = source.GetRotation()
}

func (o *Device_VendorInfo_PointGrabInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_VendorInfo_PointGrabInfo))
}

func (o *Device_State_Connection) GotenObjectExt() {}

func (o *Device_State_Connection) MakeFullFieldMask() *Device_State_Connection_FieldMask {
	return FullDevice_State_Connection_FieldMask()
}

func (o *Device_State_Connection) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_State_Connection_FieldMask()
}

func (o *Device_State_Connection) MakeDiffFieldMask(other *Device_State_Connection) *Device_State_Connection_FieldMask {
	if o == nil && other == nil {
		return &Device_State_Connection_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_State_Connection_FieldMask()
	}

	res := &Device_State_Connection_FieldMask{}
	if o.GetStatus() != other.GetStatus() {
		res.Paths = append(res.Paths, &DeviceStateConnection_FieldTerminalPath{selector: DeviceStateConnection_FieldPathSelectorStatus})
	}
	if !proto.Equal(o.GetStatusSince(), other.GetStatusSince()) {
		res.Paths = append(res.Paths, &DeviceStateConnection_FieldTerminalPath{selector: DeviceStateConnection_FieldPathSelectorStatusSince})
	}
	return res
}

func (o *Device_State_Connection) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_State_Connection))
}

func (o *Device_State_Connection) Clone() *Device_State_Connection {
	if o == nil {
		return nil
	}
	result := &Device_State_Connection{}
	result.Status = o.Status
	result.StatusSince = proto.Clone(o.StatusSince).(*timestamp.Timestamp)
	return result
}

func (o *Device_State_Connection) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_State_Connection) Merge(source *Device_State_Connection) {
	o.Status = source.GetStatus()
	if source.GetStatusSince() != nil {
		if o.StatusSince == nil {
			o.StatusSince = new(timestamp.Timestamp)
		}
		proto.Merge(o.StatusSince, source.GetStatusSince())
	}
}

func (o *Device_State_Connection) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_State_Connection))
}
