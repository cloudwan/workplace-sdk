// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/device.proto
// DO NOT EDIT!!!

package device

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha/agent"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &agent.Agent{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Device_FieldPath interface {
	gotenobject.FieldPath
	Selector() Device_FieldPathSelector
	Get(source *Device) []interface{}
	GetSingle(source *Device) (interface{}, bool)
	ClearValue(item *Device)

	// Those methods build corresponding Device_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Device_FieldPathValue
	WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue
}

type Device_FieldPathSelector int32

const (
	Device_FieldPathSelectorName          Device_FieldPathSelector = 0
	Device_FieldPathSelectorDisplayName   Device_FieldPathSelector = 1
	Device_FieldPathSelectorType          Device_FieldPathSelector = 2
	Device_FieldPathSelectorGeometry      Device_FieldPathSelector = 3
	Device_FieldPathSelectorOwnerAgent    Device_FieldPathSelector = 4
	Device_FieldPathSelectorSitePlacement Device_FieldPathSelector = 5
	Device_FieldPathSelectorVendorInfo    Device_FieldPathSelector = 6
	Device_FieldPathSelectorState         Device_FieldPathSelector = 7
	Device_FieldPathSelectorMetadata      Device_FieldPathSelector = 8
)

func (s Device_FieldPathSelector) String() string {
	switch s {
	case Device_FieldPathSelectorName:
		return "name"
	case Device_FieldPathSelectorDisplayName:
		return "display_name"
	case Device_FieldPathSelectorType:
		return "type"
	case Device_FieldPathSelectorGeometry:
		return "geometry"
	case Device_FieldPathSelectorOwnerAgent:
		return "owner_agent"
	case Device_FieldPathSelectorSitePlacement:
		return "site_placement"
	case Device_FieldPathSelectorVendorInfo:
		return "vendor_info"
	case Device_FieldPathSelectorState:
		return "state"
	case Device_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", s))
	}
}

func BuildDevice_FieldPath(fp gotenobject.RawFieldPath) (Device_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorDisplayName}, nil
		case "type":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorType}, nil
		case "geometry":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorGeometry}, nil
		case "owner_agent", "ownerAgent", "owner-agent":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorOwnerAgent}, nil
		case "site_placement", "sitePlacement", "site-placement":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorSitePlacement}, nil
		case "vendor_info", "vendorInfo", "vendor-info":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorVendorInfo}, nil
		case "state":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorState}, nil
		case "metadata":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "site_placement", "sitePlacement", "site-placement":
			if subpath, err := BuildDeviceSitePlacement_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorSitePlacement, subPath: subpath}, nil
			}
		case "vendor_info", "vendorInfo", "vendor-info":
			if subpath, err := BuildDeviceVendorInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorVendorInfo, subPath: subpath}, nil
			}
		case "state":
			if subpath, err := BuildDeviceState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device", fp)
}

func ParseDevice_FieldPath(rawField string) (Device_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDevice_FieldPath(fp)
}

func MustParseDevice_FieldPath(rawField string) Device_FieldPath {
	fp, err := ParseDevice_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Device_FieldTerminalPath struct {
	selector Device_FieldPathSelector
}

var _ Device_FieldPath = (*Device_FieldTerminalPath)(nil)

func (fp *Device_FieldTerminalPath) Selector() Device_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Device_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Device_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device
func (fp *Device_FieldTerminalPath) Get(source *Device) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Device_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Device_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Device_FieldPathSelectorType:
			values = append(values, source.Type)
		case Device_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Device_FieldPathSelectorOwnerAgent:
			if source.OwnerAgent != nil {
				values = append(values, source.OwnerAgent)
			}
		case Device_FieldPathSelectorSitePlacement:
			if source.SitePlacement != nil {
				values = append(values, source.SitePlacement)
			}
		case Device_FieldPathSelectorVendorInfo:
			if source.VendorInfo != nil {
				values = append(values, source.VendorInfo)
			}
		case Device_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case Device_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
		}
	}
	return
}

func (fp *Device_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device))
}

// GetSingle returns value pointed by specific field of from source Device
func (fp *Device_FieldTerminalPath) GetSingle(source *Device) (interface{}, bool) {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Device_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Device_FieldPathSelectorType:
		return source.GetType(), source != nil
	case Device_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Device_FieldPathSelectorOwnerAgent:
		res := source.GetOwnerAgent()
		return res, res != nil
	case Device_FieldPathSelectorSitePlacement:
		res := source.GetSitePlacement()
		return res, res != nil
	case Device_FieldPathSelectorVendorInfo:
		res := source.GetVendorInfo()
		return res, res != nil
	case Device_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case Device_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device))
}

// GetDefault returns a default value of the field type
func (fp *Device_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return (*Name)(nil)
	case Device_FieldPathSelectorDisplayName:
		return ""
	case Device_FieldPathSelectorType:
		return Device_TYPE_UNSPECIFIED
	case Device_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Device_FieldPathSelectorOwnerAgent:
		return (*agent.Reference)(nil)
	case Device_FieldPathSelectorSitePlacement:
		return (*Device_SitePlacement)(nil)
	case Device_FieldPathSelectorVendorInfo:
		return (*Device_VendorInfo)(nil)
	case Device_FieldPathSelectorState:
		return (*Device_State)(nil)
	case Device_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) ClearValue(item *Device) {
	if item != nil {
		switch fp.selector {
		case Device_FieldPathSelectorName:
			item.Name = nil
		case Device_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Device_FieldPathSelectorType:
			item.Type = Device_TYPE_UNSPECIFIED
		case Device_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Device_FieldPathSelectorOwnerAgent:
			item.OwnerAgent = nil
		case Device_FieldPathSelectorSitePlacement:
			item.SitePlacement = nil
		case Device_FieldPathSelectorVendorInfo:
			item.VendorInfo = nil
		case Device_FieldPathSelectorState:
			item.State = nil
		case Device_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
		}
	}
}

func (fp *Device_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device))
}

// IsLeaf - whether field path is holds simple value
func (fp *Device_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Device_FieldPathSelectorName ||
		fp.selector == Device_FieldPathSelectorDisplayName ||
		fp.selector == Device_FieldPathSelectorType ||
		fp.selector == Device_FieldPathSelectorOwnerAgent
}

func (fp *Device_FieldTerminalPath) WithIValue(value interface{}) Device_FieldPathValue {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Name)}
	case Device_FieldPathSelectorDisplayName:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(string)}
	case Device_FieldPathSelectorType:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(Device_Type)}
	case Device_FieldPathSelectorGeometry:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Device_FieldPathSelectorOwnerAgent:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*agent.Reference)}
	case Device_FieldPathSelectorSitePlacement:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_SitePlacement)}
	case Device_FieldPathSelectorVendorInfo:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_VendorInfo)}
	case Device_FieldPathSelectorState:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_State)}
	case Device_FieldPathSelectorMetadata:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Device_FieldTerminalPath) WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues {
	fpaov := &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp}
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Device_FieldPathSelectorDisplayName:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]string)}
	case Device_FieldPathSelectorType:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]Device_Type)}
	case Device_FieldPathSelectorGeometry:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Device_FieldPathSelectorOwnerAgent:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*agent.Reference)}
	case Device_FieldPathSelectorSitePlacement:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_SitePlacement)}
	case Device_FieldPathSelectorVendorInfo:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_VendorInfo)}
	case Device_FieldPathSelectorState:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_State)}
	case Device_FieldPathSelectorMetadata:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
	return fpaov
}

func (fp *Device_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Device_FieldTerminalPath) WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Device_FieldSubPath struct {
	selector Device_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Device_FieldPath = (*Device_FieldSubPath)(nil)

func (fps *Device_FieldSubPath) Selector() Device_FieldPathSelector {
	return fps.selector
}
func (fps *Device_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsSitePlacementSubPath() (DeviceSitePlacement_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSitePlacement_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsVendorInfoSubPath() (DeviceVendorInfo_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceVendorInfo_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsStateSubPath() (DeviceState_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceState_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Device_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Device_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device
func (fps *Device_FieldSubPath) Get(source *Device) (values []interface{}) {
	if asGeometryFieldPath, ok := fps.AsGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetGeometry())...)
	} else if asSitePlacementFieldPath, ok := fps.AsSitePlacementSubPath(); ok {
		values = append(values, asSitePlacementFieldPath.Get(source.GetSitePlacement())...)
	} else if asVendorInfoFieldPath, ok := fps.AsVendorInfoSubPath(); ok {
		values = append(values, asVendorInfoFieldPath.Get(source.GetVendorInfo())...)
	} else if asStateFieldPath, ok := fps.AsStateSubPath(); ok {
		values = append(values, asStateFieldPath.Get(source.GetState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
	}
	return
}

func (fps *Device_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device))
}

// GetSingle returns value of selected field from source Device
func (fps *Device_FieldSubPath) GetSingle(source *Device) (interface{}, bool) {
	switch fps.selector {
	case Device_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Device_FieldPathSelectorSitePlacement:
		if source.GetSitePlacement() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSitePlacement())
	case Device_FieldPathSelectorVendorInfo:
		if source.GetVendorInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorInfo())
	case Device_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	case Device_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
	}
}

func (fps *Device_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device))
}

// GetDefault returns a default value of the field type
func (fps *Device_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Device_FieldSubPath) ClearValue(item *Device) {
	if item != nil {
		switch fps.selector {
		case Device_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Device_FieldPathSelectorSitePlacement:
			fps.subPath.ClearValueRaw(item.SitePlacement)
		case Device_FieldPathSelectorVendorInfo:
			fps.subPath.ClearValueRaw(item.VendorInfo)
		case Device_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		case Device_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
		}
	}
}

func (fps *Device_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device))
}

// IsLeaf - whether field path is holds simple value
func (fps *Device_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Device_FieldSubPath) WithIValue(value interface{}) Device_FieldPathValue {
	return &Device_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Device_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Device_FieldSubPath) WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues {
	return &Device_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Device_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Device_FieldSubPath) WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue {
	return &Device_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Device_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Device_FieldPathValue allows storing values for Device fields according to their type
type Device_FieldPathValue interface {
	Device_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device)
	CompareWith(*Device) (cmp int, comparable bool)
}

func ParseDevice_FieldPathValue(pathStr, valueStr string) (Device_FieldPathValue, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path value from %s: %v", valueStr, err)
	}
	return fpv.(Device_FieldPathValue), nil
}

func MustParseDevice_FieldPathValue(pathStr, valueStr string) Device_FieldPathValue {
	fpv, err := ParseDevice_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Device_FieldTerminalPathValue struct {
	Device_FieldTerminalPath
	value interface{}
}

var _ Device_FieldPathValue = (*Device_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Device' as interface{}
func (fpv *Device_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Device_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsTypeValue() (Device_Type, bool) {
	res, ok := fpv.value.(Device_Type)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsOwnerAgentValue() (*agent.Reference, bool) {
	res, ok := fpv.value.(*agent.Reference)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsSitePlacementValue() (*Device_SitePlacement, bool) {
	res, ok := fpv.value.(*Device_SitePlacement)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsVendorInfoValue() (*Device_VendorInfo, bool) {
	res, ok := fpv.value.(*Device_VendorInfo)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsStateValue() (*Device_State, bool) {
	res, ok := fpv.value.(*Device_State)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Device
func (fpv *Device_FieldTerminalPathValue) SetTo(target **Device) {
	if *target == nil {
		*target = new(Device)
	}
	switch fpv.selector {
	case Device_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Device_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Device_FieldPathSelectorType:
		(*target).Type = fpv.value.(Device_Type)
	case Device_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Device_FieldPathSelectorOwnerAgent:
		(*target).OwnerAgent = fpv.value.(*agent.Reference)
	case Device_FieldPathSelectorSitePlacement:
		(*target).SitePlacement = fpv.value.(*Device_SitePlacement)
	case Device_FieldPathSelectorVendorInfo:
		(*target).VendorInfo = fpv.value.(*Device_VendorInfo)
	case Device_FieldPathSelectorState:
		(*target).State = fpv.value.(*Device_State)
	case Device_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpv.selector))
	}
}

func (fpv *Device_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Device_FieldTerminalPathValue' with the value under path in 'Device'.
func (fpv *Device_FieldTerminalPathValue) CompareWith(source *Device) (int, bool) {
	switch fpv.selector {
	case Device_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Device_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Device_FieldPathSelectorType:
		leftValue := fpv.value.(Device_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Device_FieldPathSelectorGeometry:
		return 0, false
	case Device_FieldPathSelectorOwnerAgent:
		leftValue := fpv.value.(*agent.Reference)
		rightValue := source.GetOwnerAgent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Device_FieldPathSelectorSitePlacement:
		return 0, false
	case Device_FieldPathSelectorVendorInfo:
		return 0, false
	case Device_FieldPathSelectorState:
		return 0, false
	case Device_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpv.selector))
	}
}

func (fpv *Device_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device))
}

type Device_FieldSubPathValue struct {
	Device_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Device_FieldPathValue = (*Device_FieldSubPathValue)(nil)

func (fpvs *Device_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsSitePlacementPathValue() (DeviceSitePlacement_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSitePlacement_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsVendorInfoPathValue() (DeviceVendorInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceVendorInfo_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsStatePathValue() (DeviceState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceState_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Device_FieldSubPathValue) SetTo(target **Device) {
	if *target == nil {
		*target = new(Device)
	}
	switch fpvs.Selector() {
	case Device_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Device_FieldPathSelectorSitePlacement:
		fpvs.subPathValue.(DeviceSitePlacement_FieldPathValue).SetTo(&(*target).SitePlacement)
	case Device_FieldPathSelectorVendorInfo:
		fpvs.subPathValue.(DeviceVendorInfo_FieldPathValue).SetTo(&(*target).VendorInfo)
	case Device_FieldPathSelectorState:
		fpvs.subPathValue.(DeviceState_FieldPathValue).SetTo(&(*target).State)
	case Device_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpvs.Selector()))
	}
}

func (fpvs *Device_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Device_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Device_FieldSubPathValue) CompareWith(source *Device) (int, bool) {
	switch fpvs.Selector() {
	case Device_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Device_FieldPathSelectorSitePlacement:
		return fpvs.subPathValue.(DeviceSitePlacement_FieldPathValue).CompareWith(source.GetSitePlacement())
	case Device_FieldPathSelectorVendorInfo:
		return fpvs.subPathValue.(DeviceVendorInfo_FieldPathValue).CompareWith(source.GetVendorInfo())
	case Device_FieldPathSelectorState:
		return fpvs.subPathValue.(DeviceState_FieldPathValue).CompareWith(source.GetState())
	case Device_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpvs.Selector()))
	}
}

func (fpvs *Device_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device))
}

// Device_FieldPathArrayItemValue allows storing single item in Path-specific values for Device according to their type
// Present only for array (repeated) types.
type Device_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Device_FieldPath
	ContainsValue(*Device) bool
}

// ParseDevice_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDevice_FieldPathArrayItemValue(pathStr, valueStr string) (Device_FieldPathArrayItemValue, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Device_FieldPathArrayItemValue), nil
}

func MustParseDevice_FieldPathArrayItemValue(pathStr, valueStr string) Device_FieldPathArrayItemValue {
	fpaiv, err := ParseDevice_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Device_FieldTerminalPathArrayItemValue struct {
	Device_FieldTerminalPath
	value interface{}
}

var _ Device_FieldPathArrayItemValue = (*Device_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device as interface{}
func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetSingle(source *Device) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Device'
func (fpaiv *Device_FieldTerminalPathArrayItemValue) ContainsValue(source *Device) bool {
	slice := fpaiv.Device_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Device_FieldSubPathArrayItemValue struct {
	Device_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Device_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsSitePlacementPathItemValue() (DeviceSitePlacement_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSitePlacement_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsVendorInfoPathItemValue() (DeviceVendorInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceVendorInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsStatePathItemValue() (DeviceState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Device'
func (fpaivs *Device_FieldSubPathArrayItemValue) ContainsValue(source *Device) bool {
	switch fpaivs.Selector() {
	case Device_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Device_FieldPathSelectorSitePlacement:
		return fpaivs.subPathItemValue.(DeviceSitePlacement_FieldPathArrayItemValue).ContainsValue(source.GetSitePlacement())
	case Device_FieldPathSelectorVendorInfo:
		return fpaivs.subPathItemValue.(DeviceVendorInfo_FieldPathArrayItemValue).ContainsValue(source.GetVendorInfo())
	case Device_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(DeviceState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	case Device_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpaivs.Selector()))
	}
}

// Device_FieldPathArrayOfValues allows storing slice of values for Device fields according to their type
type Device_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Device_FieldPath
}

func ParseDevice_FieldPathArrayOfValues(pathStr, valuesStr string) (Device_FieldPathArrayOfValues, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Device_FieldPathArrayOfValues), nil
}

func MustParseDevice_FieldPathArrayOfValues(pathStr, valuesStr string) Device_FieldPathArrayOfValues {
	fpaov, err := ParseDevice_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Device_FieldTerminalPathArrayOfValues struct {
	Device_FieldTerminalPath
	values interface{}
}

var _ Device_FieldPathArrayOfValues = (*Device_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Device_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Device_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Device_Type) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorOwnerAgent:
		for _, v := range fpaov.values.([]*agent.Reference) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorSitePlacement:
		for _, v := range fpaov.values.([]*Device_SitePlacement) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorVendorInfo:
		for _, v := range fpaov.values.([]*Device_VendorInfo) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*Device_State) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Device_Type, bool) {
	res, ok := fpaov.values.([]Device_Type)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsOwnerAgentArrayOfValues() ([]*agent.Reference, bool) {
	res, ok := fpaov.values.([]*agent.Reference)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsSitePlacementArrayOfValues() ([]*Device_SitePlacement, bool) {
	res, ok := fpaov.values.([]*Device_SitePlacement)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsVendorInfoArrayOfValues() ([]*Device_VendorInfo, bool) {
	res, ok := fpaov.values.([]*Device_VendorInfo)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*Device_State, bool) {
	res, ok := fpaov.values.([]*Device_State)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Device_FieldSubPathArrayOfValues struct {
	Device_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Device_FieldPathArrayOfValues = (*Device_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Device_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsSitePlacementPathArrayOfValues() (DeviceSitePlacement_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSitePlacement_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsVendorInfoPathArrayOfValues() (DeviceVendorInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceVendorInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (DeviceState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSitePlacement_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSitePlacement_FieldPathSelector
	Get(source *Device_SitePlacement) []interface{}
	GetSingle(source *Device_SitePlacement) (interface{}, bool)
	ClearValue(item *Device_SitePlacement)

	// Those methods build corresponding DeviceSitePlacement_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSitePlacement_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSitePlacement_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSitePlacement_FieldPathArrayItemValue
}

type DeviceSitePlacement_FieldPathSelector int32

const (
	DeviceSitePlacement_FieldPathSelectorSite     DeviceSitePlacement_FieldPathSelector = 0
	DeviceSitePlacement_FieldPathSelectorBuilding DeviceSitePlacement_FieldPathSelector = 1
	DeviceSitePlacement_FieldPathSelectorFloor    DeviceSitePlacement_FieldPathSelector = 2
	DeviceSitePlacement_FieldPathSelectorArea     DeviceSitePlacement_FieldPathSelector = 3
	DeviceSitePlacement_FieldPathSelectorZone     DeviceSitePlacement_FieldPathSelector = 4
)

func (s DeviceSitePlacement_FieldPathSelector) String() string {
	switch s {
	case DeviceSitePlacement_FieldPathSelectorSite:
		return "site"
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		return "building"
	case DeviceSitePlacement_FieldPathSelectorFloor:
		return "floor"
	case DeviceSitePlacement_FieldPathSelectorArea:
		return "area"
	case DeviceSitePlacement_FieldPathSelectorZone:
		return "zone"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", s))
	}
}

func BuildDeviceSitePlacement_FieldPath(fp gotenobject.RawFieldPath) (DeviceSitePlacement_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_SitePlacement")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "site":
			return &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorSite}, nil
		case "building":
			return &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorBuilding}, nil
		case "floor":
			return &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorFloor}, nil
		case "area":
			return &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorArea}, nil
		case "zone":
			return &DeviceSitePlacement_FieldTerminalPath{selector: DeviceSitePlacement_FieldPathSelectorZone}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_SitePlacement", fp)
}

func ParseDeviceSitePlacement_FieldPath(rawField string) (DeviceSitePlacement_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSitePlacement_FieldPath(fp)
}

func MustParseDeviceSitePlacement_FieldPath(rawField string) DeviceSitePlacement_FieldPath {
	fp, err := ParseDeviceSitePlacement_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSitePlacement_FieldTerminalPath struct {
	selector DeviceSitePlacement_FieldPathSelector
}

var _ DeviceSitePlacement_FieldPath = (*DeviceSitePlacement_FieldTerminalPath)(nil)

func (fp *DeviceSitePlacement_FieldTerminalPath) Selector() DeviceSitePlacement_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSitePlacement_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSitePlacement_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_SitePlacement
func (fp *DeviceSitePlacement_FieldTerminalPath) Get(source *Device_SitePlacement) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSitePlacement_FieldPathSelectorSite:
			if source.Site != nil {
				values = append(values, source.Site)
			}
		case DeviceSitePlacement_FieldPathSelectorBuilding:
			if source.Building != nil {
				values = append(values, source.Building)
			}
		case DeviceSitePlacement_FieldPathSelectorFloor:
			if source.Floor != nil {
				values = append(values, source.Floor)
			}
		case DeviceSitePlacement_FieldPathSelectorArea:
			if source.Area != nil {
				values = append(values, source.Area)
			}
		case DeviceSitePlacement_FieldPathSelectorZone:
			if source.Zone != nil {
				values = append(values, source.Zone)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSitePlacement_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_SitePlacement))
}

// GetSingle returns value pointed by specific field of from source Device_SitePlacement
func (fp *DeviceSitePlacement_FieldTerminalPath) GetSingle(source *Device_SitePlacement) (interface{}, bool) {
	switch fp.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		res := source.GetSite()
		return res, res != nil
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		res := source.GetBuilding()
		return res, res != nil
	case DeviceSitePlacement_FieldPathSelectorFloor:
		res := source.GetFloor()
		return res, res != nil
	case DeviceSitePlacement_FieldPathSelectorArea:
		res := source.GetArea()
		return res, res != nil
	case DeviceSitePlacement_FieldPathSelectorZone:
		res := source.GetZone()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
	}
}

func (fp *DeviceSitePlacement_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_SitePlacement))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSitePlacement_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		return (*site.Reference)(nil)
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		return (*building.Reference)(nil)
	case DeviceSitePlacement_FieldPathSelectorFloor:
		return (*floor.Reference)(nil)
	case DeviceSitePlacement_FieldPathSelectorArea:
		return (*area.Reference)(nil)
	case DeviceSitePlacement_FieldPathSelectorZone:
		return (*zone.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
	}
}

func (fp *DeviceSitePlacement_FieldTerminalPath) ClearValue(item *Device_SitePlacement) {
	if item != nil {
		switch fp.selector {
		case DeviceSitePlacement_FieldPathSelectorSite:
			item.Site = nil
		case DeviceSitePlacement_FieldPathSelectorBuilding:
			item.Building = nil
		case DeviceSitePlacement_FieldPathSelectorFloor:
			item.Floor = nil
		case DeviceSitePlacement_FieldPathSelectorArea:
			item.Area = nil
		case DeviceSitePlacement_FieldPathSelectorZone:
			item.Zone = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
		}
	}
}

func (fp *DeviceSitePlacement_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_SitePlacement))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSitePlacement_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSitePlacement_FieldPathSelectorSite ||
		fp.selector == DeviceSitePlacement_FieldPathSelectorBuilding ||
		fp.selector == DeviceSitePlacement_FieldPathSelectorFloor ||
		fp.selector == DeviceSitePlacement_FieldPathSelectorArea ||
		fp.selector == DeviceSitePlacement_FieldPathSelectorZone
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithIValue(value interface{}) DeviceSitePlacement_FieldPathValue {
	switch fp.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		return &DeviceSitePlacement_FieldTerminalPathValue{DeviceSitePlacement_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		return &DeviceSitePlacement_FieldTerminalPathValue{DeviceSitePlacement_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	case DeviceSitePlacement_FieldPathSelectorFloor:
		return &DeviceSitePlacement_FieldTerminalPathValue{DeviceSitePlacement_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	case DeviceSitePlacement_FieldPathSelectorArea:
		return &DeviceSitePlacement_FieldTerminalPathValue{DeviceSitePlacement_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	case DeviceSitePlacement_FieldPathSelectorZone:
		return &DeviceSitePlacement_FieldTerminalPathValue{DeviceSitePlacement_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
	}
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSitePlacement_FieldPathArrayOfValues {
	fpaov := &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		return &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp, values: values.([]*site.Reference)}
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		return &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	case DeviceSitePlacement_FieldPathSelectorFloor:
		return &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp, values: values.([]*floor.Reference)}
	case DeviceSitePlacement_FieldPathSelectorArea:
		return &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	case DeviceSitePlacement_FieldPathSelectorZone:
		return &DeviceSitePlacement_FieldTerminalPathArrayOfValues{DeviceSitePlacement_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSitePlacement_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fp.selector))
	}
}

func (fp *DeviceSitePlacement_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSitePlacement_FieldPathValue allows storing values for SitePlacement fields according to their type
type DeviceSitePlacement_FieldPathValue interface {
	DeviceSitePlacement_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_SitePlacement)
	CompareWith(*Device_SitePlacement) (cmp int, comparable bool)
}

func ParseDeviceSitePlacement_FieldPathValue(pathStr, valueStr string) (DeviceSitePlacement_FieldPathValue, error) {
	fp, err := ParseDeviceSitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSitePlacement_FieldPathValue), nil
}

func MustParseDeviceSitePlacement_FieldPathValue(pathStr, valueStr string) DeviceSitePlacement_FieldPathValue {
	fpv, err := ParseDeviceSitePlacement_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSitePlacement_FieldTerminalPathValue struct {
	DeviceSitePlacement_FieldTerminalPath
	value interface{}
}

var _ DeviceSitePlacement_FieldPathValue = (*DeviceSitePlacement_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SitePlacement' as interface{}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) AsSiteValue() (*site.Reference, bool) {
	res, ok := fpv.value.(*site.Reference)
	return res, ok
}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) AsBuildingValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) AsFloorValue() (*floor.Reference, bool) {
	res, ok := fpv.value.(*floor.Reference)
	return res, ok
}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) AsAreaValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) AsZoneValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}

// SetTo stores value for selected field for object SitePlacement
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) SetTo(target **Device_SitePlacement) {
	if *target == nil {
		*target = new(Device_SitePlacement)
	}
	switch fpv.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		(*target).Site = fpv.value.(*site.Reference)
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		(*target).Building = fpv.value.(*building.Reference)
	case DeviceSitePlacement_FieldPathSelectorFloor:
		(*target).Floor = fpv.value.(*floor.Reference)
	case DeviceSitePlacement_FieldPathSelectorArea:
		(*target).Area = fpv.value.(*area.Reference)
	case DeviceSitePlacement_FieldPathSelectorZone:
		(*target).Zone = fpv.value.(*zone.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fpv.selector))
	}
}

func (fpv *DeviceSitePlacement_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_SitePlacement)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSitePlacement_FieldTerminalPathValue' with the value under path in 'Device_SitePlacement'.
func (fpv *DeviceSitePlacement_FieldTerminalPathValue) CompareWith(source *Device_SitePlacement) (int, bool) {
	switch fpv.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		leftValue := fpv.value.(*site.Reference)
		rightValue := source.GetSite()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetBuilding()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSitePlacement_FieldPathSelectorFloor:
		leftValue := fpv.value.(*floor.Reference)
		rightValue := source.GetFloor()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSitePlacement_FieldPathSelectorArea:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetArea()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSitePlacement_FieldPathSelectorZone:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetZone()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_SitePlacement: %d", fpv.selector))
	}
}

func (fpv *DeviceSitePlacement_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_SitePlacement))
}

// DeviceSitePlacement_FieldPathArrayItemValue allows storing single item in Path-specific values for SitePlacement according to their type
// Present only for array (repeated) types.
type DeviceSitePlacement_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSitePlacement_FieldPath
	ContainsValue(*Device_SitePlacement) bool
}

// ParseDeviceSitePlacement_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSitePlacement_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSitePlacement_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSitePlacement_FieldPathArrayItemValue), nil
}

func MustParseDeviceSitePlacement_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSitePlacement_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSitePlacement_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSitePlacement_FieldTerminalPathArrayItemValue struct {
	DeviceSitePlacement_FieldTerminalPath
	value interface{}
}

var _ DeviceSitePlacement_FieldPathArrayItemValue = (*DeviceSitePlacement_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_SitePlacement as interface{}
func (fpaiv *DeviceSitePlacement_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSitePlacement_FieldTerminalPathArrayItemValue) GetSingle(source *Device_SitePlacement) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSitePlacement_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_SitePlacement))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SitePlacement'
func (fpaiv *DeviceSitePlacement_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_SitePlacement) bool {
	slice := fpaiv.DeviceSitePlacement_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSitePlacement_FieldPathArrayOfValues allows storing slice of values for SitePlacement fields according to their type
type DeviceSitePlacement_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSitePlacement_FieldPath
}

func ParseDeviceSitePlacement_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSitePlacement_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSitePlacement_FieldPathArrayOfValues), nil
}

func MustParseDeviceSitePlacement_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSitePlacement_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSitePlacement_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSitePlacement_FieldTerminalPathArrayOfValues struct {
	DeviceSitePlacement_FieldTerminalPath
	values interface{}
}

var _ DeviceSitePlacement_FieldPathArrayOfValues = (*DeviceSitePlacement_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSitePlacement_FieldPathSelectorSite:
		for _, v := range fpaov.values.([]*site.Reference) {
			values = append(values, v)
		}
	case DeviceSitePlacement_FieldPathSelectorBuilding:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	case DeviceSitePlacement_FieldPathSelectorFloor:
		for _, v := range fpaov.values.([]*floor.Reference) {
			values = append(values, v)
		}
	case DeviceSitePlacement_FieldPathSelectorArea:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	case DeviceSitePlacement_FieldPathSelectorZone:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) AsSiteArrayOfValues() ([]*site.Reference, bool) {
	res, ok := fpaov.values.([]*site.Reference)
	return res, ok
}
func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) AsBuildingArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) AsFloorArrayOfValues() ([]*floor.Reference, bool) {
	res, ok := fpaov.values.([]*floor.Reference)
	return res, ok
}
func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) AsAreaArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
func (fpaov *DeviceSitePlacement_FieldTerminalPathArrayOfValues) AsZoneArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceVendorInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceVendorInfo_FieldPathSelector
	Get(source *Device_VendorInfo) []interface{}
	GetSingle(source *Device_VendorInfo) (interface{}, bool)
	ClearValue(item *Device_VendorInfo)

	// Those methods build corresponding DeviceVendorInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceVendorInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceVendorInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceVendorInfo_FieldPathArrayItemValue
}

type DeviceVendorInfo_FieldPathSelector int32

const (
	DeviceVendorInfo_FieldPathSelectorVendor    DeviceVendorInfo_FieldPathSelector = 0
	DeviceVendorInfo_FieldPathSelectorBacnet    DeviceVendorInfo_FieldPathSelector = 1
	DeviceVendorInfo_FieldPathSelectorPointGrab DeviceVendorInfo_FieldPathSelector = 2
)

func (s DeviceVendorInfo_FieldPathSelector) String() string {
	switch s {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		return "vendor"
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return "bacnet"
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", s))
	}
}

func BuildDeviceVendorInfo_FieldPath(fp gotenobject.RawFieldPath) (DeviceVendorInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_VendorInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor":
			return &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorVendor}, nil
		case "bacnet":
			return &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorBacnet}, nil
		case "point_grab", "pointGrab", "point-grab":
			return &DeviceVendorInfo_FieldTerminalPath{selector: DeviceVendorInfo_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "bacnet":
			if subpath, err := workplace_common.BuildBACNetEntity_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceVendorInfo_FieldSubPath{selector: DeviceVendorInfo_FieldPathSelectorBacnet, subPath: subpath}, nil
			}
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildDeviceVendorInfoPointGrabInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceVendorInfo_FieldSubPath{selector: DeviceVendorInfo_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_VendorInfo", fp)
}

func ParseDeviceVendorInfo_FieldPath(rawField string) (DeviceVendorInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceVendorInfo_FieldPath(fp)
}

func MustParseDeviceVendorInfo_FieldPath(rawField string) DeviceVendorInfo_FieldPath {
	fp, err := ParseDeviceVendorInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceVendorInfo_FieldTerminalPath struct {
	selector DeviceVendorInfo_FieldPathSelector
}

var _ DeviceVendorInfo_FieldPath = (*DeviceVendorInfo_FieldTerminalPath)(nil)

func (fp *DeviceVendorInfo_FieldTerminalPath) Selector() DeviceVendorInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceVendorInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceVendorInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_VendorInfo
func (fp *DeviceVendorInfo_FieldTerminalPath) Get(source *Device_VendorInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceVendorInfo_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceVendorInfo_FieldPathSelectorBacnet:
			if source.Bacnet != nil {
				values = append(values, source.Bacnet)
			}
		case DeviceVendorInfo_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceVendorInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_VendorInfo))
}

// GetSingle returns value pointed by specific field of from source Device_VendorInfo
func (fp *DeviceVendorInfo_FieldTerminalPath) GetSingle(source *Device_VendorInfo) (interface{}, bool) {
	switch fp.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		res := source.GetBacnet()
		return res, res != nil
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_VendorInfo))
}

// GetDefault returns a default value of the field type
func (fp *DeviceVendorInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		return workplace_common.Vendor_VENDOR_UNSPECIFIED
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return (*workplace_common.BACNetEntity)(nil)
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return (*Device_VendorInfo_PointGrabInfo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfo_FieldTerminalPath) ClearValue(item *Device_VendorInfo) {
	if item != nil {
		switch fp.selector {
		case DeviceVendorInfo_FieldPathSelectorVendor:
			item.Vendor = workplace_common.Vendor_VENDOR_UNSPECIFIED
		case DeviceVendorInfo_FieldPathSelectorBacnet:
			item.Bacnet = nil
		case DeviceVendorInfo_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
		}
	}
}

func (fp *DeviceVendorInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_VendorInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceVendorInfo_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceVendorInfo_FieldPathSelectorVendor
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithIValue(value interface{}) DeviceVendorInfo_FieldPathValue {
	switch fp.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		return &DeviceVendorInfo_FieldTerminalPathValue{DeviceVendorInfo_FieldTerminalPath: *fp, value: value.(workplace_common.Vendor)}
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return &DeviceVendorInfo_FieldTerminalPathValue{DeviceVendorInfo_FieldTerminalPath: *fp, value: value.(*workplace_common.BACNetEntity)}
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return &DeviceVendorInfo_FieldTerminalPathValue{DeviceVendorInfo_FieldTerminalPath: *fp, value: value.(*Device_VendorInfo_PointGrabInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceVendorInfo_FieldPathArrayOfValues {
	fpaov := &DeviceVendorInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		return &DeviceVendorInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfo_FieldTerminalPath: *fp, values: values.([]workplace_common.Vendor)}
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return &DeviceVendorInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfo_FieldTerminalPath: *fp, values: values.([]*workplace_common.BACNetEntity)}
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return &DeviceVendorInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfo_FieldTerminalPath: *fp, values: values.([]*Device_VendorInfo_PointGrabInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceVendorInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceVendorInfo_FieldSubPath struct {
	selector DeviceVendorInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceVendorInfo_FieldPath = (*DeviceVendorInfo_FieldSubPath)(nil)

func (fps *DeviceVendorInfo_FieldSubPath) Selector() DeviceVendorInfo_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceVendorInfo_FieldSubPath) AsBacnetSubPath() (workplace_common.BACNetEntity_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.BACNetEntity_FieldPath)
	return res, ok
}
func (fps *DeviceVendorInfo_FieldSubPath) AsPointGrabSubPath() (DeviceVendorInfoPointGrabInfo_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceVendorInfoPointGrabInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceVendorInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceVendorInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_VendorInfo
func (fps *DeviceVendorInfo_FieldSubPath) Get(source *Device_VendorInfo) (values []interface{}) {
	if asBACNetEntityFieldPath, ok := fps.AsBacnetSubPath(); ok {
		values = append(values, asBACNetEntityFieldPath.Get(source.GetBacnet())...)
	} else if asPointGrabInfoFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabInfoFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fps.selector))
	}
	return
}

func (fps *DeviceVendorInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_VendorInfo))
}

// GetSingle returns value of selected field from source Device_VendorInfo
func (fps *DeviceVendorInfo_FieldSubPath) GetSingle(source *Device_VendorInfo) (interface{}, bool) {
	switch fps.selector {
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		if source.GetBacnet() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBacnet())
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fps.selector))
	}
}

func (fps *DeviceVendorInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_VendorInfo))
}

// GetDefault returns a default value of the field type
func (fps *DeviceVendorInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceVendorInfo_FieldSubPath) ClearValue(item *Device_VendorInfo) {
	if item != nil {
		switch fps.selector {
		case DeviceVendorInfo_FieldPathSelectorBacnet:
			fps.subPath.ClearValueRaw(item.Bacnet)
		case DeviceVendorInfo_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fps.selector))
		}
	}
}

func (fps *DeviceVendorInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_VendorInfo))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceVendorInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceVendorInfo_FieldSubPath) WithIValue(value interface{}) DeviceVendorInfo_FieldPathValue {
	return &DeviceVendorInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceVendorInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceVendorInfo_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceVendorInfo_FieldPathArrayOfValues {
	return &DeviceVendorInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceVendorInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceVendorInfo_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceVendorInfo_FieldPathArrayItemValue {
	return &DeviceVendorInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceVendorInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceVendorInfo_FieldPathValue allows storing values for VendorInfo fields according to their type
type DeviceVendorInfo_FieldPathValue interface {
	DeviceVendorInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_VendorInfo)
	CompareWith(*Device_VendorInfo) (cmp int, comparable bool)
}

func ParseDeviceVendorInfo_FieldPathValue(pathStr, valueStr string) (DeviceVendorInfo_FieldPathValue, error) {
	fp, err := ParseDeviceVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceVendorInfo_FieldPathValue), nil
}

func MustParseDeviceVendorInfo_FieldPathValue(pathStr, valueStr string) DeviceVendorInfo_FieldPathValue {
	fpv, err := ParseDeviceVendorInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceVendorInfo_FieldTerminalPathValue struct {
	DeviceVendorInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceVendorInfo_FieldPathValue = (*DeviceVendorInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorInfo' as interface{}
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) AsVendorValue() (workplace_common.Vendor, bool) {
	res, ok := fpv.value.(workplace_common.Vendor)
	return res, ok
}
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) AsBacnetValue() (*workplace_common.BACNetEntity, bool) {
	res, ok := fpv.value.(*workplace_common.BACNetEntity)
	return res, ok
}
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) AsPointGrabValue() (*Device_VendorInfo_PointGrabInfo, bool) {
	res, ok := fpv.value.(*Device_VendorInfo_PointGrabInfo)
	return res, ok
}

// SetTo stores value for selected field for object VendorInfo
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) SetTo(target **Device_VendorInfo) {
	if *target == nil {
		*target = new(Device_VendorInfo)
	}
	switch fpv.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(workplace_common.Vendor)
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		(*target).Bacnet = fpv.value.(*workplace_common.BACNetEntity)
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Device_VendorInfo_PointGrabInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceVendorInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_VendorInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceVendorInfo_FieldTerminalPathValue' with the value under path in 'Device_VendorInfo'.
func (fpv *DeviceVendorInfo_FieldTerminalPathValue) CompareWith(source *Device_VendorInfo) (int, bool) {
	switch fpv.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		leftValue := fpv.value.(workplace_common.Vendor)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return 0, false
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceVendorInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_VendorInfo))
}

type DeviceVendorInfo_FieldSubPathValue struct {
	DeviceVendorInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceVendorInfo_FieldPathValue = (*DeviceVendorInfo_FieldSubPathValue)(nil)

func (fpvs *DeviceVendorInfo_FieldSubPathValue) AsBacnetPathValue() (workplace_common.BACNetEntity_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceVendorInfo_FieldSubPathValue) AsPointGrabPathValue() (DeviceVendorInfoPointGrabInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceVendorInfoPointGrabInfo_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceVendorInfo_FieldSubPathValue) SetTo(target **Device_VendorInfo) {
	if *target == nil {
		*target = new(Device_VendorInfo)
	}
	switch fpvs.Selector() {
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue).SetTo(&(*target).Bacnet)
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(DeviceVendorInfoPointGrabInfo_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceVendorInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_VendorInfo)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceVendorInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceVendorInfo_FieldSubPathValue) CompareWith(source *Device_VendorInfo) (int, bool) {
	switch fpvs.Selector() {
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue).CompareWith(source.GetBacnet())
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(DeviceVendorInfoPointGrabInfo_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceVendorInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_VendorInfo))
}

// DeviceVendorInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorInfo according to their type
// Present only for array (repeated) types.
type DeviceVendorInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceVendorInfo_FieldPath
	ContainsValue(*Device_VendorInfo) bool
}

// ParseDeviceVendorInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceVendorInfo_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceVendorInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceVendorInfo_FieldPathArrayItemValue), nil
}

func MustParseDeviceVendorInfo_FieldPathArrayItemValue(pathStr, valueStr string) DeviceVendorInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceVendorInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceVendorInfo_FieldTerminalPathArrayItemValue struct {
	DeviceVendorInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceVendorInfo_FieldPathArrayItemValue = (*DeviceVendorInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_VendorInfo as interface{}
func (fpaiv *DeviceVendorInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceVendorInfo_FieldTerminalPathArrayItemValue) GetSingle(source *Device_VendorInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceVendorInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_VendorInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorInfo'
func (fpaiv *DeviceVendorInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_VendorInfo) bool {
	slice := fpaiv.DeviceVendorInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceVendorInfo_FieldSubPathArrayItemValue struct {
	DeviceVendorInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceVendorInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceVendorInfo_FieldSubPathArrayItemValue) AsBacnetPathItemValue() (workplace_common.BACNetEntity_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.BACNetEntity_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceVendorInfo_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorInfo'
func (fpaivs *DeviceVendorInfo_FieldSubPathArrayItemValue) ContainsValue(source *Device_VendorInfo) bool {
	switch fpaivs.Selector() {
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		return fpaivs.subPathItemValue.(workplace_common.BACNetEntity_FieldPathArrayItemValue).ContainsValue(source.GetBacnet())
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo: %d", fpaivs.Selector()))
	}
}

// DeviceVendorInfo_FieldPathArrayOfValues allows storing slice of values for VendorInfo fields according to their type
type DeviceVendorInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceVendorInfo_FieldPath
}

func ParseDeviceVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceVendorInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceVendorInfo_FieldPathArrayOfValues), nil
}

func MustParseDeviceVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceVendorInfo_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceVendorInfo_FieldTerminalPathArrayOfValues struct {
	DeviceVendorInfo_FieldTerminalPath
	values interface{}
}

var _ DeviceVendorInfo_FieldPathArrayOfValues = (*DeviceVendorInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceVendorInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceVendorInfo_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]workplace_common.Vendor) {
			values = append(values, v)
		}
	case DeviceVendorInfo_FieldPathSelectorBacnet:
		for _, v := range fpaov.values.([]*workplace_common.BACNetEntity) {
			values = append(values, v)
		}
	case DeviceVendorInfo_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Device_VendorInfo_PointGrabInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceVendorInfo_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]workplace_common.Vendor, bool) {
	res, ok := fpaov.values.([]workplace_common.Vendor)
	return res, ok
}
func (fpaov *DeviceVendorInfo_FieldTerminalPathArrayOfValues) AsBacnetArrayOfValues() ([]*workplace_common.BACNetEntity, bool) {
	res, ok := fpaov.values.([]*workplace_common.BACNetEntity)
	return res, ok
}
func (fpaov *DeviceVendorInfo_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Device_VendorInfo_PointGrabInfo, bool) {
	res, ok := fpaov.values.([]*Device_VendorInfo_PointGrabInfo)
	return res, ok
}

type DeviceVendorInfo_FieldSubPathArrayOfValues struct {
	DeviceVendorInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceVendorInfo_FieldPathArrayOfValues = (*DeviceVendorInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceVendorInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceVendorInfo_FieldSubPathArrayOfValues) AsBacnetPathArrayOfValues() (workplace_common.BACNetEntity_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.BACNetEntity_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceVendorInfo_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceState_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceState_FieldPathSelector
	Get(source *Device_State) []interface{}
	GetSingle(source *Device_State) (interface{}, bool)
	ClearValue(item *Device_State)

	// Those methods build corresponding DeviceState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceState_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceState_FieldPathArrayItemValue
}

type DeviceState_FieldPathSelector int32

const (
	DeviceState_FieldPathSelectorConnection DeviceState_FieldPathSelector = 0
)

func (s DeviceState_FieldPathSelector) String() string {
	switch s {
	case DeviceState_FieldPathSelectorConnection:
		return "connection"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", s))
	}
}

func BuildDeviceState_FieldPath(fp gotenobject.RawFieldPath) (DeviceState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "connection":
			return &DeviceState_FieldTerminalPath{selector: DeviceState_FieldPathSelectorConnection}, nil
		}
	} else {
		switch fp[0] {
		case "connection":
			if subpath, err := BuildDeviceStateConnection_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceState_FieldSubPath{selector: DeviceState_FieldPathSelectorConnection, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_State", fp)
}

func ParseDeviceState_FieldPath(rawField string) (DeviceState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceState_FieldPath(fp)
}

func MustParseDeviceState_FieldPath(rawField string) DeviceState_FieldPath {
	fp, err := ParseDeviceState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceState_FieldTerminalPath struct {
	selector DeviceState_FieldPathSelector
}

var _ DeviceState_FieldPath = (*DeviceState_FieldTerminalPath)(nil)

func (fp *DeviceState_FieldTerminalPath) Selector() DeviceState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_State
func (fp *DeviceState_FieldTerminalPath) Get(source *Device_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceState_FieldPathSelectorConnection:
			if source.Connection != nil {
				values = append(values, source.Connection)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_State))
}

// GetSingle returns value pointed by specific field of from source Device_State
func (fp *DeviceState_FieldTerminalPath) GetSingle(source *Device_State) (interface{}, bool) {
	switch fp.selector {
	case DeviceState_FieldPathSelectorConnection:
		res := source.GetConnection()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
	}
}

func (fp *DeviceState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_State))
}

// GetDefault returns a default value of the field type
func (fp *DeviceState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceState_FieldPathSelectorConnection:
		return (*Device_State_Connection)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
	}
}

func (fp *DeviceState_FieldTerminalPath) ClearValue(item *Device_State) {
	if item != nil {
		switch fp.selector {
		case DeviceState_FieldPathSelectorConnection:
			item.Connection = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
		}
	}
}

func (fp *DeviceState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceState_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceState_FieldTerminalPath) WithIValue(value interface{}) DeviceState_FieldPathValue {
	switch fp.selector {
	case DeviceState_FieldPathSelectorConnection:
		return &DeviceState_FieldTerminalPathValue{DeviceState_FieldTerminalPath: *fp, value: value.(*Device_State_Connection)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
	}
}

func (fp *DeviceState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceState_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceState_FieldPathArrayOfValues {
	fpaov := &DeviceState_FieldTerminalPathArrayOfValues{DeviceState_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceState_FieldPathSelectorConnection:
		return &DeviceState_FieldTerminalPathArrayOfValues{DeviceState_FieldTerminalPath: *fp, values: values.([]*Device_State_Connection)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceState_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fp.selector))
	}
}

func (fp *DeviceState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceState_FieldSubPath struct {
	selector DeviceState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceState_FieldPath = (*DeviceState_FieldSubPath)(nil)

func (fps *DeviceState_FieldSubPath) Selector() DeviceState_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceState_FieldSubPath) AsConnectionSubPath() (DeviceStateConnection_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStateConnection_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_State
func (fps *DeviceState_FieldSubPath) Get(source *Device_State) (values []interface{}) {
	if asConnectionFieldPath, ok := fps.AsConnectionSubPath(); ok {
		values = append(values, asConnectionFieldPath.Get(source.GetConnection())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fps.selector))
	}
	return
}

func (fps *DeviceState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_State))
}

// GetSingle returns value of selected field from source Device_State
func (fps *DeviceState_FieldSubPath) GetSingle(source *Device_State) (interface{}, bool) {
	switch fps.selector {
	case DeviceState_FieldPathSelectorConnection:
		if source.GetConnection() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fps.selector))
	}
}

func (fps *DeviceState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_State))
}

// GetDefault returns a default value of the field type
func (fps *DeviceState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceState_FieldSubPath) ClearValue(item *Device_State) {
	if item != nil {
		switch fps.selector {
		case DeviceState_FieldPathSelectorConnection:
			fps.subPath.ClearValueRaw(item.Connection)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_State: %d", fps.selector))
		}
	}
}

func (fps *DeviceState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_State))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceState_FieldSubPath) WithIValue(value interface{}) DeviceState_FieldPathValue {
	return &DeviceState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceState_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceState_FieldPathArrayOfValues {
	return &DeviceState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceState_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceState_FieldPathArrayItemValue {
	return &DeviceState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceState_FieldPathValue allows storing values for State fields according to their type
type DeviceState_FieldPathValue interface {
	DeviceState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_State)
	CompareWith(*Device_State) (cmp int, comparable bool)
}

func ParseDeviceState_FieldPathValue(pathStr, valueStr string) (DeviceState_FieldPathValue, error) {
	fp, err := ParseDeviceState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceState_FieldPathValue), nil
}

func MustParseDeviceState_FieldPathValue(pathStr, valueStr string) DeviceState_FieldPathValue {
	fpv, err := ParseDeviceState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceState_FieldTerminalPathValue struct {
	DeviceState_FieldTerminalPath
	value interface{}
}

var _ DeviceState_FieldPathValue = (*DeviceState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *DeviceState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceState_FieldTerminalPathValue) AsConnectionValue() (*Device_State_Connection, bool) {
	res, ok := fpv.value.(*Device_State_Connection)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *DeviceState_FieldTerminalPathValue) SetTo(target **Device_State) {
	if *target == nil {
		*target = new(Device_State)
	}
	switch fpv.selector {
	case DeviceState_FieldPathSelectorConnection:
		(*target).Connection = fpv.value.(*Device_State_Connection)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fpv.selector))
	}
}

func (fpv *DeviceState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceState_FieldTerminalPathValue' with the value under path in 'Device_State'.
func (fpv *DeviceState_FieldTerminalPathValue) CompareWith(source *Device_State) (int, bool) {
	switch fpv.selector {
	case DeviceState_FieldPathSelectorConnection:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fpv.selector))
	}
}

func (fpv *DeviceState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_State))
}

type DeviceState_FieldSubPathValue struct {
	DeviceState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceState_FieldPathValue = (*DeviceState_FieldSubPathValue)(nil)

func (fpvs *DeviceState_FieldSubPathValue) AsConnectionPathValue() (DeviceStateConnection_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStateConnection_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceState_FieldSubPathValue) SetTo(target **Device_State) {
	if *target == nil {
		*target = new(Device_State)
	}
	switch fpvs.Selector() {
	case DeviceState_FieldPathSelectorConnection:
		fpvs.subPathValue.(DeviceStateConnection_FieldPathValue).SetTo(&(*target).Connection)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_State)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceState_FieldSubPathValue) CompareWith(source *Device_State) (int, bool) {
	switch fpvs.Selector() {
	case DeviceState_FieldPathSelectorConnection:
		return fpvs.subPathValue.(DeviceStateConnection_FieldPathValue).CompareWith(source.GetConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_State))
}

// DeviceState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type DeviceState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceState_FieldPath
	ContainsValue(*Device_State) bool
}

// ParseDeviceState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceState_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceState_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceState_FieldPathArrayItemValue), nil
}

func MustParseDeviceState_FieldPathArrayItemValue(pathStr, valueStr string) DeviceState_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceState_FieldTerminalPathArrayItemValue struct {
	DeviceState_FieldTerminalPath
	value interface{}
}

var _ DeviceState_FieldPathArrayItemValue = (*DeviceState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_State as interface{}
func (fpaiv *DeviceState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceState_FieldTerminalPathArrayItemValue) GetSingle(source *Device_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *DeviceState_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_State) bool {
	slice := fpaiv.DeviceState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceState_FieldSubPathArrayItemValue struct {
	DeviceState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceState_FieldSubPathArrayItemValue) AsConnectionPathItemValue() (DeviceStateConnection_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStateConnection_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaivs *DeviceState_FieldSubPathArrayItemValue) ContainsValue(source *Device_State) bool {
	switch fpaivs.Selector() {
	case DeviceState_FieldPathSelectorConnection:
		return fpaivs.subPathItemValue.(DeviceStateConnection_FieldPathArrayItemValue).ContainsValue(source.GetConnection())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State: %d", fpaivs.Selector()))
	}
}

// DeviceState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type DeviceState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceState_FieldPath
}

func ParseDeviceState_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceState_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceState_FieldPathArrayOfValues), nil
}

func MustParseDeviceState_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceState_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceState_FieldTerminalPathArrayOfValues struct {
	DeviceState_FieldTerminalPath
	values interface{}
}

var _ DeviceState_FieldPathArrayOfValues = (*DeviceState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceState_FieldPathSelectorConnection:
		for _, v := range fpaov.values.([]*Device_State_Connection) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceState_FieldTerminalPathArrayOfValues) AsConnectionArrayOfValues() ([]*Device_State_Connection, bool) {
	res, ok := fpaov.values.([]*Device_State_Connection)
	return res, ok
}

type DeviceState_FieldSubPathArrayOfValues struct {
	DeviceState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceState_FieldPathArrayOfValues = (*DeviceState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceState_FieldSubPathArrayOfValues) AsConnectionPathArrayOfValues() (DeviceStateConnection_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStateConnection_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceVendorInfoPointGrabInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceVendorInfoPointGrabInfo_FieldPathSelector
	Get(source *Device_VendorInfo_PointGrabInfo) []interface{}
	GetSingle(source *Device_VendorInfo_PointGrabInfo) (interface{}, bool)
	ClearValue(item *Device_VendorInfo_PointGrabInfo)

	// Those methods build corresponding DeviceVendorInfoPointGrabInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceVendorInfoPointGrabInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue
}

type DeviceVendorInfoPointGrabInfo_FieldPathSelector int32

const (
	DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId DeviceVendorInfoPointGrabInfo_FieldPathSelector = 0
	DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation DeviceVendorInfoPointGrabInfo_FieldPathSelector = 1
)

func (s DeviceVendorInfoPointGrabInfo_FieldPathSelector) String() string {
	switch s {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		return "device_id"
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		return "rotation"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", s))
	}
}

func BuildDeviceVendorInfoPointGrabInfo_FieldPath(fp gotenobject.RawFieldPath) (DeviceVendorInfoPointGrabInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_VendorInfo_PointGrabInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_id", "deviceId", "device-id":
			return &DeviceVendorInfoPointGrabInfo_FieldTerminalPath{selector: DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId}, nil
		case "rotation":
			return &DeviceVendorInfoPointGrabInfo_FieldTerminalPath{selector: DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_VendorInfo_PointGrabInfo", fp)
}

func ParseDeviceVendorInfoPointGrabInfo_FieldPath(rawField string) (DeviceVendorInfoPointGrabInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceVendorInfoPointGrabInfo_FieldPath(fp)
}

func MustParseDeviceVendorInfoPointGrabInfo_FieldPath(rawField string) DeviceVendorInfoPointGrabInfo_FieldPath {
	fp, err := ParseDeviceVendorInfoPointGrabInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceVendorInfoPointGrabInfo_FieldTerminalPath struct {
	selector DeviceVendorInfoPointGrabInfo_FieldPathSelector
}

var _ DeviceVendorInfoPointGrabInfo_FieldPath = (*DeviceVendorInfoPointGrabInfo_FieldTerminalPath)(nil)

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) Selector() DeviceVendorInfoPointGrabInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_VendorInfo_PointGrabInfo
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) Get(source *Device_VendorInfo_PointGrabInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
			values = append(values, source.DeviceId)
		case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
			values = append(values, source.Rotation)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_VendorInfo_PointGrabInfo))
}

// GetSingle returns value pointed by specific field of from source Device_VendorInfo_PointGrabInfo
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) GetSingle(source *Device_VendorInfo_PointGrabInfo) (interface{}, bool) {
	switch fp.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		return source.GetDeviceId(), source != nil
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		return source.GetRotation(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_VendorInfo_PointGrabInfo))
}

// GetDefault returns a default value of the field type
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		return ""
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) ClearValue(item *Device_VendorInfo_PointGrabInfo) {
	if item != nil {
		switch fp.selector {
		case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
			item.DeviceId = ""
		case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
			item.Rotation = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
		}
	}
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_VendorInfo_PointGrabInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId ||
		fp.selector == DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithIValue(value interface{}) DeviceVendorInfoPointGrabInfo_FieldPathValue {
	switch fp.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		return &DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue{DeviceVendorInfoPointGrabInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		return &DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue{DeviceVendorInfoPointGrabInfo_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues {
	fpaov := &DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfoPointGrabInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		return &DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfoPointGrabInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		return &DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues{DeviceVendorInfoPointGrabInfo_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *DeviceVendorInfoPointGrabInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceVendorInfoPointGrabInfo_FieldPathValue allows storing values for PointGrabInfo fields according to their type
type DeviceVendorInfoPointGrabInfo_FieldPathValue interface {
	DeviceVendorInfoPointGrabInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_VendorInfo_PointGrabInfo)
	CompareWith(*Device_VendorInfo_PointGrabInfo) (cmp int, comparable bool)
}

func ParseDeviceVendorInfoPointGrabInfo_FieldPathValue(pathStr, valueStr string) (DeviceVendorInfoPointGrabInfo_FieldPathValue, error) {
	fp, err := ParseDeviceVendorInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceVendorInfoPointGrabInfo_FieldPathValue), nil
}

func MustParseDeviceVendorInfoPointGrabInfo_FieldPathValue(pathStr, valueStr string) DeviceVendorInfoPointGrabInfo_FieldPathValue {
	fpv, err := ParseDeviceVendorInfoPointGrabInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue struct {
	DeviceVendorInfoPointGrabInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceVendorInfoPointGrabInfo_FieldPathValue = (*DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrabInfo' as interface{}
func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) AsDeviceIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) AsRotationValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object PointGrabInfo
func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) SetTo(target **Device_VendorInfo_PointGrabInfo) {
	if *target == nil {
		*target = new(Device_VendorInfo_PointGrabInfo)
	}
	switch fpv.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		(*target).DeviceId = fpv.value.(string)
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		(*target).Rotation = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_VendorInfo_PointGrabInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue' with the value under path in 'Device_VendorInfo_PointGrabInfo'.
func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) CompareWith(source *Device_VendorInfo_PointGrabInfo) (int, bool) {
	switch fpv.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		leftValue := fpv.value.(string)
		rightValue := source.GetDeviceId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		leftValue := fpv.value.(float64)
		rightValue := source.GetRotation()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_VendorInfo_PointGrabInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_VendorInfo_PointGrabInfo))
}

// DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrabInfo according to their type
// Present only for array (repeated) types.
type DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceVendorInfoPointGrabInfo_FieldPath
	ContainsValue(*Device_VendorInfo_PointGrabInfo) bool
}

// ParseDeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceVendorInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue), nil
}

func MustParseDeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr string) DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue struct {
	DeviceVendorInfoPointGrabInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceVendorInfoPointGrabInfo_FieldPathArrayItemValue = (*DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_VendorInfo_PointGrabInfo as interface{}
func (fpaiv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetSingle(source *Device_VendorInfo_PointGrabInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_VendorInfo_PointGrabInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabInfo'
func (fpaiv *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_VendorInfo_PointGrabInfo) bool {
	slice := fpaiv.DeviceVendorInfoPointGrabInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues allows storing slice of values for PointGrabInfo fields according to their type
type DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceVendorInfoPointGrabInfo_FieldPath
}

func ParseDeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceVendorInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues), nil
}

func MustParseDeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues struct {
	DeviceVendorInfoPointGrabInfo_FieldTerminalPath
	values interface{}
}

var _ DeviceVendorInfoPointGrabInfo_FieldPathArrayOfValues = (*DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorDeviceId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceVendorInfoPointGrabInfo_FieldPathSelectorRotation:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues) AsDeviceIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceVendorInfoPointGrabInfo_FieldTerminalPathArrayOfValues) AsRotationArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStateConnection_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStateConnection_FieldPathSelector
	Get(source *Device_State_Connection) []interface{}
	GetSingle(source *Device_State_Connection) (interface{}, bool)
	ClearValue(item *Device_State_Connection)

	// Those methods build corresponding DeviceStateConnection_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStateConnection_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStateConnection_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStateConnection_FieldPathArrayItemValue
}

type DeviceStateConnection_FieldPathSelector int32

const (
	DeviceStateConnection_FieldPathSelectorStatus      DeviceStateConnection_FieldPathSelector = 0
	DeviceStateConnection_FieldPathSelectorStatusSince DeviceStateConnection_FieldPathSelector = 1
)

func (s DeviceStateConnection_FieldPathSelector) String() string {
	switch s {
	case DeviceStateConnection_FieldPathSelectorStatus:
		return "status"
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		return "status_since"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", s))
	}
}

func BuildDeviceStateConnection_FieldPath(fp gotenobject.RawFieldPath) (DeviceStateConnection_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_State_Connection")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "status":
			return &DeviceStateConnection_FieldTerminalPath{selector: DeviceStateConnection_FieldPathSelectorStatus}, nil
		case "status_since", "statusSince", "status-since":
			return &DeviceStateConnection_FieldTerminalPath{selector: DeviceStateConnection_FieldPathSelectorStatusSince}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_State_Connection", fp)
}

func ParseDeviceStateConnection_FieldPath(rawField string) (DeviceStateConnection_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStateConnection_FieldPath(fp)
}

func MustParseDeviceStateConnection_FieldPath(rawField string) DeviceStateConnection_FieldPath {
	fp, err := ParseDeviceStateConnection_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStateConnection_FieldTerminalPath struct {
	selector DeviceStateConnection_FieldPathSelector
}

var _ DeviceStateConnection_FieldPath = (*DeviceStateConnection_FieldTerminalPath)(nil)

func (fp *DeviceStateConnection_FieldTerminalPath) Selector() DeviceStateConnection_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStateConnection_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStateConnection_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_State_Connection
func (fp *DeviceStateConnection_FieldTerminalPath) Get(source *Device_State_Connection) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStateConnection_FieldPathSelectorStatus:
			values = append(values, source.Status)
		case DeviceStateConnection_FieldPathSelectorStatusSince:
			if source.StatusSince != nil {
				values = append(values, source.StatusSince)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStateConnection_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_State_Connection))
}

// GetSingle returns value pointed by specific field of from source Device_State_Connection
func (fp *DeviceStateConnection_FieldTerminalPath) GetSingle(source *Device_State_Connection) (interface{}, bool) {
	switch fp.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		return source.GetStatus(), source != nil
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		res := source.GetStatusSince()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
	}
}

func (fp *DeviceStateConnection_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_State_Connection))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStateConnection_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		return Device_State_Connection_CONNECTION_STATUS_UNSPECIFIED
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
	}
}

func (fp *DeviceStateConnection_FieldTerminalPath) ClearValue(item *Device_State_Connection) {
	if item != nil {
		switch fp.selector {
		case DeviceStateConnection_FieldPathSelectorStatus:
			item.Status = Device_State_Connection_CONNECTION_STATUS_UNSPECIFIED
		case DeviceStateConnection_FieldPathSelectorStatusSince:
			item.StatusSince = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
		}
	}
}

func (fp *DeviceStateConnection_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_State_Connection))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStateConnection_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStateConnection_FieldPathSelectorStatus ||
		fp.selector == DeviceStateConnection_FieldPathSelectorStatusSince
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithIValue(value interface{}) DeviceStateConnection_FieldPathValue {
	switch fp.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		return &DeviceStateConnection_FieldTerminalPathValue{DeviceStateConnection_FieldTerminalPath: *fp, value: value.(Device_State_Connection_ConnectionStatus)}
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		return &DeviceStateConnection_FieldTerminalPathValue{DeviceStateConnection_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
	}
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStateConnection_FieldPathArrayOfValues {
	fpaov := &DeviceStateConnection_FieldTerminalPathArrayOfValues{DeviceStateConnection_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		return &DeviceStateConnection_FieldTerminalPathArrayOfValues{DeviceStateConnection_FieldTerminalPath: *fp, values: values.([]Device_State_Connection_ConnectionStatus)}
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		return &DeviceStateConnection_FieldTerminalPathArrayOfValues{DeviceStateConnection_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStateConnection_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fp.selector))
	}
}

func (fp *DeviceStateConnection_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStateConnection_FieldPathValue allows storing values for Connection fields according to their type
type DeviceStateConnection_FieldPathValue interface {
	DeviceStateConnection_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_State_Connection)
	CompareWith(*Device_State_Connection) (cmp int, comparable bool)
}

func ParseDeviceStateConnection_FieldPathValue(pathStr, valueStr string) (DeviceStateConnection_FieldPathValue, error) {
	fp, err := ParseDeviceStateConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connection field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStateConnection_FieldPathValue), nil
}

func MustParseDeviceStateConnection_FieldPathValue(pathStr, valueStr string) DeviceStateConnection_FieldPathValue {
	fpv, err := ParseDeviceStateConnection_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStateConnection_FieldTerminalPathValue struct {
	DeviceStateConnection_FieldTerminalPath
	value interface{}
}

var _ DeviceStateConnection_FieldPathValue = (*DeviceStateConnection_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Connection' as interface{}
func (fpv *DeviceStateConnection_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStateConnection_FieldTerminalPathValue) AsStatusValue() (Device_State_Connection_ConnectionStatus, bool) {
	res, ok := fpv.value.(Device_State_Connection_ConnectionStatus)
	return res, ok
}
func (fpv *DeviceStateConnection_FieldTerminalPathValue) AsStatusSinceValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Connection
func (fpv *DeviceStateConnection_FieldTerminalPathValue) SetTo(target **Device_State_Connection) {
	if *target == nil {
		*target = new(Device_State_Connection)
	}
	switch fpv.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(Device_State_Connection_ConnectionStatus)
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		(*target).StatusSince = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fpv.selector))
	}
}

func (fpv *DeviceStateConnection_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_State_Connection)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStateConnection_FieldTerminalPathValue' with the value under path in 'Device_State_Connection'.
func (fpv *DeviceStateConnection_FieldTerminalPathValue) CompareWith(source *Device_State_Connection) (int, bool) {
	switch fpv.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		leftValue := fpv.value.(Device_State_Connection_ConnectionStatus)
		rightValue := source.GetStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStatusSince()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_State_Connection: %d", fpv.selector))
	}
}

func (fpv *DeviceStateConnection_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_State_Connection))
}

// DeviceStateConnection_FieldPathArrayItemValue allows storing single item in Path-specific values for Connection according to their type
// Present only for array (repeated) types.
type DeviceStateConnection_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStateConnection_FieldPath
	ContainsValue(*Device_State_Connection) bool
}

// ParseDeviceStateConnection_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStateConnection_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStateConnection_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStateConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connection field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStateConnection_FieldPathArrayItemValue), nil
}

func MustParseDeviceStateConnection_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStateConnection_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStateConnection_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStateConnection_FieldTerminalPathArrayItemValue struct {
	DeviceStateConnection_FieldTerminalPath
	value interface{}
}

var _ DeviceStateConnection_FieldPathArrayItemValue = (*DeviceStateConnection_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_State_Connection as interface{}
func (fpaiv *DeviceStateConnection_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStateConnection_FieldTerminalPathArrayItemValue) GetSingle(source *Device_State_Connection) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStateConnection_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_State_Connection))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Connection'
func (fpaiv *DeviceStateConnection_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_State_Connection) bool {
	slice := fpaiv.DeviceStateConnection_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStateConnection_FieldPathArrayOfValues allows storing slice of values for Connection fields according to their type
type DeviceStateConnection_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStateConnection_FieldPath
}

func ParseDeviceStateConnection_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStateConnection_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStateConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connection field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStateConnection_FieldPathArrayOfValues), nil
}

func MustParseDeviceStateConnection_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStateConnection_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStateConnection_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStateConnection_FieldTerminalPathArrayOfValues struct {
	DeviceStateConnection_FieldTerminalPath
	values interface{}
}

var _ DeviceStateConnection_FieldPathArrayOfValues = (*DeviceStateConnection_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStateConnection_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStateConnection_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]Device_State_Connection_ConnectionStatus) {
			values = append(values, v)
		}
	case DeviceStateConnection_FieldPathSelectorStatusSince:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStateConnection_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]Device_State_Connection_ConnectionStatus, bool) {
	res, ok := fpaov.values.([]Device_State_Connection_ConnectionStatus)
	return res, ok
}
func (fpaov *DeviceStateConnection_FieldTerminalPathArrayOfValues) AsStatusSinceArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
