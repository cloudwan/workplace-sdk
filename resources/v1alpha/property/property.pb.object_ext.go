// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/property.proto
// DO NOT EDIT!!!

package property

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	device "github.com/cloudwan/workplace-sdk/resources/v1alpha/device"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha/zone"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &device.Device{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

func (o *Property) GotenObjectExt() {}

func (o *Property) MakeFullFieldMask() *Property_FieldMask {
	return FullProperty_FieldMask()
}

func (o *Property) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProperty_FieldMask()
}

func (o *Property) MakeDiffFieldMask(other *Property) *Property_FieldMask {
	if o == nil && other == nil {
		return &Property_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProperty_FieldMask()
	}

	res := &Property_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetBacnet().MakeDiffFieldMask(other.GetBacnet())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorBacnet})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Property_FieldSubPath{selector: Property_FieldPathSelectorBacnet, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Property_FieldSubPath{selector: Property_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSitePlacement().MakeDiffFieldMask(other.GetSitePlacement())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorSitePlacement})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Property_FieldSubPath{selector: Property_FieldPathSelectorSitePlacement, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetricOverride().MakeDiffFieldMask(other.GetMetricOverride())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Property_FieldTerminalPath{selector: Property_FieldPathSelectorMetricOverride})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Property_FieldSubPath{selector: Property_FieldPathSelectorMetricOverride, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Property) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Property))
}

func (o *Property) Clone() *Property {
	if o == nil {
		return nil
	}
	result := &Property{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Bacnet = o.Bacnet.Clone()
	result.Metadata = o.Metadata.Clone()
	result.SitePlacement = o.SitePlacement.Clone()
	result.MetricOverride = o.MetricOverride.Clone()
	return result
}

func (o *Property) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Property) Merge(source *Property) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetBacnet() != nil {
		if o.Bacnet == nil {
			o.Bacnet = new(workplace_common.BACNetEntity)
		}
		o.Bacnet.Merge(source.GetBacnet())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSitePlacement() != nil {
		if o.SitePlacement == nil {
			o.SitePlacement = new(Property_SitePlacement)
		}
		o.SitePlacement.Merge(source.GetSitePlacement())
	}
	if source.GetMetricOverride() != nil {
		if o.MetricOverride == nil {
			o.MetricOverride = new(Property_MetricOverride)
		}
		o.MetricOverride.Merge(source.GetMetricOverride())
	}
}

func (o *Property) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Property))
}

func (o *Property_SitePlacement) GotenObjectExt() {}

func (o *Property_SitePlacement) MakeFullFieldMask() *Property_SitePlacement_FieldMask {
	return FullProperty_SitePlacement_FieldMask()
}

func (o *Property_SitePlacement) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProperty_SitePlacement_FieldMask()
}

func (o *Property_SitePlacement) MakeDiffFieldMask(other *Property_SitePlacement) *Property_SitePlacement_FieldMask {
	if o == nil && other == nil {
		return &Property_SitePlacement_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProperty_SitePlacement_FieldMask()
	}

	res := &Property_SitePlacement_FieldMask{}
	if o.GetSite().String() != other.GetSite().String() {
		res.Paths = append(res.Paths, &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorSite})
	}
	if o.GetBuilding().String() != other.GetBuilding().String() {
		res.Paths = append(res.Paths, &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorBuilding})
	}
	if o.GetFloor().String() != other.GetFloor().String() {
		res.Paths = append(res.Paths, &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorFloor})
	}
	if o.GetArea().String() != other.GetArea().String() {
		res.Paths = append(res.Paths, &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorArea})
	}
	if o.GetZone().String() != other.GetZone().String() {
		res.Paths = append(res.Paths, &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorZone})
	}
	return res
}

func (o *Property_SitePlacement) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Property_SitePlacement))
}

func (o *Property_SitePlacement) Clone() *Property_SitePlacement {
	if o == nil {
		return nil
	}
	result := &Property_SitePlacement{}
	if o.Site == nil {
		result.Site = nil
	} else if data, err := o.Site.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Site = &site.Reference{}
		if err := result.Site.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Building == nil {
		result.Building = nil
	} else if data, err := o.Building.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Building = &building.Reference{}
		if err := result.Building.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Floor == nil {
		result.Floor = nil
	} else if data, err := o.Floor.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Floor = &floor.Reference{}
		if err := result.Floor.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Area == nil {
		result.Area = nil
	} else if data, err := o.Area.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Area = &area.Reference{}
		if err := result.Area.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Zone == nil {
		result.Zone = nil
	} else if data, err := o.Zone.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Zone = &zone.Reference{}
		if err := result.Zone.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *Property_SitePlacement) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Property_SitePlacement) Merge(source *Property_SitePlacement) {
	if source.GetSite() != nil {
		if data, err := source.GetSite().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Site = &site.Reference{}
			if err := o.Site.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Site = nil
	}
	if source.GetBuilding() != nil {
		if data, err := source.GetBuilding().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Building = &building.Reference{}
			if err := o.Building.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Building = nil
	}
	if source.GetFloor() != nil {
		if data, err := source.GetFloor().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Floor = &floor.Reference{}
			if err := o.Floor.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Floor = nil
	}
	if source.GetArea() != nil {
		if data, err := source.GetArea().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Area = &area.Reference{}
			if err := o.Area.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Area = nil
	}
	if source.GetZone() != nil {
		if data, err := source.GetZone().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Zone = &zone.Reference{}
			if err := o.Zone.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Zone = nil
	}
}

func (o *Property_SitePlacement) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Property_SitePlacement))
}

func (o *Property_MetricOverride) GotenObjectExt() {}

func (o *Property_MetricOverride) MakeFullFieldMask() *Property_MetricOverride_FieldMask {
	return FullProperty_MetricOverride_FieldMask()
}

func (o *Property_MetricOverride) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProperty_MetricOverride_FieldMask()
}

func (o *Property_MetricOverride) MakeDiffFieldMask(other *Property_MetricOverride) *Property_MetricOverride_FieldMask {
	if o == nil && other == nil {
		return &Property_MetricOverride_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProperty_MetricOverride_FieldMask()
	}

	res := &Property_MetricOverride_FieldMask{}
	if o.GetPropertyName() != other.GetPropertyName() {
		res.Paths = append(res.Paths, &PropertyMetricOverride_FieldTerminalPath{selector: PropertyMetricOverride_FieldPathSelectorPropertyName})
	}
	if o.GetUnit() != other.GetUnit() {
		res.Paths = append(res.Paths, &PropertyMetricOverride_FieldTerminalPath{selector: PropertyMetricOverride_FieldPathSelectorUnit})
	}
	return res
}

func (o *Property_MetricOverride) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Property_MetricOverride))
}

func (o *Property_MetricOverride) Clone() *Property_MetricOverride {
	if o == nil {
		return nil
	}
	result := &Property_MetricOverride{}
	result.PropertyName = o.PropertyName
	result.Unit = o.Unit
	return result
}

func (o *Property_MetricOverride) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Property_MetricOverride) Merge(source *Property_MetricOverride) {
	o.PropertyName = source.GetPropertyName()
	o.Unit = source.GetUnit()
}

func (o *Property_MetricOverride) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Property_MetricOverride))
}
