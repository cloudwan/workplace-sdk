// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/area.proto
// DO NOT EDIT!!!

package area

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha/floor"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &workplace_common.BBox{}
	_ = &floor.Floor{}
)

func (o *Area) GotenObjectExt() {}

func (o *Area) MakeFullFieldMask() *Area_FieldMask {
	return FullArea_FieldMask()
}

func (o *Area) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullArea_FieldMask()
}

func (o *Area) MakeDiffFieldMask(other *Area) *Area_FieldMask {
	if o == nil && other == nil {
		return &Area_FieldMask{}
	}
	if o == nil || other == nil {
		return FullArea_FieldMask()
	}

	res := &Area_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Area_FieldTerminalPath{selector: Area_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Area_FieldTerminalPath{selector: Area_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetGeometry().MakeDiffFieldMask(other.GetGeometry())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Area_FieldTerminalPath{selector: Area_FieldPathSelectorGeometry})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Area_FieldSubPath{selector: Area_FieldPathSelectorGeometry, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetVendorSpec().MakeDiffFieldMask(other.GetVendorSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Area_FieldTerminalPath{selector: Area_FieldPathSelectorVendorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Area_FieldSubPath{selector: Area_FieldPathSelectorVendorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Area_FieldTerminalPath{selector: Area_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Area_FieldSubPath{selector: Area_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Area) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Area))
}

func (o *Area) Clone() *Area {
	if o == nil {
		return nil
	}
	result := &Area{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Geometry = o.Geometry.Clone()
	result.VendorSpec = o.VendorSpec.Clone()
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Area) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Area) Merge(source *Area) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetGeometry() != nil {
		if o.Geometry == nil {
			o.Geometry = new(workplace_common.Geometry)
		}
		o.Geometry.Merge(source.GetGeometry())
	}
	if source.GetVendorSpec() != nil {
		if o.VendorSpec == nil {
			o.VendorSpec = new(Area_VendorSpec)
		}
		o.VendorSpec.Merge(source.GetVendorSpec())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Area) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Area))
}

func (o *Area_VendorSpec) GotenObjectExt() {}

func (o *Area_VendorSpec) MakeFullFieldMask() *Area_VendorSpec_FieldMask {
	return FullArea_VendorSpec_FieldMask()
}

func (o *Area_VendorSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullArea_VendorSpec_FieldMask()
}

func (o *Area_VendorSpec) MakeDiffFieldMask(other *Area_VendorSpec) *Area_VendorSpec_FieldMask {
	if o == nil && other == nil {
		return &Area_VendorSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullArea_VendorSpec_FieldMask()
	}

	res := &Area_VendorSpec_FieldMask{}
	{
		subMask := o.GetPointGrab().MakeDiffFieldMask(other.GetPointGrab())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AreaVendorSpec_FieldTerminalPath{selector: AreaVendorSpec_FieldPathSelectorPointGrab})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AreaVendorSpec_FieldSubPath{selector: AreaVendorSpec_FieldPathSelectorPointGrab, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Area_VendorSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Area_VendorSpec))
}

func (o *Area_VendorSpec) Clone() *Area_VendorSpec {
	if o == nil {
		return nil
	}
	result := &Area_VendorSpec{}
	result.PointGrab = o.PointGrab.Clone()
	return result
}

func (o *Area_VendorSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Area_VendorSpec) Merge(source *Area_VendorSpec) {
	if source.GetPointGrab() != nil {
		if o.PointGrab == nil {
			o.PointGrab = new(Area_VendorSpec_PointGrab)
		}
		o.PointGrab.Merge(source.GetPointGrab())
	}
}

func (o *Area_VendorSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Area_VendorSpec))
}

func (o *Area_VendorSpec_PointGrab) GotenObjectExt() {}

func (o *Area_VendorSpec_PointGrab) MakeFullFieldMask() *Area_VendorSpec_PointGrab_FieldMask {
	return FullArea_VendorSpec_PointGrab_FieldMask()
}

func (o *Area_VendorSpec_PointGrab) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullArea_VendorSpec_PointGrab_FieldMask()
}

func (o *Area_VendorSpec_PointGrab) MakeDiffFieldMask(other *Area_VendorSpec_PointGrab) *Area_VendorSpec_PointGrab_FieldMask {
	if o == nil && other == nil {
		return &Area_VendorSpec_PointGrab_FieldMask{}
	}
	if o == nil || other == nil {
		return FullArea_VendorSpec_PointGrab_FieldMask()
	}

	res := &Area_VendorSpec_PointGrab_FieldMask{}
	if o.GetBuildingId() != other.GetBuildingId() {
		res.Paths = append(res.Paths, &AreaVendorSpecPointGrab_FieldTerminalPath{selector: AreaVendorSpecPointGrab_FieldPathSelectorBuildingId})
	}
	return res
}

func (o *Area_VendorSpec_PointGrab) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Area_VendorSpec_PointGrab))
}

func (o *Area_VendorSpec_PointGrab) Clone() *Area_VendorSpec_PointGrab {
	if o == nil {
		return nil
	}
	result := &Area_VendorSpec_PointGrab{}
	result.BuildingId = o.BuildingId
	return result
}

func (o *Area_VendorSpec_PointGrab) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Area_VendorSpec_PointGrab) Merge(source *Area_VendorSpec_PointGrab) {
	o.BuildingId = source.GetBuildingId()
}

func (o *Area_VendorSpec_PointGrab) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Area_VendorSpec_PointGrab))
}
