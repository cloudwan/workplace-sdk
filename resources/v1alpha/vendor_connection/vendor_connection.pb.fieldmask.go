// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/vendor_connection.proto
// DO NOT EDIT!!!

package vendor_connection

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &workplace_common.BBox{}
)

type PointGrab_FieldMask struct {
	Paths []PointGrab_FieldPath
}

func FullPointGrab_FieldMask() *PointGrab_FieldMask {
	res := &PointGrab_FieldMask{}
	return res
}

func (fieldMask *PointGrab_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *PointGrab_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *PointGrab_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePointGrab_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *PointGrab_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PointGrab_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *PointGrab_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePointGrab_FieldPath(raw)
	})
}

func (fieldMask *PointGrab_FieldMask) ProtoMessage() {}

func (fieldMask *PointGrab_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *PointGrab_FieldMask) Subtract(other *PointGrab_FieldMask) *PointGrab_FieldMask {
	result := &PointGrab_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PointGrab_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *PointGrab_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*PointGrab_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *PointGrab_FieldMask) FilterInputFields() *PointGrab_FieldMask {
	result := &PointGrab_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *PointGrab_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *PointGrab_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PointGrab_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePointGrab_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask PointGrab_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *PointGrab_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PointGrab_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask PointGrab_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *PointGrab_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PointGrab_FieldMask) AppendPath(path PointGrab_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *PointGrab_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PointGrab_FieldPath))
}

func (fieldMask *PointGrab_FieldMask) GetPaths() []PointGrab_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *PointGrab_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *PointGrab_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePointGrab_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *PointGrab_FieldMask) Set(target, source *PointGrab) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *PointGrab_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*PointGrab), source.(*PointGrab))
}

func (fieldMask *PointGrab_FieldMask) Project(source *PointGrab) *PointGrab {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &PointGrab{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PointGrab_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *PointGrab_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*PointGrab))
}

func (fieldMask *PointGrab_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type PointGrab_Telemetry_FieldMask struct {
	Paths []PointGrabTelemetry_FieldPath
}

func FullPointGrab_Telemetry_FieldMask() *PointGrab_Telemetry_FieldMask {
	res := &PointGrab_Telemetry_FieldMask{}
	return res
}

func (fieldMask *PointGrab_Telemetry_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *PointGrab_Telemetry_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *PointGrab_Telemetry_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePointGrabTelemetry_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *PointGrab_Telemetry_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PointGrabTelemetry_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *PointGrab_Telemetry_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePointGrabTelemetry_FieldPath(raw)
	})
}

func (fieldMask *PointGrab_Telemetry_FieldMask) ProtoMessage() {}

func (fieldMask *PointGrab_Telemetry_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *PointGrab_Telemetry_FieldMask) Subtract(other *PointGrab_Telemetry_FieldMask) *PointGrab_Telemetry_FieldMask {
	result := &PointGrab_Telemetry_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PointGrabTelemetry_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *PointGrab_Telemetry_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*PointGrab_Telemetry_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *PointGrab_Telemetry_FieldMask) FilterInputFields() *PointGrab_Telemetry_FieldMask {
	result := &PointGrab_Telemetry_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *PointGrab_Telemetry_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *PointGrab_Telemetry_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PointGrabTelemetry_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePointGrabTelemetry_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask PointGrab_Telemetry_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *PointGrab_Telemetry_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PointGrab_Telemetry_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask PointGrab_Telemetry_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *PointGrab_Telemetry_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PointGrab_Telemetry_FieldMask) AppendPath(path PointGrabTelemetry_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *PointGrab_Telemetry_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PointGrabTelemetry_FieldPath))
}

func (fieldMask *PointGrab_Telemetry_FieldMask) GetPaths() []PointGrabTelemetry_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *PointGrab_Telemetry_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *PointGrab_Telemetry_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePointGrabTelemetry_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *PointGrab_Telemetry_FieldMask) Set(target, source *PointGrab_Telemetry) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *PointGrab_Telemetry_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*PointGrab_Telemetry), source.(*PointGrab_Telemetry))
}

func (fieldMask *PointGrab_Telemetry_FieldMask) Project(source *PointGrab_Telemetry) *PointGrab_Telemetry {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &PointGrab_Telemetry{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PointGrabTelemetry_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *PointGrab_Telemetry_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*PointGrab_Telemetry))
}

func (fieldMask *PointGrab_Telemetry_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_FieldMask struct {
	Paths []VendorConnection_FieldPath
}

func FullVendorConnection_FieldMask() *VendorConnection_FieldMask {
	res := &VendorConnection_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorName})
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorVendor})
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorInfo})
	res.Paths = append(res.Paths, &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorMetadata})
	return res
}

func (fieldMask *VendorConnection_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnection_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnection_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnection_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_FieldMask) Subtract(other *VendorConnection_FieldMask) *VendorConnection_FieldMask {
	result := &VendorConnection_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[VendorConnection_FieldPathSelector]gotenobject.FieldMask{
		VendorConnection_FieldPathSelectorSpec:     &VendorConnection_Spec_FieldMask{},
		VendorConnection_FieldPathSelectorInfo:     &VendorConnection_Info_FieldMask{},
		VendorConnection_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[VendorConnection_FieldPathSelector]gotenobject.FieldMask{
		VendorConnection_FieldPathSelectorSpec:     &VendorConnection_Spec_FieldMask{},
		VendorConnection_FieldPathSelectorInfo:     &VendorConnection_Info_FieldMask{},
		VendorConnection_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnection_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnection_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnection_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnection_FieldPathSelectorSpec:
						mySubMasks[VendorConnection_FieldPathSelectorSpec] = FullVendorConnection_Spec_FieldMask()
					case VendorConnection_FieldPathSelectorInfo:
						mySubMasks[VendorConnection_FieldPathSelectorInfo] = FullVendorConnection_Info_FieldMask()
					case VendorConnection_FieldPathSelectorMetadata:
						mySubMasks[VendorConnection_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnection_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnection_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_FieldMask) FilterInputFields() *VendorConnection_FieldMask {
	result := &VendorConnection_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case VendorConnection_FieldPathSelectorMetadata:
			if _, ok := path.(*VendorConnection_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &VendorConnection_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*VendorConnection_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &VendorConnection_FieldSubPath{selector: VendorConnection_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnection_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnection_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_FieldMask) AppendPath(path VendorConnection_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnection_FieldPath))
}

func (fieldMask *VendorConnection_FieldMask) GetPaths() []VendorConnection_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnection_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_FieldMask) Set(target, source *VendorConnection) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection), source.(*VendorConnection))
}

func (fieldMask *VendorConnection_FieldMask) Project(source *VendorConnection) *VendorConnection {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection{}
	specMask := &VendorConnection_Spec_FieldMask{}
	wholeSpecAccepted := false
	infoMask := &VendorConnection_Info_FieldMask{}
	wholeInfoAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnection_FieldTerminalPath:
			switch tp.selector {
			case VendorConnection_FieldPathSelectorName:
				result.Name = source.Name
			case VendorConnection_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case VendorConnection_FieldPathSelectorVendor:
				result.Vendor = source.Vendor
			case VendorConnection_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case VendorConnection_FieldPathSelectorInfo:
				result.Info = source.Info
				wholeInfoAccepted = true
			case VendorConnection_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			}
		case *VendorConnection_FieldSubPath:
			switch tp.selector {
			case VendorConnection_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(VendorConnectionSpec_FieldPath))
			case VendorConnection_FieldPathSelectorInfo:
				infoMask.AppendPath(tp.subPath.(VendorConnectionInfo_FieldPath))
			case VendorConnection_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeInfoAccepted == false && len(infoMask.Paths) > 0 {
		result.Info = infoMask.Project(source.GetInfo())
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *VendorConnection_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection))
}

func (fieldMask *VendorConnection_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Spec_FieldMask struct {
	Paths []VendorConnectionSpec_FieldPath
}

func FullVendorConnection_Spec_FieldMask() *VendorConnection_Spec_FieldMask {
	res := &VendorConnection_Spec_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionSpec_FieldTerminalPath{selector: VendorConnectionSpec_FieldPathSelectorPointGrab})
	return res
}

func (fieldMask *VendorConnection_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionSpec_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Spec_FieldMask) Subtract(other *VendorConnection_Spec_FieldMask) *VendorConnection_Spec_FieldMask {
	result := &VendorConnection_Spec_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[VendorConnectionSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpec_FieldPathSelectorPointGrab: &VendorConnection_Spec_PointGrabSpec_FieldMask{},
	}
	mySubMasks := map[VendorConnectionSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpec_FieldPathSelectorPointGrab: &VendorConnection_Spec_PointGrabSpec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnectionSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnectionSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnectionSpec_FieldPathSelectorPointGrab:
						mySubMasks[VendorConnectionSpec_FieldPathSelectorPointGrab] = FullVendorConnection_Spec_PointGrabSpec_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnectionSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnectionSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Spec_FieldMask) FilterInputFields() *VendorConnection_Spec_FieldMask {
	result := &VendorConnection_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Spec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_FieldMask) AppendPath(path VendorConnectionSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionSpec_FieldPath))
}

func (fieldMask *VendorConnection_Spec_FieldMask) GetPaths() []VendorConnectionSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Spec_FieldMask) Set(target, source *VendorConnection_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Spec), source.(*VendorConnection_Spec))
}

func (fieldMask *VendorConnection_Spec_FieldMask) Project(source *VendorConnection_Spec) *VendorConnection_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Spec{}
	pointGrabMask := &VendorConnection_Spec_PointGrabSpec_FieldMask{}
	wholePointGrabAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionSpec_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionSpec_FieldPathSelectorPointGrab:
				result.PointGrab = source.PointGrab
				wholePointGrabAccepted = true
			}
		case *VendorConnectionSpec_FieldSubPath:
			switch tp.selector {
			case VendorConnectionSpec_FieldPathSelectorPointGrab:
				pointGrabMask.AppendPath(tp.subPath.(VendorConnectionSpecPointGrabSpec_FieldPath))
			}
		}
	}
	if wholePointGrabAccepted == false && len(pointGrabMask.Paths) > 0 {
		result.PointGrab = pointGrabMask.Project(source.GetPointGrab())
	}
	return result
}

func (fieldMask *VendorConnection_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Spec))
}

func (fieldMask *VendorConnection_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Info_FieldMask struct {
	Paths []VendorConnectionInfo_FieldPath
}

func FullVendorConnection_Info_FieldMask() *VendorConnection_Info_FieldMask {
	res := &VendorConnection_Info_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionInfo_FieldTerminalPath{selector: VendorConnectionInfo_FieldPathSelectorInfo})
	return res
}

func (fieldMask *VendorConnection_Info_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Info_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Info_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionInfo_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Info_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Info_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionInfo_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Info_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Info_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Info_FieldMask) Subtract(other *VendorConnection_Info_FieldMask) *VendorConnection_Info_FieldMask {
	result := &VendorConnection_Info_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[VendorConnectionInfo_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionInfo_FieldPathSelectorInfo: &VendorConnection_Info_PointGrabInfo_FieldMask{},
	}
	mySubMasks := map[VendorConnectionInfo_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionInfo_FieldPathSelectorInfo: &VendorConnection_Info_PointGrabInfo_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnectionInfo_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnectionInfo_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnectionInfo_FieldPathSelectorInfo:
						mySubMasks[VendorConnectionInfo_FieldPathSelectorInfo] = FullVendorConnection_Info_PointGrabInfo_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnectionInfo_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnectionInfo_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Info_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Info_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Info_FieldMask) FilterInputFields() *VendorConnection_Info_FieldMask {
	result := &VendorConnection_Info_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Info_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Info_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Info_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Info_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Info_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Info_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_FieldMask) AppendPath(path VendorConnectionInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Info_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionInfo_FieldPath))
}

func (fieldMask *VendorConnection_Info_FieldMask) GetPaths() []VendorConnectionInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Info_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Info_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Info_FieldMask) Set(target, source *VendorConnection_Info) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Info_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Info), source.(*VendorConnection_Info))
}

func (fieldMask *VendorConnection_Info_FieldMask) Project(source *VendorConnection_Info) *VendorConnection_Info {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Info{}
	infoMask := &VendorConnection_Info_PointGrabInfo_FieldMask{}
	wholeInfoAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionInfo_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionInfo_FieldPathSelectorInfo:
				result.Info = source.Info
				wholeInfoAccepted = true
			}
		case *VendorConnectionInfo_FieldSubPath:
			switch tp.selector {
			case VendorConnectionInfo_FieldPathSelectorInfo:
				infoMask.AppendPath(tp.subPath.(VendorConnectionInfoPointGrabInfo_FieldPath))
			}
		}
	}
	if wholeInfoAccepted == false && len(infoMask.Paths) > 0 {
		result.Info = infoMask.Project(source.GetInfo())
	}
	return result
}

func (fieldMask *VendorConnection_Info_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Info))
}

func (fieldMask *VendorConnection_Info_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Spec_PointGrabSpec_FieldMask struct {
	Paths []VendorConnectionSpecPointGrabSpec_FieldPath
}

func FullVendorConnection_Spec_PointGrabSpec_FieldMask() *VendorConnection_Spec_PointGrabSpec_FieldMask {
	res := &VendorConnection_Spec_PointGrabSpec_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint})
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth})
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec})
	return res
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionSpecPointGrabSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionSpecPointGrabSpec_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Subtract(other *VendorConnection_Spec_PointGrabSpec_FieldMask) *VendorConnection_Spec_PointGrabSpec_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[VendorConnectionSpecPointGrabSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:         &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{},
		VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec: &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{},
	}
	mySubMasks := map[VendorConnectionSpecPointGrabSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:         &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{},
		VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec: &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionSpecPointGrabSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnectionSpecPointGrabSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnectionSpecPointGrabSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
						mySubMasks[VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth] = FullVendorConnection_Spec_PointGrabSpec_Auth_FieldMask()
					case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
						mySubMasks[VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec] = FullVendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnectionSpecPointGrabSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnectionSpecPointGrabSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Spec_PointGrabSpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) FilterInputFields() *VendorConnection_Spec_PointGrabSpec_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionSpecPointGrabSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Spec_PointGrabSpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Spec_PointGrabSpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) AppendPath(path VendorConnectionSpecPointGrabSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionSpecPointGrabSpec_FieldPath))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) GetPaths() []VendorConnectionSpecPointGrabSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Set(target, source *VendorConnection_Spec_PointGrabSpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Spec_PointGrabSpec), source.(*VendorConnection_Spec_PointGrabSpec))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) Project(source *VendorConnection_Spec_PointGrabSpec) *VendorConnection_Spec_PointGrabSpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Spec_PointGrabSpec{}
	authMask := &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{}
	wholeAuthAccepted := false
	callbackSpecMask := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{}
	wholeCallbackSpecAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionSpecPointGrabSpec_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
				result.Endpoint = source.Endpoint
			case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
				result.Auth = source.Auth
				wholeAuthAccepted = true
			case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
				result.CallbackSpec = source.CallbackSpec
				wholeCallbackSpecAccepted = true
			}
		case *VendorConnectionSpecPointGrabSpec_FieldSubPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
				authMask.AppendPath(tp.subPath.(VendorConnectionSpecPointGrabSpecAuth_FieldPath))
			case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
				callbackSpecMask.AppendPath(tp.subPath.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath))
			}
		}
	}
	if wholeAuthAccepted == false && len(authMask.Paths) > 0 {
		result.Auth = authMask.Project(source.GetAuth())
	}
	if wholeCallbackSpecAccepted == false && len(callbackSpecMask.Paths) > 0 {
		result.CallbackSpec = callbackSpecMask.Project(source.GetCallbackSpec())
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Spec_PointGrabSpec))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Spec_PointGrabSpec_Auth_FieldMask struct {
	Paths []VendorConnectionSpecPointGrabSpecAuth_FieldPath
}

func FullVendorConnection_Spec_PointGrabSpec_Auth_FieldMask() *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask {
	res := &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication})
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret})
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint})
	return res
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Subtract(other *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Spec_PointGrabSpec_Auth_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) FilterInputFields() *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_Auth_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionSpecPointGrabSpecAuth_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) AppendPath(path VendorConnectionSpecPointGrabSpecAuth_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionSpecPointGrabSpecAuth_FieldPath))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) GetPaths() []VendorConnectionSpecPointGrabSpecAuth_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Set(target, source *VendorConnection_Spec_PointGrabSpec_Auth) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Spec_PointGrabSpec_Auth), source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) Project(source *VendorConnection_Spec_PointGrabSpec_Auth) *VendorConnection_Spec_PointGrabSpec_Auth {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Spec_PointGrabSpec_Auth{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
				result.Application = source.Application
			case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
				result.Secret = source.Secret
			case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
				result.TokenEndpoint = source.TokenEndpoint
			}
		}
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_Auth_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask struct {
	Paths []VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
}

func FullVendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask() *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask {
	res := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken})
	return res
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Subtract(other *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken: &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{},
	}
	mySubMasks := map[VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken: &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
						mySubMasks[VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken] = FullVendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) FilterInputFields() *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) AppendPath(path VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) GetPaths() []VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Set(target, source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec), source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) Project(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) *VendorConnection_Spec_PointGrabSpec_CallbackSpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec{}
	authTokenMask := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{}
	wholeAuthTokenAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
				result.AuthToken = source.AuthToken
				wholeAuthTokenAccepted = true
			}
		case *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
				authTokenMask.AppendPath(tp.subPath.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath))
			}
		}
	}
	if wholeAuthTokenAccepted == false && len(authTokenMask.Paths) > 0 {
		result.AuthToken = authTokenMask.Project(source.GetAuthToken())
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask struct {
	Paths []VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath
}

func FullVendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask() *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask {
	res := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader})
	res.Paths = append(res.Paths, &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue})
	return res
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) ProtoMessage() {
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Subtract(other *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) FilterInputFields() *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask {
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) AppendPath(path VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) GetPaths() []VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Set(target, source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken), source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) Project(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
				result.TokenHeader = source.TokenHeader
			case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
				result.TokenValue = source.TokenValue
			}
		}
	}
	return result
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

func (fieldMask *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Info_PointGrabInfo_FieldMask struct {
	Paths []VendorConnectionInfoPointGrabInfo_FieldPath
}

func FullVendorConnection_Info_PointGrabInfo_FieldMask() *VendorConnection_Info_PointGrabInfo_FieldMask {
	res := &VendorConnection_Info_PointGrabInfo_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionInfoPointGrabInfo_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions})
	return res
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionInfoPointGrabInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionInfoPointGrabInfo_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) ProtoMessage() {}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Subtract(other *VendorConnection_Info_PointGrabInfo_FieldMask) *VendorConnection_Info_PointGrabInfo_FieldMask {
	result := &VendorConnection_Info_PointGrabInfo_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[VendorConnectionInfoPointGrabInfo_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions: &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{},
	}
	mySubMasks := map[VendorConnectionInfoPointGrabInfo_FieldPathSelector]gotenobject.FieldMask{
		VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions: &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionInfoPointGrabInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VendorConnectionInfoPointGrabInfo_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VendorConnectionInfoPointGrabInfo_FieldTerminalPath); ok {
					switch tp.selector {
					case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
						mySubMasks[VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions] = FullVendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask()
					}
				} else if tp, ok := path.(*VendorConnectionInfoPointGrabInfo_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VendorConnectionInfoPointGrabInfo_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Info_PointGrabInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) FilterInputFields() *VendorConnection_Info_PointGrabInfo_FieldMask {
	result := &VendorConnection_Info_PointGrabInfo_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionInfoPointGrabInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Info_PointGrabInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Info_PointGrabInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) AppendPath(path VendorConnectionInfoPointGrabInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionInfoPointGrabInfo_FieldPath))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) GetPaths() []VendorConnectionInfoPointGrabInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Set(target, source *VendorConnection_Info_PointGrabInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Info_PointGrabInfo), source.(*VendorConnection_Info_PointGrabInfo))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) Project(source *VendorConnection_Info_PointGrabInfo) *VendorConnection_Info_PointGrabInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Info_PointGrabInfo{}
	telemetrySubscriptionsMask := &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{}
	wholeTelemetrySubscriptionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionInfoPointGrabInfo_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
				result.TelemetrySubscriptions = source.TelemetrySubscriptions
				wholeTelemetrySubscriptionsAccepted = true
			}
		case *VendorConnectionInfoPointGrabInfo_FieldSubPath:
			switch tp.selector {
			case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
				telemetrySubscriptionsMask.AppendPath(tp.subPath.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath))
			}
		}
	}
	if wholeTelemetrySubscriptionsAccepted == false && len(telemetrySubscriptionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetTelemetrySubscriptions() {
			result.TelemetrySubscriptions = append(result.TelemetrySubscriptions, telemetrySubscriptionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Info_PointGrabInfo))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask struct {
	Paths []VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath
}

func FullVendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask() *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask {
	res := &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{}
	res.Paths = append(res.Paths, &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId})
	res.Paths = append(res.Paths, &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType})
	return res
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(raw)
	})
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) ProtoMessage() {
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Subtract(other *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask {
	result := &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) FilterInputFields() *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask {
	result := &VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) AppendPath(path VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) GetPaths() []VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Set(target, source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription), source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) Project(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) *VendorConnection_Info_PointGrabInfo_TelemetrySubscription {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VendorConnection_Info_PointGrabInfo_TelemetrySubscription{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath:
			switch tp.selector {
			case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
				result.SubscriptionId = source.SubscriptionId
			case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
				result.NotificationType = source.NotificationType
			}
		}
	}
	return result
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

func (fieldMask *VendorConnection_Info_PointGrabInfo_TelemetrySubscription_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
