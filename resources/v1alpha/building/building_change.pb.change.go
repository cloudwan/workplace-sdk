// Code generated by protoc-gen-goten-resource
// Resource change: BuildingChange
// DO NOT EDIT!!!

package building

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha/site"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
	_ = &site.Site{}
)

func (c *BuildingChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*BuildingChange_Added_)
	return ok
}

func (c *BuildingChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*BuildingChange_Modified_)
	return ok
}

func (c *BuildingChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*BuildingChange_Current_)
	return ok
}

func (c *BuildingChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*BuildingChange_Removed_)
	return ok
}

func (c *BuildingChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *BuildingChange_Added_:
		return cType.Added.ViewIndex
	case *BuildingChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *BuildingChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *BuildingChange_Removed_:
		return cType.Removed.ViewIndex
	case *BuildingChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *BuildingChange) GetBuilding() *Building {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *BuildingChange_Added_:
		return cType.Added.Building
	case *BuildingChange_Modified_:
		return cType.Modified.Building
	case *BuildingChange_Current_:
		return cType.Current.Building
	case *BuildingChange_Removed_:
		return nil
	}
	return nil
}

func (c *BuildingChange) GetResource() gotenresource.Resource {
	return c.GetBuilding()
}

func (c *BuildingChange) GetBuildingName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *BuildingChange_Added_:
		return cType.Added.Building.GetName()
	case *BuildingChange_Modified_:
		return cType.Modified.Name
	case *BuildingChange_Current_:
		return cType.Current.Building.GetName()
	case *BuildingChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *BuildingChange) GetRawName() gotenresource.Name {
	return c.GetBuildingName()
}

func (c *BuildingChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &BuildingChange_Added_{
		Added: &BuildingChange_Added{
			Building:  snapshot.(*Building),
			ViewIndex: int32(idx),
		},
	}
}

func (c *BuildingChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &BuildingChange_Modified_{
		Modified: &BuildingChange_Modified{
			Name:              name.(*Name),
			Building:          snapshot.(*Building),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *BuildingChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &BuildingChange_Current_{
		Current: &BuildingChange_Current{
			Building: snapshot.(*Building),
		},
	}
}

func (c *BuildingChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &BuildingChange_Removed_{
		Removed: &BuildingChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
