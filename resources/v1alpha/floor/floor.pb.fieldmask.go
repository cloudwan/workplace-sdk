// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha/floor.proto
// DO NOT EDIT!!!

package floor

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha/common"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
)

type Floor_FieldMask struct {
	Paths []Floor_FieldPath
}

func FullFloor_FieldMask() *Floor_FieldMask {
	res := &Floor_FieldMask{}
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorOrderingNumber})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorGeometry})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorMappings})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorSpec})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorInfo})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorState})
	res.Paths = append(res.Paths, &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorMetadata})
	return res
}

func (fieldMask *Floor_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloor_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 9)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Floor_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloor_FieldPath(raw)
	})
}

func (fieldMask *Floor_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_FieldMask) Subtract(other *Floor_FieldMask) *Floor_FieldMask {
	result := &Floor_FieldMask{}
	removedSelectors := make([]bool, 9)
	otherSubMasks := map[Floor_FieldPathSelector]gotenobject.FieldMask{
		Floor_FieldPathSelectorGeometry:       &workplace_common.Geometry_FieldMask{},
		Floor_FieldPathSelectorVendorMappings: &workplace_common.VendorMapping_FieldMask{},
		Floor_FieldPathSelectorVendorSpec:     &Floor_VendorSpec_FieldMask{},
		Floor_FieldPathSelectorVendorInfo:     &Floor_VendorInfo_FieldMask{},
		Floor_FieldPathSelectorVendorState:    &Floor_VendorState_FieldMask{},
		Floor_FieldPathSelectorMetadata:       &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[Floor_FieldPathSelector]gotenobject.FieldMask{
		Floor_FieldPathSelectorGeometry:       &workplace_common.Geometry_FieldMask{},
		Floor_FieldPathSelectorVendorMappings: &workplace_common.VendorMapping_FieldMask{},
		Floor_FieldPathSelectorVendorSpec:     &Floor_VendorSpec_FieldMask{},
		Floor_FieldPathSelectorVendorInfo:     &Floor_VendorInfo_FieldMask{},
		Floor_FieldPathSelectorVendorState:    &Floor_VendorState_FieldMask{},
		Floor_FieldPathSelectorMetadata:       &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Floor_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Floor_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Floor_FieldTerminalPath); ok {
					switch tp.selector {
					case Floor_FieldPathSelectorGeometry:
						mySubMasks[Floor_FieldPathSelectorGeometry] = workplace_common.FullGeometry_FieldMask()
					case Floor_FieldPathSelectorVendorMappings:
						mySubMasks[Floor_FieldPathSelectorVendorMappings] = workplace_common.FullVendorMapping_FieldMask()
					case Floor_FieldPathSelectorVendorSpec:
						mySubMasks[Floor_FieldPathSelectorVendorSpec] = FullFloor_VendorSpec_FieldMask()
					case Floor_FieldPathSelectorVendorInfo:
						mySubMasks[Floor_FieldPathSelectorVendorInfo] = FullFloor_VendorInfo_FieldMask()
					case Floor_FieldPathSelectorVendorState:
						mySubMasks[Floor_FieldPathSelectorVendorState] = FullFloor_VendorState_FieldMask()
					case Floor_FieldPathSelectorMetadata:
						mySubMasks[Floor_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*Floor_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Floor_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_FieldMask) FilterInputFields() *Floor_FieldMask {
	result := &Floor_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Floor_FieldPathSelectorMetadata:
			if _, ok := path.(*Floor_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Floor_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Floor_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Floor_FieldSubPath{selector: Floor_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Floor_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloor_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_FieldMask) AppendPath(path Floor_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Floor_FieldPath))
}

func (fieldMask *Floor_FieldMask) GetPaths() []Floor_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloor_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_FieldMask) Set(target, source *Floor) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor), source.(*Floor))
}

func (fieldMask *Floor_FieldMask) Project(source *Floor) *Floor {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor{}
	geometryMask := &workplace_common.Geometry_FieldMask{}
	wholeGeometryAccepted := false
	vendorMappingsMask := &workplace_common.VendorMapping_FieldMask{}
	wholeVendorMappingsAccepted := false
	vendorSpecMask := &Floor_VendorSpec_FieldMask{}
	wholeVendorSpecAccepted := false
	vendorInfoMask := &Floor_VendorInfo_FieldMask{}
	wholeVendorInfoAccepted := false
	vendorStateMask := &Floor_VendorState_FieldMask{}
	wholeVendorStateAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Floor_FieldTerminalPath:
			switch tp.selector {
			case Floor_FieldPathSelectorName:
				result.Name = source.Name
			case Floor_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Floor_FieldPathSelectorOrderingNumber:
				result.OrderingNumber = source.OrderingNumber
			case Floor_FieldPathSelectorGeometry:
				result.Geometry = source.Geometry
				wholeGeometryAccepted = true
			case Floor_FieldPathSelectorVendorMappings:
				result.VendorMappings = source.VendorMappings
				wholeVendorMappingsAccepted = true
			case Floor_FieldPathSelectorVendorSpec:
				result.VendorSpec = source.VendorSpec
				wholeVendorSpecAccepted = true
			case Floor_FieldPathSelectorVendorInfo:
				result.VendorInfo = source.VendorInfo
				wholeVendorInfoAccepted = true
			case Floor_FieldPathSelectorVendorState:
				result.VendorState = source.VendorState
				wholeVendorStateAccepted = true
			case Floor_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			}
		case *Floor_FieldSubPath:
			switch tp.selector {
			case Floor_FieldPathSelectorGeometry:
				geometryMask.AppendPath(tp.subPath.(workplace_common.Geometry_FieldPath))
			case Floor_FieldPathSelectorVendorMappings:
				vendorMappingsMask.AppendPath(tp.subPath.(workplace_common.VendorMapping_FieldPath))
			case Floor_FieldPathSelectorVendorSpec:
				vendorSpecMask.AppendPath(tp.subPath.(FloorVendorSpec_FieldPath))
			case Floor_FieldPathSelectorVendorInfo:
				vendorInfoMask.AppendPath(tp.subPath.(FloorVendorInfo_FieldPath))
			case Floor_FieldPathSelectorVendorState:
				vendorStateMask.AppendPath(tp.subPath.(FloorVendorState_FieldPath))
			case Floor_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeGeometryAccepted == false && len(geometryMask.Paths) > 0 {
		result.Geometry = geometryMask.Project(source.GetGeometry())
	}
	if wholeVendorMappingsAccepted == false && len(vendorMappingsMask.Paths) > 0 {
		for _, sourceItem := range source.GetVendorMappings() {
			result.VendorMappings = append(result.VendorMappings, vendorMappingsMask.Project(sourceItem))
		}
	}
	if wholeVendorSpecAccepted == false && len(vendorSpecMask.Paths) > 0 {
		result.VendorSpec = vendorSpecMask.Project(source.GetVendorSpec())
	}
	if wholeVendorInfoAccepted == false && len(vendorInfoMask.Paths) > 0 {
		result.VendorInfo = vendorInfoMask.Project(source.GetVendorInfo())
	}
	if wholeVendorStateAccepted == false && len(vendorStateMask.Paths) > 0 {
		result.VendorState = vendorStateMask.Project(source.GetVendorState())
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *Floor_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor))
}

func (fieldMask *Floor_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorSpec_FieldMask struct {
	Paths []FloorVendorSpec_FieldPath
}

func FullFloor_VendorSpec_FieldMask() *Floor_VendorSpec_FieldMask {
	res := &Floor_VendorSpec_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorSpec_FieldTerminalPath{selector: FloorVendorSpec_FieldPathSelectorPointGrab})
	res.Paths = append(res.Paths, &FloorVendorSpec_FieldTerminalPath{selector: FloorVendorSpec_FieldPathSelectorMapbox})
	return res
}

func (fieldMask *Floor_VendorSpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorSpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorSpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorSpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorSpec_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorSpec_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorSpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorSpec_FieldMask) Subtract(other *Floor_VendorSpec_FieldMask) *Floor_VendorSpec_FieldMask {
	result := &Floor_VendorSpec_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[FloorVendorSpec_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpec_FieldPathSelectorPointGrab: &Floor_VendorSpec_PointGrab_FieldMask{},
		FloorVendorSpec_FieldPathSelectorMapbox:    &Floor_VendorSpec_Mapbox_FieldMask{},
	}
	mySubMasks := map[FloorVendorSpec_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpec_FieldPathSelectorPointGrab: &Floor_VendorSpec_PointGrab_FieldMask{},
		FloorVendorSpec_FieldPathSelectorMapbox:    &Floor_VendorSpec_Mapbox_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorSpec_FieldPathSelectorPointGrab:
						mySubMasks[FloorVendorSpec_FieldPathSelectorPointGrab] = FullFloor_VendorSpec_PointGrab_FieldMask()
					case FloorVendorSpec_FieldPathSelectorMapbox:
						mySubMasks[FloorVendorSpec_FieldPathSelectorMapbox] = FullFloor_VendorSpec_Mapbox_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorSpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorSpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorSpec_FieldMask) FilterInputFields() *Floor_VendorSpec_FieldMask {
	result := &Floor_VendorSpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorSpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorSpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorSpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorSpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorSpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorSpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_FieldMask) AppendPath(path FloorVendorSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorSpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorSpec_FieldPath))
}

func (fieldMask *Floor_VendorSpec_FieldMask) GetPaths() []FloorVendorSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorSpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorSpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorSpec_FieldMask) Set(target, source *Floor_VendorSpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorSpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorSpec), source.(*Floor_VendorSpec))
}

func (fieldMask *Floor_VendorSpec_FieldMask) Project(source *Floor_VendorSpec) *Floor_VendorSpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorSpec{}
	pointGrabMask := &Floor_VendorSpec_PointGrab_FieldMask{}
	wholePointGrabAccepted := false
	mapboxMask := &Floor_VendorSpec_Mapbox_FieldMask{}
	wholeMapboxAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorSpec_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorSpec_FieldPathSelectorPointGrab:
				result.PointGrab = source.PointGrab
				wholePointGrabAccepted = true
			case FloorVendorSpec_FieldPathSelectorMapbox:
				result.Mapbox = source.Mapbox
				wholeMapboxAccepted = true
			}
		case *FloorVendorSpec_FieldSubPath:
			switch tp.selector {
			case FloorVendorSpec_FieldPathSelectorPointGrab:
				pointGrabMask.AppendPath(tp.subPath.(FloorVendorSpecPointGrab_FieldPath))
			case FloorVendorSpec_FieldPathSelectorMapbox:
				mapboxMask.AppendPath(tp.subPath.(FloorVendorSpecMapbox_FieldPath))
			}
		}
	}
	if wholePointGrabAccepted == false && len(pointGrabMask.Paths) > 0 {
		result.PointGrab = pointGrabMask.Project(source.GetPointGrab())
	}
	if wholeMapboxAccepted == false && len(mapboxMask.Paths) > 0 {
		result.Mapbox = mapboxMask.Project(source.GetMapbox())
	}
	return result
}

func (fieldMask *Floor_VendorSpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorSpec))
}

func (fieldMask *Floor_VendorSpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorInfo_FieldMask struct {
	Paths []FloorVendorInfo_FieldPath
}

func FullFloor_VendorInfo_FieldMask() *Floor_VendorInfo_FieldMask {
	res := &Floor_VendorInfo_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorInfo_FieldTerminalPath{selector: FloorVendorInfo_FieldPathSelectorPointGrab})
	return res
}

func (fieldMask *Floor_VendorInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorInfo_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorInfo_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorInfo_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorInfo_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorInfo_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorInfo_FieldMask) Subtract(other *Floor_VendorInfo_FieldMask) *Floor_VendorInfo_FieldMask {
	result := &Floor_VendorInfo_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[FloorVendorInfo_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorInfo_FieldPathSelectorPointGrab: &Floor_VendorInfo_PointGrab_FieldMask{},
	}
	mySubMasks := map[FloorVendorInfo_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorInfo_FieldPathSelectorPointGrab: &Floor_VendorInfo_PointGrab_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorInfo_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorInfo_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorInfo_FieldPathSelectorPointGrab:
						mySubMasks[FloorVendorInfo_FieldPathSelectorPointGrab] = FullFloor_VendorInfo_PointGrab_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorInfo_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorInfo_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorInfo_FieldMask) FilterInputFields() *Floor_VendorInfo_FieldMask {
	result := &Floor_VendorInfo_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorInfo_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorInfo_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_FieldMask) AppendPath(path FloorVendorInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorInfo_FieldPath))
}

func (fieldMask *Floor_VendorInfo_FieldMask) GetPaths() []FloorVendorInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorInfo_FieldMask) Set(target, source *Floor_VendorInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorInfo), source.(*Floor_VendorInfo))
}

func (fieldMask *Floor_VendorInfo_FieldMask) Project(source *Floor_VendorInfo) *Floor_VendorInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorInfo{}
	pointGrabMask := &Floor_VendorInfo_PointGrab_FieldMask{}
	wholePointGrabAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorInfo_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorInfo_FieldPathSelectorPointGrab:
				result.PointGrab = source.PointGrab
				wholePointGrabAccepted = true
			}
		case *FloorVendorInfo_FieldSubPath:
			switch tp.selector {
			case FloorVendorInfo_FieldPathSelectorPointGrab:
				pointGrabMask.AppendPath(tp.subPath.(FloorVendorInfoPointGrab_FieldPath))
			}
		}
	}
	if wholePointGrabAccepted == false && len(pointGrabMask.Paths) > 0 {
		result.PointGrab = pointGrabMask.Project(source.GetPointGrab())
	}
	return result
}

func (fieldMask *Floor_VendorInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorInfo))
}

func (fieldMask *Floor_VendorInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorState_FieldMask struct {
	Paths []FloorVendorState_FieldPath
}

func FullFloor_VendorState_FieldMask() *Floor_VendorState_FieldMask {
	res := &Floor_VendorState_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorState_FieldTerminalPath{selector: FloorVendorState_FieldPathSelectorPointGrab})
	return res
}

func (fieldMask *Floor_VendorState_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorState_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorState_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorState_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorState_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorState_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorState_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorState_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorState_FieldMask) Subtract(other *Floor_VendorState_FieldMask) *Floor_VendorState_FieldMask {
	result := &Floor_VendorState_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[FloorVendorState_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorState_FieldPathSelectorPointGrab: &Floor_VendorState_PointGrab_FieldMask{},
	}
	mySubMasks := map[FloorVendorState_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorState_FieldPathSelectorPointGrab: &Floor_VendorState_PointGrab_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorState_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorState_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorState_FieldPathSelectorPointGrab:
						mySubMasks[FloorVendorState_FieldPathSelectorPointGrab] = FullFloor_VendorState_PointGrab_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorState_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorState_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorState_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorState_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorState_FieldMask) FilterInputFields() *Floor_VendorState_FieldMask {
	result := &Floor_VendorState_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorState_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorState_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorState_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorState_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorState_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorState_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_FieldMask) AppendPath(path FloorVendorState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorState_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorState_FieldPath))
}

func (fieldMask *Floor_VendorState_FieldMask) GetPaths() []FloorVendorState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorState_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorState_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorState_FieldMask) Set(target, source *Floor_VendorState) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorState_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorState), source.(*Floor_VendorState))
}

func (fieldMask *Floor_VendorState_FieldMask) Project(source *Floor_VendorState) *Floor_VendorState {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorState{}
	pointGrabMask := &Floor_VendorState_PointGrab_FieldMask{}
	wholePointGrabAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorState_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorState_FieldPathSelectorPointGrab:
				result.PointGrab = source.PointGrab
				wholePointGrabAccepted = true
			}
		case *FloorVendorState_FieldSubPath:
			switch tp.selector {
			case FloorVendorState_FieldPathSelectorPointGrab:
				pointGrabMask.AppendPath(tp.subPath.(FloorVendorStatePointGrab_FieldPath))
			}
		}
	}
	if wholePointGrabAccepted == false && len(pointGrabMask.Paths) > 0 {
		result.PointGrab = pointGrabMask.Project(source.GetPointGrab())
	}
	return result
}

func (fieldMask *Floor_VendorState_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorState))
}

func (fieldMask *Floor_VendorState_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorSpec_PointGrab_FieldMask struct {
	Paths []FloorVendorSpecPointGrab_FieldPath
}

func FullFloor_VendorSpec_PointGrab_FieldMask() *Floor_VendorSpec_PointGrab_FieldMask {
	res := &Floor_VendorSpec_PointGrab_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorSpecPointGrab_FieldTerminalPath{selector: FloorVendorSpecPointGrab_FieldPathSelectorFloorId})
	res.Paths = append(res.Paths, &FloorVendorSpecPointGrab_FieldTerminalPath{selector: FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints})
	return res
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorSpecPointGrab_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorSpecPointGrab_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorSpecPointGrab_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Subtract(other *Floor_VendorSpec_PointGrab_FieldMask) *Floor_VendorSpec_PointGrab_FieldMask {
	result := &Floor_VendorSpec_PointGrab_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[FloorVendorSpecPointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints: &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{},
	}
	mySubMasks := map[FloorVendorSpecPointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints: &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorSpecPointGrab_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorSpecPointGrab_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorSpecPointGrab_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
						mySubMasks[FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints] = FullFloor_VendorSpec_PointGrab_ReferencePoint_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorSpecPointGrab_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorSpecPointGrab_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorSpec_PointGrab_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) FilterInputFields() *Floor_VendorSpec_PointGrab_FieldMask {
	result := &Floor_VendorSpec_PointGrab_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorSpecPointGrab_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorSpecPointGrab_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorSpec_PointGrab_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorSpec_PointGrab_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) AppendPath(path FloorVendorSpecPointGrab_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorSpecPointGrab_FieldPath))
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) GetPaths() []FloorVendorSpecPointGrab_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorSpecPointGrab_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Set(target, source *Floor_VendorSpec_PointGrab) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorSpec_PointGrab), source.(*Floor_VendorSpec_PointGrab))
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) Project(source *Floor_VendorSpec_PointGrab) *Floor_VendorSpec_PointGrab {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorSpec_PointGrab{}
	referencePointsMask := &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{}
	wholeReferencePointsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorSpecPointGrab_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
				result.FloorId = source.FloorId
			case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
				result.ReferencePoints = source.ReferencePoints
				wholeReferencePointsAccepted = true
			}
		case *FloorVendorSpecPointGrab_FieldSubPath:
			switch tp.selector {
			case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
				referencePointsMask.AppendPath(tp.subPath.(FloorVendorSpecPointGrabReferencePoint_FieldPath))
			}
		}
	}
	if wholeReferencePointsAccepted == false && len(referencePointsMask.Paths) > 0 {
		for _, sourceItem := range source.GetReferencePoints() {
			result.ReferencePoints = append(result.ReferencePoints, referencePointsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorSpec_PointGrab))
}

func (fieldMask *Floor_VendorSpec_PointGrab_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorSpec_Mapbox_FieldMask struct {
	Paths []FloorVendorSpecMapbox_FieldPath
}

func FullFloor_VendorSpec_Mapbox_FieldMask() *Floor_VendorSpec_Mapbox_FieldMask {
	res := &Floor_VendorSpec_Mapbox_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorSpecMapbox_FieldTerminalPath{selector: FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId})
	res.Paths = append(res.Paths, &FloorVendorSpecMapbox_FieldTerminalPath{selector: FloorVendorSpecMapbox_FieldPathSelectorBearing})
	return res
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorSpecMapbox_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorSpecMapbox_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorSpecMapbox_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Subtract(other *Floor_VendorSpec_Mapbox_FieldMask) *Floor_VendorSpec_Mapbox_FieldMask {
	result := &Floor_VendorSpec_Mapbox_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorSpecMapbox_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorSpec_Mapbox_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) FilterInputFields() *Floor_VendorSpec_Mapbox_FieldMask {
	result := &Floor_VendorSpec_Mapbox_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorSpecMapbox_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorSpecMapbox_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorSpec_Mapbox_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorSpec_Mapbox_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) AppendPath(path FloorVendorSpecMapbox_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorSpecMapbox_FieldPath))
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) GetPaths() []FloorVendorSpecMapbox_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorSpecMapbox_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Set(target, source *Floor_VendorSpec_Mapbox) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorSpec_Mapbox), source.(*Floor_VendorSpec_Mapbox))
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) Project(source *Floor_VendorSpec_Mapbox) *Floor_VendorSpec_Mapbox {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorSpec_Mapbox{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorSpecMapbox_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
				result.FloorPlanTilesetId = source.FloorPlanTilesetId
			case FloorVendorSpecMapbox_FieldPathSelectorBearing:
				result.Bearing = source.Bearing
			}
		}
	}
	return result
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorSpec_Mapbox))
}

func (fieldMask *Floor_VendorSpec_Mapbox_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask struct {
	Paths []FloorVendorSpecPointGrabReferencePoint_FieldPath
}

func FullFloor_VendorSpec_PointGrab_ReferencePoint_FieldMask() *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask {
	res := &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath{selector: FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng})
	res.Paths = append(res.Paths, &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath{selector: FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy})
	return res
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Subtract(other *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask {
	result := &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[FloorVendorSpecPointGrabReferencePoint_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy: &workplace_common.Point_FieldMask{},
	}
	mySubMasks := map[FloorVendorSpecPointGrabReferencePoint_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy: &workplace_common.Point_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorSpecPointGrabReferencePoint_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
						mySubMasks[FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy] = workplace_common.FullPoint_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorSpecPointGrabReferencePoint_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorSpecPointGrabReferencePoint_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) FilterInputFields() *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask {
	result := &Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorSpecPointGrabReferencePoint_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) AppendPath(path FloorVendorSpecPointGrabReferencePoint_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorSpecPointGrabReferencePoint_FieldPath))
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) GetPaths() []FloorVendorSpecPointGrabReferencePoint_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Set(target, source *Floor_VendorSpec_PointGrab_ReferencePoint) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorSpec_PointGrab_ReferencePoint), source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) Project(source *Floor_VendorSpec_PointGrab_ReferencePoint) *Floor_VendorSpec_PointGrab_ReferencePoint {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorSpec_PointGrab_ReferencePoint{}
	xyMask := &workplace_common.Point_FieldMask{}
	wholeXyAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
				result.LatLng = source.LatLng
			case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
				result.Xy = source.Xy
				wholeXyAccepted = true
			}
		case *FloorVendorSpecPointGrabReferencePoint_FieldSubPath:
			switch tp.selector {
			case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
				xyMask.AppendPath(tp.subPath.(workplace_common.Point_FieldPath))
			}
		}
	}
	if wholeXyAccepted == false && len(xyMask.Paths) > 0 {
		result.Xy = xyMask.Project(source.GetXy())
	}
	return result
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

func (fieldMask *Floor_VendorSpec_PointGrab_ReferencePoint_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorInfo_PointGrab_FieldMask struct {
	Paths []FloorVendorInfoPointGrab_FieldPath
}

func FullFloor_VendorInfo_PointGrab_FieldMask() *Floor_VendorInfo_PointGrab_FieldMask {
	res := &Floor_VendorInfo_PointGrab_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorInfoPointGrab_FieldTerminalPath{selector: FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints})
	return res
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorInfoPointGrab_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorInfoPointGrab_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorInfoPointGrab_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Subtract(other *Floor_VendorInfo_PointGrab_FieldMask) *Floor_VendorInfo_PointGrab_FieldMask {
	result := &Floor_VendorInfo_PointGrab_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[FloorVendorInfoPointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints: &workplace_common.ReferencePoint_FieldMask{},
	}
	mySubMasks := map[FloorVendorInfoPointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints: &workplace_common.ReferencePoint_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorInfoPointGrab_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorInfoPointGrab_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorInfoPointGrab_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
						mySubMasks[FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints] = workplace_common.FullReferencePoint_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorInfoPointGrab_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorInfoPointGrab_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorInfo_PointGrab_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) FilterInputFields() *Floor_VendorInfo_PointGrab_FieldMask {
	result := &Floor_VendorInfo_PointGrab_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorInfoPointGrab_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorInfoPointGrab_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorInfo_PointGrab_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorInfo_PointGrab_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) AppendPath(path FloorVendorInfoPointGrab_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorInfoPointGrab_FieldPath))
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) GetPaths() []FloorVendorInfoPointGrab_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorInfoPointGrab_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Set(target, source *Floor_VendorInfo_PointGrab) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorInfo_PointGrab), source.(*Floor_VendorInfo_PointGrab))
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) Project(source *Floor_VendorInfo_PointGrab) *Floor_VendorInfo_PointGrab {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorInfo_PointGrab{}
	referencePointsMask := &workplace_common.ReferencePoint_FieldMask{}
	wholeReferencePointsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorInfoPointGrab_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
				result.ReferencePoints = source.ReferencePoints
				wholeReferencePointsAccepted = true
			}
		case *FloorVendorInfoPointGrab_FieldSubPath:
			switch tp.selector {
			case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
				referencePointsMask.AppendPath(tp.subPath.(workplace_common.ReferencePoint_FieldPath))
			}
		}
	}
	if wholeReferencePointsAccepted == false && len(referencePointsMask.Paths) > 0 {
		for _, sourceItem := range source.GetReferencePoints() {
			result.ReferencePoints = append(result.ReferencePoints, referencePointsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorInfo_PointGrab))
}

func (fieldMask *Floor_VendorInfo_PointGrab_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorState_PointGrab_FieldMask struct {
	Paths []FloorVendorStatePointGrab_FieldPath
}

func FullFloor_VendorState_PointGrab_FieldMask() *Floor_VendorState_PointGrab_FieldMask {
	res := &Floor_VendorState_PointGrab_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorStatePointGrab_FieldTerminalPath{selector: FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions})
	return res
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorState_PointGrab_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorStatePointGrab_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorStatePointGrab_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorStatePointGrab_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Subtract(other *Floor_VendorState_PointGrab_FieldMask) *Floor_VendorState_PointGrab_FieldMask {
	result := &Floor_VendorState_PointGrab_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[FloorVendorStatePointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions: &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{},
	}
	mySubMasks := map[FloorVendorStatePointGrab_FieldPathSelector]gotenobject.FieldMask{
		FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions: &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorStatePointGrab_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *FloorVendorStatePointGrab_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*FloorVendorStatePointGrab_FieldTerminalPath); ok {
					switch tp.selector {
					case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
						mySubMasks[FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions] = FullFloor_VendorState_PointGrab_PeoplePositions_FieldMask()
					}
				} else if tp, ok := path.(*FloorVendorStatePointGrab_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &FloorVendorStatePointGrab_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorState_PointGrab_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorState_PointGrab_FieldMask) FilterInputFields() *Floor_VendorState_PointGrab_FieldMask {
	result := &Floor_VendorState_PointGrab_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorState_PointGrab_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorStatePointGrab_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorStatePointGrab_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorState_PointGrab_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorState_PointGrab_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) AppendPath(path FloorVendorStatePointGrab_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorStatePointGrab_FieldPath))
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) GetPaths() []FloorVendorStatePointGrab_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorStatePointGrab_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Set(target, source *Floor_VendorState_PointGrab) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorState_PointGrab), source.(*Floor_VendorState_PointGrab))
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) Project(source *Floor_VendorState_PointGrab) *Floor_VendorState_PointGrab {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorState_PointGrab{}
	peoplePositionsMask := &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{}
	wholePeoplePositionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorStatePointGrab_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
				result.PeoplePositions = source.PeoplePositions
				wholePeoplePositionsAccepted = true
			}
		case *FloorVendorStatePointGrab_FieldSubPath:
			switch tp.selector {
			case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
				peoplePositionsMask.AppendPath(tp.subPath.(FloorVendorStatePointGrabPeoplePositions_FieldPath))
			}
		}
	}
	if wholePeoplePositionsAccepted == false && len(peoplePositionsMask.Paths) > 0 {
		result.PeoplePositions = peoplePositionsMask.Project(source.GetPeoplePositions())
	}
	return result
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorState_PointGrab))
}

func (fieldMask *Floor_VendorState_PointGrab_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Floor_VendorState_PointGrab_PeoplePositions_FieldMask struct {
	Paths []FloorVendorStatePointGrabPeoplePositions_FieldPath
}

func FullFloor_VendorState_PointGrab_PeoplePositions_FieldMask() *Floor_VendorState_PointGrab_PeoplePositions_FieldMask {
	res := &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{}
	res.Paths = append(res.Paths, &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath{selector: FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates})
	res.Paths = append(res.Paths, &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath{selector: FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp})
	return res
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(raw)
	})
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) ProtoMessage() {}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Subtract(other *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) *Floor_VendorState_PointGrab_PeoplePositions_FieldMask {
	result := &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Floor_VendorState_PointGrab_PeoplePositions_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) FilterInputFields() *Floor_VendorState_PointGrab_PeoplePositions_FieldMask {
	result := &Floor_VendorState_PointGrab_PeoplePositions_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]FloorVendorStatePointGrabPeoplePositions_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Floor_VendorState_PointGrab_PeoplePositions_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) AppendPath(path FloorVendorStatePointGrabPeoplePositions_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(FloorVendorStatePointGrabPeoplePositions_FieldPath))
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) GetPaths() []FloorVendorStatePointGrabPeoplePositions_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Set(target, source *Floor_VendorState_PointGrab_PeoplePositions) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Floor_VendorState_PointGrab_PeoplePositions), source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) Project(source *Floor_VendorState_PointGrab_PeoplePositions) *Floor_VendorState_PointGrab_PeoplePositions {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Floor_VendorState_PointGrab_PeoplePositions{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath:
			switch tp.selector {
			case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
				result.Coordinates = source.Coordinates
			case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
				result.LastReportTimestamp = source.LastReportTimestamp
			}
		}
	}
	return result
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

func (fieldMask *Floor_VendorState_PointGrab_PeoplePositions_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
