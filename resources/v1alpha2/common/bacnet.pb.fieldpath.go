// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/bacnet.proto
// DO NOT EDIT!!!

package workplace_common

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BACNetEntity_FieldPath interface {
	gotenobject.FieldPath
	Selector() BACNetEntity_FieldPathSelector
	Get(source *BACNetEntity) []interface{}
	GetSingle(source *BACNetEntity) (interface{}, bool)
	ClearValue(item *BACNetEntity)

	// Those methods build corresponding BACNetEntity_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BACNetEntity_FieldPathValue
	WithIArrayOfValues(values interface{}) BACNetEntity_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BACNetEntity_FieldPathArrayItemValue
}

type BACNetEntity_FieldPathSelector int32

const (
	BACNetEntity_FieldPathSelectorObjectType     BACNetEntity_FieldPathSelector = 0
	BACNetEntity_FieldPathSelectorPropertyType   BACNetEntity_FieldPathSelector = 1
	BACNetEntity_FieldPathSelectorName           BACNetEntity_FieldPathSelector = 2
	BACNetEntity_FieldPathSelectorUuid           BACNetEntity_FieldPathSelector = 3
	BACNetEntity_FieldPathSelectorUri            BACNetEntity_FieldPathSelector = 4
	BACNetEntity_FieldPathSelectorObjectId       BACNetEntity_FieldPathSelector = 5
	BACNetEntity_FieldPathSelectorUpdateInterval BACNetEntity_FieldPathSelector = 6
	BACNetEntity_FieldPathSelectorProtoUrl       BACNetEntity_FieldPathSelector = 7
	BACNetEntity_FieldPathSelectorEnumValues     BACNetEntity_FieldPathSelector = 8
	BACNetEntity_FieldPathSelectorStringTags     BACNetEntity_FieldPathSelector = 9
	BACNetEntity_FieldPathSelectorMarkerTags     BACNetEntity_FieldPathSelector = 10
)

func (s BACNetEntity_FieldPathSelector) String() string {
	switch s {
	case BACNetEntity_FieldPathSelectorObjectType:
		return "object_type"
	case BACNetEntity_FieldPathSelectorPropertyType:
		return "property_type"
	case BACNetEntity_FieldPathSelectorName:
		return "name"
	case BACNetEntity_FieldPathSelectorUuid:
		return "uuid"
	case BACNetEntity_FieldPathSelectorUri:
		return "uri"
	case BACNetEntity_FieldPathSelectorObjectId:
		return "object_id"
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		return "update_interval"
	case BACNetEntity_FieldPathSelectorProtoUrl:
		return "proto_url"
	case BACNetEntity_FieldPathSelectorEnumValues:
		return "enum_values"
	case BACNetEntity_FieldPathSelectorStringTags:
		return "string_tags"
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return "marker_tags"
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", s))
	}
}

func BuildBACNetEntity_FieldPath(fp gotenobject.RawFieldPath) (BACNetEntity_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BACNetEntity")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "object_type", "objectType", "object-type":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorObjectType}, nil
		case "property_type", "propertyType", "property-type":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorPropertyType}, nil
		case "name":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorName}, nil
		case "uuid":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorUuid}, nil
		case "uri":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorUri}, nil
		case "object_id", "objectId", "object-id":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorObjectId}, nil
		case "update_interval", "updateInterval", "update-interval":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorUpdateInterval}, nil
		case "proto_url", "protoUrl", "proto-url":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorProtoUrl}, nil
		case "enum_values", "enumValues", "enum-values":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorEnumValues}, nil
		case "string_tags", "stringTags", "string-tags":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorStringTags}, nil
		case "marker_tags", "markerTags", "marker-tags":
			return &BACNetEntity_FieldTerminalPath{selector: BACNetEntity_FieldPathSelectorMarkerTags}, nil
		}
	} else {
		switch fp[0] {
		case "enum_values", "enumValues", "enum-values":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object BACNetEntity)", fp)
			}
			return &BACNetEntity_FieldPathMap{selector: BACNetEntity_FieldPathSelectorEnumValues, key: fp[1]}, nil
		case "string_tags", "stringTags", "string-tags":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object BACNetEntity)", fp)
			}
			return &BACNetEntity_FieldPathMap{selector: BACNetEntity_FieldPathSelectorStringTags, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BACNetEntity", fp)
}

func ParseBACNetEntity_FieldPath(rawField string) (BACNetEntity_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBACNetEntity_FieldPath(fp)
}

func MustParseBACNetEntity_FieldPath(rawField string) BACNetEntity_FieldPath {
	fp, err := ParseBACNetEntity_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BACNetEntity_FieldTerminalPath struct {
	selector BACNetEntity_FieldPathSelector
}

var _ BACNetEntity_FieldPath = (*BACNetEntity_FieldTerminalPath)(nil)

func (fp *BACNetEntity_FieldTerminalPath) Selector() BACNetEntity_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BACNetEntity_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BACNetEntity_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BACNetEntity
func (fp *BACNetEntity_FieldTerminalPath) Get(source *BACNetEntity) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BACNetEntity_FieldPathSelectorObjectType:
			values = append(values, source.ObjectType)
		case BACNetEntity_FieldPathSelectorPropertyType:
			values = append(values, source.PropertyType)
		case BACNetEntity_FieldPathSelectorName:
			values = append(values, source.Name)
		case BACNetEntity_FieldPathSelectorUuid:
			values = append(values, source.Uuid)
		case BACNetEntity_FieldPathSelectorUri:
			values = append(values, source.Uri)
		case BACNetEntity_FieldPathSelectorObjectId:
			values = append(values, source.ObjectId)
		case BACNetEntity_FieldPathSelectorUpdateInterval:
			if source.UpdateInterval != nil {
				values = append(values, source.UpdateInterval)
			}
		case BACNetEntity_FieldPathSelectorProtoUrl:
			values = append(values, source.ProtoUrl)
		case BACNetEntity_FieldPathSelectorEnumValues:
			values = append(values, source.EnumValues)
		case BACNetEntity_FieldPathSelectorStringTags:
			values = append(values, source.StringTags)
		case BACNetEntity_FieldPathSelectorMarkerTags:
			for _, value := range source.GetMarkerTags() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
		}
	}
	return
}

func (fp *BACNetEntity_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BACNetEntity))
}

// GetSingle returns value pointed by specific field of from source BACNetEntity
func (fp *BACNetEntity_FieldTerminalPath) GetSingle(source *BACNetEntity) (interface{}, bool) {
	switch fp.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		return source.GetObjectType(), source != nil
	case BACNetEntity_FieldPathSelectorPropertyType:
		return source.GetPropertyType(), source != nil
	case BACNetEntity_FieldPathSelectorName:
		return source.GetName(), source != nil
	case BACNetEntity_FieldPathSelectorUuid:
		return source.GetUuid(), source != nil
	case BACNetEntity_FieldPathSelectorUri:
		return source.GetUri(), source != nil
	case BACNetEntity_FieldPathSelectorObjectId:
		return source.GetObjectId(), source != nil
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		res := source.GetUpdateInterval()
		return res, res != nil
	case BACNetEntity_FieldPathSelectorProtoUrl:
		return source.GetProtoUrl(), source != nil
	case BACNetEntity_FieldPathSelectorEnumValues:
		res := source.GetEnumValues()
		return res, res != nil
	case BACNetEntity_FieldPathSelectorStringTags:
		res := source.GetStringTags()
		return res, res != nil
	case BACNetEntity_FieldPathSelectorMarkerTags:
		res := source.GetMarkerTags()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
	}
}

func (fp *BACNetEntity_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BACNetEntity))
}

// GetDefault returns a default value of the field type
func (fp *BACNetEntity_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		return ""
	case BACNetEntity_FieldPathSelectorPropertyType:
		return ""
	case BACNetEntity_FieldPathSelectorName:
		return ""
	case BACNetEntity_FieldPathSelectorUuid:
		return ""
	case BACNetEntity_FieldPathSelectorUri:
		return ""
	case BACNetEntity_FieldPathSelectorObjectId:
		return int64(0)
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		return (*duration.Duration)(nil)
	case BACNetEntity_FieldPathSelectorProtoUrl:
		return ""
	case BACNetEntity_FieldPathSelectorEnumValues:
		return (map[string]string)(nil)
	case BACNetEntity_FieldPathSelectorStringTags:
		return (map[string]string)(nil)
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
	}
}

func (fp *BACNetEntity_FieldTerminalPath) ClearValue(item *BACNetEntity) {
	if item != nil {
		switch fp.selector {
		case BACNetEntity_FieldPathSelectorObjectType:
			item.ObjectType = ""
		case BACNetEntity_FieldPathSelectorPropertyType:
			item.PropertyType = ""
		case BACNetEntity_FieldPathSelectorName:
			item.Name = ""
		case BACNetEntity_FieldPathSelectorUuid:
			item.Uuid = ""
		case BACNetEntity_FieldPathSelectorUri:
			item.Uri = ""
		case BACNetEntity_FieldPathSelectorObjectId:
			item.ObjectId = int64(0)
		case BACNetEntity_FieldPathSelectorUpdateInterval:
			item.UpdateInterval = nil
		case BACNetEntity_FieldPathSelectorProtoUrl:
			item.ProtoUrl = ""
		case BACNetEntity_FieldPathSelectorEnumValues:
			item.EnumValues = nil
		case BACNetEntity_FieldPathSelectorStringTags:
			item.StringTags = nil
		case BACNetEntity_FieldPathSelectorMarkerTags:
			item.MarkerTags = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
		}
	}
}

func (fp *BACNetEntity_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BACNetEntity))
}

// IsLeaf - whether field path is holds simple value
func (fp *BACNetEntity_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BACNetEntity_FieldPathSelectorObjectType ||
		fp.selector == BACNetEntity_FieldPathSelectorPropertyType ||
		fp.selector == BACNetEntity_FieldPathSelectorName ||
		fp.selector == BACNetEntity_FieldPathSelectorUuid ||
		fp.selector == BACNetEntity_FieldPathSelectorUri ||
		fp.selector == BACNetEntity_FieldPathSelectorObjectId ||
		fp.selector == BACNetEntity_FieldPathSelectorUpdateInterval ||
		fp.selector == BACNetEntity_FieldPathSelectorProtoUrl ||
		fp.selector == BACNetEntity_FieldPathSelectorEnumValues ||
		fp.selector == BACNetEntity_FieldPathSelectorStringTags ||
		fp.selector == BACNetEntity_FieldPathSelectorMarkerTags
}

func (fp *BACNetEntity_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BACNetEntity_FieldTerminalPath) WithIValue(value interface{}) BACNetEntity_FieldPathValue {
	switch fp.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorPropertyType:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorName:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorUuid:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorUri:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorObjectId:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(int64)}
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case BACNetEntity_FieldPathSelectorProtoUrl:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	case BACNetEntity_FieldPathSelectorEnumValues:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case BACNetEntity_FieldPathSelectorStringTags:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return &BACNetEntity_FieldTerminalPathValue{BACNetEntity_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
	}
}

func (fp *BACNetEntity_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BACNetEntity_FieldTerminalPath) WithIArrayOfValues(values interface{}) BACNetEntity_FieldPathArrayOfValues {
	fpaov := &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp}
	switch fp.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorPropertyType:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorName:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorUuid:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorUri:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorObjectId:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]int64)}
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case BACNetEntity_FieldPathSelectorProtoUrl:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorEnumValues:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case BACNetEntity_FieldPathSelectorStringTags:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return &BACNetEntity_FieldTerminalPathArrayOfValues{BACNetEntity_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
	}
	return fpaov
}

func (fp *BACNetEntity_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BACNetEntity_FieldTerminalPath) WithIArrayItemValue(value interface{}) BACNetEntity_FieldPathArrayItemValue {
	switch fp.selector {
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return &BACNetEntity_FieldTerminalPathArrayItemValue{BACNetEntity_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fp.selector))
	}
}

func (fp *BACNetEntity_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type BACNetEntity_FieldPathMap struct {
	key      string
	selector BACNetEntity_FieldPathSelector
}

var _ BACNetEntity_FieldPath = (*BACNetEntity_FieldPathMap)(nil)

func (fpm *BACNetEntity_FieldPathMap) Selector() BACNetEntity_FieldPathSelector {
	return fpm.selector
}

func (fpm *BACNetEntity_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *BACNetEntity_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *BACNetEntity_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source BACNetEntity
func (fpm *BACNetEntity_FieldPathMap) Get(source *BACNetEntity) (values []interface{}) {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		if value, ok := source.GetEnumValues()[fpm.key]; ok {
			values = append(values, value)
		}
	case BACNetEntity_FieldPathSelectorStringTags:
		if value, ok := source.GetStringTags()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
	return
}

func (fpm *BACNetEntity_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*BACNetEntity))
}

// GetSingle returns value by selected field map key from source BACNetEntity
func (fpm *BACNetEntity_FieldPathMap) GetSingle(source *BACNetEntity) (interface{}, bool) {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		res, ok := source.GetEnumValues()[fpm.key]
		return res, ok
	case BACNetEntity_FieldPathSelectorStringTags:
		res, ok := source.GetStringTags()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
}

func (fpm *BACNetEntity_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*BACNetEntity))
}

// GetDefault returns a default value of the field type
func (fpm *BACNetEntity_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		var v string
		return v
	case BACNetEntity_FieldPathSelectorStringTags:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
}

func (fpm *BACNetEntity_FieldPathMap) ClearValue(item *BACNetEntity) {
	if item != nil {
		switch fpm.selector {
		case BACNetEntity_FieldPathSelectorEnumValues:
			delete(item.EnumValues, fpm.key)
		case BACNetEntity_FieldPathSelectorStringTags:
			delete(item.StringTags, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
		}
	}
}

func (fpm *BACNetEntity_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*BACNetEntity))
}

// IsLeaf - whether field path is holds simple value
func (fpm *BACNetEntity_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		return true
	case BACNetEntity_FieldPathSelectorStringTags:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
}

func (fpm *BACNetEntity_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *BACNetEntity_FieldPathMap) WithIValue(value interface{}) BACNetEntity_FieldPathValue {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		return &BACNetEntity_FieldPathMapValue{BACNetEntity_FieldPathMap: *fpm, value: value.(string)}
	case BACNetEntity_FieldPathSelectorStringTags:
		return &BACNetEntity_FieldPathMapValue{BACNetEntity_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
}

func (fpm *BACNetEntity_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *BACNetEntity_FieldPathMap) WithIArrayOfValues(values interface{}) BACNetEntity_FieldPathArrayOfValues {
	switch fpm.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		return &BACNetEntity_FieldPathMapArrayOfValues{BACNetEntity_FieldPathMap: *fpm, values: values.([]string)}
	case BACNetEntity_FieldPathSelectorStringTags:
		return &BACNetEntity_FieldPathMapArrayOfValues{BACNetEntity_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpm.selector))
	}
}

func (fpm *BACNetEntity_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *BACNetEntity_FieldPathMap) WithIArrayItemValue(value interface{}) BACNetEntity_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *BACNetEntity_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// BACNetEntity_FieldPathValue allows storing values for BACNetEntity fields according to their type
type BACNetEntity_FieldPathValue interface {
	BACNetEntity_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BACNetEntity)
	CompareWith(*BACNetEntity) (cmp int, comparable bool)
}

func ParseBACNetEntity_FieldPathValue(pathStr, valueStr string) (BACNetEntity_FieldPathValue, error) {
	fp, err := ParseBACNetEntity_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BACNetEntity field path value from %s: %v", valueStr, err)
	}
	return fpv.(BACNetEntity_FieldPathValue), nil
}

func MustParseBACNetEntity_FieldPathValue(pathStr, valueStr string) BACNetEntity_FieldPathValue {
	fpv, err := ParseBACNetEntity_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BACNetEntity_FieldTerminalPathValue struct {
	BACNetEntity_FieldTerminalPath
	value interface{}
}

var _ BACNetEntity_FieldPathValue = (*BACNetEntity_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BACNetEntity' as interface{}
func (fpv *BACNetEntity_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsObjectTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsPropertyTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsUuidValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsUriValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsObjectIdValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsUpdateIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsProtoUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsEnumValuesValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsStringTagsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *BACNetEntity_FieldTerminalPathValue) AsMarkerTagsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object BACNetEntity
func (fpv *BACNetEntity_FieldTerminalPathValue) SetTo(target **BACNetEntity) {
	if *target == nil {
		*target = new(BACNetEntity)
	}
	switch fpv.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		(*target).ObjectType = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorPropertyType:
		(*target).PropertyType = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorUuid:
		(*target).Uuid = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorUri:
		(*target).Uri = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorObjectId:
		(*target).ObjectId = fpv.value.(int64)
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		(*target).UpdateInterval = fpv.value.(*duration.Duration)
	case BACNetEntity_FieldPathSelectorProtoUrl:
		(*target).ProtoUrl = fpv.value.(string)
	case BACNetEntity_FieldPathSelectorEnumValues:
		(*target).EnumValues = fpv.value.(map[string]string)
	case BACNetEntity_FieldPathSelectorStringTags:
		(*target).StringTags = fpv.value.(map[string]string)
	case BACNetEntity_FieldPathSelectorMarkerTags:
		(*target).MarkerTags = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpv.selector))
	}
}

func (fpv *BACNetEntity_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BACNetEntity)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BACNetEntity_FieldTerminalPathValue' with the value under path in 'BACNetEntity'.
func (fpv *BACNetEntity_FieldTerminalPathValue) CompareWith(source *BACNetEntity) (int, bool) {
	switch fpv.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		leftValue := fpv.value.(string)
		rightValue := source.GetObjectType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorPropertyType:
		leftValue := fpv.value.(string)
		rightValue := source.GetPropertyType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorUuid:
		leftValue := fpv.value.(string)
		rightValue := source.GetUuid()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorUri:
		leftValue := fpv.value.(string)
		rightValue := source.GetUri()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorObjectId:
		leftValue := fpv.value.(int64)
		rightValue := source.GetObjectId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetUpdateInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorProtoUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetProtoUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorEnumValues:
		return 0, false
	case BACNetEntity_FieldPathSelectorStringTags:
		return 0, false
	case BACNetEntity_FieldPathSelectorMarkerTags:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpv.selector))
	}
}

func (fpv *BACNetEntity_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BACNetEntity))
}

type BACNetEntity_FieldPathMapValue struct {
	BACNetEntity_FieldPathMap
	value interface{}
}

var _ BACNetEntity_FieldPathValue = (*BACNetEntity_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in BACNetEntity as interface{}
func (fpmv *BACNetEntity_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *BACNetEntity_FieldPathMapValue) AsEnumValuesElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}
func (fpmv *BACNetEntity_FieldPathMapValue) AsStringTagsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in BACNetEntity
func (fpmv *BACNetEntity_FieldPathMapValue) SetTo(target **BACNetEntity) {
	if *target == nil {
		*target = new(BACNetEntity)
	}
	switch fpmv.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		if (*target).EnumValues == nil {
			(*target).EnumValues = make(map[string]string)
		}
		(*target).EnumValues[fpmv.key] = fpmv.value.(string)
	case BACNetEntity_FieldPathSelectorStringTags:
		if (*target).StringTags == nil {
			(*target).StringTags = make(map[string]string)
		}
		(*target).StringTags[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpmv.selector))
	}
}

func (fpmv *BACNetEntity_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BACNetEntity)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BACNetEntity_FieldPathMapValue' with the value under path in 'BACNetEntity'.
func (fpmv *BACNetEntity_FieldPathMapValue) CompareWith(source *BACNetEntity) (int, bool) {
	switch fpmv.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		leftValue := fpmv.value.(string)
		rightValue := source.GetEnumValues()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BACNetEntity_FieldPathSelectorStringTags:
		leftValue := fpmv.value.(string)
		rightValue := source.GetStringTags()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BACNetEntity: %d", fpmv.selector))
	}
}

func (fpmv *BACNetEntity_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*BACNetEntity))
}

// BACNetEntity_FieldPathArrayItemValue allows storing single item in Path-specific values for BACNetEntity according to their type
// Present only for array (repeated) types.
type BACNetEntity_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BACNetEntity_FieldPath
	ContainsValue(*BACNetEntity) bool
}

// ParseBACNetEntity_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBACNetEntity_FieldPathArrayItemValue(pathStr, valueStr string) (BACNetEntity_FieldPathArrayItemValue, error) {
	fp, err := ParseBACNetEntity_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BACNetEntity field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BACNetEntity_FieldPathArrayItemValue), nil
}

func MustParseBACNetEntity_FieldPathArrayItemValue(pathStr, valueStr string) BACNetEntity_FieldPathArrayItemValue {
	fpaiv, err := ParseBACNetEntity_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BACNetEntity_FieldTerminalPathArrayItemValue struct {
	BACNetEntity_FieldTerminalPath
	value interface{}
}

var _ BACNetEntity_FieldPathArrayItemValue = (*BACNetEntity_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BACNetEntity as interface{}
func (fpaiv *BACNetEntity_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BACNetEntity_FieldTerminalPathArrayItemValue) AsMarkerTagsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *BACNetEntity_FieldTerminalPathArrayItemValue) GetSingle(source *BACNetEntity) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BACNetEntity_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BACNetEntity))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BACNetEntity'
func (fpaiv *BACNetEntity_FieldTerminalPathArrayItemValue) ContainsValue(source *BACNetEntity) bool {
	slice := fpaiv.BACNetEntity_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BACNetEntity_FieldPathArrayOfValues allows storing slice of values for BACNetEntity fields according to their type
type BACNetEntity_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BACNetEntity_FieldPath
}

func ParseBACNetEntity_FieldPathArrayOfValues(pathStr, valuesStr string) (BACNetEntity_FieldPathArrayOfValues, error) {
	fp, err := ParseBACNetEntity_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BACNetEntity field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BACNetEntity_FieldPathArrayOfValues), nil
}

func MustParseBACNetEntity_FieldPathArrayOfValues(pathStr, valuesStr string) BACNetEntity_FieldPathArrayOfValues {
	fpaov, err := ParseBACNetEntity_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BACNetEntity_FieldTerminalPathArrayOfValues struct {
	BACNetEntity_FieldTerminalPath
	values interface{}
}

var _ BACNetEntity_FieldPathArrayOfValues = (*BACNetEntity_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BACNetEntity_FieldPathSelectorObjectType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorPropertyType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorUuid:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorUri:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorObjectId:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorUpdateInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorProtoUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorEnumValues:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorStringTags:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorMarkerTags:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsObjectTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsPropertyTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsUuidArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsUriArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsObjectIdArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsUpdateIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsProtoUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsEnumValuesArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsStringTagsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *BACNetEntity_FieldTerminalPathArrayOfValues) AsMarkerTagsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type BACNetEntity_FieldPathMapArrayOfValues struct {
	BACNetEntity_FieldPathMap
	values interface{}
}

var _ BACNetEntity_FieldPathArrayOfValues = (*BACNetEntity_FieldPathMapArrayOfValues)(nil)

func (fpmaov *BACNetEntity_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case BACNetEntity_FieldPathSelectorEnumValues:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	case BACNetEntity_FieldPathSelectorStringTags:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *BACNetEntity_FieldPathMapArrayOfValues) AsEnumValuesArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
func (fpmaov *BACNetEntity_FieldPathMapArrayOfValues) AsStringTagsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
