// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/zone.proto
// DO NOT EDIT!!!

package zone

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
	_ = &floor.Floor{}
	_ = &site.Site{}
)

type Zone_FieldMask struct {
	Paths []Zone_FieldPath
}

func FullZone_FieldMask() *Zone_FieldMask {
	res := &Zone_FieldMask{}
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorType})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorGeometry})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorVendorSpec})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorState})
	res.Paths = append(res.Paths, &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorMetadata})
	return res
}

func (fieldMask *Zone_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Zone_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Zone_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseZone_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Zone_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Zone_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Zone_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseZone_FieldPath(raw)
	})
}

func (fieldMask *Zone_FieldMask) ProtoMessage() {}

func (fieldMask *Zone_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Zone_FieldMask) Subtract(other *Zone_FieldMask) *Zone_FieldMask {
	result := &Zone_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[Zone_FieldPathSelector]gotenobject.FieldMask{
		Zone_FieldPathSelectorGeometry:   &workplace_common.Geometry_FieldMask{},
		Zone_FieldPathSelectorVendorSpec: &Zone_VendorSpec_FieldMask{},
		Zone_FieldPathSelectorState:      &Zone_State_FieldMask{},
		Zone_FieldPathSelectorMetadata:   &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[Zone_FieldPathSelector]gotenobject.FieldMask{
		Zone_FieldPathSelectorGeometry:   &workplace_common.Geometry_FieldMask{},
		Zone_FieldPathSelectorVendorSpec: &Zone_VendorSpec_FieldMask{},
		Zone_FieldPathSelectorState:      &Zone_State_FieldMask{},
		Zone_FieldPathSelectorMetadata:   &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Zone_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Zone_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Zone_FieldTerminalPath); ok {
					switch tp.selector {
					case Zone_FieldPathSelectorGeometry:
						mySubMasks[Zone_FieldPathSelectorGeometry] = workplace_common.FullGeometry_FieldMask()
					case Zone_FieldPathSelectorVendorSpec:
						mySubMasks[Zone_FieldPathSelectorVendorSpec] = FullZone_VendorSpec_FieldMask()
					case Zone_FieldPathSelectorState:
						mySubMasks[Zone_FieldPathSelectorState] = FullZone_State_FieldMask()
					case Zone_FieldPathSelectorMetadata:
						mySubMasks[Zone_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*Zone_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Zone_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Zone_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Zone_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Zone_FieldMask) FilterInputFields() *Zone_FieldMask {
	result := &Zone_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Zone_FieldPathSelectorMetadata:
			if _, ok := path.(*Zone_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Zone_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Zone_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Zone_FieldSubPath{selector: Zone_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Zone_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Zone_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Zone_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseZone_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Zone_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Zone_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Zone_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Zone_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_FieldMask) AppendPath(path Zone_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Zone_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Zone_FieldPath))
}

func (fieldMask *Zone_FieldMask) GetPaths() []Zone_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Zone_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Zone_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseZone_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Zone_FieldMask) Set(target, source *Zone) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Zone_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Zone), source.(*Zone))
}

func (fieldMask *Zone_FieldMask) Project(source *Zone) *Zone {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Zone{}
	geometryMask := &workplace_common.Geometry_FieldMask{}
	wholeGeometryAccepted := false
	vendorSpecMask := &Zone_VendorSpec_FieldMask{}
	wholeVendorSpecAccepted := false
	stateMask := &Zone_State_FieldMask{}
	wholeStateAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Zone_FieldTerminalPath:
			switch tp.selector {
			case Zone_FieldPathSelectorName:
				result.Name = source.Name
			case Zone_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Zone_FieldPathSelectorType:
				result.Type = source.Type
			case Zone_FieldPathSelectorGeometry:
				result.Geometry = source.Geometry
				wholeGeometryAccepted = true
			case Zone_FieldPathSelectorVendorSpec:
				result.VendorSpec = source.VendorSpec
				wholeVendorSpecAccepted = true
			case Zone_FieldPathSelectorState:
				result.State = source.State
				wholeStateAccepted = true
			case Zone_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			}
		case *Zone_FieldSubPath:
			switch tp.selector {
			case Zone_FieldPathSelectorGeometry:
				geometryMask.AppendPath(tp.subPath.(workplace_common.Geometry_FieldPath))
			case Zone_FieldPathSelectorVendorSpec:
				vendorSpecMask.AppendPath(tp.subPath.(ZoneVendorSpec_FieldPath))
			case Zone_FieldPathSelectorState:
				stateMask.AppendPath(tp.subPath.(ZoneState_FieldPath))
			case Zone_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeGeometryAccepted == false && len(geometryMask.Paths) > 0 {
		result.Geometry = geometryMask.Project(source.GetGeometry())
	}
	if wholeVendorSpecAccepted == false && len(vendorSpecMask.Paths) > 0 {
		result.VendorSpec = vendorSpecMask.Project(source.GetVendorSpec())
	}
	if wholeStateAccepted == false && len(stateMask.Paths) > 0 {
		result.State = stateMask.Project(source.GetState())
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *Zone_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Zone))
}

func (fieldMask *Zone_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Zone_VendorSpec_FieldMask struct {
	Paths []ZoneVendorSpec_FieldPath
}

func FullZone_VendorSpec_FieldMask() *Zone_VendorSpec_FieldMask {
	res := &Zone_VendorSpec_FieldMask{}
	res.Paths = append(res.Paths, &ZoneVendorSpec_FieldTerminalPath{selector: ZoneVendorSpec_FieldPathSelectorPointGrab})
	return res
}

func (fieldMask *Zone_VendorSpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Zone_VendorSpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Zone_VendorSpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseZoneVendorSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ZoneVendorSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Zone_VendorSpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseZoneVendorSpec_FieldPath(raw)
	})
}

func (fieldMask *Zone_VendorSpec_FieldMask) ProtoMessage() {}

func (fieldMask *Zone_VendorSpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Zone_VendorSpec_FieldMask) Subtract(other *Zone_VendorSpec_FieldMask) *Zone_VendorSpec_FieldMask {
	result := &Zone_VendorSpec_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[ZoneVendorSpec_FieldPathSelector]gotenobject.FieldMask{
		ZoneVendorSpec_FieldPathSelectorPointGrab: &Zone_VendorSpec_PointGrab_FieldMask{},
	}
	mySubMasks := map[ZoneVendorSpec_FieldPathSelector]gotenobject.FieldMask{
		ZoneVendorSpec_FieldPathSelectorPointGrab: &Zone_VendorSpec_PointGrab_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ZoneVendorSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ZoneVendorSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ZoneVendorSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case ZoneVendorSpec_FieldPathSelectorPointGrab:
						mySubMasks[ZoneVendorSpec_FieldPathSelectorPointGrab] = FullZone_VendorSpec_PointGrab_FieldMask()
					}
				} else if tp, ok := path.(*ZoneVendorSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ZoneVendorSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Zone_VendorSpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Zone_VendorSpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Zone_VendorSpec_FieldMask) FilterInputFields() *Zone_VendorSpec_FieldMask {
	result := &Zone_VendorSpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Zone_VendorSpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Zone_VendorSpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ZoneVendorSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseZoneVendorSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Zone_VendorSpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Zone_VendorSpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Zone_VendorSpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Zone_VendorSpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_FieldMask) AppendPath(path ZoneVendorSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Zone_VendorSpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ZoneVendorSpec_FieldPath))
}

func (fieldMask *Zone_VendorSpec_FieldMask) GetPaths() []ZoneVendorSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Zone_VendorSpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Zone_VendorSpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseZoneVendorSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Zone_VendorSpec_FieldMask) Set(target, source *Zone_VendorSpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Zone_VendorSpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Zone_VendorSpec), source.(*Zone_VendorSpec))
}

func (fieldMask *Zone_VendorSpec_FieldMask) Project(source *Zone_VendorSpec) *Zone_VendorSpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Zone_VendorSpec{}
	pointGrabMask := &Zone_VendorSpec_PointGrab_FieldMask{}
	wholePointGrabAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ZoneVendorSpec_FieldTerminalPath:
			switch tp.selector {
			case ZoneVendorSpec_FieldPathSelectorPointGrab:
				result.PointGrab = source.PointGrab
				wholePointGrabAccepted = true
			}
		case *ZoneVendorSpec_FieldSubPath:
			switch tp.selector {
			case ZoneVendorSpec_FieldPathSelectorPointGrab:
				pointGrabMask.AppendPath(tp.subPath.(ZoneVendorSpecPointGrab_FieldPath))
			}
		}
	}
	if wholePointGrabAccepted == false && len(pointGrabMask.Paths) > 0 {
		result.PointGrab = pointGrabMask.Project(source.GetPointGrab())
	}
	return result
}

func (fieldMask *Zone_VendorSpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Zone_VendorSpec))
}

func (fieldMask *Zone_VendorSpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Zone_State_FieldMask struct {
	Paths []ZoneState_FieldPath
}

func FullZone_State_FieldMask() *Zone_State_FieldMask {
	res := &Zone_State_FieldMask{}
	res.Paths = append(res.Paths, &ZoneState_FieldTerminalPath{selector: ZoneState_FieldPathSelectorOccupancy})
	return res
}

func (fieldMask *Zone_State_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Zone_State_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Zone_State_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseZoneState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Zone_State_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ZoneState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Zone_State_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseZoneState_FieldPath(raw)
	})
}

func (fieldMask *Zone_State_FieldMask) ProtoMessage() {}

func (fieldMask *Zone_State_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Zone_State_FieldMask) Subtract(other *Zone_State_FieldMask) *Zone_State_FieldMask {
	result := &Zone_State_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[ZoneState_FieldPathSelector]gotenobject.FieldMask{
		ZoneState_FieldPathSelectorOccupancy: &Zone_State_Occupancy_FieldMask{},
	}
	mySubMasks := map[ZoneState_FieldPathSelector]gotenobject.FieldMask{
		ZoneState_FieldPathSelectorOccupancy: &Zone_State_Occupancy_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ZoneState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ZoneState_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ZoneState_FieldTerminalPath); ok {
					switch tp.selector {
					case ZoneState_FieldPathSelectorOccupancy:
						mySubMasks[ZoneState_FieldPathSelectorOccupancy] = FullZone_State_Occupancy_FieldMask()
					}
				} else if tp, ok := path.(*ZoneState_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ZoneState_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Zone_State_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Zone_State_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Zone_State_FieldMask) FilterInputFields() *Zone_State_FieldMask {
	result := &Zone_State_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Zone_State_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Zone_State_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ZoneState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseZoneState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Zone_State_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Zone_State_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_State_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Zone_State_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Zone_State_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_State_FieldMask) AppendPath(path ZoneState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Zone_State_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ZoneState_FieldPath))
}

func (fieldMask *Zone_State_FieldMask) GetPaths() []ZoneState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Zone_State_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Zone_State_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseZoneState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Zone_State_FieldMask) Set(target, source *Zone_State) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Zone_State_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Zone_State), source.(*Zone_State))
}

func (fieldMask *Zone_State_FieldMask) Project(source *Zone_State) *Zone_State {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Zone_State{}
	occupancyMask := &Zone_State_Occupancy_FieldMask{}
	wholeOccupancyAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ZoneState_FieldTerminalPath:
			switch tp.selector {
			case ZoneState_FieldPathSelectorOccupancy:
				result.Occupancy = source.Occupancy
				wholeOccupancyAccepted = true
			}
		case *ZoneState_FieldSubPath:
			switch tp.selector {
			case ZoneState_FieldPathSelectorOccupancy:
				occupancyMask.AppendPath(tp.subPath.(ZoneStateOccupancy_FieldPath))
			}
		}
	}
	if wholeOccupancyAccepted == false && len(occupancyMask.Paths) > 0 {
		result.Occupancy = occupancyMask.Project(source.GetOccupancy())
	}
	return result
}

func (fieldMask *Zone_State_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Zone_State))
}

func (fieldMask *Zone_State_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Zone_VendorSpec_PointGrab_FieldMask struct {
	Paths []ZoneVendorSpecPointGrab_FieldPath
}

func FullZone_VendorSpec_PointGrab_FieldMask() *Zone_VendorSpec_PointGrab_FieldMask {
	res := &Zone_VendorSpec_PointGrab_FieldMask{}
	res.Paths = append(res.Paths, &ZoneVendorSpecPointGrab_FieldTerminalPath{selector: ZoneVendorSpecPointGrab_FieldPathSelectorAreaId})
	res.Paths = append(res.Paths, &ZoneVendorSpecPointGrab_FieldTerminalPath{selector: ZoneVendorSpecPointGrab_FieldPathSelectorPolygon})
	return res
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseZoneVendorSpecPointGrab_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ZoneVendorSpecPointGrab_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseZoneVendorSpecPointGrab_FieldPath(raw)
	})
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) ProtoMessage() {}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Subtract(other *Zone_VendorSpec_PointGrab_FieldMask) *Zone_VendorSpec_PointGrab_FieldMask {
	result := &Zone_VendorSpec_PointGrab_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ZoneVendorSpecPointGrab_FieldPathSelector]gotenobject.FieldMask{
		ZoneVendorSpecPointGrab_FieldPathSelectorPolygon: &workplace_common.Polygon_FieldMask{},
	}
	mySubMasks := map[ZoneVendorSpecPointGrab_FieldPathSelector]gotenobject.FieldMask{
		ZoneVendorSpecPointGrab_FieldPathSelectorPolygon: &workplace_common.Polygon_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ZoneVendorSpecPointGrab_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ZoneVendorSpecPointGrab_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ZoneVendorSpecPointGrab_FieldTerminalPath); ok {
					switch tp.selector {
					case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
						mySubMasks[ZoneVendorSpecPointGrab_FieldPathSelectorPolygon] = workplace_common.FullPolygon_FieldMask()
					}
				} else if tp, ok := path.(*ZoneVendorSpecPointGrab_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ZoneVendorSpecPointGrab_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Zone_VendorSpec_PointGrab_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) FilterInputFields() *Zone_VendorSpec_PointGrab_FieldMask {
	result := &Zone_VendorSpec_PointGrab_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ZoneVendorSpecPointGrab_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseZoneVendorSpecPointGrab_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Zone_VendorSpec_PointGrab_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Zone_VendorSpec_PointGrab_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) AppendPath(path ZoneVendorSpecPointGrab_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ZoneVendorSpecPointGrab_FieldPath))
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) GetPaths() []ZoneVendorSpecPointGrab_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseZoneVendorSpecPointGrab_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Set(target, source *Zone_VendorSpec_PointGrab) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Zone_VendorSpec_PointGrab), source.(*Zone_VendorSpec_PointGrab))
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) Project(source *Zone_VendorSpec_PointGrab) *Zone_VendorSpec_PointGrab {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Zone_VendorSpec_PointGrab{}
	polygonMask := &workplace_common.Polygon_FieldMask{}
	wholePolygonAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ZoneVendorSpecPointGrab_FieldTerminalPath:
			switch tp.selector {
			case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
				result.AreaId = source.AreaId
			case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
				result.Polygon = source.Polygon
				wholePolygonAccepted = true
			}
		case *ZoneVendorSpecPointGrab_FieldSubPath:
			switch tp.selector {
			case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
				polygonMask.AppendPath(tp.subPath.(workplace_common.Polygon_FieldPath))
			}
		}
	}
	if wholePolygonAccepted == false && len(polygonMask.Paths) > 0 {
		result.Polygon = polygonMask.Project(source.GetPolygon())
	}
	return result
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Zone_VendorSpec_PointGrab))
}

func (fieldMask *Zone_VendorSpec_PointGrab_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Zone_State_Occupancy_FieldMask struct {
	Paths []ZoneStateOccupancy_FieldPath
}

func FullZone_State_Occupancy_FieldMask() *Zone_State_Occupancy_FieldMask {
	res := &Zone_State_Occupancy_FieldMask{}
	res.Paths = append(res.Paths, &ZoneStateOccupancy_FieldTerminalPath{selector: ZoneStateOccupancy_FieldPathSelectorIsOccupied})
	res.Paths = append(res.Paths, &ZoneStateOccupancy_FieldTerminalPath{selector: ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime})
	return res
}

func (fieldMask *Zone_State_Occupancy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Zone_State_Occupancy_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Zone_State_Occupancy_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseZoneStateOccupancy_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Zone_State_Occupancy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ZoneStateOccupancy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Zone_State_Occupancy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseZoneStateOccupancy_FieldPath(raw)
	})
}

func (fieldMask *Zone_State_Occupancy_FieldMask) ProtoMessage() {}

func (fieldMask *Zone_State_Occupancy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Zone_State_Occupancy_FieldMask) Subtract(other *Zone_State_Occupancy_FieldMask) *Zone_State_Occupancy_FieldMask {
	result := &Zone_State_Occupancy_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ZoneStateOccupancy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Zone_State_Occupancy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Zone_State_Occupancy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Zone_State_Occupancy_FieldMask) FilterInputFields() *Zone_State_Occupancy_FieldMask {
	result := &Zone_State_Occupancy_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Zone_State_Occupancy_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Zone_State_Occupancy_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ZoneStateOccupancy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseZoneStateOccupancy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Zone_State_Occupancy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Zone_State_Occupancy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_State_Occupancy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Zone_State_Occupancy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Zone_State_Occupancy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Zone_State_Occupancy_FieldMask) AppendPath(path ZoneStateOccupancy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Zone_State_Occupancy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ZoneStateOccupancy_FieldPath))
}

func (fieldMask *Zone_State_Occupancy_FieldMask) GetPaths() []ZoneStateOccupancy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Zone_State_Occupancy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Zone_State_Occupancy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseZoneStateOccupancy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Zone_State_Occupancy_FieldMask) Set(target, source *Zone_State_Occupancy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Zone_State_Occupancy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Zone_State_Occupancy), source.(*Zone_State_Occupancy))
}

func (fieldMask *Zone_State_Occupancy_FieldMask) Project(source *Zone_State_Occupancy) *Zone_State_Occupancy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Zone_State_Occupancy{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ZoneStateOccupancy_FieldTerminalPath:
			switch tp.selector {
			case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
				result.IsOccupied = source.IsOccupied
			case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
				result.LastOccupiedTime = source.LastOccupiedTime
			}
		}
	}
	return result
}

func (fieldMask *Zone_State_Occupancy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Zone_State_Occupancy))
}

func (fieldMask *Zone_State_Occupancy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
