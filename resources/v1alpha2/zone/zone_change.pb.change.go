// Code generated by protoc-gen-goten-resource
// Resource change: ZoneChange
// DO NOT EDIT!!!

package zone

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
)

func (c *ZoneChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ZoneChange_Added_)
	return ok
}

func (c *ZoneChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ZoneChange_Modified_)
	return ok
}

func (c *ZoneChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ZoneChange_Current_)
	return ok
}

func (c *ZoneChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ZoneChange_Removed_)
	return ok
}

func (c *ZoneChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ZoneChange_Added_:
		return cType.Added.ViewIndex
	case *ZoneChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *ZoneChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ZoneChange_Removed_:
		return cType.Removed.ViewIndex
	case *ZoneChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *ZoneChange) GetZone() *Zone {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ZoneChange_Added_:
		return cType.Added.Zone
	case *ZoneChange_Modified_:
		return cType.Modified.Zone
	case *ZoneChange_Current_:
		return cType.Current.Zone
	case *ZoneChange_Removed_:
		return nil
	}
	return nil
}

func (c *ZoneChange) GetRawResource() gotenresource.Resource {
	return c.GetZone()
}

func (c *ZoneChange) GetZoneName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ZoneChange_Added_:
		return cType.Added.Zone.GetName()
	case *ZoneChange_Modified_:
		return cType.Modified.Name
	case *ZoneChange_Current_:
		return cType.Current.Zone.GetName()
	case *ZoneChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *ZoneChange) GetRawName() gotenresource.Name {
	return c.GetZoneName()
}

func (c *ZoneChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &ZoneChange_Added_{
		Added: &ZoneChange_Added{
			Zone:      snapshot.(*Zone),
			ViewIndex: int32(idx),
		},
	}
}

func (c *ZoneChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &ZoneChange_Modified_{
		Modified: &ZoneChange_Modified{
			Name:              name.(*Name),
			Zone:              snapshot.(*Zone),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *ZoneChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &ZoneChange_Current_{
		Current: &ZoneChange_Current{
			Zone: snapshot.(*Zone),
		},
	}
}

func (c *ZoneChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &ZoneChange_Removed_{
		Removed: &ZoneChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
