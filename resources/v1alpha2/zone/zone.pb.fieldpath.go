// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/zone.proto
// DO NOT EDIT!!!

package zone

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
	_ = &floor.Floor{}
	_ = &site.Site{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Zone_FieldPath interface {
	gotenobject.FieldPath
	Selector() Zone_FieldPathSelector
	Get(source *Zone) []interface{}
	GetSingle(source *Zone) (interface{}, bool)
	ClearValue(item *Zone)

	// Those methods build corresponding Zone_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Zone_FieldPathValue
	WithIArrayOfValues(values interface{}) Zone_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Zone_FieldPathArrayItemValue
}

type Zone_FieldPathSelector int32

const (
	Zone_FieldPathSelectorName        Zone_FieldPathSelector = 0
	Zone_FieldPathSelectorDisplayName Zone_FieldPathSelector = 1
	Zone_FieldPathSelectorType        Zone_FieldPathSelector = 2
	Zone_FieldPathSelectorGeometry    Zone_FieldPathSelector = 3
	Zone_FieldPathSelectorVendorSpec  Zone_FieldPathSelector = 4
	Zone_FieldPathSelectorState       Zone_FieldPathSelector = 5
	Zone_FieldPathSelectorMetadata    Zone_FieldPathSelector = 6
)

func (s Zone_FieldPathSelector) String() string {
	switch s {
	case Zone_FieldPathSelectorName:
		return "name"
	case Zone_FieldPathSelectorDisplayName:
		return "display_name"
	case Zone_FieldPathSelectorType:
		return "type"
	case Zone_FieldPathSelectorGeometry:
		return "geometry"
	case Zone_FieldPathSelectorVendorSpec:
		return "vendor_spec"
	case Zone_FieldPathSelectorState:
		return "state"
	case Zone_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", s))
	}
}

func BuildZone_FieldPath(fp gotenobject.RawFieldPath) (Zone_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Zone")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorDisplayName}, nil
		case "type":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorType}, nil
		case "geometry":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorGeometry}, nil
		case "vendor_spec", "vendorSpec", "vendor-spec":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorVendorSpec}, nil
		case "state":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorState}, nil
		case "metadata":
			return &Zone_FieldTerminalPath{selector: Zone_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Zone_FieldSubPath{selector: Zone_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "vendor_spec", "vendorSpec", "vendor-spec":
			if subpath, err := BuildZoneVendorSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Zone_FieldSubPath{selector: Zone_FieldPathSelectorVendorSpec, subPath: subpath}, nil
			}
		case "state":
			if subpath, err := BuildZoneState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Zone_FieldSubPath{selector: Zone_FieldPathSelectorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Zone_FieldSubPath{selector: Zone_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Zone", fp)
}

func ParseZone_FieldPath(rawField string) (Zone_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildZone_FieldPath(fp)
}

func MustParseZone_FieldPath(rawField string) Zone_FieldPath {
	fp, err := ParseZone_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Zone_FieldTerminalPath struct {
	selector Zone_FieldPathSelector
}

var _ Zone_FieldPath = (*Zone_FieldTerminalPath)(nil)

func (fp *Zone_FieldTerminalPath) Selector() Zone_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Zone_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Zone_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Zone
func (fp *Zone_FieldTerminalPath) Get(source *Zone) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Zone_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Zone_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Zone_FieldPathSelectorType:
			values = append(values, source.Type)
		case Zone_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Zone_FieldPathSelectorVendorSpec:
			if source.VendorSpec != nil {
				values = append(values, source.VendorSpec)
			}
		case Zone_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case Zone_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
		}
	}
	return
}

func (fp *Zone_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Zone))
}

// GetSingle returns value pointed by specific field of from source Zone
func (fp *Zone_FieldTerminalPath) GetSingle(source *Zone) (interface{}, bool) {
	switch fp.selector {
	case Zone_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Zone_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Zone_FieldPathSelectorType:
		return source.GetType(), source != nil
	case Zone_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Zone_FieldPathSelectorVendorSpec:
		res := source.GetVendorSpec()
		return res, res != nil
	case Zone_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case Zone_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
	}
}

func (fp *Zone_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Zone))
}

// GetDefault returns a default value of the field type
func (fp *Zone_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Zone_FieldPathSelectorName:
		return (*Name)(nil)
	case Zone_FieldPathSelectorDisplayName:
		return ""
	case Zone_FieldPathSelectorType:
		return Zone_TYPE_UNSPECIFIED
	case Zone_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Zone_FieldPathSelectorVendorSpec:
		return (*Zone_VendorSpec)(nil)
	case Zone_FieldPathSelectorState:
		return (*Zone_State)(nil)
	case Zone_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
	}
}

func (fp *Zone_FieldTerminalPath) ClearValue(item *Zone) {
	if item != nil {
		switch fp.selector {
		case Zone_FieldPathSelectorName:
			item.Name = nil
		case Zone_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Zone_FieldPathSelectorType:
			item.Type = Zone_TYPE_UNSPECIFIED
		case Zone_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Zone_FieldPathSelectorVendorSpec:
			item.VendorSpec = nil
		case Zone_FieldPathSelectorState:
			item.State = nil
		case Zone_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
		}
	}
}

func (fp *Zone_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Zone))
}

// IsLeaf - whether field path is holds simple value
func (fp *Zone_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Zone_FieldPathSelectorName ||
		fp.selector == Zone_FieldPathSelectorDisplayName ||
		fp.selector == Zone_FieldPathSelectorType
}

func (fp *Zone_FieldTerminalPath) WithIValue(value interface{}) Zone_FieldPathValue {
	switch fp.selector {
	case Zone_FieldPathSelectorName:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(*Name)}
	case Zone_FieldPathSelectorDisplayName:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(string)}
	case Zone_FieldPathSelectorType:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(Zone_Type)}
	case Zone_FieldPathSelectorGeometry:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Zone_FieldPathSelectorVendorSpec:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(*Zone_VendorSpec)}
	case Zone_FieldPathSelectorState:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(*Zone_State)}
	case Zone_FieldPathSelectorMetadata:
		return &Zone_FieldTerminalPathValue{Zone_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
	}
}

func (fp *Zone_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Zone_FieldTerminalPath) WithIArrayOfValues(values interface{}) Zone_FieldPathArrayOfValues {
	fpaov := &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp}
	switch fp.selector {
	case Zone_FieldPathSelectorName:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Zone_FieldPathSelectorDisplayName:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]string)}
	case Zone_FieldPathSelectorType:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]Zone_Type)}
	case Zone_FieldPathSelectorGeometry:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Zone_FieldPathSelectorVendorSpec:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]*Zone_VendorSpec)}
	case Zone_FieldPathSelectorState:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]*Zone_State)}
	case Zone_FieldPathSelectorMetadata:
		return &Zone_FieldTerminalPathArrayOfValues{Zone_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
	}
	return fpaov
}

func (fp *Zone_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Zone_FieldTerminalPath) WithIArrayItemValue(value interface{}) Zone_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fp.selector))
	}
}

func (fp *Zone_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Zone_FieldSubPath struct {
	selector Zone_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Zone_FieldPath = (*Zone_FieldSubPath)(nil)

func (fps *Zone_FieldSubPath) Selector() Zone_FieldPathSelector {
	return fps.selector
}
func (fps *Zone_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Zone_FieldSubPath) AsVendorSpecSubPath() (ZoneVendorSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ZoneVendorSpec_FieldPath)
	return res, ok
}
func (fps *Zone_FieldSubPath) AsStateSubPath() (ZoneState_FieldPath, bool) {
	res, ok := fps.subPath.(ZoneState_FieldPath)
	return res, ok
}
func (fps *Zone_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Zone_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Zone_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Zone
func (fps *Zone_FieldSubPath) Get(source *Zone) (values []interface{}) {
	if asGeometryFieldPath, ok := fps.AsGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetGeometry())...)
	} else if asVendorSpecFieldPath, ok := fps.AsVendorSpecSubPath(); ok {
		values = append(values, asVendorSpecFieldPath.Get(source.GetVendorSpec())...)
	} else if asStateFieldPath, ok := fps.AsStateSubPath(); ok {
		values = append(values, asStateFieldPath.Get(source.GetState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fps.selector))
	}
	return
}

func (fps *Zone_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Zone))
}

// GetSingle returns value of selected field from source Zone
func (fps *Zone_FieldSubPath) GetSingle(source *Zone) (interface{}, bool) {
	switch fps.selector {
	case Zone_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Zone_FieldPathSelectorVendorSpec:
		if source.GetVendorSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorSpec())
	case Zone_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	case Zone_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fps.selector))
	}
}

func (fps *Zone_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Zone))
}

// GetDefault returns a default value of the field type
func (fps *Zone_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Zone_FieldSubPath) ClearValue(item *Zone) {
	if item != nil {
		switch fps.selector {
		case Zone_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Zone_FieldPathSelectorVendorSpec:
			fps.subPath.ClearValueRaw(item.VendorSpec)
		case Zone_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		case Zone_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Zone: %d", fps.selector))
		}
	}
}

func (fps *Zone_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Zone))
}

// IsLeaf - whether field path is holds simple value
func (fps *Zone_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Zone_FieldSubPath) WithIValue(value interface{}) Zone_FieldPathValue {
	return &Zone_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Zone_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Zone_FieldSubPath) WithIArrayOfValues(values interface{}) Zone_FieldPathArrayOfValues {
	return &Zone_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Zone_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Zone_FieldSubPath) WithIArrayItemValue(value interface{}) Zone_FieldPathArrayItemValue {
	return &Zone_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Zone_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Zone_FieldPathValue allows storing values for Zone fields according to their type
type Zone_FieldPathValue interface {
	Zone_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Zone)
	CompareWith(*Zone) (cmp int, comparable bool)
}

func ParseZone_FieldPathValue(pathStr, valueStr string) (Zone_FieldPathValue, error) {
	fp, err := ParseZone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Zone field path value from %s: %v", valueStr, err)
	}
	return fpv.(Zone_FieldPathValue), nil
}

func MustParseZone_FieldPathValue(pathStr, valueStr string) Zone_FieldPathValue {
	fpv, err := ParseZone_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Zone_FieldTerminalPathValue struct {
	Zone_FieldTerminalPath
	value interface{}
}

var _ Zone_FieldPathValue = (*Zone_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Zone' as interface{}
func (fpv *Zone_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Zone_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsTypeValue() (Zone_Type, bool) {
	res, ok := fpv.value.(Zone_Type)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsVendorSpecValue() (*Zone_VendorSpec, bool) {
	res, ok := fpv.value.(*Zone_VendorSpec)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsStateValue() (*Zone_State, bool) {
	res, ok := fpv.value.(*Zone_State)
	return res, ok
}
func (fpv *Zone_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Zone
func (fpv *Zone_FieldTerminalPathValue) SetTo(target **Zone) {
	if *target == nil {
		*target = new(Zone)
	}
	switch fpv.selector {
	case Zone_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Zone_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Zone_FieldPathSelectorType:
		(*target).Type = fpv.value.(Zone_Type)
	case Zone_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Zone_FieldPathSelectorVendorSpec:
		(*target).VendorSpec = fpv.value.(*Zone_VendorSpec)
	case Zone_FieldPathSelectorState:
		(*target).State = fpv.value.(*Zone_State)
	case Zone_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fpv.selector))
	}
}

func (fpv *Zone_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Zone_FieldTerminalPathValue' with the value under path in 'Zone'.
func (fpv *Zone_FieldTerminalPathValue) CompareWith(source *Zone) (int, bool) {
	switch fpv.selector {
	case Zone_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Zone_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Zone_FieldPathSelectorType:
		leftValue := fpv.value.(Zone_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Zone_FieldPathSelectorGeometry:
		return 0, false
	case Zone_FieldPathSelectorVendorSpec:
		return 0, false
	case Zone_FieldPathSelectorState:
		return 0, false
	case Zone_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fpv.selector))
	}
}

func (fpv *Zone_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Zone))
}

type Zone_FieldSubPathValue struct {
	Zone_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Zone_FieldPathValue = (*Zone_FieldSubPathValue)(nil)

func (fpvs *Zone_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Zone_FieldSubPathValue) AsVendorSpecPathValue() (ZoneVendorSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ZoneVendorSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Zone_FieldSubPathValue) AsStatePathValue() (ZoneState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ZoneState_FieldPathValue)
	return res, ok
}
func (fpvs *Zone_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Zone_FieldSubPathValue) SetTo(target **Zone) {
	if *target == nil {
		*target = new(Zone)
	}
	switch fpvs.Selector() {
	case Zone_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Zone_FieldPathSelectorVendorSpec:
		fpvs.subPathValue.(ZoneVendorSpec_FieldPathValue).SetTo(&(*target).VendorSpec)
	case Zone_FieldPathSelectorState:
		fpvs.subPathValue.(ZoneState_FieldPathValue).SetTo(&(*target).State)
	case Zone_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fpvs.Selector()))
	}
}

func (fpvs *Zone_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Zone_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Zone_FieldSubPathValue) CompareWith(source *Zone) (int, bool) {
	switch fpvs.Selector() {
	case Zone_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Zone_FieldPathSelectorVendorSpec:
		return fpvs.subPathValue.(ZoneVendorSpec_FieldPathValue).CompareWith(source.GetVendorSpec())
	case Zone_FieldPathSelectorState:
		return fpvs.subPathValue.(ZoneState_FieldPathValue).CompareWith(source.GetState())
	case Zone_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fpvs.Selector()))
	}
}

func (fpvs *Zone_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Zone))
}

// Zone_FieldPathArrayItemValue allows storing single item in Path-specific values for Zone according to their type
// Present only for array (repeated) types.
type Zone_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Zone_FieldPath
	ContainsValue(*Zone) bool
}

// ParseZone_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseZone_FieldPathArrayItemValue(pathStr, valueStr string) (Zone_FieldPathArrayItemValue, error) {
	fp, err := ParseZone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Zone field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Zone_FieldPathArrayItemValue), nil
}

func MustParseZone_FieldPathArrayItemValue(pathStr, valueStr string) Zone_FieldPathArrayItemValue {
	fpaiv, err := ParseZone_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Zone_FieldTerminalPathArrayItemValue struct {
	Zone_FieldTerminalPath
	value interface{}
}

var _ Zone_FieldPathArrayItemValue = (*Zone_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Zone as interface{}
func (fpaiv *Zone_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Zone_FieldTerminalPathArrayItemValue) GetSingle(source *Zone) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Zone_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Zone))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Zone'
func (fpaiv *Zone_FieldTerminalPathArrayItemValue) ContainsValue(source *Zone) bool {
	slice := fpaiv.Zone_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Zone_FieldSubPathArrayItemValue struct {
	Zone_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Zone_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Zone_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Zone_FieldSubPathArrayItemValue) AsVendorSpecPathItemValue() (ZoneVendorSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ZoneVendorSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Zone_FieldSubPathArrayItemValue) AsStatePathItemValue() (ZoneState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ZoneState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Zone_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Zone'
func (fpaivs *Zone_FieldSubPathArrayItemValue) ContainsValue(source *Zone) bool {
	switch fpaivs.Selector() {
	case Zone_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Zone_FieldPathSelectorVendorSpec:
		return fpaivs.subPathItemValue.(ZoneVendorSpec_FieldPathArrayItemValue).ContainsValue(source.GetVendorSpec())
	case Zone_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(ZoneState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	case Zone_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone: %d", fpaivs.Selector()))
	}
}

// Zone_FieldPathArrayOfValues allows storing slice of values for Zone fields according to their type
type Zone_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Zone_FieldPath
}

func ParseZone_FieldPathArrayOfValues(pathStr, valuesStr string) (Zone_FieldPathArrayOfValues, error) {
	fp, err := ParseZone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Zone field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Zone_FieldPathArrayOfValues), nil
}

func MustParseZone_FieldPathArrayOfValues(pathStr, valuesStr string) Zone_FieldPathArrayOfValues {
	fpaov, err := ParseZone_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Zone_FieldTerminalPathArrayOfValues struct {
	Zone_FieldTerminalPath
	values interface{}
}

var _ Zone_FieldPathArrayOfValues = (*Zone_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Zone_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Zone_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Zone_Type) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorVendorSpec:
		for _, v := range fpaov.values.([]*Zone_VendorSpec) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*Zone_State) {
			values = append(values, v)
		}
	case Zone_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Zone_Type, bool) {
	res, ok := fpaov.values.([]Zone_Type)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsVendorSpecArrayOfValues() ([]*Zone_VendorSpec, bool) {
	res, ok := fpaov.values.([]*Zone_VendorSpec)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*Zone_State, bool) {
	res, ok := fpaov.values.([]*Zone_State)
	return res, ok
}
func (fpaov *Zone_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Zone_FieldSubPathArrayOfValues struct {
	Zone_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Zone_FieldPathArrayOfValues = (*Zone_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Zone_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Zone_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Zone_FieldSubPathArrayOfValues) AsVendorSpecPathArrayOfValues() (ZoneVendorSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ZoneVendorSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Zone_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (ZoneState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ZoneState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Zone_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ZoneVendorSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ZoneVendorSpec_FieldPathSelector
	Get(source *Zone_VendorSpec) []interface{}
	GetSingle(source *Zone_VendorSpec) (interface{}, bool)
	ClearValue(item *Zone_VendorSpec)

	// Those methods build corresponding ZoneVendorSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ZoneVendorSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ZoneVendorSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ZoneVendorSpec_FieldPathArrayItemValue
}

type ZoneVendorSpec_FieldPathSelector int32

const (
	ZoneVendorSpec_FieldPathSelectorPointGrab ZoneVendorSpec_FieldPathSelector = 0
)

func (s ZoneVendorSpec_FieldPathSelector) String() string {
	switch s {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", s))
	}
}

func BuildZoneVendorSpec_FieldPath(fp gotenobject.RawFieldPath) (ZoneVendorSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Zone_VendorSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &ZoneVendorSpec_FieldTerminalPath{selector: ZoneVendorSpec_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildZoneVendorSpecPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ZoneVendorSpec_FieldSubPath{selector: ZoneVendorSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Zone_VendorSpec", fp)
}

func ParseZoneVendorSpec_FieldPath(rawField string) (ZoneVendorSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildZoneVendorSpec_FieldPath(fp)
}

func MustParseZoneVendorSpec_FieldPath(rawField string) ZoneVendorSpec_FieldPath {
	fp, err := ParseZoneVendorSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ZoneVendorSpec_FieldTerminalPath struct {
	selector ZoneVendorSpec_FieldPathSelector
}

var _ ZoneVendorSpec_FieldPath = (*ZoneVendorSpec_FieldTerminalPath)(nil)

func (fp *ZoneVendorSpec_FieldTerminalPath) Selector() ZoneVendorSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ZoneVendorSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ZoneVendorSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Zone_VendorSpec
func (fp *ZoneVendorSpec_FieldTerminalPath) Get(source *Zone_VendorSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ZoneVendorSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *ZoneVendorSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Zone_VendorSpec))
}

// GetSingle returns value pointed by specific field of from source Zone_VendorSpec
func (fp *ZoneVendorSpec_FieldTerminalPath) GetSingle(source *Zone_VendorSpec) (interface{}, bool) {
	switch fp.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Zone_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fp *ZoneVendorSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return (*Zone_VendorSpec_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpec_FieldTerminalPath) ClearValue(item *Zone_VendorSpec) {
	if item != nil {
		switch fp.selector {
		case ZoneVendorSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
		}
	}
}

func (fp *ZoneVendorSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Zone_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ZoneVendorSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithIValue(value interface{}) ZoneVendorSpec_FieldPathValue {
	switch fp.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return &ZoneVendorSpec_FieldTerminalPathValue{ZoneVendorSpec_FieldTerminalPath: *fp, value: value.(*Zone_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ZoneVendorSpec_FieldPathArrayOfValues {
	fpaov := &ZoneVendorSpec_FieldTerminalPathArrayOfValues{ZoneVendorSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return &ZoneVendorSpec_FieldTerminalPathArrayOfValues{ZoneVendorSpec_FieldTerminalPath: *fp, values: values.([]*Zone_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ZoneVendorSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ZoneVendorSpec_FieldSubPath struct {
	selector ZoneVendorSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ZoneVendorSpec_FieldPath = (*ZoneVendorSpec_FieldSubPath)(nil)

func (fps *ZoneVendorSpec_FieldSubPath) Selector() ZoneVendorSpec_FieldPathSelector {
	return fps.selector
}
func (fps *ZoneVendorSpec_FieldSubPath) AsPointGrabSubPath() (ZoneVendorSpecPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(ZoneVendorSpecPointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ZoneVendorSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ZoneVendorSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Zone_VendorSpec
func (fps *ZoneVendorSpec_FieldSubPath) Get(source *Zone_VendorSpec) (values []interface{}) {
	if asPointGrabFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fps.selector))
	}
	return
}

func (fps *ZoneVendorSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Zone_VendorSpec))
}

// GetSingle returns value of selected field from source Zone_VendorSpec
func (fps *ZoneVendorSpec_FieldSubPath) GetSingle(source *Zone_VendorSpec) (interface{}, bool) {
	switch fps.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fps.selector))
	}
}

func (fps *ZoneVendorSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Zone_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fps *ZoneVendorSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ZoneVendorSpec_FieldSubPath) ClearValue(item *Zone_VendorSpec) {
	if item != nil {
		switch fps.selector {
		case ZoneVendorSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fps.selector))
		}
	}
}

func (fps *ZoneVendorSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Zone_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ZoneVendorSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ZoneVendorSpec_FieldSubPath) WithIValue(value interface{}) ZoneVendorSpec_FieldPathValue {
	return &ZoneVendorSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ZoneVendorSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ZoneVendorSpec_FieldSubPath) WithIArrayOfValues(values interface{}) ZoneVendorSpec_FieldPathArrayOfValues {
	return &ZoneVendorSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ZoneVendorSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ZoneVendorSpec_FieldSubPath) WithIArrayItemValue(value interface{}) ZoneVendorSpec_FieldPathArrayItemValue {
	return &ZoneVendorSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ZoneVendorSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ZoneVendorSpec_FieldPathValue allows storing values for VendorSpec fields according to their type
type ZoneVendorSpec_FieldPathValue interface {
	ZoneVendorSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Zone_VendorSpec)
	CompareWith(*Zone_VendorSpec) (cmp int, comparable bool)
}

func ParseZoneVendorSpec_FieldPathValue(pathStr, valueStr string) (ZoneVendorSpec_FieldPathValue, error) {
	fp, err := ParseZoneVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ZoneVendorSpec_FieldPathValue), nil
}

func MustParseZoneVendorSpec_FieldPathValue(pathStr, valueStr string) ZoneVendorSpec_FieldPathValue {
	fpv, err := ParseZoneVendorSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ZoneVendorSpec_FieldTerminalPathValue struct {
	ZoneVendorSpec_FieldTerminalPath
	value interface{}
}

var _ ZoneVendorSpec_FieldPathValue = (*ZoneVendorSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorSpec' as interface{}
func (fpv *ZoneVendorSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ZoneVendorSpec_FieldTerminalPathValue) AsPointGrabValue() (*Zone_VendorSpec_PointGrab, bool) {
	res, ok := fpv.value.(*Zone_VendorSpec_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorSpec
func (fpv *ZoneVendorSpec_FieldTerminalPathValue) SetTo(target **Zone_VendorSpec) {
	if *target == nil {
		*target = new(Zone_VendorSpec)
	}
	switch fpv.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Zone_VendorSpec_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *ZoneVendorSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_VendorSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ZoneVendorSpec_FieldTerminalPathValue' with the value under path in 'Zone_VendorSpec'.
func (fpv *ZoneVendorSpec_FieldTerminalPathValue) CompareWith(source *Zone_VendorSpec) (int, bool) {
	switch fpv.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *ZoneVendorSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Zone_VendorSpec))
}

type ZoneVendorSpec_FieldSubPathValue struct {
	ZoneVendorSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ZoneVendorSpec_FieldPathValue = (*ZoneVendorSpec_FieldSubPathValue)(nil)

func (fpvs *ZoneVendorSpec_FieldSubPathValue) AsPointGrabPathValue() (ZoneVendorSpecPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ZoneVendorSpecPointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *ZoneVendorSpec_FieldSubPathValue) SetTo(target **Zone_VendorSpec) {
	if *target == nil {
		*target = new(Zone_VendorSpec)
	}
	switch fpvs.Selector() {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(ZoneVendorSpecPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneVendorSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_VendorSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ZoneVendorSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ZoneVendorSpec_FieldSubPathValue) CompareWith(source *Zone_VendorSpec) (int, bool) {
	switch fpvs.Selector() {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(ZoneVendorSpecPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneVendorSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Zone_VendorSpec))
}

// ZoneVendorSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorSpec according to their type
// Present only for array (repeated) types.
type ZoneVendorSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ZoneVendorSpec_FieldPath
	ContainsValue(*Zone_VendorSpec) bool
}

// ParseZoneVendorSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseZoneVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ZoneVendorSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseZoneVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ZoneVendorSpec_FieldPathArrayItemValue), nil
}

func MustParseZoneVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) ZoneVendorSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseZoneVendorSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ZoneVendorSpec_FieldTerminalPathArrayItemValue struct {
	ZoneVendorSpec_FieldTerminalPath
	value interface{}
}

var _ ZoneVendorSpec_FieldPathArrayItemValue = (*ZoneVendorSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Zone_VendorSpec as interface{}
func (fpaiv *ZoneVendorSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ZoneVendorSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Zone_VendorSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ZoneVendorSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Zone_VendorSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaiv *ZoneVendorSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Zone_VendorSpec) bool {
	slice := fpaiv.ZoneVendorSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ZoneVendorSpec_FieldSubPathArrayItemValue struct {
	ZoneVendorSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ZoneVendorSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ZoneVendorSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (ZoneVendorSpecPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ZoneVendorSpecPointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaivs *ZoneVendorSpec_FieldSubPathArrayItemValue) ContainsValue(source *Zone_VendorSpec) bool {
	switch fpaivs.Selector() {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(ZoneVendorSpecPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec: %d", fpaivs.Selector()))
	}
}

// ZoneVendorSpec_FieldPathArrayOfValues allows storing slice of values for VendorSpec fields according to their type
type ZoneVendorSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ZoneVendorSpec_FieldPath
}

func ParseZoneVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ZoneVendorSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseZoneVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ZoneVendorSpec_FieldPathArrayOfValues), nil
}

func MustParseZoneVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ZoneVendorSpec_FieldPathArrayOfValues {
	fpaov, err := ParseZoneVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ZoneVendorSpec_FieldTerminalPathArrayOfValues struct {
	ZoneVendorSpec_FieldTerminalPath
	values interface{}
}

var _ ZoneVendorSpec_FieldPathArrayOfValues = (*ZoneVendorSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ZoneVendorSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ZoneVendorSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Zone_VendorSpec_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ZoneVendorSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Zone_VendorSpec_PointGrab, bool) {
	res, ok := fpaov.values.([]*Zone_VendorSpec_PointGrab)
	return res, ok
}

type ZoneVendorSpec_FieldSubPathArrayOfValues struct {
	ZoneVendorSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ZoneVendorSpec_FieldPathArrayOfValues = (*ZoneVendorSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ZoneVendorSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ZoneVendorSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (ZoneVendorSpecPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ZoneVendorSpecPointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ZoneState_FieldPath interface {
	gotenobject.FieldPath
	Selector() ZoneState_FieldPathSelector
	Get(source *Zone_State) []interface{}
	GetSingle(source *Zone_State) (interface{}, bool)
	ClearValue(item *Zone_State)

	// Those methods build corresponding ZoneState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ZoneState_FieldPathValue
	WithIArrayOfValues(values interface{}) ZoneState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ZoneState_FieldPathArrayItemValue
}

type ZoneState_FieldPathSelector int32

const (
	ZoneState_FieldPathSelectorOccupancy ZoneState_FieldPathSelector = 0
)

func (s ZoneState_FieldPathSelector) String() string {
	switch s {
	case ZoneState_FieldPathSelectorOccupancy:
		return "occupancy"
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", s))
	}
}

func BuildZoneState_FieldPath(fp gotenobject.RawFieldPath) (ZoneState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Zone_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "occupancy":
			return &ZoneState_FieldTerminalPath{selector: ZoneState_FieldPathSelectorOccupancy}, nil
		}
	} else {
		switch fp[0] {
		case "occupancy":
			if subpath, err := BuildZoneStateOccupancy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ZoneState_FieldSubPath{selector: ZoneState_FieldPathSelectorOccupancy, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Zone_State", fp)
}

func ParseZoneState_FieldPath(rawField string) (ZoneState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildZoneState_FieldPath(fp)
}

func MustParseZoneState_FieldPath(rawField string) ZoneState_FieldPath {
	fp, err := ParseZoneState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ZoneState_FieldTerminalPath struct {
	selector ZoneState_FieldPathSelector
}

var _ ZoneState_FieldPath = (*ZoneState_FieldTerminalPath)(nil)

func (fp *ZoneState_FieldTerminalPath) Selector() ZoneState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ZoneState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ZoneState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Zone_State
func (fp *ZoneState_FieldTerminalPath) Get(source *Zone_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ZoneState_FieldPathSelectorOccupancy:
			if source.Occupancy != nil {
				values = append(values, source.Occupancy)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
		}
	}
	return
}

func (fp *ZoneState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Zone_State))
}

// GetSingle returns value pointed by specific field of from source Zone_State
func (fp *ZoneState_FieldTerminalPath) GetSingle(source *Zone_State) (interface{}, bool) {
	switch fp.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		res := source.GetOccupancy()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
	}
}

func (fp *ZoneState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Zone_State))
}

// GetDefault returns a default value of the field type
func (fp *ZoneState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		return (*Zone_State_Occupancy)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
	}
}

func (fp *ZoneState_FieldTerminalPath) ClearValue(item *Zone_State) {
	if item != nil {
		switch fp.selector {
		case ZoneState_FieldPathSelectorOccupancy:
			item.Occupancy = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
		}
	}
}

func (fp *ZoneState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Zone_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *ZoneState_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ZoneState_FieldTerminalPath) WithIValue(value interface{}) ZoneState_FieldPathValue {
	switch fp.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		return &ZoneState_FieldTerminalPathValue{ZoneState_FieldTerminalPath: *fp, value: value.(*Zone_State_Occupancy)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
	}
}

func (fp *ZoneState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ZoneState_FieldTerminalPath) WithIArrayOfValues(values interface{}) ZoneState_FieldPathArrayOfValues {
	fpaov := &ZoneState_FieldTerminalPathArrayOfValues{ZoneState_FieldTerminalPath: *fp}
	switch fp.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		return &ZoneState_FieldTerminalPathArrayOfValues{ZoneState_FieldTerminalPath: *fp, values: values.([]*Zone_State_Occupancy)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *ZoneState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ZoneState_FieldTerminalPath) WithIArrayItemValue(value interface{}) ZoneState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fp.selector))
	}
}

func (fp *ZoneState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ZoneState_FieldSubPath struct {
	selector ZoneState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ZoneState_FieldPath = (*ZoneState_FieldSubPath)(nil)

func (fps *ZoneState_FieldSubPath) Selector() ZoneState_FieldPathSelector {
	return fps.selector
}
func (fps *ZoneState_FieldSubPath) AsOccupancySubPath() (ZoneStateOccupancy_FieldPath, bool) {
	res, ok := fps.subPath.(ZoneStateOccupancy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ZoneState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ZoneState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Zone_State
func (fps *ZoneState_FieldSubPath) Get(source *Zone_State) (values []interface{}) {
	if asOccupancyFieldPath, ok := fps.AsOccupancySubPath(); ok {
		values = append(values, asOccupancyFieldPath.Get(source.GetOccupancy())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fps.selector))
	}
	return
}

func (fps *ZoneState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Zone_State))
}

// GetSingle returns value of selected field from source Zone_State
func (fps *ZoneState_FieldSubPath) GetSingle(source *Zone_State) (interface{}, bool) {
	switch fps.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		if source.GetOccupancy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOccupancy())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fps.selector))
	}
}

func (fps *ZoneState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Zone_State))
}

// GetDefault returns a default value of the field type
func (fps *ZoneState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ZoneState_FieldSubPath) ClearValue(item *Zone_State) {
	if item != nil {
		switch fps.selector {
		case ZoneState_FieldPathSelectorOccupancy:
			fps.subPath.ClearValueRaw(item.Occupancy)
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fps.selector))
		}
	}
}

func (fps *ZoneState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Zone_State))
}

// IsLeaf - whether field path is holds simple value
func (fps *ZoneState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ZoneState_FieldSubPath) WithIValue(value interface{}) ZoneState_FieldPathValue {
	return &ZoneState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ZoneState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ZoneState_FieldSubPath) WithIArrayOfValues(values interface{}) ZoneState_FieldPathArrayOfValues {
	return &ZoneState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ZoneState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ZoneState_FieldSubPath) WithIArrayItemValue(value interface{}) ZoneState_FieldPathArrayItemValue {
	return &ZoneState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ZoneState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ZoneState_FieldPathValue allows storing values for State fields according to their type
type ZoneState_FieldPathValue interface {
	ZoneState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Zone_State)
	CompareWith(*Zone_State) (cmp int, comparable bool)
}

func ParseZoneState_FieldPathValue(pathStr, valueStr string) (ZoneState_FieldPathValue, error) {
	fp, err := ParseZoneState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(ZoneState_FieldPathValue), nil
}

func MustParseZoneState_FieldPathValue(pathStr, valueStr string) ZoneState_FieldPathValue {
	fpv, err := ParseZoneState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ZoneState_FieldTerminalPathValue struct {
	ZoneState_FieldTerminalPath
	value interface{}
}

var _ ZoneState_FieldPathValue = (*ZoneState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *ZoneState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ZoneState_FieldTerminalPathValue) AsOccupancyValue() (*Zone_State_Occupancy, bool) {
	res, ok := fpv.value.(*Zone_State_Occupancy)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *ZoneState_FieldTerminalPathValue) SetTo(target **Zone_State) {
	if *target == nil {
		*target = new(Zone_State)
	}
	switch fpv.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		(*target).Occupancy = fpv.value.(*Zone_State_Occupancy)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fpv.selector))
	}
}

func (fpv *ZoneState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ZoneState_FieldTerminalPathValue' with the value under path in 'Zone_State'.
func (fpv *ZoneState_FieldTerminalPathValue) CompareWith(source *Zone_State) (int, bool) {
	switch fpv.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fpv.selector))
	}
}

func (fpv *ZoneState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Zone_State))
}

type ZoneState_FieldSubPathValue struct {
	ZoneState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ZoneState_FieldPathValue = (*ZoneState_FieldSubPathValue)(nil)

func (fpvs *ZoneState_FieldSubPathValue) AsOccupancyPathValue() (ZoneStateOccupancy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ZoneStateOccupancy_FieldPathValue)
	return res, ok
}

func (fpvs *ZoneState_FieldSubPathValue) SetTo(target **Zone_State) {
	if *target == nil {
		*target = new(Zone_State)
	}
	switch fpvs.Selector() {
	case ZoneState_FieldPathSelectorOccupancy:
		fpvs.subPathValue.(ZoneStateOccupancy_FieldPathValue).SetTo(&(*target).Occupancy)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_State)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ZoneState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ZoneState_FieldSubPathValue) CompareWith(source *Zone_State) (int, bool) {
	switch fpvs.Selector() {
	case ZoneState_FieldPathSelectorOccupancy:
		return fpvs.subPathValue.(ZoneStateOccupancy_FieldPathValue).CompareWith(source.GetOccupancy())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Zone_State))
}

// ZoneState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type ZoneState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ZoneState_FieldPath
	ContainsValue(*Zone_State) bool
}

// ParseZoneState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseZoneState_FieldPathArrayItemValue(pathStr, valueStr string) (ZoneState_FieldPathArrayItemValue, error) {
	fp, err := ParseZoneState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ZoneState_FieldPathArrayItemValue), nil
}

func MustParseZoneState_FieldPathArrayItemValue(pathStr, valueStr string) ZoneState_FieldPathArrayItemValue {
	fpaiv, err := ParseZoneState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ZoneState_FieldTerminalPathArrayItemValue struct {
	ZoneState_FieldTerminalPath
	value interface{}
}

var _ ZoneState_FieldPathArrayItemValue = (*ZoneState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Zone_State as interface{}
func (fpaiv *ZoneState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ZoneState_FieldTerminalPathArrayItemValue) GetSingle(source *Zone_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ZoneState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Zone_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *ZoneState_FieldTerminalPathArrayItemValue) ContainsValue(source *Zone_State) bool {
	slice := fpaiv.ZoneState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ZoneState_FieldSubPathArrayItemValue struct {
	ZoneState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ZoneState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ZoneState_FieldSubPathArrayItemValue) AsOccupancyPathItemValue() (ZoneStateOccupancy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ZoneStateOccupancy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaivs *ZoneState_FieldSubPathArrayItemValue) ContainsValue(source *Zone_State) bool {
	switch fpaivs.Selector() {
	case ZoneState_FieldPathSelectorOccupancy:
		return fpaivs.subPathItemValue.(ZoneStateOccupancy_FieldPathArrayItemValue).ContainsValue(source.GetOccupancy())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State: %d", fpaivs.Selector()))
	}
}

// ZoneState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type ZoneState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ZoneState_FieldPath
}

func ParseZoneState_FieldPathArrayOfValues(pathStr, valuesStr string) (ZoneState_FieldPathArrayOfValues, error) {
	fp, err := ParseZoneState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ZoneState_FieldPathArrayOfValues), nil
}

func MustParseZoneState_FieldPathArrayOfValues(pathStr, valuesStr string) ZoneState_FieldPathArrayOfValues {
	fpaov, err := ParseZoneState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ZoneState_FieldTerminalPathArrayOfValues struct {
	ZoneState_FieldTerminalPath
	values interface{}
}

var _ ZoneState_FieldPathArrayOfValues = (*ZoneState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ZoneState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ZoneState_FieldPathSelectorOccupancy:
		for _, v := range fpaov.values.([]*Zone_State_Occupancy) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ZoneState_FieldTerminalPathArrayOfValues) AsOccupancyArrayOfValues() ([]*Zone_State_Occupancy, bool) {
	res, ok := fpaov.values.([]*Zone_State_Occupancy)
	return res, ok
}

type ZoneState_FieldSubPathArrayOfValues struct {
	ZoneState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ZoneState_FieldPathArrayOfValues = (*ZoneState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ZoneState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ZoneState_FieldSubPathArrayOfValues) AsOccupancyPathArrayOfValues() (ZoneStateOccupancy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ZoneStateOccupancy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ZoneVendorSpecPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() ZoneVendorSpecPointGrab_FieldPathSelector
	Get(source *Zone_VendorSpec_PointGrab) []interface{}
	GetSingle(source *Zone_VendorSpec_PointGrab) (interface{}, bool)
	ClearValue(item *Zone_VendorSpec_PointGrab)

	// Those methods build corresponding ZoneVendorSpecPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) ZoneVendorSpecPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathArrayItemValue
}

type ZoneVendorSpecPointGrab_FieldPathSelector int32

const (
	ZoneVendorSpecPointGrab_FieldPathSelectorAreaId  ZoneVendorSpecPointGrab_FieldPathSelector = 0
	ZoneVendorSpecPointGrab_FieldPathSelectorPolygon ZoneVendorSpecPointGrab_FieldPathSelector = 1
)

func (s ZoneVendorSpecPointGrab_FieldPathSelector) String() string {
	switch s {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		return "area_id"
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return "polygon"
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", s))
	}
}

func BuildZoneVendorSpecPointGrab_FieldPath(fp gotenobject.RawFieldPath) (ZoneVendorSpecPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Zone_VendorSpec_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "area_id", "areaId", "area-id":
			return &ZoneVendorSpecPointGrab_FieldTerminalPath{selector: ZoneVendorSpecPointGrab_FieldPathSelectorAreaId}, nil
		case "polygon":
			return &ZoneVendorSpecPointGrab_FieldTerminalPath{selector: ZoneVendorSpecPointGrab_FieldPathSelectorPolygon}, nil
		}
	} else {
		switch fp[0] {
		case "polygon":
			if subpath, err := workplace_common.BuildPolygon_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ZoneVendorSpecPointGrab_FieldSubPath{selector: ZoneVendorSpecPointGrab_FieldPathSelectorPolygon, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Zone_VendorSpec_PointGrab", fp)
}

func ParseZoneVendorSpecPointGrab_FieldPath(rawField string) (ZoneVendorSpecPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildZoneVendorSpecPointGrab_FieldPath(fp)
}

func MustParseZoneVendorSpecPointGrab_FieldPath(rawField string) ZoneVendorSpecPointGrab_FieldPath {
	fp, err := ParseZoneVendorSpecPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ZoneVendorSpecPointGrab_FieldTerminalPath struct {
	selector ZoneVendorSpecPointGrab_FieldPathSelector
}

var _ ZoneVendorSpecPointGrab_FieldPath = (*ZoneVendorSpecPointGrab_FieldTerminalPath)(nil)

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) Selector() ZoneVendorSpecPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Zone_VendorSpec_PointGrab
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) Get(source *Zone_VendorSpec_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
			values = append(values, source.AreaId)
		case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
			if source.Polygon != nil {
				values = append(values, source.Polygon)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Zone_VendorSpec_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Zone_VendorSpec_PointGrab
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) GetSingle(source *Zone_VendorSpec_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		return source.GetAreaId(), source != nil
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		res := source.GetPolygon()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Zone_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		return ""
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return (*workplace_common.Polygon)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) ClearValue(item *Zone_VendorSpec_PointGrab) {
	if item != nil {
		switch fp.selector {
		case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
			item.AreaId = ""
		case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
			item.Polygon = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Zone_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ZoneVendorSpecPointGrab_FieldPathSelectorAreaId
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithIValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathValue {
	switch fp.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		return &ZoneVendorSpecPointGrab_FieldTerminalPathValue{ZoneVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(string)}
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return &ZoneVendorSpecPointGrab_FieldTerminalPathValue{ZoneVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(*workplace_common.Polygon)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) ZoneVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov := &ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues{ZoneVendorSpecPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		return &ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues{ZoneVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]string)}
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return &ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues{ZoneVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]*workplace_common.Polygon)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *ZoneVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ZoneVendorSpecPointGrab_FieldSubPath struct {
	selector ZoneVendorSpecPointGrab_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ZoneVendorSpecPointGrab_FieldPath = (*ZoneVendorSpecPointGrab_FieldSubPath)(nil)

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) Selector() ZoneVendorSpecPointGrab_FieldPathSelector {
	return fps.selector
}
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) AsPolygonSubPath() (workplace_common.Polygon_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Polygon_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Zone_VendorSpec_PointGrab
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) Get(source *Zone_VendorSpec_PointGrab) (values []interface{}) {
	if asPolygonFieldPath, ok := fps.AsPolygonSubPath(); ok {
		values = append(values, asPolygonFieldPath.Get(source.GetPolygon())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fps.selector))
	}
	return
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Zone_VendorSpec_PointGrab))
}

// GetSingle returns value of selected field from source Zone_VendorSpec_PointGrab
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) GetSingle(source *Zone_VendorSpec_PointGrab) (interface{}, bool) {
	switch fps.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		if source.GetPolygon() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPolygon())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fps.selector))
	}
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Zone_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) ClearValue(item *Zone_VendorSpec_PointGrab) {
	if item != nil {
		switch fps.selector {
		case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
			fps.subPath.ClearValueRaw(item.Polygon)
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fps.selector))
		}
	}
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Zone_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fps *ZoneVendorSpecPointGrab_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithIValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathValue {
	return &ZoneVendorSpecPointGrab_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithIArrayOfValues(values interface{}) ZoneVendorSpecPointGrab_FieldPathArrayOfValues {
	return &ZoneVendorSpecPointGrab_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithIArrayItemValue(value interface{}) ZoneVendorSpecPointGrab_FieldPathArrayItemValue {
	return &ZoneVendorSpecPointGrab_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ZoneVendorSpecPointGrab_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ZoneVendorSpecPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type ZoneVendorSpecPointGrab_FieldPathValue interface {
	ZoneVendorSpecPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Zone_VendorSpec_PointGrab)
	CompareWith(*Zone_VendorSpec_PointGrab) (cmp int, comparable bool)
}

func ParseZoneVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) (ZoneVendorSpecPointGrab_FieldPathValue, error) {
	fp, err := ParseZoneVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(ZoneVendorSpecPointGrab_FieldPathValue), nil
}

func MustParseZoneVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) ZoneVendorSpecPointGrab_FieldPathValue {
	fpv, err := ParseZoneVendorSpecPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ZoneVendorSpecPointGrab_FieldTerminalPathValue struct {
	ZoneVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ ZoneVendorSpecPointGrab_FieldPathValue = (*ZoneVendorSpecPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) AsAreaIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) AsPolygonValue() (*workplace_common.Polygon, bool) {
	res, ok := fpv.value.(*workplace_common.Polygon)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) SetTo(target **Zone_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Zone_VendorSpec_PointGrab)
	}
	switch fpv.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		(*target).AreaId = fpv.value.(string)
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		(*target).Polygon = fpv.value.(*workplace_common.Polygon)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_VendorSpec_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ZoneVendorSpecPointGrab_FieldTerminalPathValue' with the value under path in 'Zone_VendorSpec_PointGrab'.
func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) CompareWith(source *Zone_VendorSpec_PointGrab) (int, bool) {
	switch fpv.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		leftValue := fpv.value.(string)
		rightValue := source.GetAreaId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *ZoneVendorSpecPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Zone_VendorSpec_PointGrab))
}

type ZoneVendorSpecPointGrab_FieldSubPathValue struct {
	ZoneVendorSpecPointGrab_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ZoneVendorSpecPointGrab_FieldPathValue = (*ZoneVendorSpecPointGrab_FieldSubPathValue)(nil)

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) AsPolygonPathValue() (workplace_common.Polygon_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Polygon_FieldPathValue)
	return res, ok
}

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) SetTo(target **Zone_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Zone_VendorSpec_PointGrab)
	}
	switch fpvs.Selector() {
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		fpvs.subPathValue.(workplace_common.Polygon_FieldPathValue).SetTo(&(*target).Polygon)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_VendorSpec_PointGrab)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) CompareWith(source *Zone_VendorSpec_PointGrab) (int, bool) {
	switch fpvs.Selector() {
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return fpvs.subPathValue.(workplace_common.Polygon_FieldPathValue).CompareWith(source.GetPolygon())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *ZoneVendorSpecPointGrab_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Zone_VendorSpec_PointGrab))
}

// ZoneVendorSpecPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type ZoneVendorSpecPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ZoneVendorSpecPointGrab_FieldPath
	ContainsValue(*Zone_VendorSpec_PointGrab) bool
}

// ParseZoneVendorSpecPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseZoneVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (ZoneVendorSpecPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseZoneVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ZoneVendorSpecPointGrab_FieldPathArrayItemValue), nil
}

func MustParseZoneVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) ZoneVendorSpecPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseZoneVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue struct {
	ZoneVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ ZoneVendorSpecPointGrab_FieldPathArrayItemValue = (*ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Zone_VendorSpec_PointGrab as interface{}
func (fpaiv *ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Zone_VendorSpec_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Zone_VendorSpec_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *ZoneVendorSpecPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Zone_VendorSpec_PointGrab) bool {
	slice := fpaiv.ZoneVendorSpecPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ZoneVendorSpecPointGrab_FieldSubPathArrayItemValue struct {
	ZoneVendorSpecPointGrab_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ZoneVendorSpecPointGrab_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ZoneVendorSpecPointGrab_FieldSubPathArrayItemValue) AsPolygonPathItemValue() (workplace_common.Polygon_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Polygon_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaivs *ZoneVendorSpecPointGrab_FieldSubPathArrayItemValue) ContainsValue(source *Zone_VendorSpec_PointGrab) bool {
	switch fpaivs.Selector() {
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		return fpaivs.subPathItemValue.(workplace_common.Polygon_FieldPathArrayItemValue).ContainsValue(source.GetPolygon())
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_VendorSpec_PointGrab: %d", fpaivs.Selector()))
	}
}

// ZoneVendorSpecPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type ZoneVendorSpecPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ZoneVendorSpecPointGrab_FieldPath
}

func ParseZoneVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (ZoneVendorSpecPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseZoneVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ZoneVendorSpecPointGrab_FieldPathArrayOfValues), nil
}

func MustParseZoneVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) ZoneVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseZoneVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues struct {
	ZoneVendorSpecPointGrab_FieldTerminalPath
	values interface{}
}

var _ ZoneVendorSpecPointGrab_FieldPathArrayOfValues = (*ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ZoneVendorSpecPointGrab_FieldPathSelectorAreaId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ZoneVendorSpecPointGrab_FieldPathSelectorPolygon:
		for _, v := range fpaov.values.([]*workplace_common.Polygon) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsAreaIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ZoneVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsPolygonArrayOfValues() ([]*workplace_common.Polygon, bool) {
	res, ok := fpaov.values.([]*workplace_common.Polygon)
	return res, ok
}

type ZoneVendorSpecPointGrab_FieldSubPathArrayOfValues struct {
	ZoneVendorSpecPointGrab_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ZoneVendorSpecPointGrab_FieldPathArrayOfValues = (*ZoneVendorSpecPointGrab_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ZoneVendorSpecPointGrab_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ZoneVendorSpecPointGrab_FieldSubPathArrayOfValues) AsPolygonPathArrayOfValues() (workplace_common.Polygon_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Polygon_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ZoneStateOccupancy_FieldPath interface {
	gotenobject.FieldPath
	Selector() ZoneStateOccupancy_FieldPathSelector
	Get(source *Zone_State_Occupancy) []interface{}
	GetSingle(source *Zone_State_Occupancy) (interface{}, bool)
	ClearValue(item *Zone_State_Occupancy)

	// Those methods build corresponding ZoneStateOccupancy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ZoneStateOccupancy_FieldPathValue
	WithIArrayOfValues(values interface{}) ZoneStateOccupancy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ZoneStateOccupancy_FieldPathArrayItemValue
}

type ZoneStateOccupancy_FieldPathSelector int32

const (
	ZoneStateOccupancy_FieldPathSelectorIsOccupied       ZoneStateOccupancy_FieldPathSelector = 0
	ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime ZoneStateOccupancy_FieldPathSelector = 1
)

func (s ZoneStateOccupancy_FieldPathSelector) String() string {
	switch s {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		return "is_occupied"
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		return "last_occupied_time"
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", s))
	}
}

func BuildZoneStateOccupancy_FieldPath(fp gotenobject.RawFieldPath) (ZoneStateOccupancy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Zone_State_Occupancy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "is_occupied", "isOccupied", "is-occupied":
			return &ZoneStateOccupancy_FieldTerminalPath{selector: ZoneStateOccupancy_FieldPathSelectorIsOccupied}, nil
		case "last_occupied_time", "lastOccupiedTime", "last-occupied-time":
			return &ZoneStateOccupancy_FieldTerminalPath{selector: ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Zone_State_Occupancy", fp)
}

func ParseZoneStateOccupancy_FieldPath(rawField string) (ZoneStateOccupancy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildZoneStateOccupancy_FieldPath(fp)
}

func MustParseZoneStateOccupancy_FieldPath(rawField string) ZoneStateOccupancy_FieldPath {
	fp, err := ParseZoneStateOccupancy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ZoneStateOccupancy_FieldTerminalPath struct {
	selector ZoneStateOccupancy_FieldPathSelector
}

var _ ZoneStateOccupancy_FieldPath = (*ZoneStateOccupancy_FieldTerminalPath)(nil)

func (fp *ZoneStateOccupancy_FieldTerminalPath) Selector() ZoneStateOccupancy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ZoneStateOccupancy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ZoneStateOccupancy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Zone_State_Occupancy
func (fp *ZoneStateOccupancy_FieldTerminalPath) Get(source *Zone_State_Occupancy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
			values = append(values, source.IsOccupied)
		case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
			if source.LastOccupiedTime != nil {
				values = append(values, source.LastOccupiedTime)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
		}
	}
	return
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Zone_State_Occupancy))
}

// GetSingle returns value pointed by specific field of from source Zone_State_Occupancy
func (fp *ZoneStateOccupancy_FieldTerminalPath) GetSingle(source *Zone_State_Occupancy) (interface{}, bool) {
	switch fp.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		return source.GetIsOccupied(), source != nil
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		res := source.GetLastOccupiedTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
	}
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Zone_State_Occupancy))
}

// GetDefault returns a default value of the field type
func (fp *ZoneStateOccupancy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		return false
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
	}
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) ClearValue(item *Zone_State_Occupancy) {
	if item != nil {
		switch fp.selector {
		case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
			item.IsOccupied = false
		case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
			item.LastOccupiedTime = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
		}
	}
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Zone_State_Occupancy))
}

// IsLeaf - whether field path is holds simple value
func (fp *ZoneStateOccupancy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ZoneStateOccupancy_FieldPathSelectorIsOccupied ||
		fp.selector == ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithIValue(value interface{}) ZoneStateOccupancy_FieldPathValue {
	switch fp.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		return &ZoneStateOccupancy_FieldTerminalPathValue{ZoneStateOccupancy_FieldTerminalPath: *fp, value: value.(bool)}
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		return &ZoneStateOccupancy_FieldTerminalPathValue{ZoneStateOccupancy_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
	}
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithIArrayOfValues(values interface{}) ZoneStateOccupancy_FieldPathArrayOfValues {
	fpaov := &ZoneStateOccupancy_FieldTerminalPathArrayOfValues{ZoneStateOccupancy_FieldTerminalPath: *fp}
	switch fp.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		return &ZoneStateOccupancy_FieldTerminalPathArrayOfValues{ZoneStateOccupancy_FieldTerminalPath: *fp, values: values.([]bool)}
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		return &ZoneStateOccupancy_FieldTerminalPathArrayOfValues{ZoneStateOccupancy_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
	}
	return fpaov
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithIArrayItemValue(value interface{}) ZoneStateOccupancy_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fp.selector))
	}
}

func (fp *ZoneStateOccupancy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ZoneStateOccupancy_FieldPathValue allows storing values for Occupancy fields according to their type
type ZoneStateOccupancy_FieldPathValue interface {
	ZoneStateOccupancy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Zone_State_Occupancy)
	CompareWith(*Zone_State_Occupancy) (cmp int, comparable bool)
}

func ParseZoneStateOccupancy_FieldPathValue(pathStr, valueStr string) (ZoneStateOccupancy_FieldPathValue, error) {
	fp, err := ParseZoneStateOccupancy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Occupancy field path value from %s: %v", valueStr, err)
	}
	return fpv.(ZoneStateOccupancy_FieldPathValue), nil
}

func MustParseZoneStateOccupancy_FieldPathValue(pathStr, valueStr string) ZoneStateOccupancy_FieldPathValue {
	fpv, err := ParseZoneStateOccupancy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ZoneStateOccupancy_FieldTerminalPathValue struct {
	ZoneStateOccupancy_FieldTerminalPath
	value interface{}
}

var _ ZoneStateOccupancy_FieldPathValue = (*ZoneStateOccupancy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Occupancy' as interface{}
func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) AsIsOccupiedValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) AsLastOccupiedTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Occupancy
func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) SetTo(target **Zone_State_Occupancy) {
	if *target == nil {
		*target = new(Zone_State_Occupancy)
	}
	switch fpv.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		(*target).IsOccupied = fpv.value.(bool)
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		(*target).LastOccupiedTime = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fpv.selector))
	}
}

func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Zone_State_Occupancy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ZoneStateOccupancy_FieldTerminalPathValue' with the value under path in 'Zone_State_Occupancy'.
func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) CompareWith(source *Zone_State_Occupancy) (int, bool) {
	switch fpv.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsOccupied()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastOccupiedTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Zone_State_Occupancy: %d", fpv.selector))
	}
}

func (fpv *ZoneStateOccupancy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Zone_State_Occupancy))
}

// ZoneStateOccupancy_FieldPathArrayItemValue allows storing single item in Path-specific values for Occupancy according to their type
// Present only for array (repeated) types.
type ZoneStateOccupancy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ZoneStateOccupancy_FieldPath
	ContainsValue(*Zone_State_Occupancy) bool
}

// ParseZoneStateOccupancy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseZoneStateOccupancy_FieldPathArrayItemValue(pathStr, valueStr string) (ZoneStateOccupancy_FieldPathArrayItemValue, error) {
	fp, err := ParseZoneStateOccupancy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Occupancy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ZoneStateOccupancy_FieldPathArrayItemValue), nil
}

func MustParseZoneStateOccupancy_FieldPathArrayItemValue(pathStr, valueStr string) ZoneStateOccupancy_FieldPathArrayItemValue {
	fpaiv, err := ParseZoneStateOccupancy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ZoneStateOccupancy_FieldTerminalPathArrayItemValue struct {
	ZoneStateOccupancy_FieldTerminalPath
	value interface{}
}

var _ ZoneStateOccupancy_FieldPathArrayItemValue = (*ZoneStateOccupancy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Zone_State_Occupancy as interface{}
func (fpaiv *ZoneStateOccupancy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ZoneStateOccupancy_FieldTerminalPathArrayItemValue) GetSingle(source *Zone_State_Occupancy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ZoneStateOccupancy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Zone_State_Occupancy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Occupancy'
func (fpaiv *ZoneStateOccupancy_FieldTerminalPathArrayItemValue) ContainsValue(source *Zone_State_Occupancy) bool {
	slice := fpaiv.ZoneStateOccupancy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ZoneStateOccupancy_FieldPathArrayOfValues allows storing slice of values for Occupancy fields according to their type
type ZoneStateOccupancy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ZoneStateOccupancy_FieldPath
}

func ParseZoneStateOccupancy_FieldPathArrayOfValues(pathStr, valuesStr string) (ZoneStateOccupancy_FieldPathArrayOfValues, error) {
	fp, err := ParseZoneStateOccupancy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Occupancy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ZoneStateOccupancy_FieldPathArrayOfValues), nil
}

func MustParseZoneStateOccupancy_FieldPathArrayOfValues(pathStr, valuesStr string) ZoneStateOccupancy_FieldPathArrayOfValues {
	fpaov, err := ParseZoneStateOccupancy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ZoneStateOccupancy_FieldTerminalPathArrayOfValues struct {
	ZoneStateOccupancy_FieldTerminalPath
	values interface{}
}

var _ ZoneStateOccupancy_FieldPathArrayOfValues = (*ZoneStateOccupancy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ZoneStateOccupancy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ZoneStateOccupancy_FieldPathSelectorIsOccupied:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ZoneStateOccupancy_FieldPathSelectorLastOccupiedTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ZoneStateOccupancy_FieldTerminalPathArrayOfValues) AsIsOccupiedArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ZoneStateOccupancy_FieldTerminalPathArrayOfValues) AsLastOccupiedTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
