// Code generated by protoc-gen-goten-resource
// Resource change: PropertyChange
// DO NOT EDIT!!!

package property

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	device "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
	_ = &area.Area{}
	_ = &building.Building{}
	_ = &device.Device{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

func (c *PropertyChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PropertyChange_Added_)
	return ok
}

func (c *PropertyChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PropertyChange_Modified_)
	return ok
}

func (c *PropertyChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PropertyChange_Current_)
	return ok
}

func (c *PropertyChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PropertyChange_Removed_)
	return ok
}

func (c *PropertyChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PropertyChange_Added_:
		return cType.Added.ViewIndex
	case *PropertyChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *PropertyChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PropertyChange_Removed_:
		return cType.Removed.ViewIndex
	case *PropertyChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *PropertyChange) GetProperty() *Property {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PropertyChange_Added_:
		return cType.Added.Property
	case *PropertyChange_Modified_:
		return cType.Modified.Property
	case *PropertyChange_Current_:
		return cType.Current.Property
	case *PropertyChange_Removed_:
		return nil
	}
	return nil
}

func (c *PropertyChange) GetResource() gotenresource.Resource {
	return c.GetProperty()
}

func (c *PropertyChange) GetPropertyName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PropertyChange_Added_:
		return cType.Added.Property.GetName()
	case *PropertyChange_Modified_:
		return cType.Modified.Name
	case *PropertyChange_Current_:
		return cType.Current.Property.GetName()
	case *PropertyChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *PropertyChange) GetRawName() gotenresource.Name {
	return c.GetPropertyName()
}

func (c *PropertyChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &PropertyChange_Added_{
		Added: &PropertyChange_Added{
			Property:  snapshot.(*Property),
			ViewIndex: int32(idx),
		},
	}
}

func (c *PropertyChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &PropertyChange_Modified_{
		Modified: &PropertyChange_Modified{
			Name:              name.(*Name),
			Property:          snapshot.(*Property),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *PropertyChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &PropertyChange_Current_{
		Current: &PropertyChange_Current{
			Property: snapshot.(*Property),
		},
	}
}

func (c *PropertyChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &PropertyChange_Removed_{
		Removed: &PropertyChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
