// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/property.proto
// DO NOT EDIT!!!

package property

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	device "github.com/cloudwan/workplace-sdk/resources/v1alpha2/device"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &device.Device{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Property_FieldPath interface {
	gotenobject.FieldPath
	Selector() Property_FieldPathSelector
	Get(source *Property) []interface{}
	GetSingle(source *Property) (interface{}, bool)
	ClearValue(item *Property)

	// Those methods build corresponding Property_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Property_FieldPathValue
	WithIArrayOfValues(values interface{}) Property_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Property_FieldPathArrayItemValue
}

type Property_FieldPathSelector int32

const (
	Property_FieldPathSelectorName           Property_FieldPathSelector = 0
	Property_FieldPathSelectorDisplayName    Property_FieldPathSelector = 1
	Property_FieldPathSelectorBacnet         Property_FieldPathSelector = 2
	Property_FieldPathSelectorMetadata       Property_FieldPathSelector = 3
	Property_FieldPathSelectorSitePlacement  Property_FieldPathSelector = 4
	Property_FieldPathSelectorMetricOverride Property_FieldPathSelector = 5
)

func (s Property_FieldPathSelector) String() string {
	switch s {
	case Property_FieldPathSelectorName:
		return "name"
	case Property_FieldPathSelectorDisplayName:
		return "display_name"
	case Property_FieldPathSelectorBacnet:
		return "bacnet"
	case Property_FieldPathSelectorMetadata:
		return "metadata"
	case Property_FieldPathSelectorSitePlacement:
		return "site_placement"
	case Property_FieldPathSelectorMetricOverride:
		return "metric_override"
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", s))
	}
}

func BuildProperty_FieldPath(fp gotenobject.RawFieldPath) (Property_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Property")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorDisplayName}, nil
		case "bacnet":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorBacnet}, nil
		case "metadata":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorMetadata}, nil
		case "site_placement", "sitePlacement", "site-placement":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorSitePlacement}, nil
		case "metric_override", "metricOverride", "metric-override":
			return &Property_FieldTerminalPath{selector: Property_FieldPathSelectorMetricOverride}, nil
		}
	} else {
		switch fp[0] {
		case "bacnet":
			if subpath, err := workplace_common.BuildBACNetEntity_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Property_FieldSubPath{selector: Property_FieldPathSelectorBacnet, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Property_FieldSubPath{selector: Property_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "site_placement", "sitePlacement", "site-placement":
			if subpath, err := BuildPropertySitePlacement_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Property_FieldSubPath{selector: Property_FieldPathSelectorSitePlacement, subPath: subpath}, nil
			}
		case "metric_override", "metricOverride", "metric-override":
			if subpath, err := BuildPropertyMetricOverride_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Property_FieldSubPath{selector: Property_FieldPathSelectorMetricOverride, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Property", fp)
}

func ParseProperty_FieldPath(rawField string) (Property_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProperty_FieldPath(fp)
}

func MustParseProperty_FieldPath(rawField string) Property_FieldPath {
	fp, err := ParseProperty_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Property_FieldTerminalPath struct {
	selector Property_FieldPathSelector
}

var _ Property_FieldPath = (*Property_FieldTerminalPath)(nil)

func (fp *Property_FieldTerminalPath) Selector() Property_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Property_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Property_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Property
func (fp *Property_FieldTerminalPath) Get(source *Property) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Property_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Property_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Property_FieldPathSelectorBacnet:
			if source.Bacnet != nil {
				values = append(values, source.Bacnet)
			}
		case Property_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Property_FieldPathSelectorSitePlacement:
			if source.SitePlacement != nil {
				values = append(values, source.SitePlacement)
			}
		case Property_FieldPathSelectorMetricOverride:
			if source.MetricOverride != nil {
				values = append(values, source.MetricOverride)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
		}
	}
	return
}

func (fp *Property_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Property))
}

// GetSingle returns value pointed by specific field of from source Property
func (fp *Property_FieldTerminalPath) GetSingle(source *Property) (interface{}, bool) {
	switch fp.selector {
	case Property_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Property_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Property_FieldPathSelectorBacnet:
		res := source.GetBacnet()
		return res, res != nil
	case Property_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Property_FieldPathSelectorSitePlacement:
		res := source.GetSitePlacement()
		return res, res != nil
	case Property_FieldPathSelectorMetricOverride:
		res := source.GetMetricOverride()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
	}
}

func (fp *Property_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Property))
}

// GetDefault returns a default value of the field type
func (fp *Property_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Property_FieldPathSelectorName:
		return (*Name)(nil)
	case Property_FieldPathSelectorDisplayName:
		return ""
	case Property_FieldPathSelectorBacnet:
		return (*workplace_common.BACNetEntity)(nil)
	case Property_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case Property_FieldPathSelectorSitePlacement:
		return (*Property_SitePlacement)(nil)
	case Property_FieldPathSelectorMetricOverride:
		return (*Property_MetricOverride)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
	}
}

func (fp *Property_FieldTerminalPath) ClearValue(item *Property) {
	if item != nil {
		switch fp.selector {
		case Property_FieldPathSelectorName:
			item.Name = nil
		case Property_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Property_FieldPathSelectorBacnet:
			item.Bacnet = nil
		case Property_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Property_FieldPathSelectorSitePlacement:
			item.SitePlacement = nil
		case Property_FieldPathSelectorMetricOverride:
			item.MetricOverride = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
		}
	}
}

func (fp *Property_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Property))
}

// IsLeaf - whether field path is holds simple value
func (fp *Property_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Property_FieldPathSelectorName ||
		fp.selector == Property_FieldPathSelectorDisplayName
}

func (fp *Property_FieldTerminalPath) WithIValue(value interface{}) Property_FieldPathValue {
	switch fp.selector {
	case Property_FieldPathSelectorName:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(*Name)}
	case Property_FieldPathSelectorDisplayName:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(string)}
	case Property_FieldPathSelectorBacnet:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(*workplace_common.BACNetEntity)}
	case Property_FieldPathSelectorMetadata:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case Property_FieldPathSelectorSitePlacement:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(*Property_SitePlacement)}
	case Property_FieldPathSelectorMetricOverride:
		return &Property_FieldTerminalPathValue{Property_FieldTerminalPath: *fp, value: value.(*Property_MetricOverride)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
	}
}

func (fp *Property_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Property_FieldTerminalPath) WithIArrayOfValues(values interface{}) Property_FieldPathArrayOfValues {
	fpaov := &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp}
	switch fp.selector {
	case Property_FieldPathSelectorName:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Property_FieldPathSelectorDisplayName:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]string)}
	case Property_FieldPathSelectorBacnet:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]*workplace_common.BACNetEntity)}
	case Property_FieldPathSelectorMetadata:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case Property_FieldPathSelectorSitePlacement:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]*Property_SitePlacement)}
	case Property_FieldPathSelectorMetricOverride:
		return &Property_FieldTerminalPathArrayOfValues{Property_FieldTerminalPath: *fp, values: values.([]*Property_MetricOverride)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
	}
	return fpaov
}

func (fp *Property_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Property_FieldTerminalPath) WithIArrayItemValue(value interface{}) Property_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fp.selector))
	}
}

func (fp *Property_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Property_FieldSubPath struct {
	selector Property_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Property_FieldPath = (*Property_FieldSubPath)(nil)

func (fps *Property_FieldSubPath) Selector() Property_FieldPathSelector {
	return fps.selector
}
func (fps *Property_FieldSubPath) AsBacnetSubPath() (workplace_common.BACNetEntity_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.BACNetEntity_FieldPath)
	return res, ok
}
func (fps *Property_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *Property_FieldSubPath) AsSitePlacementSubPath() (PropertySitePlacement_FieldPath, bool) {
	res, ok := fps.subPath.(PropertySitePlacement_FieldPath)
	return res, ok
}
func (fps *Property_FieldSubPath) AsMetricOverrideSubPath() (PropertyMetricOverride_FieldPath, bool) {
	res, ok := fps.subPath.(PropertyMetricOverride_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Property_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Property_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Property
func (fps *Property_FieldSubPath) Get(source *Property) (values []interface{}) {
	if asBACNetEntityFieldPath, ok := fps.AsBacnetSubPath(); ok {
		values = append(values, asBACNetEntityFieldPath.Get(source.GetBacnet())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSitePlacementFieldPath, ok := fps.AsSitePlacementSubPath(); ok {
		values = append(values, asSitePlacementFieldPath.Get(source.GetSitePlacement())...)
	} else if asMetricOverrideFieldPath, ok := fps.AsMetricOverrideSubPath(); ok {
		values = append(values, asMetricOverrideFieldPath.Get(source.GetMetricOverride())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Property: %d", fps.selector))
	}
	return
}

func (fps *Property_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Property))
}

// GetSingle returns value of selected field from source Property
func (fps *Property_FieldSubPath) GetSingle(source *Property) (interface{}, bool) {
	switch fps.selector {
	case Property_FieldPathSelectorBacnet:
		if source.GetBacnet() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBacnet())
	case Property_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Property_FieldPathSelectorSitePlacement:
		if source.GetSitePlacement() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSitePlacement())
	case Property_FieldPathSelectorMetricOverride:
		if source.GetMetricOverride() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricOverride())
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fps.selector))
	}
}

func (fps *Property_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Property))
}

// GetDefault returns a default value of the field type
func (fps *Property_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Property_FieldSubPath) ClearValue(item *Property) {
	if item != nil {
		switch fps.selector {
		case Property_FieldPathSelectorBacnet:
			fps.subPath.ClearValueRaw(item.Bacnet)
		case Property_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Property_FieldPathSelectorSitePlacement:
			fps.subPath.ClearValueRaw(item.SitePlacement)
		case Property_FieldPathSelectorMetricOverride:
			fps.subPath.ClearValueRaw(item.MetricOverride)
		default:
			panic(fmt.Sprintf("Invalid selector for Property: %d", fps.selector))
		}
	}
}

func (fps *Property_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Property))
}

// IsLeaf - whether field path is holds simple value
func (fps *Property_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Property_FieldSubPath) WithIValue(value interface{}) Property_FieldPathValue {
	return &Property_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Property_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Property_FieldSubPath) WithIArrayOfValues(values interface{}) Property_FieldPathArrayOfValues {
	return &Property_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Property_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Property_FieldSubPath) WithIArrayItemValue(value interface{}) Property_FieldPathArrayItemValue {
	return &Property_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Property_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Property_FieldPathValue allows storing values for Property fields according to their type
type Property_FieldPathValue interface {
	Property_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Property)
	CompareWith(*Property) (cmp int, comparable bool)
}

func ParseProperty_FieldPathValue(pathStr, valueStr string) (Property_FieldPathValue, error) {
	fp, err := ParseProperty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Property field path value from %s: %v", valueStr, err)
	}
	return fpv.(Property_FieldPathValue), nil
}

func MustParseProperty_FieldPathValue(pathStr, valueStr string) Property_FieldPathValue {
	fpv, err := ParseProperty_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Property_FieldTerminalPathValue struct {
	Property_FieldTerminalPath
	value interface{}
}

var _ Property_FieldPathValue = (*Property_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Property' as interface{}
func (fpv *Property_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Property_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Property_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Property_FieldTerminalPathValue) AsBacnetValue() (*workplace_common.BACNetEntity, bool) {
	res, ok := fpv.value.(*workplace_common.BACNetEntity)
	return res, ok
}
func (fpv *Property_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *Property_FieldTerminalPathValue) AsSitePlacementValue() (*Property_SitePlacement, bool) {
	res, ok := fpv.value.(*Property_SitePlacement)
	return res, ok
}
func (fpv *Property_FieldTerminalPathValue) AsMetricOverrideValue() (*Property_MetricOverride, bool) {
	res, ok := fpv.value.(*Property_MetricOverride)
	return res, ok
}

// SetTo stores value for selected field for object Property
func (fpv *Property_FieldTerminalPathValue) SetTo(target **Property) {
	if *target == nil {
		*target = new(Property)
	}
	switch fpv.selector {
	case Property_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Property_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Property_FieldPathSelectorBacnet:
		(*target).Bacnet = fpv.value.(*workplace_common.BACNetEntity)
	case Property_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case Property_FieldPathSelectorSitePlacement:
		(*target).SitePlacement = fpv.value.(*Property_SitePlacement)
	case Property_FieldPathSelectorMetricOverride:
		(*target).MetricOverride = fpv.value.(*Property_MetricOverride)
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fpv.selector))
	}
}

func (fpv *Property_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Property)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Property_FieldTerminalPathValue' with the value under path in 'Property'.
func (fpv *Property_FieldTerminalPathValue) CompareWith(source *Property) (int, bool) {
	switch fpv.selector {
	case Property_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Property_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Property_FieldPathSelectorBacnet:
		return 0, false
	case Property_FieldPathSelectorMetadata:
		return 0, false
	case Property_FieldPathSelectorSitePlacement:
		return 0, false
	case Property_FieldPathSelectorMetricOverride:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fpv.selector))
	}
}

func (fpv *Property_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Property))
}

type Property_FieldSubPathValue struct {
	Property_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Property_FieldPathValue = (*Property_FieldSubPathValue)(nil)

func (fpvs *Property_FieldSubPathValue) AsBacnetPathValue() (workplace_common.BACNetEntity_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue)
	return res, ok
}
func (fpvs *Property_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Property_FieldSubPathValue) AsSitePlacementPathValue() (PropertySitePlacement_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PropertySitePlacement_FieldPathValue)
	return res, ok
}
func (fpvs *Property_FieldSubPathValue) AsMetricOverridePathValue() (PropertyMetricOverride_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PropertyMetricOverride_FieldPathValue)
	return res, ok
}

func (fpvs *Property_FieldSubPathValue) SetTo(target **Property) {
	if *target == nil {
		*target = new(Property)
	}
	switch fpvs.Selector() {
	case Property_FieldPathSelectorBacnet:
		fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue).SetTo(&(*target).Bacnet)
	case Property_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Property_FieldPathSelectorSitePlacement:
		fpvs.subPathValue.(PropertySitePlacement_FieldPathValue).SetTo(&(*target).SitePlacement)
	case Property_FieldPathSelectorMetricOverride:
		fpvs.subPathValue.(PropertyMetricOverride_FieldPathValue).SetTo(&(*target).MetricOverride)
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fpvs.Selector()))
	}
}

func (fpvs *Property_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Property)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Property_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Property_FieldSubPathValue) CompareWith(source *Property) (int, bool) {
	switch fpvs.Selector() {
	case Property_FieldPathSelectorBacnet:
		return fpvs.subPathValue.(workplace_common.BACNetEntity_FieldPathValue).CompareWith(source.GetBacnet())
	case Property_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Property_FieldPathSelectorSitePlacement:
		return fpvs.subPathValue.(PropertySitePlacement_FieldPathValue).CompareWith(source.GetSitePlacement())
	case Property_FieldPathSelectorMetricOverride:
		return fpvs.subPathValue.(PropertyMetricOverride_FieldPathValue).CompareWith(source.GetMetricOverride())
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fpvs.Selector()))
	}
}

func (fpvs *Property_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Property))
}

// Property_FieldPathArrayItemValue allows storing single item in Path-specific values for Property according to their type
// Present only for array (repeated) types.
type Property_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Property_FieldPath
	ContainsValue(*Property) bool
}

// ParseProperty_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProperty_FieldPathArrayItemValue(pathStr, valueStr string) (Property_FieldPathArrayItemValue, error) {
	fp, err := ParseProperty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Property field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Property_FieldPathArrayItemValue), nil
}

func MustParseProperty_FieldPathArrayItemValue(pathStr, valueStr string) Property_FieldPathArrayItemValue {
	fpaiv, err := ParseProperty_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Property_FieldTerminalPathArrayItemValue struct {
	Property_FieldTerminalPath
	value interface{}
}

var _ Property_FieldPathArrayItemValue = (*Property_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Property as interface{}
func (fpaiv *Property_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Property_FieldTerminalPathArrayItemValue) GetSingle(source *Property) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Property_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Property))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Property'
func (fpaiv *Property_FieldTerminalPathArrayItemValue) ContainsValue(source *Property) bool {
	slice := fpaiv.Property_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Property_FieldSubPathArrayItemValue struct {
	Property_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Property_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Property_FieldSubPathArrayItemValue) AsBacnetPathItemValue() (workplace_common.BACNetEntity_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.BACNetEntity_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Property_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Property_FieldSubPathArrayItemValue) AsSitePlacementPathItemValue() (PropertySitePlacement_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PropertySitePlacement_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Property_FieldSubPathArrayItemValue) AsMetricOverridePathItemValue() (PropertyMetricOverride_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PropertyMetricOverride_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Property'
func (fpaivs *Property_FieldSubPathArrayItemValue) ContainsValue(source *Property) bool {
	switch fpaivs.Selector() {
	case Property_FieldPathSelectorBacnet:
		return fpaivs.subPathItemValue.(workplace_common.BACNetEntity_FieldPathArrayItemValue).ContainsValue(source.GetBacnet())
	case Property_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Property_FieldPathSelectorSitePlacement:
		return fpaivs.subPathItemValue.(PropertySitePlacement_FieldPathArrayItemValue).ContainsValue(source.GetSitePlacement())
	case Property_FieldPathSelectorMetricOverride:
		return fpaivs.subPathItemValue.(PropertyMetricOverride_FieldPathArrayItemValue).ContainsValue(source.GetMetricOverride())
	default:
		panic(fmt.Sprintf("Invalid selector for Property: %d", fpaivs.Selector()))
	}
}

// Property_FieldPathArrayOfValues allows storing slice of values for Property fields according to their type
type Property_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Property_FieldPath
}

func ParseProperty_FieldPathArrayOfValues(pathStr, valuesStr string) (Property_FieldPathArrayOfValues, error) {
	fp, err := ParseProperty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Property field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Property_FieldPathArrayOfValues), nil
}

func MustParseProperty_FieldPathArrayOfValues(pathStr, valuesStr string) Property_FieldPathArrayOfValues {
	fpaov, err := ParseProperty_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Property_FieldTerminalPathArrayOfValues struct {
	Property_FieldTerminalPath
	values interface{}
}

var _ Property_FieldPathArrayOfValues = (*Property_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Property_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Property_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Property_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Property_FieldPathSelectorBacnet:
		for _, v := range fpaov.values.([]*workplace_common.BACNetEntity) {
			values = append(values, v)
		}
	case Property_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case Property_FieldPathSelectorSitePlacement:
		for _, v := range fpaov.values.([]*Property_SitePlacement) {
			values = append(values, v)
		}
	case Property_FieldPathSelectorMetricOverride:
		for _, v := range fpaov.values.([]*Property_MetricOverride) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsBacnetArrayOfValues() ([]*workplace_common.BACNetEntity, bool) {
	res, ok := fpaov.values.([]*workplace_common.BACNetEntity)
	return res, ok
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsSitePlacementArrayOfValues() ([]*Property_SitePlacement, bool) {
	res, ok := fpaov.values.([]*Property_SitePlacement)
	return res, ok
}
func (fpaov *Property_FieldTerminalPathArrayOfValues) AsMetricOverrideArrayOfValues() ([]*Property_MetricOverride, bool) {
	res, ok := fpaov.values.([]*Property_MetricOverride)
	return res, ok
}

type Property_FieldSubPathArrayOfValues struct {
	Property_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Property_FieldPathArrayOfValues = (*Property_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Property_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Property_FieldSubPathArrayOfValues) AsBacnetPathArrayOfValues() (workplace_common.BACNetEntity_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.BACNetEntity_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Property_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Property_FieldSubPathArrayOfValues) AsSitePlacementPathArrayOfValues() (PropertySitePlacement_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PropertySitePlacement_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Property_FieldSubPathArrayOfValues) AsMetricOverridePathArrayOfValues() (PropertyMetricOverride_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PropertyMetricOverride_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PropertySitePlacement_FieldPath interface {
	gotenobject.FieldPath
	Selector() PropertySitePlacement_FieldPathSelector
	Get(source *Property_SitePlacement) []interface{}
	GetSingle(source *Property_SitePlacement) (interface{}, bool)
	ClearValue(item *Property_SitePlacement)

	// Those methods build corresponding PropertySitePlacement_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PropertySitePlacement_FieldPathValue
	WithIArrayOfValues(values interface{}) PropertySitePlacement_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PropertySitePlacement_FieldPathArrayItemValue
}

type PropertySitePlacement_FieldPathSelector int32

const (
	PropertySitePlacement_FieldPathSelectorSite     PropertySitePlacement_FieldPathSelector = 0
	PropertySitePlacement_FieldPathSelectorBuilding PropertySitePlacement_FieldPathSelector = 1
	PropertySitePlacement_FieldPathSelectorFloor    PropertySitePlacement_FieldPathSelector = 2
	PropertySitePlacement_FieldPathSelectorArea     PropertySitePlacement_FieldPathSelector = 3
	PropertySitePlacement_FieldPathSelectorZone     PropertySitePlacement_FieldPathSelector = 4
)

func (s PropertySitePlacement_FieldPathSelector) String() string {
	switch s {
	case PropertySitePlacement_FieldPathSelectorSite:
		return "site"
	case PropertySitePlacement_FieldPathSelectorBuilding:
		return "building"
	case PropertySitePlacement_FieldPathSelectorFloor:
		return "floor"
	case PropertySitePlacement_FieldPathSelectorArea:
		return "area"
	case PropertySitePlacement_FieldPathSelectorZone:
		return "zone"
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", s))
	}
}

func BuildPropertySitePlacement_FieldPath(fp gotenobject.RawFieldPath) (PropertySitePlacement_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Property_SitePlacement")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "site":
			return &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorSite}, nil
		case "building":
			return &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorBuilding}, nil
		case "floor":
			return &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorFloor}, nil
		case "area":
			return &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorArea}, nil
		case "zone":
			return &PropertySitePlacement_FieldTerminalPath{selector: PropertySitePlacement_FieldPathSelectorZone}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Property_SitePlacement", fp)
}

func ParsePropertySitePlacement_FieldPath(rawField string) (PropertySitePlacement_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPropertySitePlacement_FieldPath(fp)
}

func MustParsePropertySitePlacement_FieldPath(rawField string) PropertySitePlacement_FieldPath {
	fp, err := ParsePropertySitePlacement_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PropertySitePlacement_FieldTerminalPath struct {
	selector PropertySitePlacement_FieldPathSelector
}

var _ PropertySitePlacement_FieldPath = (*PropertySitePlacement_FieldTerminalPath)(nil)

func (fp *PropertySitePlacement_FieldTerminalPath) Selector() PropertySitePlacement_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PropertySitePlacement_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PropertySitePlacement_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Property_SitePlacement
func (fp *PropertySitePlacement_FieldTerminalPath) Get(source *Property_SitePlacement) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PropertySitePlacement_FieldPathSelectorSite:
			if source.Site != nil {
				values = append(values, source.Site)
			}
		case PropertySitePlacement_FieldPathSelectorBuilding:
			if source.Building != nil {
				values = append(values, source.Building)
			}
		case PropertySitePlacement_FieldPathSelectorFloor:
			if source.Floor != nil {
				values = append(values, source.Floor)
			}
		case PropertySitePlacement_FieldPathSelectorArea:
			if source.Area != nil {
				values = append(values, source.Area)
			}
		case PropertySitePlacement_FieldPathSelectorZone:
			if source.Zone != nil {
				values = append(values, source.Zone)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
		}
	}
	return
}

func (fp *PropertySitePlacement_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Property_SitePlacement))
}

// GetSingle returns value pointed by specific field of from source Property_SitePlacement
func (fp *PropertySitePlacement_FieldTerminalPath) GetSingle(source *Property_SitePlacement) (interface{}, bool) {
	switch fp.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		res := source.GetSite()
		return res, res != nil
	case PropertySitePlacement_FieldPathSelectorBuilding:
		res := source.GetBuilding()
		return res, res != nil
	case PropertySitePlacement_FieldPathSelectorFloor:
		res := source.GetFloor()
		return res, res != nil
	case PropertySitePlacement_FieldPathSelectorArea:
		res := source.GetArea()
		return res, res != nil
	case PropertySitePlacement_FieldPathSelectorZone:
		res := source.GetZone()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
	}
}

func (fp *PropertySitePlacement_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Property_SitePlacement))
}

// GetDefault returns a default value of the field type
func (fp *PropertySitePlacement_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		return (*site.Reference)(nil)
	case PropertySitePlacement_FieldPathSelectorBuilding:
		return (*building.Reference)(nil)
	case PropertySitePlacement_FieldPathSelectorFloor:
		return (*floor.Reference)(nil)
	case PropertySitePlacement_FieldPathSelectorArea:
		return (*area.Reference)(nil)
	case PropertySitePlacement_FieldPathSelectorZone:
		return (*zone.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
	}
}

func (fp *PropertySitePlacement_FieldTerminalPath) ClearValue(item *Property_SitePlacement) {
	if item != nil {
		switch fp.selector {
		case PropertySitePlacement_FieldPathSelectorSite:
			item.Site = nil
		case PropertySitePlacement_FieldPathSelectorBuilding:
			item.Building = nil
		case PropertySitePlacement_FieldPathSelectorFloor:
			item.Floor = nil
		case PropertySitePlacement_FieldPathSelectorArea:
			item.Area = nil
		case PropertySitePlacement_FieldPathSelectorZone:
			item.Zone = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
		}
	}
}

func (fp *PropertySitePlacement_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Property_SitePlacement))
}

// IsLeaf - whether field path is holds simple value
func (fp *PropertySitePlacement_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PropertySitePlacement_FieldPathSelectorSite ||
		fp.selector == PropertySitePlacement_FieldPathSelectorBuilding ||
		fp.selector == PropertySitePlacement_FieldPathSelectorFloor ||
		fp.selector == PropertySitePlacement_FieldPathSelectorArea ||
		fp.selector == PropertySitePlacement_FieldPathSelectorZone
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithIValue(value interface{}) PropertySitePlacement_FieldPathValue {
	switch fp.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		return &PropertySitePlacement_FieldTerminalPathValue{PropertySitePlacement_FieldTerminalPath: *fp, value: value.(*site.Reference)}
	case PropertySitePlacement_FieldPathSelectorBuilding:
		return &PropertySitePlacement_FieldTerminalPathValue{PropertySitePlacement_FieldTerminalPath: *fp, value: value.(*building.Reference)}
	case PropertySitePlacement_FieldPathSelectorFloor:
		return &PropertySitePlacement_FieldTerminalPathValue{PropertySitePlacement_FieldTerminalPath: *fp, value: value.(*floor.Reference)}
	case PropertySitePlacement_FieldPathSelectorArea:
		return &PropertySitePlacement_FieldTerminalPathValue{PropertySitePlacement_FieldTerminalPath: *fp, value: value.(*area.Reference)}
	case PropertySitePlacement_FieldPathSelectorZone:
		return &PropertySitePlacement_FieldTerminalPathValue{PropertySitePlacement_FieldTerminalPath: *fp, value: value.(*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
	}
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithIArrayOfValues(values interface{}) PropertySitePlacement_FieldPathArrayOfValues {
	fpaov := &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp}
	switch fp.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		return &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp, values: values.([]*site.Reference)}
	case PropertySitePlacement_FieldPathSelectorBuilding:
		return &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp, values: values.([]*building.Reference)}
	case PropertySitePlacement_FieldPathSelectorFloor:
		return &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp, values: values.([]*floor.Reference)}
	case PropertySitePlacement_FieldPathSelectorArea:
		return &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp, values: values.([]*area.Reference)}
	case PropertySitePlacement_FieldPathSelectorZone:
		return &PropertySitePlacement_FieldTerminalPathArrayOfValues{PropertySitePlacement_FieldTerminalPath: *fp, values: values.([]*zone.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
	}
	return fpaov
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithIArrayItemValue(value interface{}) PropertySitePlacement_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fp.selector))
	}
}

func (fp *PropertySitePlacement_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PropertySitePlacement_FieldPathValue allows storing values for SitePlacement fields according to their type
type PropertySitePlacement_FieldPathValue interface {
	PropertySitePlacement_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Property_SitePlacement)
	CompareWith(*Property_SitePlacement) (cmp int, comparable bool)
}

func ParsePropertySitePlacement_FieldPathValue(pathStr, valueStr string) (PropertySitePlacement_FieldPathValue, error) {
	fp, err := ParsePropertySitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path value from %s: %v", valueStr, err)
	}
	return fpv.(PropertySitePlacement_FieldPathValue), nil
}

func MustParsePropertySitePlacement_FieldPathValue(pathStr, valueStr string) PropertySitePlacement_FieldPathValue {
	fpv, err := ParsePropertySitePlacement_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PropertySitePlacement_FieldTerminalPathValue struct {
	PropertySitePlacement_FieldTerminalPath
	value interface{}
}

var _ PropertySitePlacement_FieldPathValue = (*PropertySitePlacement_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SitePlacement' as interface{}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) AsSiteValue() (*site.Reference, bool) {
	res, ok := fpv.value.(*site.Reference)
	return res, ok
}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) AsBuildingValue() (*building.Reference, bool) {
	res, ok := fpv.value.(*building.Reference)
	return res, ok
}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) AsFloorValue() (*floor.Reference, bool) {
	res, ok := fpv.value.(*floor.Reference)
	return res, ok
}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) AsAreaValue() (*area.Reference, bool) {
	res, ok := fpv.value.(*area.Reference)
	return res, ok
}
func (fpv *PropertySitePlacement_FieldTerminalPathValue) AsZoneValue() (*zone.Reference, bool) {
	res, ok := fpv.value.(*zone.Reference)
	return res, ok
}

// SetTo stores value for selected field for object SitePlacement
func (fpv *PropertySitePlacement_FieldTerminalPathValue) SetTo(target **Property_SitePlacement) {
	if *target == nil {
		*target = new(Property_SitePlacement)
	}
	switch fpv.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		(*target).Site = fpv.value.(*site.Reference)
	case PropertySitePlacement_FieldPathSelectorBuilding:
		(*target).Building = fpv.value.(*building.Reference)
	case PropertySitePlacement_FieldPathSelectorFloor:
		(*target).Floor = fpv.value.(*floor.Reference)
	case PropertySitePlacement_FieldPathSelectorArea:
		(*target).Area = fpv.value.(*area.Reference)
	case PropertySitePlacement_FieldPathSelectorZone:
		(*target).Zone = fpv.value.(*zone.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fpv.selector))
	}
}

func (fpv *PropertySitePlacement_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Property_SitePlacement)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PropertySitePlacement_FieldTerminalPathValue' with the value under path in 'Property_SitePlacement'.
func (fpv *PropertySitePlacement_FieldTerminalPathValue) CompareWith(source *Property_SitePlacement) (int, bool) {
	switch fpv.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		leftValue := fpv.value.(*site.Reference)
		rightValue := source.GetSite()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PropertySitePlacement_FieldPathSelectorBuilding:
		leftValue := fpv.value.(*building.Reference)
		rightValue := source.GetBuilding()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PropertySitePlacement_FieldPathSelectorFloor:
		leftValue := fpv.value.(*floor.Reference)
		rightValue := source.GetFloor()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PropertySitePlacement_FieldPathSelectorArea:
		leftValue := fpv.value.(*area.Reference)
		rightValue := source.GetArea()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PropertySitePlacement_FieldPathSelectorZone:
		leftValue := fpv.value.(*zone.Reference)
		rightValue := source.GetZone()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_SitePlacement: %d", fpv.selector))
	}
}

func (fpv *PropertySitePlacement_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Property_SitePlacement))
}

// PropertySitePlacement_FieldPathArrayItemValue allows storing single item in Path-specific values for SitePlacement according to their type
// Present only for array (repeated) types.
type PropertySitePlacement_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PropertySitePlacement_FieldPath
	ContainsValue(*Property_SitePlacement) bool
}

// ParsePropertySitePlacement_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePropertySitePlacement_FieldPathArrayItemValue(pathStr, valueStr string) (PropertySitePlacement_FieldPathArrayItemValue, error) {
	fp, err := ParsePropertySitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PropertySitePlacement_FieldPathArrayItemValue), nil
}

func MustParsePropertySitePlacement_FieldPathArrayItemValue(pathStr, valueStr string) PropertySitePlacement_FieldPathArrayItemValue {
	fpaiv, err := ParsePropertySitePlacement_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PropertySitePlacement_FieldTerminalPathArrayItemValue struct {
	PropertySitePlacement_FieldTerminalPath
	value interface{}
}

var _ PropertySitePlacement_FieldPathArrayItemValue = (*PropertySitePlacement_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Property_SitePlacement as interface{}
func (fpaiv *PropertySitePlacement_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PropertySitePlacement_FieldTerminalPathArrayItemValue) GetSingle(source *Property_SitePlacement) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PropertySitePlacement_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Property_SitePlacement))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SitePlacement'
func (fpaiv *PropertySitePlacement_FieldTerminalPathArrayItemValue) ContainsValue(source *Property_SitePlacement) bool {
	slice := fpaiv.PropertySitePlacement_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PropertySitePlacement_FieldPathArrayOfValues allows storing slice of values for SitePlacement fields according to their type
type PropertySitePlacement_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PropertySitePlacement_FieldPath
}

func ParsePropertySitePlacement_FieldPathArrayOfValues(pathStr, valuesStr string) (PropertySitePlacement_FieldPathArrayOfValues, error) {
	fp, err := ParsePropertySitePlacement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SitePlacement field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PropertySitePlacement_FieldPathArrayOfValues), nil
}

func MustParsePropertySitePlacement_FieldPathArrayOfValues(pathStr, valuesStr string) PropertySitePlacement_FieldPathArrayOfValues {
	fpaov, err := ParsePropertySitePlacement_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PropertySitePlacement_FieldTerminalPathArrayOfValues struct {
	PropertySitePlacement_FieldTerminalPath
	values interface{}
}

var _ PropertySitePlacement_FieldPathArrayOfValues = (*PropertySitePlacement_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PropertySitePlacement_FieldPathSelectorSite:
		for _, v := range fpaov.values.([]*site.Reference) {
			values = append(values, v)
		}
	case PropertySitePlacement_FieldPathSelectorBuilding:
		for _, v := range fpaov.values.([]*building.Reference) {
			values = append(values, v)
		}
	case PropertySitePlacement_FieldPathSelectorFloor:
		for _, v := range fpaov.values.([]*floor.Reference) {
			values = append(values, v)
		}
	case PropertySitePlacement_FieldPathSelectorArea:
		for _, v := range fpaov.values.([]*area.Reference) {
			values = append(values, v)
		}
	case PropertySitePlacement_FieldPathSelectorZone:
		for _, v := range fpaov.values.([]*zone.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) AsSiteArrayOfValues() ([]*site.Reference, bool) {
	res, ok := fpaov.values.([]*site.Reference)
	return res, ok
}
func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) AsBuildingArrayOfValues() ([]*building.Reference, bool) {
	res, ok := fpaov.values.([]*building.Reference)
	return res, ok
}
func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) AsFloorArrayOfValues() ([]*floor.Reference, bool) {
	res, ok := fpaov.values.([]*floor.Reference)
	return res, ok
}
func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) AsAreaArrayOfValues() ([]*area.Reference, bool) {
	res, ok := fpaov.values.([]*area.Reference)
	return res, ok
}
func (fpaov *PropertySitePlacement_FieldTerminalPathArrayOfValues) AsZoneArrayOfValues() ([]*zone.Reference, bool) {
	res, ok := fpaov.values.([]*zone.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PropertyMetricOverride_FieldPath interface {
	gotenobject.FieldPath
	Selector() PropertyMetricOverride_FieldPathSelector
	Get(source *Property_MetricOverride) []interface{}
	GetSingle(source *Property_MetricOverride) (interface{}, bool)
	ClearValue(item *Property_MetricOverride)

	// Those methods build corresponding PropertyMetricOverride_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PropertyMetricOverride_FieldPathValue
	WithIArrayOfValues(values interface{}) PropertyMetricOverride_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PropertyMetricOverride_FieldPathArrayItemValue
}

type PropertyMetricOverride_FieldPathSelector int32

const (
	PropertyMetricOverride_FieldPathSelectorPropertyName PropertyMetricOverride_FieldPathSelector = 0
	PropertyMetricOverride_FieldPathSelectorUnit         PropertyMetricOverride_FieldPathSelector = 1
)

func (s PropertyMetricOverride_FieldPathSelector) String() string {
	switch s {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		return "property_name"
	case PropertyMetricOverride_FieldPathSelectorUnit:
		return "unit"
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", s))
	}
}

func BuildPropertyMetricOverride_FieldPath(fp gotenobject.RawFieldPath) (PropertyMetricOverride_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Property_MetricOverride")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "property_name", "propertyName", "property-name":
			return &PropertyMetricOverride_FieldTerminalPath{selector: PropertyMetricOverride_FieldPathSelectorPropertyName}, nil
		case "unit":
			return &PropertyMetricOverride_FieldTerminalPath{selector: PropertyMetricOverride_FieldPathSelectorUnit}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Property_MetricOverride", fp)
}

func ParsePropertyMetricOverride_FieldPath(rawField string) (PropertyMetricOverride_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPropertyMetricOverride_FieldPath(fp)
}

func MustParsePropertyMetricOverride_FieldPath(rawField string) PropertyMetricOverride_FieldPath {
	fp, err := ParsePropertyMetricOverride_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PropertyMetricOverride_FieldTerminalPath struct {
	selector PropertyMetricOverride_FieldPathSelector
}

var _ PropertyMetricOverride_FieldPath = (*PropertyMetricOverride_FieldTerminalPath)(nil)

func (fp *PropertyMetricOverride_FieldTerminalPath) Selector() PropertyMetricOverride_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PropertyMetricOverride_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PropertyMetricOverride_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Property_MetricOverride
func (fp *PropertyMetricOverride_FieldTerminalPath) Get(source *Property_MetricOverride) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PropertyMetricOverride_FieldPathSelectorPropertyName:
			values = append(values, source.PropertyName)
		case PropertyMetricOverride_FieldPathSelectorUnit:
			values = append(values, source.Unit)
		default:
			panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
		}
	}
	return
}

func (fp *PropertyMetricOverride_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Property_MetricOverride))
}

// GetSingle returns value pointed by specific field of from source Property_MetricOverride
func (fp *PropertyMetricOverride_FieldTerminalPath) GetSingle(source *Property_MetricOverride) (interface{}, bool) {
	switch fp.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		return source.GetPropertyName(), source != nil
	case PropertyMetricOverride_FieldPathSelectorUnit:
		return source.GetUnit(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
	}
}

func (fp *PropertyMetricOverride_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Property_MetricOverride))
}

// GetDefault returns a default value of the field type
func (fp *PropertyMetricOverride_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		return ""
	case PropertyMetricOverride_FieldPathSelectorUnit:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
	}
}

func (fp *PropertyMetricOverride_FieldTerminalPath) ClearValue(item *Property_MetricOverride) {
	if item != nil {
		switch fp.selector {
		case PropertyMetricOverride_FieldPathSelectorPropertyName:
			item.PropertyName = ""
		case PropertyMetricOverride_FieldPathSelectorUnit:
			item.Unit = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
		}
	}
}

func (fp *PropertyMetricOverride_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Property_MetricOverride))
}

// IsLeaf - whether field path is holds simple value
func (fp *PropertyMetricOverride_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PropertyMetricOverride_FieldPathSelectorPropertyName ||
		fp.selector == PropertyMetricOverride_FieldPathSelectorUnit
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithIValue(value interface{}) PropertyMetricOverride_FieldPathValue {
	switch fp.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		return &PropertyMetricOverride_FieldTerminalPathValue{PropertyMetricOverride_FieldTerminalPath: *fp, value: value.(string)}
	case PropertyMetricOverride_FieldPathSelectorUnit:
		return &PropertyMetricOverride_FieldTerminalPathValue{PropertyMetricOverride_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
	}
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithIArrayOfValues(values interface{}) PropertyMetricOverride_FieldPathArrayOfValues {
	fpaov := &PropertyMetricOverride_FieldTerminalPathArrayOfValues{PropertyMetricOverride_FieldTerminalPath: *fp}
	switch fp.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		return &PropertyMetricOverride_FieldTerminalPathArrayOfValues{PropertyMetricOverride_FieldTerminalPath: *fp, values: values.([]string)}
	case PropertyMetricOverride_FieldPathSelectorUnit:
		return &PropertyMetricOverride_FieldTerminalPathArrayOfValues{PropertyMetricOverride_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
	}
	return fpaov
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithIArrayItemValue(value interface{}) PropertyMetricOverride_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fp.selector))
	}
}

func (fp *PropertyMetricOverride_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PropertyMetricOverride_FieldPathValue allows storing values for MetricOverride fields according to their type
type PropertyMetricOverride_FieldPathValue interface {
	PropertyMetricOverride_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Property_MetricOverride)
	CompareWith(*Property_MetricOverride) (cmp int, comparable bool)
}

func ParsePropertyMetricOverride_FieldPathValue(pathStr, valueStr string) (PropertyMetricOverride_FieldPathValue, error) {
	fp, err := ParsePropertyMetricOverride_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricOverride field path value from %s: %v", valueStr, err)
	}
	return fpv.(PropertyMetricOverride_FieldPathValue), nil
}

func MustParsePropertyMetricOverride_FieldPathValue(pathStr, valueStr string) PropertyMetricOverride_FieldPathValue {
	fpv, err := ParsePropertyMetricOverride_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PropertyMetricOverride_FieldTerminalPathValue struct {
	PropertyMetricOverride_FieldTerminalPath
	value interface{}
}

var _ PropertyMetricOverride_FieldPathValue = (*PropertyMetricOverride_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MetricOverride' as interface{}
func (fpv *PropertyMetricOverride_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PropertyMetricOverride_FieldTerminalPathValue) AsPropertyNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PropertyMetricOverride_FieldTerminalPathValue) AsUnitValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object MetricOverride
func (fpv *PropertyMetricOverride_FieldTerminalPathValue) SetTo(target **Property_MetricOverride) {
	if *target == nil {
		*target = new(Property_MetricOverride)
	}
	switch fpv.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		(*target).PropertyName = fpv.value.(string)
	case PropertyMetricOverride_FieldPathSelectorUnit:
		(*target).Unit = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fpv.selector))
	}
}

func (fpv *PropertyMetricOverride_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Property_MetricOverride)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PropertyMetricOverride_FieldTerminalPathValue' with the value under path in 'Property_MetricOverride'.
func (fpv *PropertyMetricOverride_FieldTerminalPathValue) CompareWith(source *Property_MetricOverride) (int, bool) {
	switch fpv.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		leftValue := fpv.value.(string)
		rightValue := source.GetPropertyName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PropertyMetricOverride_FieldPathSelectorUnit:
		leftValue := fpv.value.(string)
		rightValue := source.GetUnit()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Property_MetricOverride: %d", fpv.selector))
	}
}

func (fpv *PropertyMetricOverride_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Property_MetricOverride))
}

// PropertyMetricOverride_FieldPathArrayItemValue allows storing single item in Path-specific values for MetricOverride according to their type
// Present only for array (repeated) types.
type PropertyMetricOverride_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PropertyMetricOverride_FieldPath
	ContainsValue(*Property_MetricOverride) bool
}

// ParsePropertyMetricOverride_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePropertyMetricOverride_FieldPathArrayItemValue(pathStr, valueStr string) (PropertyMetricOverride_FieldPathArrayItemValue, error) {
	fp, err := ParsePropertyMetricOverride_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricOverride field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PropertyMetricOverride_FieldPathArrayItemValue), nil
}

func MustParsePropertyMetricOverride_FieldPathArrayItemValue(pathStr, valueStr string) PropertyMetricOverride_FieldPathArrayItemValue {
	fpaiv, err := ParsePropertyMetricOverride_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PropertyMetricOverride_FieldTerminalPathArrayItemValue struct {
	PropertyMetricOverride_FieldTerminalPath
	value interface{}
}

var _ PropertyMetricOverride_FieldPathArrayItemValue = (*PropertyMetricOverride_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Property_MetricOverride as interface{}
func (fpaiv *PropertyMetricOverride_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PropertyMetricOverride_FieldTerminalPathArrayItemValue) GetSingle(source *Property_MetricOverride) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PropertyMetricOverride_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Property_MetricOverride))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MetricOverride'
func (fpaiv *PropertyMetricOverride_FieldTerminalPathArrayItemValue) ContainsValue(source *Property_MetricOverride) bool {
	slice := fpaiv.PropertyMetricOverride_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PropertyMetricOverride_FieldPathArrayOfValues allows storing slice of values for MetricOverride fields according to their type
type PropertyMetricOverride_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PropertyMetricOverride_FieldPath
}

func ParsePropertyMetricOverride_FieldPathArrayOfValues(pathStr, valuesStr string) (PropertyMetricOverride_FieldPathArrayOfValues, error) {
	fp, err := ParsePropertyMetricOverride_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricOverride field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PropertyMetricOverride_FieldPathArrayOfValues), nil
}

func MustParsePropertyMetricOverride_FieldPathArrayOfValues(pathStr, valuesStr string) PropertyMetricOverride_FieldPathArrayOfValues {
	fpaov, err := ParsePropertyMetricOverride_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PropertyMetricOverride_FieldTerminalPathArrayOfValues struct {
	PropertyMetricOverride_FieldTerminalPath
	values interface{}
}

var _ PropertyMetricOverride_FieldPathArrayOfValues = (*PropertyMetricOverride_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PropertyMetricOverride_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PropertyMetricOverride_FieldPathSelectorPropertyName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PropertyMetricOverride_FieldPathSelectorUnit:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PropertyMetricOverride_FieldTerminalPathArrayOfValues) AsPropertyNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PropertyMetricOverride_FieldTerminalPathArrayOfValues) AsUnitArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
