// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha2/floor.proto
// DO NOT EDIT!!!

package floor

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Floor Resource
type Floor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Floor
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display Name of Floor, e.g. B1, Ground
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Ordering number describes sorting order, usually:
	// * ground floor is 0
	// * above-ground floors use positive numbers
	// * basement floors use negative numbers (-1 = B1)
	OrderingNumber int32 `protobuf:"zigzag32,3,opt,name=ordering_number,json=orderingNumber,proto3" json:"ordering_number,omitempty" firestore:"orderingNumber"`
	// Floor geometry, usually same as parent Building.
	Geometry *workplace_common.Geometry `protobuf:"bytes,4,opt,name=geometry,proto3" json:"geometry,omitempty" firestore:"geometry"`
	// vendor id mappings
	// PointGrab: Floor
	VendorMappings []*workplace_common.VendorMapping `protobuf:"bytes,5,rep,name=vendor_mappings,json=vendorMappings,proto3" json:"vendor_mappings,omitempty" firestore:"vendorMappings"`
	// VendorSpec is vendor contains configuration
	VendorSpec *Floor_VendorSpec `protobuf:"bytes,6,opt,name=vendor_spec,json=vendorSpec,proto3" json:"vendor_spec,omitempty" firestore:"vendorSpec"`
	// Vendor info
	VendorInfo *Floor_VendorInfo `protobuf:"bytes,7,opt,name=vendor_info,json=vendorInfo,proto3" json:"vendor_info,omitempty" firestore:"vendorInfo"`
	// Vendor State
	VendorState *Floor_VendorState `protobuf:"bytes,8,opt,name=vendor_state,json=vendorState,proto3" json:"vendor_state,omitempty" firestore:"vendorState"`
	Metadata    *ntt_meta.Meta     `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *Floor) Reset() {
	*m = Floor{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor) ProtoMessage() {}

func (m *Floor) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor) GotenMessage() {}

// Deprecated, Use Floor.ProtoReflect.Descriptor instead.
func (*Floor) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0}
}

func (m *Floor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Floor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Floor) GetOrderingNumber() int32 {
	if m != nil {
		return m.OrderingNumber
	}
	return int32(0)
}

func (m *Floor) GetGeometry() *workplace_common.Geometry {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *Floor) GetVendorMappings() []*workplace_common.VendorMapping {
	if m != nil {
		return m.VendorMappings
	}
	return nil
}

func (m *Floor) GetVendorSpec() *Floor_VendorSpec {
	if m != nil {
		return m.VendorSpec
	}
	return nil
}

func (m *Floor) GetVendorInfo() *Floor_VendorInfo {
	if m != nil {
		return m.VendorInfo
	}
	return nil
}

func (m *Floor) GetVendorState() *Floor_VendorState {
	if m != nil {
		return m.VendorState
	}
	return nil
}

func (m *Floor) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Floor) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Floor"))
	}
	m.Name = fv
}

func (m *Floor) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Floor"))
	}
	m.DisplayName = fv
}

func (m *Floor) SetOrderingNumber(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderingNumber", "Floor"))
	}
	m.OrderingNumber = fv
}

func (m *Floor) SetGeometry(fv *workplace_common.Geometry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Geometry", "Floor"))
	}
	m.Geometry = fv
}

func (m *Floor) SetVendorMappings(fv []*workplace_common.VendorMapping) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VendorMappings", "Floor"))
	}
	m.VendorMappings = fv
}

func (m *Floor) SetVendorSpec(fv *Floor_VendorSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VendorSpec", "Floor"))
	}
	m.VendorSpec = fv
}

func (m *Floor) SetVendorInfo(fv *Floor_VendorInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VendorInfo", "Floor"))
	}
	m.VendorInfo = fv
}

func (m *Floor) SetVendorState(fv *Floor_VendorState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VendorState", "Floor"))
	}
	m.VendorState = fv
}

func (m *Floor) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Floor"))
	}
	m.Metadata = fv
}

type Floor_VendorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PointGrab spec
	PointGrab *Floor_VendorSpec_PointGrab `protobuf:"bytes,1,opt,name=point_grab,json=pointGrab,proto3" json:"point_grab,omitempty" firestore:"pointGrab"`
	Mapbox    *Floor_VendorSpec_Mapbox    `protobuf:"bytes,2,opt,name=mapbox,proto3" json:"mapbox,omitempty" firestore:"mapbox"`
}

func (m *Floor_VendorSpec) Reset() {
	*m = Floor_VendorSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorSpec) ProtoMessage() {}

func (m *Floor_VendorSpec) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorSpec) GotenMessage() {}

// Deprecated, Use Floor_VendorSpec.ProtoReflect.Descriptor instead.
func (*Floor_VendorSpec) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Floor_VendorSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorSpec) GetPointGrab() *Floor_VendorSpec_PointGrab {
	if m != nil {
		return m.PointGrab
	}
	return nil
}

func (m *Floor_VendorSpec) GetMapbox() *Floor_VendorSpec_Mapbox {
	if m != nil {
		return m.Mapbox
	}
	return nil
}

func (m *Floor_VendorSpec) SetPointGrab(fv *Floor_VendorSpec_PointGrab) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointGrab", "Floor_VendorSpec"))
	}
	m.PointGrab = fv
}

func (m *Floor_VendorSpec) SetMapbox(fv *Floor_VendorSpec_Mapbox) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mapbox", "Floor_VendorSpec"))
	}
	m.Mapbox = fv
}

type Floor_VendorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PointGrab Info
	PointGrab *Floor_VendorInfo_PointGrab `protobuf:"bytes,1,opt,name=point_grab,json=pointGrab,proto3" json:"point_grab,omitempty" firestore:"pointGrab"`
}

func (m *Floor_VendorInfo) Reset() {
	*m = Floor_VendorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorInfo) ProtoMessage() {}

func (m *Floor_VendorInfo) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorInfo) GotenMessage() {}

// Deprecated, Use Floor_VendorInfo.ProtoReflect.Descriptor instead.
func (*Floor_VendorInfo) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Floor_VendorInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorInfo) GetPointGrab() *Floor_VendorInfo_PointGrab {
	if m != nil {
		return m.PointGrab
	}
	return nil
}

func (m *Floor_VendorInfo) SetPointGrab(fv *Floor_VendorInfo_PointGrab) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointGrab", "Floor_VendorInfo"))
	}
	m.PointGrab = fv
}

// Vendor state
type Floor_VendorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PointGrab data
	PointGrab *Floor_VendorState_PointGrab `protobuf:"bytes,1,opt,name=point_grab,json=pointGrab,proto3" json:"point_grab,omitempty" firestore:"pointGrab"`
}

func (m *Floor_VendorState) Reset() {
	*m = Floor_VendorState{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorState) ProtoMessage() {}

func (m *Floor_VendorState) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorState) GotenMessage() {}

// Deprecated, Use Floor_VendorState.ProtoReflect.Descriptor instead.
func (*Floor_VendorState) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Floor_VendorState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorState) GetPointGrab() *Floor_VendorState_PointGrab {
	if m != nil {
		return m.PointGrab
	}
	return nil
}

func (m *Floor_VendorState) SetPointGrab(fv *Floor_VendorState_PointGrab) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointGrab", "Floor_VendorState"))
	}
	m.PointGrab = fv
}

type Floor_VendorSpec_PointGrab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// floor id in PointGrab
	FloorId string `protobuf:"bytes,1,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty" firestore:"floorId"`
	// Reference points allow calculating transformation between PointGrab
	// internal X,Y coordinates to Lat,Lng Geo-coordinates.
	ReferencePoints []*Floor_VendorSpec_PointGrab_ReferencePoint `protobuf:"bytes,4,rep,name=reference_points,json=referencePoints,proto3" json:"reference_points,omitempty" firestore:"referencePoints"`
}

func (m *Floor_VendorSpec_PointGrab) Reset() {
	*m = Floor_VendorSpec_PointGrab{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorSpec_PointGrab) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorSpec_PointGrab) ProtoMessage() {}

func (m *Floor_VendorSpec_PointGrab) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorSpec_PointGrab) GotenMessage() {}

// Deprecated, Use Floor_VendorSpec_PointGrab.ProtoReflect.Descriptor instead.
func (*Floor_VendorSpec_PointGrab) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Floor_VendorSpec_PointGrab) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorSpec_PointGrab) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorSpec_PointGrab) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorSpec_PointGrab) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorSpec_PointGrab) GetFloorId() string {
	if m != nil {
		return m.FloorId
	}
	return ""
}

func (m *Floor_VendorSpec_PointGrab) GetReferencePoints() []*Floor_VendorSpec_PointGrab_ReferencePoint {
	if m != nil {
		return m.ReferencePoints
	}
	return nil
}

func (m *Floor_VendorSpec_PointGrab) SetFloorId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FloorId", "Floor_VendorSpec_PointGrab"))
	}
	m.FloorId = fv
}

func (m *Floor_VendorSpec_PointGrab) SetReferencePoints(fv []*Floor_VendorSpec_PointGrab_ReferencePoint) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReferencePoints", "Floor_VendorSpec_PointGrab"))
	}
	m.ReferencePoints = fv
}

type Floor_VendorSpec_Mapbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Mapbox tileset with floor plan, e.g. edgelq.ntt-sunnyvale-f1
	FloorPlanTilesetId string `protobuf:"bytes,1,opt,name=floor_plan_tileset_id,json=floorPlanTilesetId,proto3" json:"floor_plan_tileset_id,omitempty" firestore:"floorPlanTilesetId"`
	// Map view bearing in degrees. Examples:
	// - 0: North
	// - 90: East
	// - 180: South
	// - -90 or 270: West
	Bearing float64 `protobuf:"fixed64,2,opt,name=bearing,proto3" json:"bearing,omitempty" firestore:"bearing"`
}

func (m *Floor_VendorSpec_Mapbox) Reset() {
	*m = Floor_VendorSpec_Mapbox{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorSpec_Mapbox) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorSpec_Mapbox) ProtoMessage() {}

func (m *Floor_VendorSpec_Mapbox) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorSpec_Mapbox) GotenMessage() {}

// Deprecated, Use Floor_VendorSpec_Mapbox.ProtoReflect.Descriptor instead.
func (*Floor_VendorSpec_Mapbox) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Floor_VendorSpec_Mapbox) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorSpec_Mapbox) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorSpec_Mapbox) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorSpec_Mapbox) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorSpec_Mapbox) GetFloorPlanTilesetId() string {
	if m != nil {
		return m.FloorPlanTilesetId
	}
	return ""
}

func (m *Floor_VendorSpec_Mapbox) GetBearing() float64 {
	if m != nil {
		return m.Bearing
	}
	return float64(0)
}

func (m *Floor_VendorSpec_Mapbox) SetFloorPlanTilesetId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FloorPlanTilesetId", "Floor_VendorSpec_Mapbox"))
	}
	m.FloorPlanTilesetId = fv
}

func (m *Floor_VendorSpec_Mapbox) SetBearing(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bearing", "Floor_VendorSpec_Mapbox"))
	}
	m.Bearing = fv
}

// maps GeoCoordinates to plane X,Y
type Floor_VendorSpec_PointGrab_ReferencePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// GeoCoordinates
	LatLng *latlng.LatLng `protobuf:"bytes,1,opt,name=lat_lng,json=latLng,proto3" json:"lat_lng,omitempty" firestore:"latLng"`
	// XY Coordinates
	Xy *workplace_common.Point `protobuf:"bytes,2,opt,name=xy,proto3" json:"xy,omitempty" firestore:"xy"`
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) Reset() {
	*m = Floor_VendorSpec_PointGrab_ReferencePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorSpec_PointGrab_ReferencePoint) ProtoMessage() {}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorSpec_PointGrab_ReferencePoint) GotenMessage() {}

// Deprecated, Use Floor_VendorSpec_PointGrab_ReferencePoint.ProtoReflect.Descriptor instead.
func (*Floor_VendorSpec_PointGrab_ReferencePoint) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) GetLatLng() *latlng.LatLng {
	if m != nil {
		return m.LatLng
	}
	return nil
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) GetXy() *workplace_common.Point {
	if m != nil {
		return m.Xy
	}
	return nil
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) SetLatLng(fv *latlng.LatLng) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LatLng", "Floor_VendorSpec_PointGrab_ReferencePoint"))
	}
	m.LatLng = fv
}

func (m *Floor_VendorSpec_PointGrab_ReferencePoint) SetXy(fv *workplace_common.Point) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Xy", "Floor_VendorSpec_PointGrab_ReferencePoint"))
	}
	m.Xy = fv
}

type Floor_VendorInfo_PointGrab struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	ReferencePoints []*workplace_common.ReferencePoint `protobuf:"bytes,1,rep,name=reference_points,json=referencePoints,proto3" json:"reference_points,omitempty" firestore:"referencePoints"`
}

func (m *Floor_VendorInfo_PointGrab) Reset() {
	*m = Floor_VendorInfo_PointGrab{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorInfo_PointGrab) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorInfo_PointGrab) ProtoMessage() {}

func (m *Floor_VendorInfo_PointGrab) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorInfo_PointGrab) GotenMessage() {}

// Deprecated, Use Floor_VendorInfo_PointGrab.ProtoReflect.Descriptor instead.
func (*Floor_VendorInfo_PointGrab) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Floor_VendorInfo_PointGrab) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorInfo_PointGrab) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorInfo_PointGrab) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorInfo_PointGrab) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorInfo_PointGrab) GetReferencePoints() []*workplace_common.ReferencePoint {
	if m != nil {
		return m.ReferencePoints
	}
	return nil
}

func (m *Floor_VendorInfo_PointGrab) SetReferencePoints(fv []*workplace_common.ReferencePoint) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReferencePoints", "Floor_VendorInfo_PointGrab"))
	}
	m.ReferencePoints = fv
}

type Floor_VendorState_PointGrab struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	PeoplePositions *Floor_VendorState_PointGrab_PeoplePositions `protobuf:"bytes,1,opt,name=people_positions,json=peoplePositions,proto3" json:"people_positions,omitempty" firestore:"peoplePositions"`
}

func (m *Floor_VendorState_PointGrab) Reset() {
	*m = Floor_VendorState_PointGrab{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorState_PointGrab) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorState_PointGrab) ProtoMessage() {}

func (m *Floor_VendorState_PointGrab) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorState_PointGrab) GotenMessage() {}

// Deprecated, Use Floor_VendorState_PointGrab.ProtoReflect.Descriptor instead.
func (*Floor_VendorState_PointGrab) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Floor_VendorState_PointGrab) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorState_PointGrab) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorState_PointGrab) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorState_PointGrab) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorState_PointGrab) GetPeoplePositions() *Floor_VendorState_PointGrab_PeoplePositions {
	if m != nil {
		return m.PeoplePositions
	}
	return nil
}

func (m *Floor_VendorState_PointGrab) SetPeoplePositions(fv *Floor_VendorState_PointGrab_PeoplePositions) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PeoplePositions", "Floor_VendorState_PointGrab"))
	}
	m.PeoplePositions = fv
}

// People Positions
type Floor_VendorState_PointGrab_PeoplePositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// coordinates of people
	Coordinates []*latlng.LatLng `protobuf:"bytes,1,rep,name=coordinates,proto3" json:"coordinates,omitempty" firestore:"coordinates"`
	// Last report of coordinates
	LastReportTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_report_timestamp,json=lastReportTimestamp,proto3" json:"last_report_timestamp,omitempty" firestore:"lastReportTimestamp"`
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) Reset() {
	*m = Floor_VendorState_PointGrab_PeoplePositions{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Floor_VendorState_PointGrab_PeoplePositions) ProtoMessage() {}

func (m *Floor_VendorState_PointGrab_PeoplePositions) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_floor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Floor_VendorState_PointGrab_PeoplePositions) GotenMessage() {}

// Deprecated, Use Floor_VendorState_PointGrab_PeoplePositions.ProtoReflect.Descriptor instead.
func (*Floor_VendorState_PointGrab_PeoplePositions) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_floor_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) GetCoordinates() []*latlng.LatLng {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) GetLastReportTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.LastReportTimestamp
	}
	return nil
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) SetCoordinates(fv []*latlng.LatLng) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Coordinates", "Floor_VendorState_PointGrab_PeoplePositions"))
	}
	m.Coordinates = fv
}

func (m *Floor_VendorState_PointGrab_PeoplePositions) SetLastReportTimestamp(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastReportTimestamp", "Floor_VendorState_PointGrab_PeoplePositions"))
	}
	m.LastReportTimestamp = fv
}

var workplace_proto_v1alpha2_floor_proto preflect.FileDescriptor

var workplace_proto_v1alpha2_floor_proto_rawDesc = []byte{
	0x0a, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x11, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4e,
	0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x49,
	0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x91, 0x04, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51,
	0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x62, 0x12, 0x47, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x62,
	0x6f, 0x78, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x62, 0x6f, 0x78, 0x1a, 0x8f, 0x02, 0x0a, 0x09, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x6d, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x4c, 0x6e,
	0x67, 0x12, 0x2d, 0x0a, 0x02, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x78, 0x79,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x55, 0x0a, 0x06,
	0x4d, 0x61, 0x70, 0x62, 0x6f, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0xbf, 0x01, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x47, 0x72, 0x61, 0x62, 0x1a, 0x5e, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72,
	0x61, 0x62, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xfa, 0x02, 0x0a, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x52, 0x09,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x1a, 0x96, 0x02, 0x0a, 0x09, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x12, 0x6e, 0x0a, 0x10, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x2e, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x3a, 0xac, 0x04, 0xea, 0x41, 0x72, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x54, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x69, 0x74, 0x65, 0x7d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x7b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x7d, 0x92, 0xd9, 0x21, 0x8d, 0x02, 0x0a,
	0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x1a,
	0x08, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0xe8, 0x01, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x1f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x2e, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x13, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x47,
	0x72, 0x61, 0x62, 0x20, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x20, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x3e,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x4c, 0x69, 0x76, 0x65, 0x20, 0x56, 0x69, 0x65, 0x77, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x02, 0xda, 0x94, 0x23, 0x2b,
	0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x1f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x61, 0x62, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0xc2, 0x85, 0x2c, 0x72, 0x22,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x0f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x0b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x95, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x41, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x0a, 0x1d,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x0a, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x3b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0xd2, 0x84, 0xd1, 0x02, 0x45, 0x0a, 0x0d,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0xf2, 0x85, 0xd1, 0x02, 0x49, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0xa2, 0x80, 0xd1, 0x02, 0x43, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	workplace_proto_v1alpha2_floor_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha2_floor_proto_rawDescData = workplace_proto_v1alpha2_floor_proto_rawDesc
)

func workplace_proto_v1alpha2_floor_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha2_floor_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha2_floor_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha2_floor_proto_rawDescData)
	})
	return workplace_proto_v1alpha2_floor_proto_rawDescData
}

var workplace_proto_v1alpha2_floor_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var workplace_proto_v1alpha2_floor_proto_goTypes = []interface{}{
	(*Floor)(nil),                                       // 0: ntt.workplace.v1alpha2.Floor
	(*Floor_VendorSpec)(nil),                            // 1: ntt.workplace.v1alpha2.Floor.VendorSpec
	(*Floor_VendorInfo)(nil),                            // 2: ntt.workplace.v1alpha2.Floor.VendorInfo
	(*Floor_VendorState)(nil),                           // 3: ntt.workplace.v1alpha2.Floor.VendorState
	(*Floor_VendorSpec_PointGrab)(nil),                  // 4: ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab
	(*Floor_VendorSpec_Mapbox)(nil),                     // 5: ntt.workplace.v1alpha2.Floor.VendorSpec.Mapbox
	(*Floor_VendorSpec_PointGrab_ReferencePoint)(nil),   // 6: ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab.ReferencePoint
	(*Floor_VendorInfo_PointGrab)(nil),                  // 7: ntt.workplace.v1alpha2.Floor.VendorInfo.PointGrab
	(*Floor_VendorState_PointGrab)(nil),                 // 8: ntt.workplace.v1alpha2.Floor.VendorState.PointGrab
	(*Floor_VendorState_PointGrab_PeoplePositions)(nil), // 9: ntt.workplace.v1alpha2.Floor.VendorState.PointGrab.PeoplePositions
	(*workplace_common.Geometry)(nil),                   // 10: ntt.workplace.v1alpha2.Geometry
	(*workplace_common.VendorMapping)(nil),              // 11: ntt.workplace.v1alpha2.VendorMapping
	(*ntt_meta.Meta)(nil),                               // 12: ntt.types.Meta
	(*latlng.LatLng)(nil),                               // 13: google.type.LatLng
	(*workplace_common.Point)(nil),                      // 14: ntt.workplace.v1alpha2.Point
	(*workplace_common.ReferencePoint)(nil),             // 15: ntt.workplace.v1alpha2.ReferencePoint
	(*timestamp.Timestamp)(nil),                         // 16: google.protobuf.Timestamp
}
var workplace_proto_v1alpha2_floor_proto_depIdxs = []int32{
	10, // 0: ntt.workplace.v1alpha2.Floor.geometry:type_name -> ntt.workplace.v1alpha2.Geometry
	11, // 1: ntt.workplace.v1alpha2.Floor.vendor_mappings:type_name -> ntt.workplace.v1alpha2.VendorMapping
	1,  // 2: ntt.workplace.v1alpha2.Floor.vendor_spec:type_name -> ntt.workplace.v1alpha2.Floor.VendorSpec
	2,  // 3: ntt.workplace.v1alpha2.Floor.vendor_info:type_name -> ntt.workplace.v1alpha2.Floor.VendorInfo
	3,  // 4: ntt.workplace.v1alpha2.Floor.vendor_state:type_name -> ntt.workplace.v1alpha2.Floor.VendorState
	12, // 5: ntt.workplace.v1alpha2.Floor.metadata:type_name -> ntt.types.Meta
	4,  // 6: ntt.workplace.v1alpha2.Floor.VendorSpec.point_grab:type_name -> ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab
	5,  // 7: ntt.workplace.v1alpha2.Floor.VendorSpec.mapbox:type_name -> ntt.workplace.v1alpha2.Floor.VendorSpec.Mapbox
	7,  // 8: ntt.workplace.v1alpha2.Floor.VendorInfo.point_grab:type_name -> ntt.workplace.v1alpha2.Floor.VendorInfo.PointGrab
	8,  // 9: ntt.workplace.v1alpha2.Floor.VendorState.point_grab:type_name -> ntt.workplace.v1alpha2.Floor.VendorState.PointGrab
	6,  // 10: ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab.reference_points:type_name -> ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab.ReferencePoint
	13, // 11: ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab.ReferencePoint.lat_lng:type_name -> google.type.LatLng
	14, // 12: ntt.workplace.v1alpha2.Floor.VendorSpec.PointGrab.ReferencePoint.xy:type_name -> ntt.workplace.v1alpha2.Point
	15, // 13: ntt.workplace.v1alpha2.Floor.VendorInfo.PointGrab.reference_points:type_name -> ntt.workplace.v1alpha2.ReferencePoint
	9,  // 14: ntt.workplace.v1alpha2.Floor.VendorState.PointGrab.people_positions:type_name -> ntt.workplace.v1alpha2.Floor.VendorState.PointGrab.PeoplePositions
	13, // 15: ntt.workplace.v1alpha2.Floor.VendorState.PointGrab.PeoplePositions.coordinates:type_name -> google.type.LatLng
	16, // 16: ntt.workplace.v1alpha2.Floor.VendorState.PointGrab.PeoplePositions.last_report_timestamp:type_name -> google.protobuf.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha2_floor_proto_init() }
func workplace_proto_v1alpha2_floor_proto_init() {
	if workplace_proto_v1alpha2_floor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha2_floor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorSpec_PointGrab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorSpec_Mapbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorSpec_PointGrab_ReferencePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorInfo_PointGrab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorState_PointGrab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_floor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor_VendorState_PointGrab_PeoplePositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha2_floor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           workplace_proto_v1alpha2_floor_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha2_floor_proto_depIdxs,
		MessageInfos:      workplace_proto_v1alpha2_floor_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha2_floor_proto = out.File
	workplace_proto_v1alpha2_floor_proto_rawDesc = nil
	workplace_proto_v1alpha2_floor_proto_goTypes = nil
	workplace_proto_v1alpha2_floor_proto_depIdxs = nil
}
