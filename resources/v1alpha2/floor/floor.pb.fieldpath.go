// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/floor.proto
// DO NOT EDIT!!!

package floor

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Floor_FieldPath interface {
	gotenobject.FieldPath
	Selector() Floor_FieldPathSelector
	Get(source *Floor) []interface{}
	GetSingle(source *Floor) (interface{}, bool)
	ClearValue(item *Floor)

	// Those methods build corresponding Floor_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Floor_FieldPathValue
	WithIArrayOfValues(values interface{}) Floor_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Floor_FieldPathArrayItemValue
}

type Floor_FieldPathSelector int32

const (
	Floor_FieldPathSelectorName           Floor_FieldPathSelector = 0
	Floor_FieldPathSelectorDisplayName    Floor_FieldPathSelector = 1
	Floor_FieldPathSelectorOrderingNumber Floor_FieldPathSelector = 2
	Floor_FieldPathSelectorGeometry       Floor_FieldPathSelector = 3
	Floor_FieldPathSelectorVendorMappings Floor_FieldPathSelector = 4
	Floor_FieldPathSelectorVendorSpec     Floor_FieldPathSelector = 5
	Floor_FieldPathSelectorVendorInfo     Floor_FieldPathSelector = 6
	Floor_FieldPathSelectorVendorState    Floor_FieldPathSelector = 7
	Floor_FieldPathSelectorMetadata       Floor_FieldPathSelector = 8
)

func (s Floor_FieldPathSelector) String() string {
	switch s {
	case Floor_FieldPathSelectorName:
		return "name"
	case Floor_FieldPathSelectorDisplayName:
		return "display_name"
	case Floor_FieldPathSelectorOrderingNumber:
		return "ordering_number"
	case Floor_FieldPathSelectorGeometry:
		return "geometry"
	case Floor_FieldPathSelectorVendorMappings:
		return "vendor_mappings"
	case Floor_FieldPathSelectorVendorSpec:
		return "vendor_spec"
	case Floor_FieldPathSelectorVendorInfo:
		return "vendor_info"
	case Floor_FieldPathSelectorVendorState:
		return "vendor_state"
	case Floor_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", s))
	}
}

func BuildFloor_FieldPath(fp gotenobject.RawFieldPath) (Floor_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorDisplayName}, nil
		case "ordering_number", "orderingNumber", "ordering-number":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorOrderingNumber}, nil
		case "geometry":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorGeometry}, nil
		case "vendor_mappings", "vendorMappings", "vendor-mappings":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorMappings}, nil
		case "vendor_spec", "vendorSpec", "vendor-spec":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorSpec}, nil
		case "vendor_info", "vendorInfo", "vendor-info":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorInfo}, nil
		case "vendor_state", "vendorState", "vendor-state":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorVendorState}, nil
		case "metadata":
			return &Floor_FieldTerminalPath{selector: Floor_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "vendor_mappings", "vendorMappings", "vendor-mappings":
			if subpath, err := workplace_common.BuildVendorMapping_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorVendorMappings, subPath: subpath}, nil
			}
		case "vendor_spec", "vendorSpec", "vendor-spec":
			if subpath, err := BuildFloorVendorSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorVendorSpec, subPath: subpath}, nil
			}
		case "vendor_info", "vendorInfo", "vendor-info":
			if subpath, err := BuildFloorVendorInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorVendorInfo, subPath: subpath}, nil
			}
		case "vendor_state", "vendorState", "vendor-state":
			if subpath, err := BuildFloorVendorState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorVendorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Floor_FieldSubPath{selector: Floor_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor", fp)
}

func ParseFloor_FieldPath(rawField string) (Floor_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloor_FieldPath(fp)
}

func MustParseFloor_FieldPath(rawField string) Floor_FieldPath {
	fp, err := ParseFloor_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Floor_FieldTerminalPath struct {
	selector Floor_FieldPathSelector
}

var _ Floor_FieldPath = (*Floor_FieldTerminalPath)(nil)

func (fp *Floor_FieldTerminalPath) Selector() Floor_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Floor_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Floor_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor
func (fp *Floor_FieldTerminalPath) Get(source *Floor) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Floor_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Floor_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Floor_FieldPathSelectorOrderingNumber:
			values = append(values, source.OrderingNumber)
		case Floor_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Floor_FieldPathSelectorVendorMappings:
			for _, value := range source.GetVendorMappings() {
				values = append(values, value)
			}
		case Floor_FieldPathSelectorVendorSpec:
			if source.VendorSpec != nil {
				values = append(values, source.VendorSpec)
			}
		case Floor_FieldPathSelectorVendorInfo:
			if source.VendorInfo != nil {
				values = append(values, source.VendorInfo)
			}
		case Floor_FieldPathSelectorVendorState:
			if source.VendorState != nil {
				values = append(values, source.VendorState)
			}
		case Floor_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
		}
	}
	return
}

func (fp *Floor_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor))
}

// GetSingle returns value pointed by specific field of from source Floor
func (fp *Floor_FieldTerminalPath) GetSingle(source *Floor) (interface{}, bool) {
	switch fp.selector {
	case Floor_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Floor_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Floor_FieldPathSelectorOrderingNumber:
		return source.GetOrderingNumber(), source != nil
	case Floor_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Floor_FieldPathSelectorVendorMappings:
		res := source.GetVendorMappings()
		return res, res != nil
	case Floor_FieldPathSelectorVendorSpec:
		res := source.GetVendorSpec()
		return res, res != nil
	case Floor_FieldPathSelectorVendorInfo:
		res := source.GetVendorInfo()
		return res, res != nil
	case Floor_FieldPathSelectorVendorState:
		res := source.GetVendorState()
		return res, res != nil
	case Floor_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
	}
}

func (fp *Floor_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor))
}

// GetDefault returns a default value of the field type
func (fp *Floor_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Floor_FieldPathSelectorName:
		return (*Name)(nil)
	case Floor_FieldPathSelectorDisplayName:
		return ""
	case Floor_FieldPathSelectorOrderingNumber:
		return int32(0)
	case Floor_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Floor_FieldPathSelectorVendorMappings:
		return ([]*workplace_common.VendorMapping)(nil)
	case Floor_FieldPathSelectorVendorSpec:
		return (*Floor_VendorSpec)(nil)
	case Floor_FieldPathSelectorVendorInfo:
		return (*Floor_VendorInfo)(nil)
	case Floor_FieldPathSelectorVendorState:
		return (*Floor_VendorState)(nil)
	case Floor_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
	}
}

func (fp *Floor_FieldTerminalPath) ClearValue(item *Floor) {
	if item != nil {
		switch fp.selector {
		case Floor_FieldPathSelectorName:
			item.Name = nil
		case Floor_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Floor_FieldPathSelectorOrderingNumber:
			item.OrderingNumber = int32(0)
		case Floor_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Floor_FieldPathSelectorVendorMappings:
			item.VendorMappings = nil
		case Floor_FieldPathSelectorVendorSpec:
			item.VendorSpec = nil
		case Floor_FieldPathSelectorVendorInfo:
			item.VendorInfo = nil
		case Floor_FieldPathSelectorVendorState:
			item.VendorState = nil
		case Floor_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
		}
	}
}

func (fp *Floor_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor))
}

// IsLeaf - whether field path is holds simple value
func (fp *Floor_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Floor_FieldPathSelectorName ||
		fp.selector == Floor_FieldPathSelectorDisplayName ||
		fp.selector == Floor_FieldPathSelectorOrderingNumber
}

func (fp *Floor_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Floor_FieldTerminalPath) WithIValue(value interface{}) Floor_FieldPathValue {
	switch fp.selector {
	case Floor_FieldPathSelectorName:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*Name)}
	case Floor_FieldPathSelectorDisplayName:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(string)}
	case Floor_FieldPathSelectorOrderingNumber:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(int32)}
	case Floor_FieldPathSelectorGeometry:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Floor_FieldPathSelectorVendorMappings:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.([]*workplace_common.VendorMapping)}
	case Floor_FieldPathSelectorVendorSpec:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*Floor_VendorSpec)}
	case Floor_FieldPathSelectorVendorInfo:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*Floor_VendorInfo)}
	case Floor_FieldPathSelectorVendorState:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*Floor_VendorState)}
	case Floor_FieldPathSelectorMetadata:
		return &Floor_FieldTerminalPathValue{Floor_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
	}
}

func (fp *Floor_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Floor_FieldTerminalPath) WithIArrayOfValues(values interface{}) Floor_FieldPathArrayOfValues {
	fpaov := &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp}
	switch fp.selector {
	case Floor_FieldPathSelectorName:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Floor_FieldPathSelectorDisplayName:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]string)}
	case Floor_FieldPathSelectorOrderingNumber:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]int32)}
	case Floor_FieldPathSelectorGeometry:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Floor_FieldPathSelectorVendorMappings:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([][]*workplace_common.VendorMapping)}
	case Floor_FieldPathSelectorVendorSpec:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*Floor_VendorSpec)}
	case Floor_FieldPathSelectorVendorInfo:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*Floor_VendorInfo)}
	case Floor_FieldPathSelectorVendorState:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*Floor_VendorState)}
	case Floor_FieldPathSelectorMetadata:
		return &Floor_FieldTerminalPathArrayOfValues{Floor_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
	}
	return fpaov
}

func (fp *Floor_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Floor_FieldTerminalPath) WithIArrayItemValue(value interface{}) Floor_FieldPathArrayItemValue {
	switch fp.selector {
	case Floor_FieldPathSelectorVendorMappings:
		return &Floor_FieldTerminalPathArrayItemValue{Floor_FieldTerminalPath: *fp, value: value.(*workplace_common.VendorMapping)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fp.selector))
	}
}

func (fp *Floor_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Floor_FieldSubPath struct {
	selector Floor_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Floor_FieldPath = (*Floor_FieldSubPath)(nil)

func (fps *Floor_FieldSubPath) Selector() Floor_FieldPathSelector {
	return fps.selector
}
func (fps *Floor_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Floor_FieldSubPath) AsVendorMappingsSubPath() (workplace_common.VendorMapping_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.VendorMapping_FieldPath)
	return res, ok
}
func (fps *Floor_FieldSubPath) AsVendorSpecSubPath() (FloorVendorSpec_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorSpec_FieldPath)
	return res, ok
}
func (fps *Floor_FieldSubPath) AsVendorInfoSubPath() (FloorVendorInfo_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorInfo_FieldPath)
	return res, ok
}
func (fps *Floor_FieldSubPath) AsVendorStateSubPath() (FloorVendorState_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorState_FieldPath)
	return res, ok
}
func (fps *Floor_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Floor_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Floor_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor
func (fps *Floor_FieldSubPath) Get(source *Floor) (values []interface{}) {
	if asGeometryFieldPath, ok := fps.AsGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetGeometry())...)
	} else if asVendorMappingFieldPath, ok := fps.AsVendorMappingsSubPath(); ok {
		for _, item := range source.GetVendorMappings() {
			values = append(values, asVendorMappingFieldPath.Get(item)...)
		}
	} else if asVendorSpecFieldPath, ok := fps.AsVendorSpecSubPath(); ok {
		values = append(values, asVendorSpecFieldPath.Get(source.GetVendorSpec())...)
	} else if asVendorInfoFieldPath, ok := fps.AsVendorInfoSubPath(); ok {
		values = append(values, asVendorInfoFieldPath.Get(source.GetVendorInfo())...)
	} else if asVendorStateFieldPath, ok := fps.AsVendorStateSubPath(); ok {
		values = append(values, asVendorStateFieldPath.Get(source.GetVendorState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fps.selector))
	}
	return
}

func (fps *Floor_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor))
}

// GetSingle returns value of selected field from source Floor
func (fps *Floor_FieldSubPath) GetSingle(source *Floor) (interface{}, bool) {
	switch fps.selector {
	case Floor_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Floor_FieldPathSelectorVendorMappings:
		if len(source.GetVendorMappings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorMappings()[0])
	case Floor_FieldPathSelectorVendorSpec:
		if source.GetVendorSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorSpec())
	case Floor_FieldPathSelectorVendorInfo:
		if source.GetVendorInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorInfo())
	case Floor_FieldPathSelectorVendorState:
		if source.GetVendorState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorState())
	case Floor_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fps.selector))
	}
}

func (fps *Floor_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor))
}

// GetDefault returns a default value of the field type
func (fps *Floor_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Floor_FieldSubPath) ClearValue(item *Floor) {
	if item != nil {
		switch fps.selector {
		case Floor_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Floor_FieldPathSelectorVendorMappings:
			for _, subItem := range item.VendorMappings {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Floor_FieldPathSelectorVendorSpec:
			fps.subPath.ClearValueRaw(item.VendorSpec)
		case Floor_FieldPathSelectorVendorInfo:
			fps.subPath.ClearValueRaw(item.VendorInfo)
		case Floor_FieldPathSelectorVendorState:
			fps.subPath.ClearValueRaw(item.VendorState)
		case Floor_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor: %d", fps.selector))
		}
	}
}

func (fps *Floor_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor))
}

// IsLeaf - whether field path is holds simple value
func (fps *Floor_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Floor_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Floor_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Floor_FieldSubPath) WithIValue(value interface{}) Floor_FieldPathValue {
	return &Floor_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Floor_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Floor_FieldSubPath) WithIArrayOfValues(values interface{}) Floor_FieldPathArrayOfValues {
	return &Floor_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Floor_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Floor_FieldSubPath) WithIArrayItemValue(value interface{}) Floor_FieldPathArrayItemValue {
	return &Floor_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Floor_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Floor_FieldPathValue allows storing values for Floor fields according to their type
type Floor_FieldPathValue interface {
	Floor_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor)
	CompareWith(*Floor) (cmp int, comparable bool)
}

func ParseFloor_FieldPathValue(pathStr, valueStr string) (Floor_FieldPathValue, error) {
	fp, err := ParseFloor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Floor field path value from %s: %v", valueStr, err)
	}
	return fpv.(Floor_FieldPathValue), nil
}

func MustParseFloor_FieldPathValue(pathStr, valueStr string) Floor_FieldPathValue {
	fpv, err := ParseFloor_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Floor_FieldTerminalPathValue struct {
	Floor_FieldTerminalPath
	value interface{}
}

var _ Floor_FieldPathValue = (*Floor_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Floor' as interface{}
func (fpv *Floor_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Floor_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsOrderingNumberValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsVendorMappingsValue() ([]*workplace_common.VendorMapping, bool) {
	res, ok := fpv.value.([]*workplace_common.VendorMapping)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsVendorSpecValue() (*Floor_VendorSpec, bool) {
	res, ok := fpv.value.(*Floor_VendorSpec)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsVendorInfoValue() (*Floor_VendorInfo, bool) {
	res, ok := fpv.value.(*Floor_VendorInfo)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsVendorStateValue() (*Floor_VendorState, bool) {
	res, ok := fpv.value.(*Floor_VendorState)
	return res, ok
}
func (fpv *Floor_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Floor
func (fpv *Floor_FieldTerminalPathValue) SetTo(target **Floor) {
	if *target == nil {
		*target = new(Floor)
	}
	switch fpv.selector {
	case Floor_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Floor_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Floor_FieldPathSelectorOrderingNumber:
		(*target).OrderingNumber = fpv.value.(int32)
	case Floor_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Floor_FieldPathSelectorVendorMappings:
		(*target).VendorMappings = fpv.value.([]*workplace_common.VendorMapping)
	case Floor_FieldPathSelectorVendorSpec:
		(*target).VendorSpec = fpv.value.(*Floor_VendorSpec)
	case Floor_FieldPathSelectorVendorInfo:
		(*target).VendorInfo = fpv.value.(*Floor_VendorInfo)
	case Floor_FieldPathSelectorVendorState:
		(*target).VendorState = fpv.value.(*Floor_VendorState)
	case Floor_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fpv.selector))
	}
}

func (fpv *Floor_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Floor_FieldTerminalPathValue' with the value under path in 'Floor'.
func (fpv *Floor_FieldTerminalPathValue) CompareWith(source *Floor) (int, bool) {
	switch fpv.selector {
	case Floor_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Floor_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Floor_FieldPathSelectorOrderingNumber:
		leftValue := fpv.value.(int32)
		rightValue := source.GetOrderingNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Floor_FieldPathSelectorGeometry:
		return 0, false
	case Floor_FieldPathSelectorVendorMappings:
		return 0, false
	case Floor_FieldPathSelectorVendorSpec:
		return 0, false
	case Floor_FieldPathSelectorVendorInfo:
		return 0, false
	case Floor_FieldPathSelectorVendorState:
		return 0, false
	case Floor_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fpv.selector))
	}
}

func (fpv *Floor_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor))
}

type Floor_FieldSubPathValue struct {
	Floor_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Floor_FieldPathValue = (*Floor_FieldSubPathValue)(nil)

func (fpvs *Floor_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Floor_FieldSubPathValue) AsVendorMappingsPathValue() (workplace_common.VendorMapping_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.VendorMapping_FieldPathValue)
	return res, ok
}
func (fpvs *Floor_FieldSubPathValue) AsVendorSpecPathValue() (FloorVendorSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Floor_FieldSubPathValue) AsVendorInfoPathValue() (FloorVendorInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorInfo_FieldPathValue)
	return res, ok
}
func (fpvs *Floor_FieldSubPathValue) AsVendorStatePathValue() (FloorVendorState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorState_FieldPathValue)
	return res, ok
}
func (fpvs *Floor_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Floor_FieldSubPathValue) SetTo(target **Floor) {
	if *target == nil {
		*target = new(Floor)
	}
	switch fpvs.Selector() {
	case Floor_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Floor_FieldPathSelectorVendorMappings:
		panic("FieldPath setter is unsupported for array subpaths")
	case Floor_FieldPathSelectorVendorSpec:
		fpvs.subPathValue.(FloorVendorSpec_FieldPathValue).SetTo(&(*target).VendorSpec)
	case Floor_FieldPathSelectorVendorInfo:
		fpvs.subPathValue.(FloorVendorInfo_FieldPathValue).SetTo(&(*target).VendorInfo)
	case Floor_FieldPathSelectorVendorState:
		fpvs.subPathValue.(FloorVendorState_FieldPathValue).SetTo(&(*target).VendorState)
	case Floor_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fpvs.Selector()))
	}
}

func (fpvs *Floor_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Floor_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Floor_FieldSubPathValue) CompareWith(source *Floor) (int, bool) {
	switch fpvs.Selector() {
	case Floor_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Floor_FieldPathSelectorVendorMappings:
		return 0, false // repeated field
	case Floor_FieldPathSelectorVendorSpec:
		return fpvs.subPathValue.(FloorVendorSpec_FieldPathValue).CompareWith(source.GetVendorSpec())
	case Floor_FieldPathSelectorVendorInfo:
		return fpvs.subPathValue.(FloorVendorInfo_FieldPathValue).CompareWith(source.GetVendorInfo())
	case Floor_FieldPathSelectorVendorState:
		return fpvs.subPathValue.(FloorVendorState_FieldPathValue).CompareWith(source.GetVendorState())
	case Floor_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fpvs.Selector()))
	}
}

func (fpvs *Floor_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor))
}

// Floor_FieldPathArrayItemValue allows storing single item in Path-specific values for Floor according to their type
// Present only for array (repeated) types.
type Floor_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Floor_FieldPath
	ContainsValue(*Floor) bool
}

// ParseFloor_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloor_FieldPathArrayItemValue(pathStr, valueStr string) (Floor_FieldPathArrayItemValue, error) {
	fp, err := ParseFloor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Floor field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Floor_FieldPathArrayItemValue), nil
}

func MustParseFloor_FieldPathArrayItemValue(pathStr, valueStr string) Floor_FieldPathArrayItemValue {
	fpaiv, err := ParseFloor_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Floor_FieldTerminalPathArrayItemValue struct {
	Floor_FieldTerminalPath
	value interface{}
}

var _ Floor_FieldPathArrayItemValue = (*Floor_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor as interface{}
func (fpaiv *Floor_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Floor_FieldTerminalPathArrayItemValue) AsVendorMappingsItemValue() (*workplace_common.VendorMapping, bool) {
	res, ok := fpaiv.value.(*workplace_common.VendorMapping)
	return res, ok
}

func (fpaiv *Floor_FieldTerminalPathArrayItemValue) GetSingle(source *Floor) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Floor_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Floor'
func (fpaiv *Floor_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor) bool {
	slice := fpaiv.Floor_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Floor_FieldSubPathArrayItemValue struct {
	Floor_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Floor_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsVendorMappingsPathItemValue() (workplace_common.VendorMapping_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.VendorMapping_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsVendorSpecPathItemValue() (FloorVendorSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsVendorInfoPathItemValue() (FloorVendorInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsVendorStatePathItemValue() (FloorVendorState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Floor_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Floor'
func (fpaivs *Floor_FieldSubPathArrayItemValue) ContainsValue(source *Floor) bool {
	switch fpaivs.Selector() {
	case Floor_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Floor_FieldPathSelectorVendorMappings:
		return false // repeated/map field
	case Floor_FieldPathSelectorVendorSpec:
		return fpaivs.subPathItemValue.(FloorVendorSpec_FieldPathArrayItemValue).ContainsValue(source.GetVendorSpec())
	case Floor_FieldPathSelectorVendorInfo:
		return fpaivs.subPathItemValue.(FloorVendorInfo_FieldPathArrayItemValue).ContainsValue(source.GetVendorInfo())
	case Floor_FieldPathSelectorVendorState:
		return fpaivs.subPathItemValue.(FloorVendorState_FieldPathArrayItemValue).ContainsValue(source.GetVendorState())
	case Floor_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor: %d", fpaivs.Selector()))
	}
}

// Floor_FieldPathArrayOfValues allows storing slice of values for Floor fields according to their type
type Floor_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Floor_FieldPath
}

func ParseFloor_FieldPathArrayOfValues(pathStr, valuesStr string) (Floor_FieldPathArrayOfValues, error) {
	fp, err := ParseFloor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Floor field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Floor_FieldPathArrayOfValues), nil
}

func MustParseFloor_FieldPathArrayOfValues(pathStr, valuesStr string) Floor_FieldPathArrayOfValues {
	fpaov, err := ParseFloor_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Floor_FieldTerminalPathArrayOfValues struct {
	Floor_FieldTerminalPath
	values interface{}
}

var _ Floor_FieldPathArrayOfValues = (*Floor_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Floor_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Floor_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorOrderingNumber:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorVendorMappings:
		for _, v := range fpaov.values.([][]*workplace_common.VendorMapping) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorVendorSpec:
		for _, v := range fpaov.values.([]*Floor_VendorSpec) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorVendorInfo:
		for _, v := range fpaov.values.([]*Floor_VendorInfo) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorVendorState:
		for _, v := range fpaov.values.([]*Floor_VendorState) {
			values = append(values, v)
		}
	case Floor_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsOrderingNumberArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsVendorMappingsArrayOfValues() ([][]*workplace_common.VendorMapping, bool) {
	res, ok := fpaov.values.([][]*workplace_common.VendorMapping)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsVendorSpecArrayOfValues() ([]*Floor_VendorSpec, bool) {
	res, ok := fpaov.values.([]*Floor_VendorSpec)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsVendorInfoArrayOfValues() ([]*Floor_VendorInfo, bool) {
	res, ok := fpaov.values.([]*Floor_VendorInfo)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsVendorStateArrayOfValues() ([]*Floor_VendorState, bool) {
	res, ok := fpaov.values.([]*Floor_VendorState)
	return res, ok
}
func (fpaov *Floor_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Floor_FieldSubPathArrayOfValues struct {
	Floor_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Floor_FieldPathArrayOfValues = (*Floor_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Floor_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsVendorMappingsPathArrayOfValues() (workplace_common.VendorMapping_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.VendorMapping_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsVendorSpecPathArrayOfValues() (FloorVendorSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsVendorInfoPathArrayOfValues() (FloorVendorInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsVendorStatePathArrayOfValues() (FloorVendorState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Floor_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorSpec_FieldPathSelector
	Get(source *Floor_VendorSpec) []interface{}
	GetSingle(source *Floor_VendorSpec) (interface{}, bool)
	ClearValue(item *Floor_VendorSpec)

	// Those methods build corresponding FloorVendorSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorSpec_FieldPathArrayItemValue
}

type FloorVendorSpec_FieldPathSelector int32

const (
	FloorVendorSpec_FieldPathSelectorPointGrab FloorVendorSpec_FieldPathSelector = 0
	FloorVendorSpec_FieldPathSelectorMapbox    FloorVendorSpec_FieldPathSelector = 1
)

func (s FloorVendorSpec_FieldPathSelector) String() string {
	switch s {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return "mapbox"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", s))
	}
}

func BuildFloorVendorSpec_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &FloorVendorSpec_FieldTerminalPath{selector: FloorVendorSpec_FieldPathSelectorPointGrab}, nil
		case "mapbox":
			return &FloorVendorSpec_FieldTerminalPath{selector: FloorVendorSpec_FieldPathSelectorMapbox}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildFloorVendorSpecPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorSpec_FieldSubPath{selector: FloorVendorSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		case "mapbox":
			if subpath, err := BuildFloorVendorSpecMapbox_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorSpec_FieldSubPath{selector: FloorVendorSpec_FieldPathSelectorMapbox, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorSpec", fp)
}

func ParseFloorVendorSpec_FieldPath(rawField string) (FloorVendorSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorSpec_FieldPath(fp)
}

func MustParseFloorVendorSpec_FieldPath(rawField string) FloorVendorSpec_FieldPath {
	fp, err := ParseFloorVendorSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorSpec_FieldTerminalPath struct {
	selector FloorVendorSpec_FieldPathSelector
}

var _ FloorVendorSpec_FieldPath = (*FloorVendorSpec_FieldTerminalPath)(nil)

func (fp *FloorVendorSpec_FieldTerminalPath) Selector() FloorVendorSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorSpec
func (fp *FloorVendorSpec_FieldTerminalPath) Get(source *Floor_VendorSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		case FloorVendorSpec_FieldPathSelectorMapbox:
			if source.Mapbox != nil {
				values = append(values, source.Mapbox)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorSpec))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorSpec
func (fp *FloorVendorSpec_FieldTerminalPath) GetSingle(source *Floor_VendorSpec) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	case FloorVendorSpec_FieldPathSelectorMapbox:
		res := source.GetMapbox()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
	}
}

func (fp *FloorVendorSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return (*Floor_VendorSpec_PointGrab)(nil)
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return (*Floor_VendorSpec_Mapbox)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
	}
}

func (fp *FloorVendorSpec_FieldTerminalPath) ClearValue(item *Floor_VendorSpec) {
	if item != nil {
		switch fp.selector {
		case FloorVendorSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		case FloorVendorSpec_FieldPathSelectorMapbox:
			item.Mapbox = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *FloorVendorSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithIValue(value interface{}) FloorVendorSpec_FieldPathValue {
	switch fp.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return &FloorVendorSpec_FieldTerminalPathValue{FloorVendorSpec_FieldTerminalPath: *fp, value: value.(*Floor_VendorSpec_PointGrab)}
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return &FloorVendorSpec_FieldTerminalPathValue{FloorVendorSpec_FieldTerminalPath: *fp, value: value.(*Floor_VendorSpec_Mapbox)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
	}
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorSpec_FieldPathArrayOfValues {
	fpaov := &FloorVendorSpec_FieldTerminalPathArrayOfValues{FloorVendorSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return &FloorVendorSpec_FieldTerminalPathArrayOfValues{FloorVendorSpec_FieldTerminalPath: *fp, values: values.([]*Floor_VendorSpec_PointGrab)}
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return &FloorVendorSpec_FieldTerminalPathArrayOfValues{FloorVendorSpec_FieldTerminalPath: *fp, values: values.([]*Floor_VendorSpec_Mapbox)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fp.selector))
	}
}

func (fp *FloorVendorSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorSpec_FieldSubPath struct {
	selector FloorVendorSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorSpec_FieldPath = (*FloorVendorSpec_FieldSubPath)(nil)

func (fps *FloorVendorSpec_FieldSubPath) Selector() FloorVendorSpec_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorSpec_FieldSubPath) AsPointGrabSubPath() (FloorVendorSpecPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorSpecPointGrab_FieldPath)
	return res, ok
}
func (fps *FloorVendorSpec_FieldSubPath) AsMapboxSubPath() (FloorVendorSpecMapbox_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorSpecMapbox_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorSpec
func (fps *FloorVendorSpec_FieldSubPath) Get(source *Floor_VendorSpec) (values []interface{}) {
	if asPointGrabFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabFieldPath.Get(source.GetPointGrab())...)
	} else if asMapboxFieldPath, ok := fps.AsMapboxSubPath(); ok {
		values = append(values, asMapboxFieldPath.Get(source.GetMapbox())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorSpec))
}

// GetSingle returns value of selected field from source Floor_VendorSpec
func (fps *FloorVendorSpec_FieldSubPath) GetSingle(source *Floor_VendorSpec) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	case FloorVendorSpec_FieldPathSelectorMapbox:
		if source.GetMapbox() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMapbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fps.selector))
	}
}

func (fps *FloorVendorSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorSpec_FieldSubPath) ClearValue(item *Floor_VendorSpec) {
	if item != nil {
		switch fps.selector {
		case FloorVendorSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		case FloorVendorSpec_FieldPathSelectorMapbox:
			fps.subPath.ClearValueRaw(item.Mapbox)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorSpec_FieldSubPath) WithIValue(value interface{}) FloorVendorSpec_FieldPathValue {
	return &FloorVendorSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorSpec_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorSpec_FieldPathArrayOfValues {
	return &FloorVendorSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorSpec_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorSpec_FieldPathArrayItemValue {
	return &FloorVendorSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorSpec_FieldPathValue allows storing values for VendorSpec fields according to their type
type FloorVendorSpec_FieldPathValue interface {
	FloorVendorSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorSpec)
	CompareWith(*Floor_VendorSpec) (cmp int, comparable bool)
}

func ParseFloorVendorSpec_FieldPathValue(pathStr, valueStr string) (FloorVendorSpec_FieldPathValue, error) {
	fp, err := ParseFloorVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorSpec_FieldPathValue), nil
}

func MustParseFloorVendorSpec_FieldPathValue(pathStr, valueStr string) FloorVendorSpec_FieldPathValue {
	fpv, err := ParseFloorVendorSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorSpec_FieldTerminalPathValue struct {
	FloorVendorSpec_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpec_FieldPathValue = (*FloorVendorSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorSpec' as interface{}
func (fpv *FloorVendorSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorSpec_FieldTerminalPathValue) AsPointGrabValue() (*Floor_VendorSpec_PointGrab, bool) {
	res, ok := fpv.value.(*Floor_VendorSpec_PointGrab)
	return res, ok
}
func (fpv *FloorVendorSpec_FieldTerminalPathValue) AsMapboxValue() (*Floor_VendorSpec_Mapbox, bool) {
	res, ok := fpv.value.(*Floor_VendorSpec_Mapbox)
	return res, ok
}

// SetTo stores value for selected field for object VendorSpec
func (fpv *FloorVendorSpec_FieldTerminalPathValue) SetTo(target **Floor_VendorSpec) {
	if *target == nil {
		*target = new(Floor_VendorSpec)
	}
	switch fpv.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Floor_VendorSpec_PointGrab)
	case FloorVendorSpec_FieldPathSelectorMapbox:
		(*target).Mapbox = fpv.value.(*Floor_VendorSpec_Mapbox)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorSpec_FieldTerminalPathValue' with the value under path in 'Floor_VendorSpec'.
func (fpv *FloorVendorSpec_FieldTerminalPathValue) CompareWith(source *Floor_VendorSpec) (int, bool) {
	switch fpv.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return 0, false
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorSpec))
}

type FloorVendorSpec_FieldSubPathValue struct {
	FloorVendorSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorSpec_FieldPathValue = (*FloorVendorSpec_FieldSubPathValue)(nil)

func (fpvs *FloorVendorSpec_FieldSubPathValue) AsPointGrabPathValue() (FloorVendorSpecPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorSpecPointGrab_FieldPathValue)
	return res, ok
}
func (fpvs *FloorVendorSpec_FieldSubPathValue) AsMapboxPathValue() (FloorVendorSpecMapbox_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorSpecMapbox_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorSpec_FieldSubPathValue) SetTo(target **Floor_VendorSpec) {
	if *target == nil {
		*target = new(Floor_VendorSpec)
	}
	switch fpvs.Selector() {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(FloorVendorSpecPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	case FloorVendorSpec_FieldPathSelectorMapbox:
		fpvs.subPathValue.(FloorVendorSpecMapbox_FieldPathValue).SetTo(&(*target).Mapbox)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorSpec_FieldSubPathValue) CompareWith(source *Floor_VendorSpec) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(FloorVendorSpecPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return fpvs.subPathValue.(FloorVendorSpecMapbox_FieldPathValue).CompareWith(source.GetMapbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorSpec))
}

// FloorVendorSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorSpec according to their type
// Present only for array (repeated) types.
type FloorVendorSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorSpec_FieldPath
	ContainsValue(*Floor_VendorSpec) bool
}

// ParseFloorVendorSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorSpec_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorSpec_FieldTerminalPathArrayItemValue struct {
	FloorVendorSpec_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpec_FieldPathArrayItemValue = (*FloorVendorSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorSpec as interface{}
func (fpaiv *FloorVendorSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaiv *FloorVendorSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorSpec) bool {
	slice := fpaiv.FloorVendorSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorSpec_FieldSubPathArrayItemValue struct {
	FloorVendorSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (FloorVendorSpecPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorSpecPointGrab_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *FloorVendorSpec_FieldSubPathArrayItemValue) AsMapboxPathItemValue() (FloorVendorSpecMapbox_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorSpecMapbox_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaivs *FloorVendorSpec_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorSpec) bool {
	switch fpaivs.Selector() {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(FloorVendorSpecPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	case FloorVendorSpec_FieldPathSelectorMapbox:
		return fpaivs.subPathItemValue.(FloorVendorSpecMapbox_FieldPathArrayItemValue).ContainsValue(source.GetMapbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec: %d", fpaivs.Selector()))
	}
}

// FloorVendorSpec_FieldPathArrayOfValues allows storing slice of values for VendorSpec fields according to their type
type FloorVendorSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorSpec_FieldPath
}

func ParseFloorVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorSpec_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorSpec_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorSpec_FieldTerminalPathArrayOfValues struct {
	FloorVendorSpec_FieldTerminalPath
	values interface{}
}

var _ FloorVendorSpec_FieldPathArrayOfValues = (*FloorVendorSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Floor_VendorSpec_PointGrab) {
			values = append(values, v)
		}
	case FloorVendorSpec_FieldPathSelectorMapbox:
		for _, v := range fpaov.values.([]*Floor_VendorSpec_Mapbox) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Floor_VendorSpec_PointGrab, bool) {
	res, ok := fpaov.values.([]*Floor_VendorSpec_PointGrab)
	return res, ok
}
func (fpaov *FloorVendorSpec_FieldTerminalPathArrayOfValues) AsMapboxArrayOfValues() ([]*Floor_VendorSpec_Mapbox, bool) {
	res, ok := fpaov.values.([]*Floor_VendorSpec_Mapbox)
	return res, ok
}

type FloorVendorSpec_FieldSubPathArrayOfValues struct {
	FloorVendorSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorSpec_FieldPathArrayOfValues = (*FloorVendorSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (FloorVendorSpecPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorSpecPointGrab_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *FloorVendorSpec_FieldSubPathArrayOfValues) AsMapboxPathArrayOfValues() (FloorVendorSpecMapbox_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorSpecMapbox_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorInfo_FieldPathSelector
	Get(source *Floor_VendorInfo) []interface{}
	GetSingle(source *Floor_VendorInfo) (interface{}, bool)
	ClearValue(item *Floor_VendorInfo)

	// Those methods build corresponding FloorVendorInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorInfo_FieldPathArrayItemValue
}

type FloorVendorInfo_FieldPathSelector int32

const (
	FloorVendorInfo_FieldPathSelectorPointGrab FloorVendorInfo_FieldPathSelector = 0
)

func (s FloorVendorInfo_FieldPathSelector) String() string {
	switch s {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", s))
	}
}

func BuildFloorVendorInfo_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &FloorVendorInfo_FieldTerminalPath{selector: FloorVendorInfo_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildFloorVendorInfoPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorInfo_FieldSubPath{selector: FloorVendorInfo_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorInfo", fp)
}

func ParseFloorVendorInfo_FieldPath(rawField string) (FloorVendorInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorInfo_FieldPath(fp)
}

func MustParseFloorVendorInfo_FieldPath(rawField string) FloorVendorInfo_FieldPath {
	fp, err := ParseFloorVendorInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorInfo_FieldTerminalPath struct {
	selector FloorVendorInfo_FieldPathSelector
}

var _ FloorVendorInfo_FieldPath = (*FloorVendorInfo_FieldTerminalPath)(nil)

func (fp *FloorVendorInfo_FieldTerminalPath) Selector() FloorVendorInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorInfo
func (fp *FloorVendorInfo_FieldTerminalPath) Get(source *Floor_VendorInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorInfo_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorInfo))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorInfo
func (fp *FloorVendorInfo_FieldTerminalPath) GetSingle(source *Floor_VendorInfo) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
	}
}

func (fp *FloorVendorInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorInfo))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return (*Floor_VendorInfo_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
	}
}

func (fp *FloorVendorInfo_FieldTerminalPath) ClearValue(item *Floor_VendorInfo) {
	if item != nil {
		switch fp.selector {
		case FloorVendorInfo_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorInfo_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *FloorVendorInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithIValue(value interface{}) FloorVendorInfo_FieldPathValue {
	switch fp.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return &FloorVendorInfo_FieldTerminalPathValue{FloorVendorInfo_FieldTerminalPath: *fp, value: value.(*Floor_VendorInfo_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
	}
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorInfo_FieldPathArrayOfValues {
	fpaov := &FloorVendorInfo_FieldTerminalPathArrayOfValues{FloorVendorInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return &FloorVendorInfo_FieldTerminalPathArrayOfValues{FloorVendorInfo_FieldTerminalPath: *fp, values: values.([]*Floor_VendorInfo_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fp.selector))
	}
}

func (fp *FloorVendorInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorInfo_FieldSubPath struct {
	selector FloorVendorInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorInfo_FieldPath = (*FloorVendorInfo_FieldSubPath)(nil)

func (fps *FloorVendorInfo_FieldSubPath) Selector() FloorVendorInfo_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorInfo_FieldSubPath) AsPointGrabSubPath() (FloorVendorInfoPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorInfoPointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorInfo
func (fps *FloorVendorInfo_FieldSubPath) Get(source *Floor_VendorInfo) (values []interface{}) {
	if asPointGrabFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorInfo))
}

// GetSingle returns value of selected field from source Floor_VendorInfo
func (fps *FloorVendorInfo_FieldSubPath) GetSingle(source *Floor_VendorInfo) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fps.selector))
	}
}

func (fps *FloorVendorInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorInfo))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorInfo_FieldSubPath) ClearValue(item *Floor_VendorInfo) {
	if item != nil {
		switch fps.selector {
		case FloorVendorInfo_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorInfo))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorInfo_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorInfo_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorInfo_FieldSubPath) WithIValue(value interface{}) FloorVendorInfo_FieldPathValue {
	return &FloorVendorInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorInfo_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorInfo_FieldPathArrayOfValues {
	return &FloorVendorInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorInfo_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorInfo_FieldPathArrayItemValue {
	return &FloorVendorInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorInfo_FieldPathValue allows storing values for VendorInfo fields according to their type
type FloorVendorInfo_FieldPathValue interface {
	FloorVendorInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorInfo)
	CompareWith(*Floor_VendorInfo) (cmp int, comparable bool)
}

func ParseFloorVendorInfo_FieldPathValue(pathStr, valueStr string) (FloorVendorInfo_FieldPathValue, error) {
	fp, err := ParseFloorVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorInfo_FieldPathValue), nil
}

func MustParseFloorVendorInfo_FieldPathValue(pathStr, valueStr string) FloorVendorInfo_FieldPathValue {
	fpv, err := ParseFloorVendorInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorInfo_FieldTerminalPathValue struct {
	FloorVendorInfo_FieldTerminalPath
	value interface{}
}

var _ FloorVendorInfo_FieldPathValue = (*FloorVendorInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorInfo' as interface{}
func (fpv *FloorVendorInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorInfo_FieldTerminalPathValue) AsPointGrabValue() (*Floor_VendorInfo_PointGrab, bool) {
	res, ok := fpv.value.(*Floor_VendorInfo_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorInfo
func (fpv *FloorVendorInfo_FieldTerminalPathValue) SetTo(target **Floor_VendorInfo) {
	if *target == nil {
		*target = new(Floor_VendorInfo)
	}
	switch fpv.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Floor_VendorInfo_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fpv.selector))
	}
}

func (fpv *FloorVendorInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorInfo_FieldTerminalPathValue' with the value under path in 'Floor_VendorInfo'.
func (fpv *FloorVendorInfo_FieldTerminalPathValue) CompareWith(source *Floor_VendorInfo) (int, bool) {
	switch fpv.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fpv.selector))
	}
}

func (fpv *FloorVendorInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorInfo))
}

type FloorVendorInfo_FieldSubPathValue struct {
	FloorVendorInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorInfo_FieldPathValue = (*FloorVendorInfo_FieldSubPathValue)(nil)

func (fpvs *FloorVendorInfo_FieldSubPathValue) AsPointGrabPathValue() (FloorVendorInfoPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorInfoPointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorInfo_FieldSubPathValue) SetTo(target **Floor_VendorInfo) {
	if *target == nil {
		*target = new(Floor_VendorInfo)
	}
	switch fpvs.Selector() {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(FloorVendorInfoPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorInfo)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorInfo_FieldSubPathValue) CompareWith(source *Floor_VendorInfo) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(FloorVendorInfoPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorInfo))
}

// FloorVendorInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorInfo according to their type
// Present only for array (repeated) types.
type FloorVendorInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorInfo_FieldPath
	ContainsValue(*Floor_VendorInfo) bool
}

// ParseFloorVendorInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorInfo_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorInfo_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorInfo_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorInfo_FieldTerminalPathArrayItemValue struct {
	FloorVendorInfo_FieldTerminalPath
	value interface{}
}

var _ FloorVendorInfo_FieldPathArrayItemValue = (*FloorVendorInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorInfo as interface{}
func (fpaiv *FloorVendorInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorInfo_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorInfo'
func (fpaiv *FloorVendorInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorInfo) bool {
	slice := fpaiv.FloorVendorInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorInfo_FieldSubPathArrayItemValue struct {
	FloorVendorInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorInfo_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (FloorVendorInfoPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorInfoPointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorInfo'
func (fpaivs *FloorVendorInfo_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorInfo) bool {
	switch fpaivs.Selector() {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(FloorVendorInfoPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo: %d", fpaivs.Selector()))
	}
}

// FloorVendorInfo_FieldPathArrayOfValues allows storing slice of values for VendorInfo fields according to their type
type FloorVendorInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorInfo_FieldPath
}

func ParseFloorVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorInfo_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorInfo_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorInfo_FieldTerminalPathArrayOfValues struct {
	FloorVendorInfo_FieldTerminalPath
	values interface{}
}

var _ FloorVendorInfo_FieldPathArrayOfValues = (*FloorVendorInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorInfo_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Floor_VendorInfo_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorInfo_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Floor_VendorInfo_PointGrab, bool) {
	res, ok := fpaov.values.([]*Floor_VendorInfo_PointGrab)
	return res, ok
}

type FloorVendorInfo_FieldSubPathArrayOfValues struct {
	FloorVendorInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorInfo_FieldPathArrayOfValues = (*FloorVendorInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorInfo_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (FloorVendorInfoPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorInfoPointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorState_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorState_FieldPathSelector
	Get(source *Floor_VendorState) []interface{}
	GetSingle(source *Floor_VendorState) (interface{}, bool)
	ClearValue(item *Floor_VendorState)

	// Those methods build corresponding FloorVendorState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorState_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorState_FieldPathArrayItemValue
}

type FloorVendorState_FieldPathSelector int32

const (
	FloorVendorState_FieldPathSelectorPointGrab FloorVendorState_FieldPathSelector = 0
)

func (s FloorVendorState_FieldPathSelector) String() string {
	switch s {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", s))
	}
}

func BuildFloorVendorState_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorState")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &FloorVendorState_FieldTerminalPath{selector: FloorVendorState_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildFloorVendorStatePointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorState_FieldSubPath{selector: FloorVendorState_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorState", fp)
}

func ParseFloorVendorState_FieldPath(rawField string) (FloorVendorState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorState_FieldPath(fp)
}

func MustParseFloorVendorState_FieldPath(rawField string) FloorVendorState_FieldPath {
	fp, err := ParseFloorVendorState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorState_FieldTerminalPath struct {
	selector FloorVendorState_FieldPathSelector
}

var _ FloorVendorState_FieldPath = (*FloorVendorState_FieldTerminalPath)(nil)

func (fp *FloorVendorState_FieldTerminalPath) Selector() FloorVendorState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorState
func (fp *FloorVendorState_FieldTerminalPath) Get(source *Floor_VendorState) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorState_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorState))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorState
func (fp *FloorVendorState_FieldTerminalPath) GetSingle(source *Floor_VendorState) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
	}
}

func (fp *FloorVendorState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorState))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return (*Floor_VendorState_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
	}
}

func (fp *FloorVendorState_FieldTerminalPath) ClearValue(item *Floor_VendorState) {
	if item != nil {
		switch fp.selector {
		case FloorVendorState_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorState))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorState_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *FloorVendorState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorState_FieldTerminalPath) WithIValue(value interface{}) FloorVendorState_FieldPathValue {
	switch fp.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return &FloorVendorState_FieldTerminalPathValue{FloorVendorState_FieldTerminalPath: *fp, value: value.(*Floor_VendorState_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
	}
}

func (fp *FloorVendorState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorState_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorState_FieldPathArrayOfValues {
	fpaov := &FloorVendorState_FieldTerminalPathArrayOfValues{FloorVendorState_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return &FloorVendorState_FieldTerminalPathArrayOfValues{FloorVendorState_FieldTerminalPath: *fp, values: values.([]*Floor_VendorState_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorState_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fp.selector))
	}
}

func (fp *FloorVendorState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorState_FieldSubPath struct {
	selector FloorVendorState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorState_FieldPath = (*FloorVendorState_FieldSubPath)(nil)

func (fps *FloorVendorState_FieldSubPath) Selector() FloorVendorState_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorState_FieldSubPath) AsPointGrabSubPath() (FloorVendorStatePointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorStatePointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorState
func (fps *FloorVendorState_FieldSubPath) Get(source *Floor_VendorState) (values []interface{}) {
	if asPointGrabFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorState))
}

// GetSingle returns value of selected field from source Floor_VendorState
func (fps *FloorVendorState_FieldSubPath) GetSingle(source *Floor_VendorState) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fps.selector))
	}
}

func (fps *FloorVendorState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorState))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorState_FieldSubPath) ClearValue(item *Floor_VendorState) {
	if item != nil {
		switch fps.selector {
		case FloorVendorState_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorState))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorState_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorState_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorState_FieldSubPath) WithIValue(value interface{}) FloorVendorState_FieldPathValue {
	return &FloorVendorState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorState_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorState_FieldPathArrayOfValues {
	return &FloorVendorState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorState_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorState_FieldPathArrayItemValue {
	return &FloorVendorState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorState_FieldPathValue allows storing values for VendorState fields according to their type
type FloorVendorState_FieldPathValue interface {
	FloorVendorState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorState)
	CompareWith(*Floor_VendorState) (cmp int, comparable bool)
}

func ParseFloorVendorState_FieldPathValue(pathStr, valueStr string) (FloorVendorState_FieldPathValue, error) {
	fp, err := ParseFloorVendorState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorState field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorState_FieldPathValue), nil
}

func MustParseFloorVendorState_FieldPathValue(pathStr, valueStr string) FloorVendorState_FieldPathValue {
	fpv, err := ParseFloorVendorState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorState_FieldTerminalPathValue struct {
	FloorVendorState_FieldTerminalPath
	value interface{}
}

var _ FloorVendorState_FieldPathValue = (*FloorVendorState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorState' as interface{}
func (fpv *FloorVendorState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorState_FieldTerminalPathValue) AsPointGrabValue() (*Floor_VendorState_PointGrab, bool) {
	res, ok := fpv.value.(*Floor_VendorState_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorState
func (fpv *FloorVendorState_FieldTerminalPathValue) SetTo(target **Floor_VendorState) {
	if *target == nil {
		*target = new(Floor_VendorState)
	}
	switch fpv.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Floor_VendorState_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fpv.selector))
	}
}

func (fpv *FloorVendorState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorState)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorState_FieldTerminalPathValue' with the value under path in 'Floor_VendorState'.
func (fpv *FloorVendorState_FieldTerminalPathValue) CompareWith(source *Floor_VendorState) (int, bool) {
	switch fpv.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fpv.selector))
	}
}

func (fpv *FloorVendorState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorState))
}

type FloorVendorState_FieldSubPathValue struct {
	FloorVendorState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorState_FieldPathValue = (*FloorVendorState_FieldSubPathValue)(nil)

func (fpvs *FloorVendorState_FieldSubPathValue) AsPointGrabPathValue() (FloorVendorStatePointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorStatePointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorState_FieldSubPathValue) SetTo(target **Floor_VendorState) {
	if *target == nil {
		*target = new(Floor_VendorState)
	}
	switch fpvs.Selector() {
	case FloorVendorState_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(FloorVendorStatePointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorState)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorState_FieldSubPathValue) CompareWith(source *Floor_VendorState) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(FloorVendorStatePointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorState))
}

// FloorVendorState_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorState according to their type
// Present only for array (repeated) types.
type FloorVendorState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorState_FieldPath
	ContainsValue(*Floor_VendorState) bool
}

// ParseFloorVendorState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorState_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorState_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorState field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorState_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorState_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorState_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorState_FieldTerminalPathArrayItemValue struct {
	FloorVendorState_FieldTerminalPath
	value interface{}
}

var _ FloorVendorState_FieldPathArrayItemValue = (*FloorVendorState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorState as interface{}
func (fpaiv *FloorVendorState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorState_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorState) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorState))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorState'
func (fpaiv *FloorVendorState_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorState) bool {
	slice := fpaiv.FloorVendorState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorState_FieldSubPathArrayItemValue struct {
	FloorVendorState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorState_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (FloorVendorStatePointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorStatePointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorState'
func (fpaivs *FloorVendorState_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorState) bool {
	switch fpaivs.Selector() {
	case FloorVendorState_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(FloorVendorStatePointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState: %d", fpaivs.Selector()))
	}
}

// FloorVendorState_FieldPathArrayOfValues allows storing slice of values for VendorState fields according to their type
type FloorVendorState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorState_FieldPath
}

func ParseFloorVendorState_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorState_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorState field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorState_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorState_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorState_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorState_FieldTerminalPathArrayOfValues struct {
	FloorVendorState_FieldTerminalPath
	values interface{}
}

var _ FloorVendorState_FieldPathArrayOfValues = (*FloorVendorState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorState_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Floor_VendorState_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorState_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Floor_VendorState_PointGrab, bool) {
	res, ok := fpaov.values.([]*Floor_VendorState_PointGrab)
	return res, ok
}

type FloorVendorState_FieldSubPathArrayOfValues struct {
	FloorVendorState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorState_FieldPathArrayOfValues = (*FloorVendorState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorState_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (FloorVendorStatePointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorStatePointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorSpecPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorSpecPointGrab_FieldPathSelector
	Get(source *Floor_VendorSpec_PointGrab) []interface{}
	GetSingle(source *Floor_VendorSpec_PointGrab) (interface{}, bool)
	ClearValue(item *Floor_VendorSpec_PointGrab)

	// Those methods build corresponding FloorVendorSpecPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorSpecPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrab_FieldPathArrayItemValue
}

type FloorVendorSpecPointGrab_FieldPathSelector int32

const (
	FloorVendorSpecPointGrab_FieldPathSelectorFloorId         FloorVendorSpecPointGrab_FieldPathSelector = 0
	FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints FloorVendorSpecPointGrab_FieldPathSelector = 1
)

func (s FloorVendorSpecPointGrab_FieldPathSelector) String() string {
	switch s {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		return "floor_id"
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return "reference_points"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", s))
	}
}

func BuildFloorVendorSpecPointGrab_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorSpecPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorSpec_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floor_id", "floorId", "floor-id":
			return &FloorVendorSpecPointGrab_FieldTerminalPath{selector: FloorVendorSpecPointGrab_FieldPathSelectorFloorId}, nil
		case "reference_points", "referencePoints", "reference-points":
			return &FloorVendorSpecPointGrab_FieldTerminalPath{selector: FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints}, nil
		}
	} else {
		switch fp[0] {
		case "reference_points", "referencePoints", "reference-points":
			if subpath, err := BuildFloorVendorSpecPointGrabReferencePoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorSpecPointGrab_FieldSubPath{selector: FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorSpec_PointGrab", fp)
}

func ParseFloorVendorSpecPointGrab_FieldPath(rawField string) (FloorVendorSpecPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorSpecPointGrab_FieldPath(fp)
}

func MustParseFloorVendorSpecPointGrab_FieldPath(rawField string) FloorVendorSpecPointGrab_FieldPath {
	fp, err := ParseFloorVendorSpecPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorSpecPointGrab_FieldTerminalPath struct {
	selector FloorVendorSpecPointGrab_FieldPathSelector
}

var _ FloorVendorSpecPointGrab_FieldPath = (*FloorVendorSpecPointGrab_FieldTerminalPath)(nil)

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) Selector() FloorVendorSpecPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorSpec_PointGrab
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) Get(source *Floor_VendorSpec_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
			values = append(values, source.FloorId)
		case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
			for _, value := range source.GetReferencePoints() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorSpec_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorSpec_PointGrab
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) GetSingle(source *Floor_VendorSpec_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		return source.GetFloorId(), source != nil
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		res := source.GetReferencePoints()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		return ""
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return ([]*Floor_VendorSpec_PointGrab_ReferencePoint)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) ClearValue(item *Floor_VendorSpec_PointGrab) {
	if item != nil {
		switch fp.selector {
		case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
			item.FloorId = ""
		case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
			item.ReferencePoints = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == FloorVendorSpecPointGrab_FieldPathSelectorFloorId
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithIValue(value interface{}) FloorVendorSpecPointGrab_FieldPathValue {
	switch fp.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		return &FloorVendorSpecPointGrab_FieldTerminalPathValue{FloorVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(string)}
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorSpecPointGrab_FieldTerminalPathValue{FloorVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.([]*Floor_VendorSpec_PointGrab_ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov := &FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		return &FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]string)}
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([][]*Floor_VendorSpec_PointGrab_ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue{FloorVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(*Floor_VendorSpec_PointGrab_ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorSpecPointGrab_FieldSubPath struct {
	selector FloorVendorSpecPointGrab_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorSpecPointGrab_FieldPath = (*FloorVendorSpecPointGrab_FieldSubPath)(nil)

func (fps *FloorVendorSpecPointGrab_FieldSubPath) Selector() FloorVendorSpecPointGrab_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorSpecPointGrab_FieldSubPath) AsReferencePointsSubPath() (FloorVendorSpecPointGrabReferencePoint_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorSpecPointGrabReferencePoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorSpecPointGrab_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorSpecPointGrab_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorSpec_PointGrab
func (fps *FloorVendorSpecPointGrab_FieldSubPath) Get(source *Floor_VendorSpec_PointGrab) (values []interface{}) {
	if asReferencePointFieldPath, ok := fps.AsReferencePointsSubPath(); ok {
		for _, item := range source.GetReferencePoints() {
			values = append(values, asReferencePointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorSpec_PointGrab))
}

// GetSingle returns value of selected field from source Floor_VendorSpec_PointGrab
func (fps *FloorVendorSpecPointGrab_FieldSubPath) GetSingle(source *Floor_VendorSpec_PointGrab) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		if len(source.GetReferencePoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetReferencePoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fps.selector))
	}
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorSpecPointGrab_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) ClearValue(item *Floor_VendorSpec_PointGrab) {
	if item != nil {
		switch fps.selector {
		case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
			for _, subItem := range item.ReferencePoints {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorSpecPointGrab_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorSpecPointGrab_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithIValue(value interface{}) FloorVendorSpecPointGrab_FieldPathValue {
	return &FloorVendorSpecPointGrab_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrab_FieldPathArrayOfValues {
	return &FloorVendorSpecPointGrab_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrab_FieldPathArrayItemValue {
	return &FloorVendorSpecPointGrab_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorSpecPointGrab_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorSpecPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type FloorVendorSpecPointGrab_FieldPathValue interface {
	FloorVendorSpecPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorSpec_PointGrab)
	CompareWith(*Floor_VendorSpec_PointGrab) (cmp int, comparable bool)
}

func ParseFloorVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) (FloorVendorSpecPointGrab_FieldPathValue, error) {
	fp, err := ParseFloorVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorSpecPointGrab_FieldPathValue), nil
}

func MustParseFloorVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) FloorVendorSpecPointGrab_FieldPathValue {
	fpv, err := ParseFloorVendorSpecPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorSpecPointGrab_FieldTerminalPathValue struct {
	FloorVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecPointGrab_FieldPathValue = (*FloorVendorSpecPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) AsFloorIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) AsReferencePointsValue() ([]*Floor_VendorSpec_PointGrab_ReferencePoint, bool) {
	res, ok := fpv.value.([]*Floor_VendorSpec_PointGrab_ReferencePoint)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) SetTo(target **Floor_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorSpec_PointGrab)
	}
	switch fpv.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		(*target).FloorId = fpv.value.(string)
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		(*target).ReferencePoints = fpv.value.([]*Floor_VendorSpec_PointGrab_ReferencePoint)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorSpecPointGrab_FieldTerminalPathValue' with the value under path in 'Floor_VendorSpec_PointGrab'.
func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) CompareWith(source *Floor_VendorSpec_PointGrab) (int, bool) {
	switch fpv.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		leftValue := fpv.value.(string)
		rightValue := source.GetFloorId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorSpec_PointGrab))
}

type FloorVendorSpecPointGrab_FieldSubPathValue struct {
	FloorVendorSpecPointGrab_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorSpecPointGrab_FieldPathValue = (*FloorVendorSpecPointGrab_FieldSubPathValue)(nil)

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) AsReferencePointsPathValue() (FloorVendorSpecPointGrabReferencePoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorSpecPointGrabReferencePoint_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) SetTo(target **Floor_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorSpec_PointGrab)
	}
	switch fpvs.Selector() {
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec_PointGrab)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) CompareWith(source *Floor_VendorSpec_PointGrab) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpecPointGrab_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorSpec_PointGrab))
}

// FloorVendorSpecPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type FloorVendorSpecPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorSpecPointGrab_FieldPath
	ContainsValue(*Floor_VendorSpec_PointGrab) bool
}

// ParseFloorVendorSpecPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorSpecPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorSpecPointGrab_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorSpecPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue struct {
	FloorVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecPointGrab_FieldPathArrayItemValue = (*FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorSpec_PointGrab as interface{}
func (fpaiv *FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue) AsReferencePointsItemValue() (*Floor_VendorSpec_PointGrab_ReferencePoint, bool) {
	res, ok := fpaiv.value.(*Floor_VendorSpec_PointGrab_ReferencePoint)
	return res, ok
}

func (fpaiv *FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorSpec_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorSpec_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *FloorVendorSpecPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorSpec_PointGrab) bool {
	slice := fpaiv.FloorVendorSpecPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorSpecPointGrab_FieldSubPathArrayItemValue struct {
	FloorVendorSpecPointGrab_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorSpecPointGrab_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorSpecPointGrab_FieldSubPathArrayItemValue) AsReferencePointsPathItemValue() (FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaivs *FloorVendorSpecPointGrab_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorSpec_PointGrab) bool {
	switch fpaivs.Selector() {
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab: %d", fpaivs.Selector()))
	}
}

// FloorVendorSpecPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type FloorVendorSpecPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorSpecPointGrab_FieldPath
}

func ParseFloorVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorSpecPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorSpecPointGrab_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues struct {
	FloorVendorSpecPointGrab_FieldTerminalPath
	values interface{}
}

var _ FloorVendorSpecPointGrab_FieldPathArrayOfValues = (*FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorSpecPointGrab_FieldPathSelectorFloorId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case FloorVendorSpecPointGrab_FieldPathSelectorReferencePoints:
		for _, v := range fpaov.values.([][]*Floor_VendorSpec_PointGrab_ReferencePoint) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsFloorIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *FloorVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsReferencePointsArrayOfValues() ([][]*Floor_VendorSpec_PointGrab_ReferencePoint, bool) {
	res, ok := fpaov.values.([][]*Floor_VendorSpec_PointGrab_ReferencePoint)
	return res, ok
}

type FloorVendorSpecPointGrab_FieldSubPathArrayOfValues struct {
	FloorVendorSpecPointGrab_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorSpecPointGrab_FieldPathArrayOfValues = (*FloorVendorSpecPointGrab_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorSpecPointGrab_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorSpecPointGrab_FieldSubPathArrayOfValues) AsReferencePointsPathArrayOfValues() (FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorSpecMapbox_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorSpecMapbox_FieldPathSelector
	Get(source *Floor_VendorSpec_Mapbox) []interface{}
	GetSingle(source *Floor_VendorSpec_Mapbox) (interface{}, bool)
	ClearValue(item *Floor_VendorSpec_Mapbox)

	// Those methods build corresponding FloorVendorSpecMapbox_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorSpecMapbox_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorSpecMapbox_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorSpecMapbox_FieldPathArrayItemValue
}

type FloorVendorSpecMapbox_FieldPathSelector int32

const (
	FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId FloorVendorSpecMapbox_FieldPathSelector = 0
	FloorVendorSpecMapbox_FieldPathSelectorBearing            FloorVendorSpecMapbox_FieldPathSelector = 1
)

func (s FloorVendorSpecMapbox_FieldPathSelector) String() string {
	switch s {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		return "floor_plan_tileset_id"
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		return "bearing"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", s))
	}
}

func BuildFloorVendorSpecMapbox_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorSpecMapbox_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorSpec_Mapbox")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "floor_plan_tileset_id", "floorPlanTilesetId", "floor-plan-tileset-id":
			return &FloorVendorSpecMapbox_FieldTerminalPath{selector: FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId}, nil
		case "bearing":
			return &FloorVendorSpecMapbox_FieldTerminalPath{selector: FloorVendorSpecMapbox_FieldPathSelectorBearing}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorSpec_Mapbox", fp)
}

func ParseFloorVendorSpecMapbox_FieldPath(rawField string) (FloorVendorSpecMapbox_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorSpecMapbox_FieldPath(fp)
}

func MustParseFloorVendorSpecMapbox_FieldPath(rawField string) FloorVendorSpecMapbox_FieldPath {
	fp, err := ParseFloorVendorSpecMapbox_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorSpecMapbox_FieldTerminalPath struct {
	selector FloorVendorSpecMapbox_FieldPathSelector
}

var _ FloorVendorSpecMapbox_FieldPath = (*FloorVendorSpecMapbox_FieldTerminalPath)(nil)

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) Selector() FloorVendorSpecMapbox_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorSpec_Mapbox
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) Get(source *Floor_VendorSpec_Mapbox) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
			values = append(values, source.FloorPlanTilesetId)
		case FloorVendorSpecMapbox_FieldPathSelectorBearing:
			values = append(values, source.Bearing)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorSpec_Mapbox))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorSpec_Mapbox
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) GetSingle(source *Floor_VendorSpec_Mapbox) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		return source.GetFloorPlanTilesetId(), source != nil
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		return source.GetBearing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorSpec_Mapbox))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		return ""
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) ClearValue(item *Floor_VendorSpec_Mapbox) {
	if item != nil {
		switch fp.selector {
		case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
			item.FloorPlanTilesetId = ""
		case FloorVendorSpecMapbox_FieldPathSelectorBearing:
			item.Bearing = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorSpec_Mapbox))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorSpecMapbox_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId ||
		fp.selector == FloorVendorSpecMapbox_FieldPathSelectorBearing
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithIValue(value interface{}) FloorVendorSpecMapbox_FieldPathValue {
	switch fp.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		return &FloorVendorSpecMapbox_FieldTerminalPathValue{FloorVendorSpecMapbox_FieldTerminalPath: *fp, value: value.(string)}
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		return &FloorVendorSpecMapbox_FieldTerminalPathValue{FloorVendorSpecMapbox_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorSpecMapbox_FieldPathArrayOfValues {
	fpaov := &FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues{FloorVendorSpecMapbox_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		return &FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues{FloorVendorSpecMapbox_FieldTerminalPath: *fp, values: values.([]string)}
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		return &FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues{FloorVendorSpecMapbox_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorSpecMapbox_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecMapbox_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FloorVendorSpecMapbox_FieldPathValue allows storing values for Mapbox fields according to their type
type FloorVendorSpecMapbox_FieldPathValue interface {
	FloorVendorSpecMapbox_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorSpec_Mapbox)
	CompareWith(*Floor_VendorSpec_Mapbox) (cmp int, comparable bool)
}

func ParseFloorVendorSpecMapbox_FieldPathValue(pathStr, valueStr string) (FloorVendorSpecMapbox_FieldPathValue, error) {
	fp, err := ParseFloorVendorSpecMapbox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Mapbox field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorSpecMapbox_FieldPathValue), nil
}

func MustParseFloorVendorSpecMapbox_FieldPathValue(pathStr, valueStr string) FloorVendorSpecMapbox_FieldPathValue {
	fpv, err := ParseFloorVendorSpecMapbox_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorSpecMapbox_FieldTerminalPathValue struct {
	FloorVendorSpecMapbox_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecMapbox_FieldPathValue = (*FloorVendorSpecMapbox_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Mapbox' as interface{}
func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) AsFloorPlanTilesetIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) AsBearingValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object Mapbox
func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) SetTo(target **Floor_VendorSpec_Mapbox) {
	if *target == nil {
		*target = new(Floor_VendorSpec_Mapbox)
	}
	switch fpv.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		(*target).FloorPlanTilesetId = fpv.value.(string)
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		(*target).Bearing = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec_Mapbox)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorSpecMapbox_FieldTerminalPathValue' with the value under path in 'Floor_VendorSpec_Mapbox'.
func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) CompareWith(source *Floor_VendorSpec_Mapbox) (int, bool) {
	switch fpv.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		leftValue := fpv.value.(string)
		rightValue := source.GetFloorPlanTilesetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		leftValue := fpv.value.(float64)
		rightValue := source.GetBearing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_Mapbox: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecMapbox_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorSpec_Mapbox))
}

// FloorVendorSpecMapbox_FieldPathArrayItemValue allows storing single item in Path-specific values for Mapbox according to their type
// Present only for array (repeated) types.
type FloorVendorSpecMapbox_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorSpecMapbox_FieldPath
	ContainsValue(*Floor_VendorSpec_Mapbox) bool
}

// ParseFloorVendorSpecMapbox_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorSpecMapbox_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorSpecMapbox_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorSpecMapbox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Mapbox field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorSpecMapbox_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorSpecMapbox_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorSpecMapbox_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorSpecMapbox_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue struct {
	FloorVendorSpecMapbox_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecMapbox_FieldPathArrayItemValue = (*FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorSpec_Mapbox as interface{}
func (fpaiv *FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorSpec_Mapbox) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorSpec_Mapbox))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Mapbox'
func (fpaiv *FloorVendorSpecMapbox_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorSpec_Mapbox) bool {
	slice := fpaiv.FloorVendorSpecMapbox_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// FloorVendorSpecMapbox_FieldPathArrayOfValues allows storing slice of values for Mapbox fields according to their type
type FloorVendorSpecMapbox_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorSpecMapbox_FieldPath
}

func ParseFloorVendorSpecMapbox_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorSpecMapbox_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorSpecMapbox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Mapbox field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorSpecMapbox_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorSpecMapbox_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorSpecMapbox_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorSpecMapbox_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues struct {
	FloorVendorSpecMapbox_FieldTerminalPath
	values interface{}
}

var _ FloorVendorSpecMapbox_FieldPathArrayOfValues = (*FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorSpecMapbox_FieldPathSelectorFloorPlanTilesetId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case FloorVendorSpecMapbox_FieldPathSelectorBearing:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues) AsFloorPlanTilesetIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *FloorVendorSpecMapbox_FieldTerminalPathArrayOfValues) AsBearingArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorSpecPointGrabReferencePoint_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorSpecPointGrabReferencePoint_FieldPathSelector
	Get(source *Floor_VendorSpec_PointGrab_ReferencePoint) []interface{}
	GetSingle(source *Floor_VendorSpec_PointGrab_ReferencePoint) (interface{}, bool)
	ClearValue(item *Floor_VendorSpec_PointGrab_ReferencePoint)

	// Those methods build corresponding FloorVendorSpecPointGrabReferencePoint_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue
}

type FloorVendorSpecPointGrabReferencePoint_FieldPathSelector int32

const (
	FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng FloorVendorSpecPointGrabReferencePoint_FieldPathSelector = 0
	FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy     FloorVendorSpecPointGrabReferencePoint_FieldPathSelector = 1
)

func (s FloorVendorSpecPointGrabReferencePoint_FieldPathSelector) String() string {
	switch s {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		return "lat_lng"
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return "xy"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", s))
	}
}

func BuildFloorVendorSpecPointGrabReferencePoint_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorSpecPointGrabReferencePoint_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorSpec_PointGrab_ReferencePoint")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "lat_lng", "latLng", "lat-lng":
			return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath{selector: FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng}, nil
		case "xy":
			return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath{selector: FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy}, nil
		}
	} else {
		switch fp[0] {
		case "xy":
			if subpath, err := workplace_common.BuildPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorSpecPointGrabReferencePoint_FieldSubPath{selector: FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorSpec_PointGrab_ReferencePoint", fp)
}

func ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(rawField string) (FloorVendorSpecPointGrabReferencePoint_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorSpecPointGrabReferencePoint_FieldPath(fp)
}

func MustParseFloorVendorSpecPointGrabReferencePoint_FieldPath(rawField string) FloorVendorSpecPointGrabReferencePoint_FieldPath {
	fp, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath struct {
	selector FloorVendorSpecPointGrabReferencePoint_FieldPathSelector
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPath = (*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath)(nil)

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) Selector() FloorVendorSpecPointGrabReferencePoint_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorSpec_PointGrab_ReferencePoint
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) Get(source *Floor_VendorSpec_PointGrab_ReferencePoint) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
			if source.LatLng != nil {
				values = append(values, source.LatLng)
			}
		case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
			if source.Xy != nil {
				values = append(values, source.Xy)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorSpec_PointGrab_ReferencePoint
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) GetSingle(source *Floor_VendorSpec_PointGrab_ReferencePoint) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		res := source.GetLatLng()
		return res, res != nil
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		res := source.GetXy()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		return (*latlng.LatLng)(nil)
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return (*workplace_common.Point)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) ClearValue(item *Floor_VendorSpec_PointGrab_ReferencePoint) {
	if item != nil {
		switch fp.selector {
		case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
			item.LatLng = nil
		case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
			item.Xy = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithIValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathValue {
	switch fp.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue{FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath: *fp, value: value.(*latlng.LatLng)}
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue{FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath: *fp, value: value.(*workplace_common.Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues {
	fpaov := &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath: *fp, values: values.([]*latlng.LatLng)}
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return &FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues{FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath: *fp, values: values.([]*workplace_common.Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fp.selector))
	}
}

func (fp *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorSpecPointGrabReferencePoint_FieldSubPath struct {
	selector FloorVendorSpecPointGrabReferencePoint_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPath = (*FloorVendorSpecPointGrabReferencePoint_FieldSubPath)(nil)

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) Selector() FloorVendorSpecPointGrabReferencePoint_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) AsXySubPath() (workplace_common.Point_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Point_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorSpec_PointGrab_ReferencePoint
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) Get(source *Floor_VendorSpec_PointGrab_ReferencePoint) (values []interface{}) {
	if asPointFieldPath, ok := fps.AsXySubPath(); ok {
		values = append(values, asPointFieldPath.Get(source.GetXy())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// GetSingle returns value of selected field from source Floor_VendorSpec_PointGrab_ReferencePoint
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) GetSingle(source *Floor_VendorSpec_PointGrab_ReferencePoint) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		if source.GetXy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetXy())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fps.selector))
	}
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) ClearValue(item *Floor_VendorSpec_PointGrab_ReferencePoint) {
	if item != nil {
		switch fps.selector {
		case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
			fps.subPath.ClearValueRaw(item.Xy)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithIValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathValue {
	return &FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues {
	return &FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue {
	return &FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorSpecPointGrabReferencePoint_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorSpecPointGrabReferencePoint_FieldPathValue allows storing values for ReferencePoint fields according to their type
type FloorVendorSpecPointGrabReferencePoint_FieldPathValue interface {
	FloorVendorSpecPointGrabReferencePoint_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorSpec_PointGrab_ReferencePoint)
	CompareWith(*Floor_VendorSpec_PointGrab_ReferencePoint) (cmp int, comparable bool)
}

func ParseFloorVendorSpecPointGrabReferencePoint_FieldPathValue(pathStr, valueStr string) (FloorVendorSpecPointGrabReferencePoint_FieldPathValue, error) {
	fp, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReferencePoint field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorSpecPointGrabReferencePoint_FieldPathValue), nil
}

func MustParseFloorVendorSpecPointGrabReferencePoint_FieldPathValue(pathStr, valueStr string) FloorVendorSpecPointGrabReferencePoint_FieldPathValue {
	fpv, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue struct {
	FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPathValue = (*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReferencePoint' as interface{}
func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) AsLatLngValue() (*latlng.LatLng, bool) {
	res, ok := fpv.value.(*latlng.LatLng)
	return res, ok
}
func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) AsXyValue() (*workplace_common.Point, bool) {
	res, ok := fpv.value.(*workplace_common.Point)
	return res, ok
}

// SetTo stores value for selected field for object ReferencePoint
func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) SetTo(target **Floor_VendorSpec_PointGrab_ReferencePoint) {
	if *target == nil {
		*target = new(Floor_VendorSpec_PointGrab_ReferencePoint)
	}
	switch fpv.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		(*target).LatLng = fpv.value.(*latlng.LatLng)
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		(*target).Xy = fpv.value.(*workplace_common.Point)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec_PointGrab_ReferencePoint)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue' with the value under path in 'Floor_VendorSpec_PointGrab_ReferencePoint'.
func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) CompareWith(source *Floor_VendorSpec_PointGrab_ReferencePoint) (int, bool) {
	switch fpv.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		return 0, false
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fpv.selector))
	}
}

func (fpv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

type FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue struct {
	FloorVendorSpecPointGrabReferencePoint_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPathValue = (*FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue)(nil)

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) AsXyPathValue() (workplace_common.Point_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Point_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) SetTo(target **Floor_VendorSpec_PointGrab_ReferencePoint) {
	if *target == nil {
		*target = new(Floor_VendorSpec_PointGrab_ReferencePoint)
	}
	switch fpvs.Selector() {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		fpvs.subPathValue.(workplace_common.Point_FieldPathValue).SetTo(&(*target).Xy)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorSpec_PointGrab_ReferencePoint)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) CompareWith(source *Floor_VendorSpec_PointGrab_ReferencePoint) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return fpvs.subPathValue.(workplace_common.Point_FieldPathValue).CompareWith(source.GetXy())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue allows storing single item in Path-specific values for ReferencePoint according to their type
// Present only for array (repeated) types.
type FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorSpecPointGrabReferencePoint_FieldPath
	ContainsValue(*Floor_VendorSpec_PointGrab_ReferencePoint) bool
}

// ParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReferencePoint field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue struct {
	FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath
	value interface{}
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPathArrayItemValue = (*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorSpec_PointGrab_ReferencePoint as interface{}
func (fpaiv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorSpec_PointGrab_ReferencePoint) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorSpec_PointGrab_ReferencePoint))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReferencePoint'
func (fpaiv *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorSpec_PointGrab_ReferencePoint) bool {
	slice := fpaiv.FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayItemValue struct {
	FloorVendorSpecPointGrabReferencePoint_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayItemValue) AsXyPathItemValue() (workplace_common.Point_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Point_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReferencePoint'
func (fpaivs *FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorSpec_PointGrab_ReferencePoint) bool {
	switch fpaivs.Selector() {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		return fpaivs.subPathItemValue.(workplace_common.Point_FieldPathArrayItemValue).ContainsValue(source.GetXy())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorSpec_PointGrab_ReferencePoint: %d", fpaivs.Selector()))
	}
}

// FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues allows storing slice of values for ReferencePoint fields according to their type
type FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorSpecPointGrabReferencePoint_FieldPath
}

func ParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReferencePoint field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues struct {
	FloorVendorSpecPointGrabReferencePoint_FieldTerminalPath
	values interface{}
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues = (*FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorLatLng:
		for _, v := range fpaov.values.([]*latlng.LatLng) {
			values = append(values, v)
		}
	case FloorVendorSpecPointGrabReferencePoint_FieldPathSelectorXy:
		for _, v := range fpaov.values.([]*workplace_common.Point) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues) AsLatLngArrayOfValues() ([]*latlng.LatLng, bool) {
	res, ok := fpaov.values.([]*latlng.LatLng)
	return res, ok
}
func (fpaov *FloorVendorSpecPointGrabReferencePoint_FieldTerminalPathArrayOfValues) AsXyArrayOfValues() ([]*workplace_common.Point, bool) {
	res, ok := fpaov.values.([]*workplace_common.Point)
	return res, ok
}

type FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayOfValues struct {
	FloorVendorSpecPointGrabReferencePoint_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorSpecPointGrabReferencePoint_FieldPathArrayOfValues = (*FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorSpecPointGrabReferencePoint_FieldSubPathArrayOfValues) AsXyPathArrayOfValues() (workplace_common.Point_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Point_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorInfoPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorInfoPointGrab_FieldPathSelector
	Get(source *Floor_VendorInfo_PointGrab) []interface{}
	GetSingle(source *Floor_VendorInfo_PointGrab) (interface{}, bool)
	ClearValue(item *Floor_VendorInfo_PointGrab)

	// Those methods build corresponding FloorVendorInfoPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorInfoPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorInfoPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorInfoPointGrab_FieldPathArrayItemValue
}

type FloorVendorInfoPointGrab_FieldPathSelector int32

const (
	FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints FloorVendorInfoPointGrab_FieldPathSelector = 0
)

func (s FloorVendorInfoPointGrab_FieldPathSelector) String() string {
	switch s {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return "reference_points"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", s))
	}
}

func BuildFloorVendorInfoPointGrab_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorInfoPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorInfo_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "reference_points", "referencePoints", "reference-points":
			return &FloorVendorInfoPointGrab_FieldTerminalPath{selector: FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints}, nil
		}
	} else {
		switch fp[0] {
		case "reference_points", "referencePoints", "reference-points":
			if subpath, err := workplace_common.BuildReferencePoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorInfoPointGrab_FieldSubPath{selector: FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorInfo_PointGrab", fp)
}

func ParseFloorVendorInfoPointGrab_FieldPath(rawField string) (FloorVendorInfoPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorInfoPointGrab_FieldPath(fp)
}

func MustParseFloorVendorInfoPointGrab_FieldPath(rawField string) FloorVendorInfoPointGrab_FieldPath {
	fp, err := ParseFloorVendorInfoPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorInfoPointGrab_FieldTerminalPath struct {
	selector FloorVendorInfoPointGrab_FieldPathSelector
}

var _ FloorVendorInfoPointGrab_FieldPath = (*FloorVendorInfoPointGrab_FieldTerminalPath)(nil)

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) Selector() FloorVendorInfoPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorInfo_PointGrab
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) Get(source *Floor_VendorInfo_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
			for _, value := range source.GetReferencePoints() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorInfo_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorInfo_PointGrab
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) GetSingle(source *Floor_VendorInfo_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		res := source.GetReferencePoints()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorInfo_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return ([]*workplace_common.ReferencePoint)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) ClearValue(item *Floor_VendorInfo_PointGrab) {
	if item != nil {
		switch fp.selector {
		case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
			item.ReferencePoints = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorInfo_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithIValue(value interface{}) FloorVendorInfoPointGrab_FieldPathValue {
	switch fp.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorInfoPointGrab_FieldTerminalPathValue{FloorVendorInfoPointGrab_FieldTerminalPath: *fp, value: value.([]*workplace_common.ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorInfoPointGrab_FieldPathArrayOfValues {
	fpaov := &FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues{FloorVendorInfoPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues{FloorVendorInfoPointGrab_FieldTerminalPath: *fp, values: values.([][]*workplace_common.ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorInfoPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return &FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue{FloorVendorInfoPointGrab_FieldTerminalPath: *fp, value: value.(*workplace_common.ReferencePoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorInfoPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorInfoPointGrab_FieldSubPath struct {
	selector FloorVendorInfoPointGrab_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorInfoPointGrab_FieldPath = (*FloorVendorInfoPointGrab_FieldSubPath)(nil)

func (fps *FloorVendorInfoPointGrab_FieldSubPath) Selector() FloorVendorInfoPointGrab_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorInfoPointGrab_FieldSubPath) AsReferencePointsSubPath() (workplace_common.ReferencePoint_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.ReferencePoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorInfoPointGrab_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorInfoPointGrab_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorInfo_PointGrab
func (fps *FloorVendorInfoPointGrab_FieldSubPath) Get(source *Floor_VendorInfo_PointGrab) (values []interface{}) {
	if asReferencePointFieldPath, ok := fps.AsReferencePointsSubPath(); ok {
		for _, item := range source.GetReferencePoints() {
			values = append(values, asReferencePointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorInfo_PointGrab))
}

// GetSingle returns value of selected field from source Floor_VendorInfo_PointGrab
func (fps *FloorVendorInfoPointGrab_FieldSubPath) GetSingle(source *Floor_VendorInfo_PointGrab) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		if len(source.GetReferencePoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetReferencePoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fps.selector))
	}
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorInfo_PointGrab))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorInfoPointGrab_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) ClearValue(item *Floor_VendorInfo_PointGrab) {
	if item != nil {
		switch fps.selector {
		case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
			for _, subItem := range item.ReferencePoints {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorInfo_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorInfoPointGrab_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorInfoPointGrab_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithIValue(value interface{}) FloorVendorInfoPointGrab_FieldPathValue {
	return &FloorVendorInfoPointGrab_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorInfoPointGrab_FieldPathArrayOfValues {
	return &FloorVendorInfoPointGrab_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorInfoPointGrab_FieldPathArrayItemValue {
	return &FloorVendorInfoPointGrab_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorInfoPointGrab_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorInfoPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type FloorVendorInfoPointGrab_FieldPathValue interface {
	FloorVendorInfoPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorInfo_PointGrab)
	CompareWith(*Floor_VendorInfo_PointGrab) (cmp int, comparable bool)
}

func ParseFloorVendorInfoPointGrab_FieldPathValue(pathStr, valueStr string) (FloorVendorInfoPointGrab_FieldPathValue, error) {
	fp, err := ParseFloorVendorInfoPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorInfoPointGrab_FieldPathValue), nil
}

func MustParseFloorVendorInfoPointGrab_FieldPathValue(pathStr, valueStr string) FloorVendorInfoPointGrab_FieldPathValue {
	fpv, err := ParseFloorVendorInfoPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorInfoPointGrab_FieldTerminalPathValue struct {
	FloorVendorInfoPointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorInfoPointGrab_FieldPathValue = (*FloorVendorInfoPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) AsReferencePointsValue() ([]*workplace_common.ReferencePoint, bool) {
	res, ok := fpv.value.([]*workplace_common.ReferencePoint)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) SetTo(target **Floor_VendorInfo_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorInfo_PointGrab)
	}
	switch fpv.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		(*target).ReferencePoints = fpv.value.([]*workplace_common.ReferencePoint)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorInfo_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorInfoPointGrab_FieldTerminalPathValue' with the value under path in 'Floor_VendorInfo_PointGrab'.
func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) CompareWith(source *Floor_VendorInfo_PointGrab) (int, bool) {
	switch fpv.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorInfoPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorInfo_PointGrab))
}

type FloorVendorInfoPointGrab_FieldSubPathValue struct {
	FloorVendorInfoPointGrab_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorInfoPointGrab_FieldPathValue = (*FloorVendorInfoPointGrab_FieldSubPathValue)(nil)

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) AsReferencePointsPathValue() (workplace_common.ReferencePoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.ReferencePoint_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) SetTo(target **Floor_VendorInfo_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorInfo_PointGrab)
	}
	switch fpvs.Selector() {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorInfo_PointGrab)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) CompareWith(source *Floor_VendorInfo_PointGrab) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorInfoPointGrab_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorInfo_PointGrab))
}

// FloorVendorInfoPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type FloorVendorInfoPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorInfoPointGrab_FieldPath
	ContainsValue(*Floor_VendorInfo_PointGrab) bool
}

// ParseFloorVendorInfoPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorInfoPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorInfoPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorInfoPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorInfoPointGrab_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorInfoPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorInfoPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorInfoPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue struct {
	FloorVendorInfoPointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorInfoPointGrab_FieldPathArrayItemValue = (*FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorInfo_PointGrab as interface{}
func (fpaiv *FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue) AsReferencePointsItemValue() (*workplace_common.ReferencePoint, bool) {
	res, ok := fpaiv.value.(*workplace_common.ReferencePoint)
	return res, ok
}

func (fpaiv *FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorInfo_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorInfo_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *FloorVendorInfoPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorInfo_PointGrab) bool {
	slice := fpaiv.FloorVendorInfoPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorInfoPointGrab_FieldSubPathArrayItemValue struct {
	FloorVendorInfoPointGrab_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorInfoPointGrab_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorInfoPointGrab_FieldSubPathArrayItemValue) AsReferencePointsPathItemValue() (workplace_common.ReferencePoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.ReferencePoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaivs *FloorVendorInfoPointGrab_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorInfo_PointGrab) bool {
	switch fpaivs.Selector() {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorInfo_PointGrab: %d", fpaivs.Selector()))
	}
}

// FloorVendorInfoPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type FloorVendorInfoPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorInfoPointGrab_FieldPath
}

func ParseFloorVendorInfoPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorInfoPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorInfoPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorInfoPointGrab_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorInfoPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorInfoPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorInfoPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues struct {
	FloorVendorInfoPointGrab_FieldTerminalPath
	values interface{}
}

var _ FloorVendorInfoPointGrab_FieldPathArrayOfValues = (*FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorInfoPointGrab_FieldPathSelectorReferencePoints:
		for _, v := range fpaov.values.([][]*workplace_common.ReferencePoint) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorInfoPointGrab_FieldTerminalPathArrayOfValues) AsReferencePointsArrayOfValues() ([][]*workplace_common.ReferencePoint, bool) {
	res, ok := fpaov.values.([][]*workplace_common.ReferencePoint)
	return res, ok
}

type FloorVendorInfoPointGrab_FieldSubPathArrayOfValues struct {
	FloorVendorInfoPointGrab_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorInfoPointGrab_FieldPathArrayOfValues = (*FloorVendorInfoPointGrab_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorInfoPointGrab_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorInfoPointGrab_FieldSubPathArrayOfValues) AsReferencePointsPathArrayOfValues() (workplace_common.ReferencePoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.ReferencePoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorStatePointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorStatePointGrab_FieldPathSelector
	Get(source *Floor_VendorState_PointGrab) []interface{}
	GetSingle(source *Floor_VendorState_PointGrab) (interface{}, bool)
	ClearValue(item *Floor_VendorState_PointGrab)

	// Those methods build corresponding FloorVendorStatePointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorStatePointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorStatePointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorStatePointGrab_FieldPathArrayItemValue
}

type FloorVendorStatePointGrab_FieldPathSelector int32

const (
	FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions FloorVendorStatePointGrab_FieldPathSelector = 0
)

func (s FloorVendorStatePointGrab_FieldPathSelector) String() string {
	switch s {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return "people_positions"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", s))
	}
}

func BuildFloorVendorStatePointGrab_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorStatePointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorState_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "people_positions", "peoplePositions", "people-positions":
			return &FloorVendorStatePointGrab_FieldTerminalPath{selector: FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions}, nil
		}
	} else {
		switch fp[0] {
		case "people_positions", "peoplePositions", "people-positions":
			if subpath, err := BuildFloorVendorStatePointGrabPeoplePositions_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &FloorVendorStatePointGrab_FieldSubPath{selector: FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorState_PointGrab", fp)
}

func ParseFloorVendorStatePointGrab_FieldPath(rawField string) (FloorVendorStatePointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorStatePointGrab_FieldPath(fp)
}

func MustParseFloorVendorStatePointGrab_FieldPath(rawField string) FloorVendorStatePointGrab_FieldPath {
	fp, err := ParseFloorVendorStatePointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorStatePointGrab_FieldTerminalPath struct {
	selector FloorVendorStatePointGrab_FieldPathSelector
}

var _ FloorVendorStatePointGrab_FieldPath = (*FloorVendorStatePointGrab_FieldTerminalPath)(nil)

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) Selector() FloorVendorStatePointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorState_PointGrab
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) Get(source *Floor_VendorState_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
			if source.PeoplePositions != nil {
				values = append(values, source.PeoplePositions)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorState_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorState_PointGrab
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) GetSingle(source *Floor_VendorState_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		res := source.GetPeoplePositions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorState_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return (*Floor_VendorState_PointGrab_PeoplePositions)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) ClearValue(item *Floor_VendorState_PointGrab) {
	if item != nil {
		switch fp.selector {
		case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
			item.PeoplePositions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorState_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorStatePointGrab_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithIValue(value interface{}) FloorVendorStatePointGrab_FieldPathValue {
	switch fp.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return &FloorVendorStatePointGrab_FieldTerminalPathValue{FloorVendorStatePointGrab_FieldTerminalPath: *fp, value: value.(*Floor_VendorState_PointGrab_PeoplePositions)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorStatePointGrab_FieldPathArrayOfValues {
	fpaov := &FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues{FloorVendorStatePointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return &FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues{FloorVendorStatePointGrab_FieldTerminalPath: *fp, values: values.([]*Floor_VendorState_PointGrab_PeoplePositions)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorStatePointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type FloorVendorStatePointGrab_FieldSubPath struct {
	selector FloorVendorStatePointGrab_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ FloorVendorStatePointGrab_FieldPath = (*FloorVendorStatePointGrab_FieldSubPath)(nil)

func (fps *FloorVendorStatePointGrab_FieldSubPath) Selector() FloorVendorStatePointGrab_FieldPathSelector {
	return fps.selector
}
func (fps *FloorVendorStatePointGrab_FieldSubPath) AsPeoplePositionsSubPath() (FloorVendorStatePointGrabPeoplePositions_FieldPath, bool) {
	res, ok := fps.subPath.(FloorVendorStatePointGrabPeoplePositions_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *FloorVendorStatePointGrab_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *FloorVendorStatePointGrab_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Floor_VendorState_PointGrab
func (fps *FloorVendorStatePointGrab_FieldSubPath) Get(source *Floor_VendorState_PointGrab) (values []interface{}) {
	if asPeoplePositionsFieldPath, ok := fps.AsPeoplePositionsSubPath(); ok {
		values = append(values, asPeoplePositionsFieldPath.Get(source.GetPeoplePositions())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fps.selector))
	}
	return
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Floor_VendorState_PointGrab))
}

// GetSingle returns value of selected field from source Floor_VendorState_PointGrab
func (fps *FloorVendorStatePointGrab_FieldSubPath) GetSingle(source *Floor_VendorState_PointGrab) (interface{}, bool) {
	switch fps.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		if source.GetPeoplePositions() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPeoplePositions())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fps.selector))
	}
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Floor_VendorState_PointGrab))
}

// GetDefault returns a default value of the field type
func (fps *FloorVendorStatePointGrab_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) ClearValue(item *Floor_VendorState_PointGrab) {
	if item != nil {
		switch fps.selector {
		case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
			fps.subPath.ClearValueRaw(item.PeoplePositions)
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fps.selector))
		}
	}
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Floor_VendorState_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fps *FloorVendorStatePointGrab_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&FloorVendorStatePointGrab_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithIValue(value interface{}) FloorVendorStatePointGrab_FieldPathValue {
	return &FloorVendorStatePointGrab_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithIArrayOfValues(values interface{}) FloorVendorStatePointGrab_FieldPathArrayOfValues {
	return &FloorVendorStatePointGrab_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithIArrayItemValue(value interface{}) FloorVendorStatePointGrab_FieldPathArrayItemValue {
	return &FloorVendorStatePointGrab_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *FloorVendorStatePointGrab_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// FloorVendorStatePointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type FloorVendorStatePointGrab_FieldPathValue interface {
	FloorVendorStatePointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorState_PointGrab)
	CompareWith(*Floor_VendorState_PointGrab) (cmp int, comparable bool)
}

func ParseFloorVendorStatePointGrab_FieldPathValue(pathStr, valueStr string) (FloorVendorStatePointGrab_FieldPathValue, error) {
	fp, err := ParseFloorVendorStatePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorStatePointGrab_FieldPathValue), nil
}

func MustParseFloorVendorStatePointGrab_FieldPathValue(pathStr, valueStr string) FloorVendorStatePointGrab_FieldPathValue {
	fpv, err := ParseFloorVendorStatePointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorStatePointGrab_FieldTerminalPathValue struct {
	FloorVendorStatePointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorStatePointGrab_FieldPathValue = (*FloorVendorStatePointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) AsPeoplePositionsValue() (*Floor_VendorState_PointGrab_PeoplePositions, bool) {
	res, ok := fpv.value.(*Floor_VendorState_PointGrab_PeoplePositions)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) SetTo(target **Floor_VendorState_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorState_PointGrab)
	}
	switch fpv.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		(*target).PeoplePositions = fpv.value.(*Floor_VendorState_PointGrab_PeoplePositions)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorState_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorStatePointGrab_FieldTerminalPathValue' with the value under path in 'Floor_VendorState_PointGrab'.
func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) CompareWith(source *Floor_VendorState_PointGrab) (int, bool) {
	switch fpv.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fpv.selector))
	}
}

func (fpv *FloorVendorStatePointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorState_PointGrab))
}

type FloorVendorStatePointGrab_FieldSubPathValue struct {
	FloorVendorStatePointGrab_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ FloorVendorStatePointGrab_FieldPathValue = (*FloorVendorStatePointGrab_FieldSubPathValue)(nil)

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) AsPeoplePositionsPathValue() (FloorVendorStatePointGrabPeoplePositions_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(FloorVendorStatePointGrabPeoplePositions_FieldPathValue)
	return res, ok
}

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) SetTo(target **Floor_VendorState_PointGrab) {
	if *target == nil {
		*target = new(Floor_VendorState_PointGrab)
	}
	switch fpvs.Selector() {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		fpvs.subPathValue.(FloorVendorStatePointGrabPeoplePositions_FieldPathValue).SetTo(&(*target).PeoplePositions)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorState_PointGrab)
	fpvs.SetTo(&typedObject)
}

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) CompareWith(source *Floor_VendorState_PointGrab) (int, bool) {
	switch fpvs.Selector() {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return fpvs.subPathValue.(FloorVendorStatePointGrabPeoplePositions_FieldPathValue).CompareWith(source.GetPeoplePositions())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fpvs.Selector()))
	}
}

func (fpvs *FloorVendorStatePointGrab_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Floor_VendorState_PointGrab))
}

// FloorVendorStatePointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type FloorVendorStatePointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorStatePointGrab_FieldPath
	ContainsValue(*Floor_VendorState_PointGrab) bool
}

// ParseFloorVendorStatePointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorStatePointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorStatePointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorStatePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorStatePointGrab_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorStatePointGrab_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorStatePointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorStatePointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue struct {
	FloorVendorStatePointGrab_FieldTerminalPath
	value interface{}
}

var _ FloorVendorStatePointGrab_FieldPathArrayItemValue = (*FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorState_PointGrab as interface{}
func (fpaiv *FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorState_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorState_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *FloorVendorStatePointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorState_PointGrab) bool {
	slice := fpaiv.FloorVendorStatePointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type FloorVendorStatePointGrab_FieldSubPathArrayItemValue struct {
	FloorVendorStatePointGrab_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *FloorVendorStatePointGrab_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *FloorVendorStatePointGrab_FieldSubPathArrayItemValue) AsPeoplePositionsPathItemValue() (FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaivs *FloorVendorStatePointGrab_FieldSubPathArrayItemValue) ContainsValue(source *Floor_VendorState_PointGrab) bool {
	switch fpaivs.Selector() {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		return fpaivs.subPathItemValue.(FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue).ContainsValue(source.GetPeoplePositions())
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab: %d", fpaivs.Selector()))
	}
}

// FloorVendorStatePointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type FloorVendorStatePointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorStatePointGrab_FieldPath
}

func ParseFloorVendorStatePointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorStatePointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorStatePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorStatePointGrab_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorStatePointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorStatePointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorStatePointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues struct {
	FloorVendorStatePointGrab_FieldTerminalPath
	values interface{}
}

var _ FloorVendorStatePointGrab_FieldPathArrayOfValues = (*FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorStatePointGrab_FieldPathSelectorPeoplePositions:
		for _, v := range fpaov.values.([]*Floor_VendorState_PointGrab_PeoplePositions) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorStatePointGrab_FieldTerminalPathArrayOfValues) AsPeoplePositionsArrayOfValues() ([]*Floor_VendorState_PointGrab_PeoplePositions, bool) {
	res, ok := fpaov.values.([]*Floor_VendorState_PointGrab_PeoplePositions)
	return res, ok
}

type FloorVendorStatePointGrab_FieldSubPathArrayOfValues struct {
	FloorVendorStatePointGrab_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ FloorVendorStatePointGrab_FieldPathArrayOfValues = (*FloorVendorStatePointGrab_FieldSubPathArrayOfValues)(nil)

func (fpsaov *FloorVendorStatePointGrab_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *FloorVendorStatePointGrab_FieldSubPathArrayOfValues) AsPeoplePositionsPathArrayOfValues() (FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type FloorVendorStatePointGrabPeoplePositions_FieldPath interface {
	gotenobject.FieldPath
	Selector() FloorVendorStatePointGrabPeoplePositions_FieldPathSelector
	Get(source *Floor_VendorState_PointGrab_PeoplePositions) []interface{}
	GetSingle(source *Floor_VendorState_PointGrab_PeoplePositions) (interface{}, bool)
	ClearValue(item *Floor_VendorState_PointGrab_PeoplePositions)

	// Those methods build corresponding FloorVendorStatePointGrabPeoplePositions_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathValue
	WithIArrayOfValues(values interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue
}

type FloorVendorStatePointGrabPeoplePositions_FieldPathSelector int32

const (
	FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates         FloorVendorStatePointGrabPeoplePositions_FieldPathSelector = 0
	FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp FloorVendorStatePointGrabPeoplePositions_FieldPathSelector = 1
)

func (s FloorVendorStatePointGrabPeoplePositions_FieldPathSelector) String() string {
	switch s {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return "coordinates"
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		return "last_report_timestamp"
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", s))
	}
}

func BuildFloorVendorStatePointGrabPeoplePositions_FieldPath(fp gotenobject.RawFieldPath) (FloorVendorStatePointGrabPeoplePositions_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Floor_VendorState_PointGrab_PeoplePositions")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "coordinates":
			return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath{selector: FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates}, nil
		case "last_report_timestamp", "lastReportTimestamp", "last-report-timestamp":
			return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath{selector: FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Floor_VendorState_PointGrab_PeoplePositions", fp)
}

func ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(rawField string) (FloorVendorStatePointGrabPeoplePositions_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildFloorVendorStatePointGrabPeoplePositions_FieldPath(fp)
}

func MustParseFloorVendorStatePointGrabPeoplePositions_FieldPath(rawField string) FloorVendorStatePointGrabPeoplePositions_FieldPath {
	fp, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath struct {
	selector FloorVendorStatePointGrabPeoplePositions_FieldPathSelector
}

var _ FloorVendorStatePointGrabPeoplePositions_FieldPath = (*FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath)(nil)

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) Selector() FloorVendorStatePointGrabPeoplePositions_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Floor_VendorState_PointGrab_PeoplePositions
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) Get(source *Floor_VendorState_PointGrab_PeoplePositions) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
			for _, value := range source.GetCoordinates() {
				values = append(values, value)
			}
		case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
			if source.LastReportTimestamp != nil {
				values = append(values, source.LastReportTimestamp)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
		}
	}
	return
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

// GetSingle returns value pointed by specific field of from source Floor_VendorState_PointGrab_PeoplePositions
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) GetSingle(source *Floor_VendorState_PointGrab_PeoplePositions) (interface{}, bool) {
	switch fp.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		res := source.GetCoordinates()
		return res, res != nil
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		res := source.GetLastReportTimestamp()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

// GetDefault returns a default value of the field type
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return ([]*latlng.LatLng)(nil)
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) ClearValue(item *Floor_VendorState_PointGrab_PeoplePositions) {
	if item != nil {
		switch fp.selector {
		case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
			item.Coordinates = nil
		case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
			item.LastReportTimestamp = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
		}
	}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Floor_VendorState_PointGrab_PeoplePositions))
}

// IsLeaf - whether field path is holds simple value
func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates ||
		fp.selector == FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithIValue(value interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathValue {
	switch fp.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp, value: value.([]*latlng.LatLng)}
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithIArrayOfValues(values interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues {
	fpaov := &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp}
	switch fp.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp, values: values.([][]*latlng.LatLng)}
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
	}
	return fpaov
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithIArrayItemValue(value interface{}) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue {
	switch fp.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return &FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue{FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath: *fp, value: value.(*latlng.LatLng)}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fp.selector))
	}
}

func (fp *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FloorVendorStatePointGrabPeoplePositions_FieldPathValue allows storing values for PeoplePositions fields according to their type
type FloorVendorStatePointGrabPeoplePositions_FieldPathValue interface {
	FloorVendorStatePointGrabPeoplePositions_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Floor_VendorState_PointGrab_PeoplePositions)
	CompareWith(*Floor_VendorState_PointGrab_PeoplePositions) (cmp int, comparable bool)
}

func ParseFloorVendorStatePointGrabPeoplePositions_FieldPathValue(pathStr, valueStr string) (FloorVendorStatePointGrabPeoplePositions_FieldPathValue, error) {
	fp, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PeoplePositions field path value from %s: %v", valueStr, err)
	}
	return fpv.(FloorVendorStatePointGrabPeoplePositions_FieldPathValue), nil
}

func MustParseFloorVendorStatePointGrabPeoplePositions_FieldPathValue(pathStr, valueStr string) FloorVendorStatePointGrabPeoplePositions_FieldPathValue {
	fpv, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue struct {
	FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath
	value interface{}
}

var _ FloorVendorStatePointGrabPeoplePositions_FieldPathValue = (*FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PeoplePositions' as interface{}
func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) AsCoordinatesValue() ([]*latlng.LatLng, bool) {
	res, ok := fpv.value.([]*latlng.LatLng)
	return res, ok
}
func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) AsLastReportTimestampValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object PeoplePositions
func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) SetTo(target **Floor_VendorState_PointGrab_PeoplePositions) {
	if *target == nil {
		*target = new(Floor_VendorState_PointGrab_PeoplePositions)
	}
	switch fpv.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		(*target).Coordinates = fpv.value.([]*latlng.LatLng)
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		(*target).LastReportTimestamp = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fpv.selector))
	}
}

func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Floor_VendorState_PointGrab_PeoplePositions)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue' with the value under path in 'Floor_VendorState_PointGrab_PeoplePositions'.
func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) CompareWith(source *Floor_VendorState_PointGrab_PeoplePositions) (int, bool) {
	switch fpv.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		return 0, false
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastReportTimestamp()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Floor_VendorState_PointGrab_PeoplePositions: %d", fpv.selector))
	}
}

func (fpv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

// FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue allows storing single item in Path-specific values for PeoplePositions according to their type
// Present only for array (repeated) types.
type FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	FloorVendorStatePointGrabPeoplePositions_FieldPath
	ContainsValue(*Floor_VendorState_PointGrab_PeoplePositions) bool
}

// ParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue(pathStr, valueStr string) (FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue, error) {
	fp, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PeoplePositions field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue), nil
}

func MustParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue(pathStr, valueStr string) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue {
	fpaiv, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue struct {
	FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath
	value interface{}
}

var _ FloorVendorStatePointGrabPeoplePositions_FieldPathArrayItemValue = (*FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Floor_VendorState_PointGrab_PeoplePositions as interface{}
func (fpaiv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue) AsCoordinatesItemValue() (*latlng.LatLng, bool) {
	res, ok := fpaiv.value.(*latlng.LatLng)
	return res, ok
}

func (fpaiv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue) GetSingle(source *Floor_VendorState_PointGrab_PeoplePositions) (interface{}, bool) {
	return nil, false
}

func (fpaiv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Floor_VendorState_PointGrab_PeoplePositions))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PeoplePositions'
func (fpaiv *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayItemValue) ContainsValue(source *Floor_VendorState_PointGrab_PeoplePositions) bool {
	slice := fpaiv.FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues allows storing slice of values for PeoplePositions fields according to their type
type FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	FloorVendorStatePointGrabPeoplePositions_FieldPath
}

func ParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues(pathStr, valuesStr string) (FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues, error) {
	fp, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PeoplePositions field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues), nil
}

func MustParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues(pathStr, valuesStr string) FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues {
	fpaov, err := ParseFloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues struct {
	FloorVendorStatePointGrabPeoplePositions_FieldTerminalPath
	values interface{}
}

var _ FloorVendorStatePointGrabPeoplePositions_FieldPathArrayOfValues = (*FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorCoordinates:
		for _, v := range fpaov.values.([][]*latlng.LatLng) {
			values = append(values, v)
		}
	case FloorVendorStatePointGrabPeoplePositions_FieldPathSelectorLastReportTimestamp:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues) AsCoordinatesArrayOfValues() ([][]*latlng.LatLng, bool) {
	res, ok := fpaov.values.([][]*latlng.LatLng)
	return res, ok
}
func (fpaov *FloorVendorStatePointGrabPeoplePositions_FieldTerminalPathArrayOfValues) AsLastReportTimestampArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
