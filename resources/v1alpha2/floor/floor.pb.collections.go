// Code generated by protoc-gen-goten-resource
// Resource: Floor
// DO NOT EDIT!!!

package floor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &building.Building{}
	_ = &workplace_common.BBox{}
)

type FloorList []*Floor

func (l FloorList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Floor))
}

func (l FloorList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(FloorList)...)
}

func (l FloorList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l FloorList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Floor)
}

func (l FloorList) Length() int {
	return len(l)
}

type FloorChangeList []*FloorChange

func (l FloorChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*FloorChange))
}

func (l FloorChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(FloorChangeList)...)
}

func (l FloorChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l FloorChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*FloorChange)
}

func (l FloorChangeList) Length() int {
	return len(l)
}

type FloorNameList []*Name

func (l FloorNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l FloorNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(FloorNameList)...)
}

func (l FloorNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l FloorNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l FloorNameList) Length() int {
	return len(l)
}

type FloorReferenceList []*Reference

func (l FloorReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l FloorReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(FloorReferenceList)...)
}

func (l FloorReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l FloorReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l FloorReferenceList) Length() int {
	return len(l)
}

type FloorParentNameList []*ParentName

func (l FloorParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l FloorParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(FloorParentNameList)...)
}

func (l FloorParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l FloorParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l FloorParentNameList) Length() int {
	return len(l)
}

type FloorParentReferenceList []*ParentReference

func (l FloorParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l FloorParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(FloorParentReferenceList)...)
}

func (l FloorParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l FloorParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l FloorParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l FloorParentReferenceList) Length() int {
	return len(l)
}

type FloorMap map[Name]*Floor

func (m FloorMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m FloorMap) Set(res gotenresource.Resource) {
	tRes := res.(*Floor)
	m[*tRes.Name] = tRes
}

func (m FloorMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m FloorMap) Length() int {
	return len(m)
}

func (m FloorMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type FloorChangeMap map[Name]*FloorChange

func (m FloorChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m FloorChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*FloorChange)
	m[*tChange.GetFloorName()] = tChange
}

func (m FloorChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m FloorChangeMap) Length() int {
	return len(m)
}

func (m FloorChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
