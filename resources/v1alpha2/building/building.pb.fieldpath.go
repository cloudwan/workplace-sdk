// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/building.proto
// DO NOT EDIT!!!

package building

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &workplace_common.BBox{}
	_ = &site.Site{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Building_FieldPath interface {
	gotenobject.FieldPath
	Selector() Building_FieldPathSelector
	Get(source *Building) []interface{}
	GetSingle(source *Building) (interface{}, bool)
	ClearValue(item *Building)

	// Those methods build corresponding Building_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Building_FieldPathValue
	WithIArrayOfValues(values interface{}) Building_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Building_FieldPathArrayItemValue
}

type Building_FieldPathSelector int32

const (
	Building_FieldPathSelectorName        Building_FieldPathSelector = 0
	Building_FieldPathSelectorDisplayName Building_FieldPathSelector = 1
	Building_FieldPathSelectorLocation    Building_FieldPathSelector = 2
	Building_FieldPathSelectorGeometry    Building_FieldPathSelector = 3
	Building_FieldPathSelectorVendorSpec  Building_FieldPathSelector = 4
	Building_FieldPathSelectorMetadata    Building_FieldPathSelector = 5
)

func (s Building_FieldPathSelector) String() string {
	switch s {
	case Building_FieldPathSelectorName:
		return "name"
	case Building_FieldPathSelectorDisplayName:
		return "display_name"
	case Building_FieldPathSelectorLocation:
		return "location"
	case Building_FieldPathSelectorGeometry:
		return "geometry"
	case Building_FieldPathSelectorVendorSpec:
		return "vendor_spec"
	case Building_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", s))
	}
}

func BuildBuilding_FieldPath(fp gotenobject.RawFieldPath) (Building_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Building")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorDisplayName}, nil
		case "location":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorLocation}, nil
		case "geometry":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorGeometry}, nil
		case "vendor_spec", "vendorSpec", "vendor-spec":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorVendorSpec}, nil
		case "metadata":
			return &Building_FieldTerminalPath{selector: Building_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := workplace_common.BuildStreetLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Building_FieldSubPath{selector: Building_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Building_FieldSubPath{selector: Building_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "vendor_spec", "vendorSpec", "vendor-spec":
			if subpath, err := BuildBuildingVendorSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Building_FieldSubPath{selector: Building_FieldPathSelectorVendorSpec, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Building_FieldSubPath{selector: Building_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Building", fp)
}

func ParseBuilding_FieldPath(rawField string) (Building_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBuilding_FieldPath(fp)
}

func MustParseBuilding_FieldPath(rawField string) Building_FieldPath {
	fp, err := ParseBuilding_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Building_FieldTerminalPath struct {
	selector Building_FieldPathSelector
}

var _ Building_FieldPath = (*Building_FieldTerminalPath)(nil)

func (fp *Building_FieldTerminalPath) Selector() Building_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Building_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Building_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Building
func (fp *Building_FieldTerminalPath) Get(source *Building) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Building_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Building_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Building_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case Building_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Building_FieldPathSelectorVendorSpec:
			if source.VendorSpec != nil {
				values = append(values, source.VendorSpec)
			}
		case Building_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
		}
	}
	return
}

func (fp *Building_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Building))
}

// GetSingle returns value pointed by specific field of from source Building
func (fp *Building_FieldTerminalPath) GetSingle(source *Building) (interface{}, bool) {
	switch fp.selector {
	case Building_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Building_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Building_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case Building_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Building_FieldPathSelectorVendorSpec:
		res := source.GetVendorSpec()
		return res, res != nil
	case Building_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
	}
}

func (fp *Building_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Building))
}

// GetDefault returns a default value of the field type
func (fp *Building_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Building_FieldPathSelectorName:
		return (*Name)(nil)
	case Building_FieldPathSelectorDisplayName:
		return ""
	case Building_FieldPathSelectorLocation:
		return (*workplace_common.StreetLocation)(nil)
	case Building_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Building_FieldPathSelectorVendorSpec:
		return (*Building_VendorSpec)(nil)
	case Building_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
	}
}

func (fp *Building_FieldTerminalPath) ClearValue(item *Building) {
	if item != nil {
		switch fp.selector {
		case Building_FieldPathSelectorName:
			item.Name = nil
		case Building_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Building_FieldPathSelectorLocation:
			item.Location = nil
		case Building_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Building_FieldPathSelectorVendorSpec:
			item.VendorSpec = nil
		case Building_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
		}
	}
}

func (fp *Building_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Building))
}

// IsLeaf - whether field path is holds simple value
func (fp *Building_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Building_FieldPathSelectorName ||
		fp.selector == Building_FieldPathSelectorDisplayName
}

func (fp *Building_FieldTerminalPath) WithIValue(value interface{}) Building_FieldPathValue {
	switch fp.selector {
	case Building_FieldPathSelectorName:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(*Name)}
	case Building_FieldPathSelectorDisplayName:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(string)}
	case Building_FieldPathSelectorLocation:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(*workplace_common.StreetLocation)}
	case Building_FieldPathSelectorGeometry:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Building_FieldPathSelectorVendorSpec:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(*Building_VendorSpec)}
	case Building_FieldPathSelectorMetadata:
		return &Building_FieldTerminalPathValue{Building_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
	}
}

func (fp *Building_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Building_FieldTerminalPath) WithIArrayOfValues(values interface{}) Building_FieldPathArrayOfValues {
	fpaov := &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp}
	switch fp.selector {
	case Building_FieldPathSelectorName:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Building_FieldPathSelectorDisplayName:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]string)}
	case Building_FieldPathSelectorLocation:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]*workplace_common.StreetLocation)}
	case Building_FieldPathSelectorGeometry:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Building_FieldPathSelectorVendorSpec:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]*Building_VendorSpec)}
	case Building_FieldPathSelectorMetadata:
		return &Building_FieldTerminalPathArrayOfValues{Building_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
	}
	return fpaov
}

func (fp *Building_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Building_FieldTerminalPath) WithIArrayItemValue(value interface{}) Building_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fp.selector))
	}
}

func (fp *Building_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Building_FieldSubPath struct {
	selector Building_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Building_FieldPath = (*Building_FieldSubPath)(nil)

func (fps *Building_FieldSubPath) Selector() Building_FieldPathSelector {
	return fps.selector
}
func (fps *Building_FieldSubPath) AsLocationSubPath() (workplace_common.StreetLocation_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.StreetLocation_FieldPath)
	return res, ok
}
func (fps *Building_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Building_FieldSubPath) AsVendorSpecSubPath() (BuildingVendorSpec_FieldPath, bool) {
	res, ok := fps.subPath.(BuildingVendorSpec_FieldPath)
	return res, ok
}
func (fps *Building_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Building_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Building_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Building
func (fps *Building_FieldSubPath) Get(source *Building) (values []interface{}) {
	if asStreetLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asStreetLocationFieldPath.Get(source.GetLocation())...)
	} else if asGeometryFieldPath, ok := fps.AsGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetGeometry())...)
	} else if asVendorSpecFieldPath, ok := fps.AsVendorSpecSubPath(); ok {
		values = append(values, asVendorSpecFieldPath.Get(source.GetVendorSpec())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Building: %d", fps.selector))
	}
	return
}

func (fps *Building_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Building))
}

// GetSingle returns value of selected field from source Building
func (fps *Building_FieldSubPath) GetSingle(source *Building) (interface{}, bool) {
	switch fps.selector {
	case Building_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case Building_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Building_FieldPathSelectorVendorSpec:
		if source.GetVendorSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorSpec())
	case Building_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fps.selector))
	}
}

func (fps *Building_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Building))
}

// GetDefault returns a default value of the field type
func (fps *Building_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Building_FieldSubPath) ClearValue(item *Building) {
	if item != nil {
		switch fps.selector {
		case Building_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case Building_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Building_FieldPathSelectorVendorSpec:
			fps.subPath.ClearValueRaw(item.VendorSpec)
		case Building_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Building: %d", fps.selector))
		}
	}
}

func (fps *Building_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Building))
}

// IsLeaf - whether field path is holds simple value
func (fps *Building_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Building_FieldSubPath) WithIValue(value interface{}) Building_FieldPathValue {
	return &Building_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Building_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Building_FieldSubPath) WithIArrayOfValues(values interface{}) Building_FieldPathArrayOfValues {
	return &Building_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Building_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Building_FieldSubPath) WithIArrayItemValue(value interface{}) Building_FieldPathArrayItemValue {
	return &Building_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Building_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Building_FieldPathValue allows storing values for Building fields according to their type
type Building_FieldPathValue interface {
	Building_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Building)
	CompareWith(*Building) (cmp int, comparable bool)
}

func ParseBuilding_FieldPathValue(pathStr, valueStr string) (Building_FieldPathValue, error) {
	fp, err := ParseBuilding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Building field path value from %s: %v", valueStr, err)
	}
	return fpv.(Building_FieldPathValue), nil
}

func MustParseBuilding_FieldPathValue(pathStr, valueStr string) Building_FieldPathValue {
	fpv, err := ParseBuilding_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Building_FieldTerminalPathValue struct {
	Building_FieldTerminalPath
	value interface{}
}

var _ Building_FieldPathValue = (*Building_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Building' as interface{}
func (fpv *Building_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Building_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Building_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Building_FieldTerminalPathValue) AsLocationValue() (*workplace_common.StreetLocation, bool) {
	res, ok := fpv.value.(*workplace_common.StreetLocation)
	return res, ok
}
func (fpv *Building_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Building_FieldTerminalPathValue) AsVendorSpecValue() (*Building_VendorSpec, bool) {
	res, ok := fpv.value.(*Building_VendorSpec)
	return res, ok
}
func (fpv *Building_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Building
func (fpv *Building_FieldTerminalPathValue) SetTo(target **Building) {
	if *target == nil {
		*target = new(Building)
	}
	switch fpv.selector {
	case Building_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Building_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Building_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*workplace_common.StreetLocation)
	case Building_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Building_FieldPathSelectorVendorSpec:
		(*target).VendorSpec = fpv.value.(*Building_VendorSpec)
	case Building_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fpv.selector))
	}
}

func (fpv *Building_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Building)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Building_FieldTerminalPathValue' with the value under path in 'Building'.
func (fpv *Building_FieldTerminalPathValue) CompareWith(source *Building) (int, bool) {
	switch fpv.selector {
	case Building_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Building_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Building_FieldPathSelectorLocation:
		return 0, false
	case Building_FieldPathSelectorGeometry:
		return 0, false
	case Building_FieldPathSelectorVendorSpec:
		return 0, false
	case Building_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fpv.selector))
	}
}

func (fpv *Building_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Building))
}

type Building_FieldSubPathValue struct {
	Building_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Building_FieldPathValue = (*Building_FieldSubPathValue)(nil)

func (fpvs *Building_FieldSubPathValue) AsLocationPathValue() (workplace_common.StreetLocation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue)
	return res, ok
}
func (fpvs *Building_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Building_FieldSubPathValue) AsVendorSpecPathValue() (BuildingVendorSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(BuildingVendorSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Building_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Building_FieldSubPathValue) SetTo(target **Building) {
	if *target == nil {
		*target = new(Building)
	}
	switch fpvs.Selector() {
	case Building_FieldPathSelectorLocation:
		fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue).SetTo(&(*target).Location)
	case Building_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Building_FieldPathSelectorVendorSpec:
		fpvs.subPathValue.(BuildingVendorSpec_FieldPathValue).SetTo(&(*target).VendorSpec)
	case Building_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fpvs.Selector()))
	}
}

func (fpvs *Building_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Building)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Building_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Building_FieldSubPathValue) CompareWith(source *Building) (int, bool) {
	switch fpvs.Selector() {
	case Building_FieldPathSelectorLocation:
		return fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue).CompareWith(source.GetLocation())
	case Building_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Building_FieldPathSelectorVendorSpec:
		return fpvs.subPathValue.(BuildingVendorSpec_FieldPathValue).CompareWith(source.GetVendorSpec())
	case Building_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fpvs.Selector()))
	}
}

func (fpvs *Building_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Building))
}

// Building_FieldPathArrayItemValue allows storing single item in Path-specific values for Building according to their type
// Present only for array (repeated) types.
type Building_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Building_FieldPath
	ContainsValue(*Building) bool
}

// ParseBuilding_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBuilding_FieldPathArrayItemValue(pathStr, valueStr string) (Building_FieldPathArrayItemValue, error) {
	fp, err := ParseBuilding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Building field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Building_FieldPathArrayItemValue), nil
}

func MustParseBuilding_FieldPathArrayItemValue(pathStr, valueStr string) Building_FieldPathArrayItemValue {
	fpaiv, err := ParseBuilding_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Building_FieldTerminalPathArrayItemValue struct {
	Building_FieldTerminalPath
	value interface{}
}

var _ Building_FieldPathArrayItemValue = (*Building_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Building as interface{}
func (fpaiv *Building_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Building_FieldTerminalPathArrayItemValue) GetSingle(source *Building) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Building_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Building))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Building'
func (fpaiv *Building_FieldTerminalPathArrayItemValue) ContainsValue(source *Building) bool {
	slice := fpaiv.Building_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Building_FieldSubPathArrayItemValue struct {
	Building_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Building_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Building_FieldSubPathArrayItemValue) AsLocationPathItemValue() (workplace_common.StreetLocation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.StreetLocation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Building_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Building_FieldSubPathArrayItemValue) AsVendorSpecPathItemValue() (BuildingVendorSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(BuildingVendorSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Building_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Building'
func (fpaivs *Building_FieldSubPathArrayItemValue) ContainsValue(source *Building) bool {
	switch fpaivs.Selector() {
	case Building_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(workplace_common.StreetLocation_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case Building_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Building_FieldPathSelectorVendorSpec:
		return fpaivs.subPathItemValue.(BuildingVendorSpec_FieldPathArrayItemValue).ContainsValue(source.GetVendorSpec())
	case Building_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Building: %d", fpaivs.Selector()))
	}
}

// Building_FieldPathArrayOfValues allows storing slice of values for Building fields according to their type
type Building_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Building_FieldPath
}

func ParseBuilding_FieldPathArrayOfValues(pathStr, valuesStr string) (Building_FieldPathArrayOfValues, error) {
	fp, err := ParseBuilding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Building field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Building_FieldPathArrayOfValues), nil
}

func MustParseBuilding_FieldPathArrayOfValues(pathStr, valuesStr string) Building_FieldPathArrayOfValues {
	fpaov, err := ParseBuilding_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Building_FieldTerminalPathArrayOfValues struct {
	Building_FieldTerminalPath
	values interface{}
}

var _ Building_FieldPathArrayOfValues = (*Building_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Building_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Building_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Building_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Building_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*workplace_common.StreetLocation) {
			values = append(values, v)
		}
	case Building_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Building_FieldPathSelectorVendorSpec:
		for _, v := range fpaov.values.([]*Building_VendorSpec) {
			values = append(values, v)
		}
	case Building_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*workplace_common.StreetLocation, bool) {
	res, ok := fpaov.values.([]*workplace_common.StreetLocation)
	return res, ok
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsVendorSpecArrayOfValues() ([]*Building_VendorSpec, bool) {
	res, ok := fpaov.values.([]*Building_VendorSpec)
	return res, ok
}
func (fpaov *Building_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Building_FieldSubPathArrayOfValues struct {
	Building_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Building_FieldPathArrayOfValues = (*Building_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Building_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Building_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (workplace_common.StreetLocation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.StreetLocation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Building_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Building_FieldSubPathArrayOfValues) AsVendorSpecPathArrayOfValues() (BuildingVendorSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(BuildingVendorSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Building_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BuildingVendorSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() BuildingVendorSpec_FieldPathSelector
	Get(source *Building_VendorSpec) []interface{}
	GetSingle(source *Building_VendorSpec) (interface{}, bool)
	ClearValue(item *Building_VendorSpec)

	// Those methods build corresponding BuildingVendorSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BuildingVendorSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) BuildingVendorSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BuildingVendorSpec_FieldPathArrayItemValue
}

type BuildingVendorSpec_FieldPathSelector int32

const (
	BuildingVendorSpec_FieldPathSelectorPointGrab BuildingVendorSpec_FieldPathSelector = 0
)

func (s BuildingVendorSpec_FieldPathSelector) String() string {
	switch s {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", s))
	}
}

func BuildBuildingVendorSpec_FieldPath(fp gotenobject.RawFieldPath) (BuildingVendorSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Building_VendorSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &BuildingVendorSpec_FieldTerminalPath{selector: BuildingVendorSpec_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildBuildingVendorSpecPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BuildingVendorSpec_FieldSubPath{selector: BuildingVendorSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Building_VendorSpec", fp)
}

func ParseBuildingVendorSpec_FieldPath(rawField string) (BuildingVendorSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBuildingVendorSpec_FieldPath(fp)
}

func MustParseBuildingVendorSpec_FieldPath(rawField string) BuildingVendorSpec_FieldPath {
	fp, err := ParseBuildingVendorSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BuildingVendorSpec_FieldTerminalPath struct {
	selector BuildingVendorSpec_FieldPathSelector
}

var _ BuildingVendorSpec_FieldPath = (*BuildingVendorSpec_FieldTerminalPath)(nil)

func (fp *BuildingVendorSpec_FieldTerminalPath) Selector() BuildingVendorSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BuildingVendorSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BuildingVendorSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Building_VendorSpec
func (fp *BuildingVendorSpec_FieldTerminalPath) Get(source *Building_VendorSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BuildingVendorSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *BuildingVendorSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Building_VendorSpec))
}

// GetSingle returns value pointed by specific field of from source Building_VendorSpec
func (fp *BuildingVendorSpec_FieldTerminalPath) GetSingle(source *Building_VendorSpec) (interface{}, bool) {
	switch fp.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Building_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fp *BuildingVendorSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return (*Building_VendorSpec_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpec_FieldTerminalPath) ClearValue(item *Building_VendorSpec) {
	if item != nil {
		switch fp.selector {
		case BuildingVendorSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
		}
	}
}

func (fp *BuildingVendorSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Building_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *BuildingVendorSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithIValue(value interface{}) BuildingVendorSpec_FieldPathValue {
	switch fp.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return &BuildingVendorSpec_FieldTerminalPathValue{BuildingVendorSpec_FieldTerminalPath: *fp, value: value.(*Building_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) BuildingVendorSpec_FieldPathArrayOfValues {
	fpaov := &BuildingVendorSpec_FieldTerminalPathArrayOfValues{BuildingVendorSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return &BuildingVendorSpec_FieldTerminalPathArrayOfValues{BuildingVendorSpec_FieldTerminalPath: *fp, values: values.([]*Building_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) BuildingVendorSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BuildingVendorSpec_FieldSubPath struct {
	selector BuildingVendorSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BuildingVendorSpec_FieldPath = (*BuildingVendorSpec_FieldSubPath)(nil)

func (fps *BuildingVendorSpec_FieldSubPath) Selector() BuildingVendorSpec_FieldPathSelector {
	return fps.selector
}
func (fps *BuildingVendorSpec_FieldSubPath) AsPointGrabSubPath() (BuildingVendorSpecPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(BuildingVendorSpecPointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BuildingVendorSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BuildingVendorSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Building_VendorSpec
func (fps *BuildingVendorSpec_FieldSubPath) Get(source *Building_VendorSpec) (values []interface{}) {
	if asPointGrabFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fps.selector))
	}
	return
}

func (fps *BuildingVendorSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Building_VendorSpec))
}

// GetSingle returns value of selected field from source Building_VendorSpec
func (fps *BuildingVendorSpec_FieldSubPath) GetSingle(source *Building_VendorSpec) (interface{}, bool) {
	switch fps.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fps.selector))
	}
}

func (fps *BuildingVendorSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Building_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fps *BuildingVendorSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BuildingVendorSpec_FieldSubPath) ClearValue(item *Building_VendorSpec) {
	if item != nil {
		switch fps.selector {
		case BuildingVendorSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fps.selector))
		}
	}
}

func (fps *BuildingVendorSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Building_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *BuildingVendorSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BuildingVendorSpec_FieldSubPath) WithIValue(value interface{}) BuildingVendorSpec_FieldPathValue {
	return &BuildingVendorSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BuildingVendorSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BuildingVendorSpec_FieldSubPath) WithIArrayOfValues(values interface{}) BuildingVendorSpec_FieldPathArrayOfValues {
	return &BuildingVendorSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BuildingVendorSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BuildingVendorSpec_FieldSubPath) WithIArrayItemValue(value interface{}) BuildingVendorSpec_FieldPathArrayItemValue {
	return &BuildingVendorSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BuildingVendorSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BuildingVendorSpec_FieldPathValue allows storing values for VendorSpec fields according to their type
type BuildingVendorSpec_FieldPathValue interface {
	BuildingVendorSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Building_VendorSpec)
	CompareWith(*Building_VendorSpec) (cmp int, comparable bool)
}

func ParseBuildingVendorSpec_FieldPathValue(pathStr, valueStr string) (BuildingVendorSpec_FieldPathValue, error) {
	fp, err := ParseBuildingVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(BuildingVendorSpec_FieldPathValue), nil
}

func MustParseBuildingVendorSpec_FieldPathValue(pathStr, valueStr string) BuildingVendorSpec_FieldPathValue {
	fpv, err := ParseBuildingVendorSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BuildingVendorSpec_FieldTerminalPathValue struct {
	BuildingVendorSpec_FieldTerminalPath
	value interface{}
}

var _ BuildingVendorSpec_FieldPathValue = (*BuildingVendorSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorSpec' as interface{}
func (fpv *BuildingVendorSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BuildingVendorSpec_FieldTerminalPathValue) AsPointGrabValue() (*Building_VendorSpec_PointGrab, bool) {
	res, ok := fpv.value.(*Building_VendorSpec_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorSpec
func (fpv *BuildingVendorSpec_FieldTerminalPathValue) SetTo(target **Building_VendorSpec) {
	if *target == nil {
		*target = new(Building_VendorSpec)
	}
	switch fpv.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Building_VendorSpec_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *BuildingVendorSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Building_VendorSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BuildingVendorSpec_FieldTerminalPathValue' with the value under path in 'Building_VendorSpec'.
func (fpv *BuildingVendorSpec_FieldTerminalPathValue) CompareWith(source *Building_VendorSpec) (int, bool) {
	switch fpv.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *BuildingVendorSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Building_VendorSpec))
}

type BuildingVendorSpec_FieldSubPathValue struct {
	BuildingVendorSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BuildingVendorSpec_FieldPathValue = (*BuildingVendorSpec_FieldSubPathValue)(nil)

func (fpvs *BuildingVendorSpec_FieldSubPathValue) AsPointGrabPathValue() (BuildingVendorSpecPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(BuildingVendorSpecPointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *BuildingVendorSpec_FieldSubPathValue) SetTo(target **Building_VendorSpec) {
	if *target == nil {
		*target = new(Building_VendorSpec)
	}
	switch fpvs.Selector() {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(BuildingVendorSpecPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *BuildingVendorSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Building_VendorSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BuildingVendorSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BuildingVendorSpec_FieldSubPathValue) CompareWith(source *Building_VendorSpec) (int, bool) {
	switch fpvs.Selector() {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(BuildingVendorSpecPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *BuildingVendorSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Building_VendorSpec))
}

// BuildingVendorSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorSpec according to their type
// Present only for array (repeated) types.
type BuildingVendorSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BuildingVendorSpec_FieldPath
	ContainsValue(*Building_VendorSpec) bool
}

// ParseBuildingVendorSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBuildingVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) (BuildingVendorSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseBuildingVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BuildingVendorSpec_FieldPathArrayItemValue), nil
}

func MustParseBuildingVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) BuildingVendorSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseBuildingVendorSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BuildingVendorSpec_FieldTerminalPathArrayItemValue struct {
	BuildingVendorSpec_FieldTerminalPath
	value interface{}
}

var _ BuildingVendorSpec_FieldPathArrayItemValue = (*BuildingVendorSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Building_VendorSpec as interface{}
func (fpaiv *BuildingVendorSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *BuildingVendorSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Building_VendorSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BuildingVendorSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Building_VendorSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaiv *BuildingVendorSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Building_VendorSpec) bool {
	slice := fpaiv.BuildingVendorSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BuildingVendorSpec_FieldSubPathArrayItemValue struct {
	BuildingVendorSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BuildingVendorSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BuildingVendorSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (BuildingVendorSpecPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(BuildingVendorSpecPointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaivs *BuildingVendorSpec_FieldSubPathArrayItemValue) ContainsValue(source *Building_VendorSpec) bool {
	switch fpaivs.Selector() {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(BuildingVendorSpecPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec: %d", fpaivs.Selector()))
	}
}

// BuildingVendorSpec_FieldPathArrayOfValues allows storing slice of values for VendorSpec fields according to their type
type BuildingVendorSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BuildingVendorSpec_FieldPath
}

func ParseBuildingVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (BuildingVendorSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseBuildingVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BuildingVendorSpec_FieldPathArrayOfValues), nil
}

func MustParseBuildingVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) BuildingVendorSpec_FieldPathArrayOfValues {
	fpaov, err := ParseBuildingVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BuildingVendorSpec_FieldTerminalPathArrayOfValues struct {
	BuildingVendorSpec_FieldTerminalPath
	values interface{}
}

var _ BuildingVendorSpec_FieldPathArrayOfValues = (*BuildingVendorSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BuildingVendorSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BuildingVendorSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Building_VendorSpec_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BuildingVendorSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Building_VendorSpec_PointGrab, bool) {
	res, ok := fpaov.values.([]*Building_VendorSpec_PointGrab)
	return res, ok
}

type BuildingVendorSpec_FieldSubPathArrayOfValues struct {
	BuildingVendorSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BuildingVendorSpec_FieldPathArrayOfValues = (*BuildingVendorSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BuildingVendorSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BuildingVendorSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (BuildingVendorSpecPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(BuildingVendorSpecPointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BuildingVendorSpecPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() BuildingVendorSpecPointGrab_FieldPathSelector
	Get(source *Building_VendorSpec_PointGrab) []interface{}
	GetSingle(source *Building_VendorSpec_PointGrab) (interface{}, bool)
	ClearValue(item *Building_VendorSpec_PointGrab)

	// Those methods build corresponding BuildingVendorSpecPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BuildingVendorSpecPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) BuildingVendorSpecPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BuildingVendorSpecPointGrab_FieldPathArrayItemValue
}

type BuildingVendorSpecPointGrab_FieldPathSelector int32

const (
	BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId BuildingVendorSpecPointGrab_FieldPathSelector = 0
)

func (s BuildingVendorSpecPointGrab_FieldPathSelector) String() string {
	switch s {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return "building_id"
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", s))
	}
}

func BuildBuildingVendorSpecPointGrab_FieldPath(fp gotenobject.RawFieldPath) (BuildingVendorSpecPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Building_VendorSpec_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "building_id", "buildingId", "building-id":
			return &BuildingVendorSpecPointGrab_FieldTerminalPath{selector: BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Building_VendorSpec_PointGrab", fp)
}

func ParseBuildingVendorSpecPointGrab_FieldPath(rawField string) (BuildingVendorSpecPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBuildingVendorSpecPointGrab_FieldPath(fp)
}

func MustParseBuildingVendorSpecPointGrab_FieldPath(rawField string) BuildingVendorSpecPointGrab_FieldPath {
	fp, err := ParseBuildingVendorSpecPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BuildingVendorSpecPointGrab_FieldTerminalPath struct {
	selector BuildingVendorSpecPointGrab_FieldPathSelector
}

var _ BuildingVendorSpecPointGrab_FieldPath = (*BuildingVendorSpecPointGrab_FieldTerminalPath)(nil)

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) Selector() BuildingVendorSpecPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Building_VendorSpec_PointGrab
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) Get(source *Building_VendorSpec_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
			values = append(values, source.BuildingId)
		default:
			panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Building_VendorSpec_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Building_VendorSpec_PointGrab
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) GetSingle(source *Building_VendorSpec_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return source.GetBuildingId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Building_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) ClearValue(item *Building_VendorSpec_PointGrab) {
	if item != nil {
		switch fp.selector {
		case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
			item.BuildingId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Building_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithIValue(value interface{}) BuildingVendorSpecPointGrab_FieldPathValue {
	switch fp.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return &BuildingVendorSpecPointGrab_FieldTerminalPathValue{BuildingVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) BuildingVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov := &BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues{BuildingVendorSpecPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return &BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues{BuildingVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) BuildingVendorSpecPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *BuildingVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BuildingVendorSpecPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type BuildingVendorSpecPointGrab_FieldPathValue interface {
	BuildingVendorSpecPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Building_VendorSpec_PointGrab)
	CompareWith(*Building_VendorSpec_PointGrab) (cmp int, comparable bool)
}

func ParseBuildingVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) (BuildingVendorSpecPointGrab_FieldPathValue, error) {
	fp, err := ParseBuildingVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(BuildingVendorSpecPointGrab_FieldPathValue), nil
}

func MustParseBuildingVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) BuildingVendorSpecPointGrab_FieldPathValue {
	fpv, err := ParseBuildingVendorSpecPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BuildingVendorSpecPointGrab_FieldTerminalPathValue struct {
	BuildingVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ BuildingVendorSpecPointGrab_FieldPathValue = (*BuildingVendorSpecPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) AsBuildingIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) SetTo(target **Building_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Building_VendorSpec_PointGrab)
	}
	switch fpv.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		(*target).BuildingId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Building_VendorSpec_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BuildingVendorSpecPointGrab_FieldTerminalPathValue' with the value under path in 'Building_VendorSpec_PointGrab'.
func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) CompareWith(source *Building_VendorSpec_PointGrab) (int, bool) {
	switch fpv.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		leftValue := fpv.value.(string)
		rightValue := source.GetBuildingId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Building_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *BuildingVendorSpecPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Building_VendorSpec_PointGrab))
}

// BuildingVendorSpecPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type BuildingVendorSpecPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BuildingVendorSpecPointGrab_FieldPath
	ContainsValue(*Building_VendorSpec_PointGrab) bool
}

// ParseBuildingVendorSpecPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBuildingVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (BuildingVendorSpecPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseBuildingVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BuildingVendorSpecPointGrab_FieldPathArrayItemValue), nil
}

func MustParseBuildingVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) BuildingVendorSpecPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseBuildingVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue struct {
	BuildingVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ BuildingVendorSpecPointGrab_FieldPathArrayItemValue = (*BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Building_VendorSpec_PointGrab as interface{}
func (fpaiv *BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Building_VendorSpec_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Building_VendorSpec_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *BuildingVendorSpecPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Building_VendorSpec_PointGrab) bool {
	slice := fpaiv.BuildingVendorSpecPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BuildingVendorSpecPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type BuildingVendorSpecPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BuildingVendorSpecPointGrab_FieldPath
}

func ParseBuildingVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (BuildingVendorSpecPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseBuildingVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BuildingVendorSpecPointGrab_FieldPathArrayOfValues), nil
}

func MustParseBuildingVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) BuildingVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseBuildingVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues struct {
	BuildingVendorSpecPointGrab_FieldTerminalPath
	values interface{}
}

var _ BuildingVendorSpecPointGrab_FieldPathArrayOfValues = (*BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BuildingVendorSpecPointGrab_FieldPathSelectorBuildingId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BuildingVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsBuildingIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
