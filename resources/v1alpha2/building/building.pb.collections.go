// Code generated by protoc-gen-goten-resource
// Resource: Building
// DO NOT EDIT!!!

package building

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &workplace_common.BBox{}
	_ = &site.Site{}
)

type BuildingList []*Building

func (l BuildingList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Building))
}

func (l BuildingList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(BuildingList)...)
}

func (l BuildingList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l BuildingList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Building)
}

func (l BuildingList) Length() int {
	return len(l)
}

type BuildingChangeList []*BuildingChange

func (l BuildingChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*BuildingChange))
}

func (l BuildingChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(BuildingChangeList)...)
}

func (l BuildingChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l BuildingChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*BuildingChange)
}

func (l BuildingChangeList) Length() int {
	return len(l)
}

type BuildingNameList []*Name

func (l BuildingNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l BuildingNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(BuildingNameList)...)
}

func (l BuildingNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l BuildingNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l BuildingNameList) Length() int {
	return len(l)
}

type BuildingReferenceList []*Reference

func (l BuildingReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l BuildingReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(BuildingReferenceList)...)
}

func (l BuildingReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l BuildingReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l BuildingReferenceList) Length() int {
	return len(l)
}

type BuildingParentNameList []*ParentName

func (l BuildingParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l BuildingParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(BuildingParentNameList)...)
}

func (l BuildingParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l BuildingParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l BuildingParentNameList) Length() int {
	return len(l)
}

type BuildingParentReferenceList []*ParentReference

func (l BuildingParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l BuildingParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(BuildingParentReferenceList)...)
}

func (l BuildingParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l BuildingParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l BuildingParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l BuildingParentReferenceList) Length() int {
	return len(l)
}

type BuildingMap map[Name]*Building

func (m BuildingMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m BuildingMap) Set(res gotenresource.Resource) {
	tRes := res.(*Building)
	m[*tRes.Name] = tRes
}

func (m BuildingMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m BuildingMap) Length() int {
	return len(m)
}

func (m BuildingMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type BuildingChangeMap map[Name]*BuildingChange

func (m BuildingChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m BuildingChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*BuildingChange)
	m[*tChange.GetBuildingName()] = tChange
}

func (m BuildingChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m BuildingChangeMap) Length() int {
	return len(m)
}

func (m BuildingChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
