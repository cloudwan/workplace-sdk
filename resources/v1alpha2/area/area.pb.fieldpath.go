// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/area.proto
// DO NOT EDIT!!!

package area

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &workplace_common.BBox{}
	_ = &floor.Floor{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Area_FieldPath interface {
	gotenobject.FieldPath
	Selector() Area_FieldPathSelector
	Get(source *Area) []interface{}
	GetSingle(source *Area) (interface{}, bool)
	ClearValue(item *Area)

	// Those methods build corresponding Area_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Area_FieldPathValue
	WithIArrayOfValues(values interface{}) Area_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Area_FieldPathArrayItemValue
}

type Area_FieldPathSelector int32

const (
	Area_FieldPathSelectorName        Area_FieldPathSelector = 0
	Area_FieldPathSelectorDisplayName Area_FieldPathSelector = 1
	Area_FieldPathSelectorGeometry    Area_FieldPathSelector = 2
	Area_FieldPathSelectorVendorSpec  Area_FieldPathSelector = 3
	Area_FieldPathSelectorMetadata    Area_FieldPathSelector = 4
)

func (s Area_FieldPathSelector) String() string {
	switch s {
	case Area_FieldPathSelectorName:
		return "name"
	case Area_FieldPathSelectorDisplayName:
		return "display_name"
	case Area_FieldPathSelectorGeometry:
		return "geometry"
	case Area_FieldPathSelectorVendorSpec:
		return "vendor_spec"
	case Area_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", s))
	}
}

func BuildArea_FieldPath(fp gotenobject.RawFieldPath) (Area_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Area")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Area_FieldTerminalPath{selector: Area_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Area_FieldTerminalPath{selector: Area_FieldPathSelectorDisplayName}, nil
		case "geometry":
			return &Area_FieldTerminalPath{selector: Area_FieldPathSelectorGeometry}, nil
		case "vendor_spec", "vendorSpec", "vendor-spec":
			return &Area_FieldTerminalPath{selector: Area_FieldPathSelectorVendorSpec}, nil
		case "metadata":
			return &Area_FieldTerminalPath{selector: Area_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Area_FieldSubPath{selector: Area_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "vendor_spec", "vendorSpec", "vendor-spec":
			if subpath, err := BuildAreaVendorSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Area_FieldSubPath{selector: Area_FieldPathSelectorVendorSpec, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Area_FieldSubPath{selector: Area_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Area", fp)
}

func ParseArea_FieldPath(rawField string) (Area_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildArea_FieldPath(fp)
}

func MustParseArea_FieldPath(rawField string) Area_FieldPath {
	fp, err := ParseArea_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Area_FieldTerminalPath struct {
	selector Area_FieldPathSelector
}

var _ Area_FieldPath = (*Area_FieldTerminalPath)(nil)

func (fp *Area_FieldTerminalPath) Selector() Area_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Area_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Area_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Area
func (fp *Area_FieldTerminalPath) Get(source *Area) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Area_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Area_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Area_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Area_FieldPathSelectorVendorSpec:
			if source.VendorSpec != nil {
				values = append(values, source.VendorSpec)
			}
		case Area_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
		}
	}
	return
}

func (fp *Area_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Area))
}

// GetSingle returns value pointed by specific field of from source Area
func (fp *Area_FieldTerminalPath) GetSingle(source *Area) (interface{}, bool) {
	switch fp.selector {
	case Area_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Area_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Area_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Area_FieldPathSelectorVendorSpec:
		res := source.GetVendorSpec()
		return res, res != nil
	case Area_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
	}
}

func (fp *Area_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Area))
}

// GetDefault returns a default value of the field type
func (fp *Area_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Area_FieldPathSelectorName:
		return (*Name)(nil)
	case Area_FieldPathSelectorDisplayName:
		return ""
	case Area_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Area_FieldPathSelectorVendorSpec:
		return (*Area_VendorSpec)(nil)
	case Area_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
	}
}

func (fp *Area_FieldTerminalPath) ClearValue(item *Area) {
	if item != nil {
		switch fp.selector {
		case Area_FieldPathSelectorName:
			item.Name = nil
		case Area_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Area_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Area_FieldPathSelectorVendorSpec:
			item.VendorSpec = nil
		case Area_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
		}
	}
}

func (fp *Area_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Area))
}

// IsLeaf - whether field path is holds simple value
func (fp *Area_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Area_FieldPathSelectorName ||
		fp.selector == Area_FieldPathSelectorDisplayName
}

func (fp *Area_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Area_FieldTerminalPath) WithIValue(value interface{}) Area_FieldPathValue {
	switch fp.selector {
	case Area_FieldPathSelectorName:
		return &Area_FieldTerminalPathValue{Area_FieldTerminalPath: *fp, value: value.(*Name)}
	case Area_FieldPathSelectorDisplayName:
		return &Area_FieldTerminalPathValue{Area_FieldTerminalPath: *fp, value: value.(string)}
	case Area_FieldPathSelectorGeometry:
		return &Area_FieldTerminalPathValue{Area_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Area_FieldPathSelectorVendorSpec:
		return &Area_FieldTerminalPathValue{Area_FieldTerminalPath: *fp, value: value.(*Area_VendorSpec)}
	case Area_FieldPathSelectorMetadata:
		return &Area_FieldTerminalPathValue{Area_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
	}
}

func (fp *Area_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Area_FieldTerminalPath) WithIArrayOfValues(values interface{}) Area_FieldPathArrayOfValues {
	fpaov := &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp}
	switch fp.selector {
	case Area_FieldPathSelectorName:
		return &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Area_FieldPathSelectorDisplayName:
		return &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp, values: values.([]string)}
	case Area_FieldPathSelectorGeometry:
		return &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Area_FieldPathSelectorVendorSpec:
		return &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp, values: values.([]*Area_VendorSpec)}
	case Area_FieldPathSelectorMetadata:
		return &Area_FieldTerminalPathArrayOfValues{Area_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
	}
	return fpaov
}

func (fp *Area_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Area_FieldTerminalPath) WithIArrayItemValue(value interface{}) Area_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fp.selector))
	}
}

func (fp *Area_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Area_FieldSubPath struct {
	selector Area_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Area_FieldPath = (*Area_FieldSubPath)(nil)

func (fps *Area_FieldSubPath) Selector() Area_FieldPathSelector {
	return fps.selector
}
func (fps *Area_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Area_FieldSubPath) AsVendorSpecSubPath() (AreaVendorSpec_FieldPath, bool) {
	res, ok := fps.subPath.(AreaVendorSpec_FieldPath)
	return res, ok
}
func (fps *Area_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Area_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Area_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Area
func (fps *Area_FieldSubPath) Get(source *Area) (values []interface{}) {
	switch fps.selector {
	case Area_FieldPathSelectorGeometry:
		values = append(values, fps.subPath.GetRaw(source.GetGeometry())...)
	case Area_FieldPathSelectorVendorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetVendorSpec())...)
	case Area_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fps.selector))
	}
	return
}

func (fps *Area_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Area))
}

// GetSingle returns value of selected field from source Area
func (fps *Area_FieldSubPath) GetSingle(source *Area) (interface{}, bool) {
	switch fps.selector {
	case Area_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Area_FieldPathSelectorVendorSpec:
		if source.GetVendorSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorSpec())
	case Area_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fps.selector))
	}
}

func (fps *Area_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Area))
}

// GetDefault returns a default value of the field type
func (fps *Area_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Area_FieldSubPath) ClearValue(item *Area) {
	if item != nil {
		switch fps.selector {
		case Area_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Area_FieldPathSelectorVendorSpec:
			fps.subPath.ClearValueRaw(item.VendorSpec)
		case Area_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Area: %d", fps.selector))
		}
	}
}

func (fps *Area_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Area))
}

// IsLeaf - whether field path is holds simple value
func (fps *Area_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Area_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Area_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Area_FieldSubPath) WithIValue(value interface{}) Area_FieldPathValue {
	return &Area_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Area_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Area_FieldSubPath) WithIArrayOfValues(values interface{}) Area_FieldPathArrayOfValues {
	return &Area_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Area_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Area_FieldSubPath) WithIArrayItemValue(value interface{}) Area_FieldPathArrayItemValue {
	return &Area_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Area_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Area_FieldPathValue allows storing values for Area fields according to their type
type Area_FieldPathValue interface {
	Area_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Area)
	CompareWith(*Area) (cmp int, comparable bool)
}

func ParseArea_FieldPathValue(pathStr, valueStr string) (Area_FieldPathValue, error) {
	fp, err := ParseArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Area field path value from %s: %v", valueStr, err)
	}
	return fpv.(Area_FieldPathValue), nil
}

func MustParseArea_FieldPathValue(pathStr, valueStr string) Area_FieldPathValue {
	fpv, err := ParseArea_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Area_FieldTerminalPathValue struct {
	Area_FieldTerminalPath
	value interface{}
}

var _ Area_FieldPathValue = (*Area_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Area' as interface{}
func (fpv *Area_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Area_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Area_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Area_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Area_FieldTerminalPathValue) AsVendorSpecValue() (*Area_VendorSpec, bool) {
	res, ok := fpv.value.(*Area_VendorSpec)
	return res, ok
}
func (fpv *Area_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Area
func (fpv *Area_FieldTerminalPathValue) SetTo(target **Area) {
	if *target == nil {
		*target = new(Area)
	}
	switch fpv.selector {
	case Area_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Area_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Area_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Area_FieldPathSelectorVendorSpec:
		(*target).VendorSpec = fpv.value.(*Area_VendorSpec)
	case Area_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fpv.selector))
	}
}

func (fpv *Area_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Area)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Area_FieldTerminalPathValue' with the value under path in 'Area'.
func (fpv *Area_FieldTerminalPathValue) CompareWith(source *Area) (int, bool) {
	switch fpv.selector {
	case Area_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Area_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Area_FieldPathSelectorGeometry:
		return 0, false
	case Area_FieldPathSelectorVendorSpec:
		return 0, false
	case Area_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fpv.selector))
	}
}

func (fpv *Area_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Area))
}

type Area_FieldSubPathValue struct {
	Area_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Area_FieldPathValue = (*Area_FieldSubPathValue)(nil)

func (fpvs *Area_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Area_FieldSubPathValue) AsVendorSpecPathValue() (AreaVendorSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AreaVendorSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Area_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Area_FieldSubPathValue) SetTo(target **Area) {
	if *target == nil {
		*target = new(Area)
	}
	switch fpvs.Selector() {
	case Area_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Area_FieldPathSelectorVendorSpec:
		fpvs.subPathValue.(AreaVendorSpec_FieldPathValue).SetTo(&(*target).VendorSpec)
	case Area_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fpvs.Selector()))
	}
}

func (fpvs *Area_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Area)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Area_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Area_FieldSubPathValue) CompareWith(source *Area) (int, bool) {
	switch fpvs.Selector() {
	case Area_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Area_FieldPathSelectorVendorSpec:
		return fpvs.subPathValue.(AreaVendorSpec_FieldPathValue).CompareWith(source.GetVendorSpec())
	case Area_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fpvs.Selector()))
	}
}

func (fpvs *Area_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Area))
}

// Area_FieldPathArrayItemValue allows storing single item in Path-specific values for Area according to their type
// Present only for array (repeated) types.
type Area_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Area_FieldPath
	ContainsValue(*Area) bool
}

// ParseArea_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseArea_FieldPathArrayItemValue(pathStr, valueStr string) (Area_FieldPathArrayItemValue, error) {
	fp, err := ParseArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Area field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Area_FieldPathArrayItemValue), nil
}

func MustParseArea_FieldPathArrayItemValue(pathStr, valueStr string) Area_FieldPathArrayItemValue {
	fpaiv, err := ParseArea_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Area_FieldTerminalPathArrayItemValue struct {
	Area_FieldTerminalPath
	value interface{}
}

var _ Area_FieldPathArrayItemValue = (*Area_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Area as interface{}
func (fpaiv *Area_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Area_FieldTerminalPathArrayItemValue) GetSingle(source *Area) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Area_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Area))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Area'
func (fpaiv *Area_FieldTerminalPathArrayItemValue) ContainsValue(source *Area) bool {
	slice := fpaiv.Area_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Area_FieldSubPathArrayItemValue struct {
	Area_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Area_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Area_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Area_FieldSubPathArrayItemValue) AsVendorSpecPathItemValue() (AreaVendorSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AreaVendorSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Area_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Area'
func (fpaivs *Area_FieldSubPathArrayItemValue) ContainsValue(source *Area) bool {
	switch fpaivs.Selector() {
	case Area_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Area_FieldPathSelectorVendorSpec:
		return fpaivs.subPathItemValue.(AreaVendorSpec_FieldPathArrayItemValue).ContainsValue(source.GetVendorSpec())
	case Area_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Area: %d", fpaivs.Selector()))
	}
}

// Area_FieldPathArrayOfValues allows storing slice of values for Area fields according to their type
type Area_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Area_FieldPath
}

func ParseArea_FieldPathArrayOfValues(pathStr, valuesStr string) (Area_FieldPathArrayOfValues, error) {
	fp, err := ParseArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Area field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Area_FieldPathArrayOfValues), nil
}

func MustParseArea_FieldPathArrayOfValues(pathStr, valuesStr string) Area_FieldPathArrayOfValues {
	fpaov, err := ParseArea_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Area_FieldTerminalPathArrayOfValues struct {
	Area_FieldTerminalPath
	values interface{}
}

var _ Area_FieldPathArrayOfValues = (*Area_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Area_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Area_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Area_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Area_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Area_FieldPathSelectorVendorSpec:
		for _, v := range fpaov.values.([]*Area_VendorSpec) {
			values = append(values, v)
		}
	case Area_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Area_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Area_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Area_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Area_FieldTerminalPathArrayOfValues) AsVendorSpecArrayOfValues() ([]*Area_VendorSpec, bool) {
	res, ok := fpaov.values.([]*Area_VendorSpec)
	return res, ok
}
func (fpaov *Area_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Area_FieldSubPathArrayOfValues struct {
	Area_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Area_FieldPathArrayOfValues = (*Area_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Area_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Area_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Area_FieldSubPathArrayOfValues) AsVendorSpecPathArrayOfValues() (AreaVendorSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AreaVendorSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Area_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AreaVendorSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() AreaVendorSpec_FieldPathSelector
	Get(source *Area_VendorSpec) []interface{}
	GetSingle(source *Area_VendorSpec) (interface{}, bool)
	ClearValue(item *Area_VendorSpec)

	// Those methods build corresponding AreaVendorSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AreaVendorSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) AreaVendorSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AreaVendorSpec_FieldPathArrayItemValue
}

type AreaVendorSpec_FieldPathSelector int32

const (
	AreaVendorSpec_FieldPathSelectorPointGrab AreaVendorSpec_FieldPathSelector = 0
)

func (s AreaVendorSpec_FieldPathSelector) String() string {
	switch s {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", s))
	}
}

func BuildAreaVendorSpec_FieldPath(fp gotenobject.RawFieldPath) (AreaVendorSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Area_VendorSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &AreaVendorSpec_FieldTerminalPath{selector: AreaVendorSpec_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildAreaVendorSpecPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AreaVendorSpec_FieldSubPath{selector: AreaVendorSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Area_VendorSpec", fp)
}

func ParseAreaVendorSpec_FieldPath(rawField string) (AreaVendorSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAreaVendorSpec_FieldPath(fp)
}

func MustParseAreaVendorSpec_FieldPath(rawField string) AreaVendorSpec_FieldPath {
	fp, err := ParseAreaVendorSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AreaVendorSpec_FieldTerminalPath struct {
	selector AreaVendorSpec_FieldPathSelector
}

var _ AreaVendorSpec_FieldPath = (*AreaVendorSpec_FieldTerminalPath)(nil)

func (fp *AreaVendorSpec_FieldTerminalPath) Selector() AreaVendorSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AreaVendorSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AreaVendorSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Area_VendorSpec
func (fp *AreaVendorSpec_FieldTerminalPath) Get(source *Area_VendorSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AreaVendorSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *AreaVendorSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Area_VendorSpec))
}

// GetSingle returns value pointed by specific field of from source Area_VendorSpec
func (fp *AreaVendorSpec_FieldTerminalPath) GetSingle(source *Area_VendorSpec) (interface{}, bool) {
	switch fp.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
	}
}

func (fp *AreaVendorSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Area_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fp *AreaVendorSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return (*Area_VendorSpec_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
	}
}

func (fp *AreaVendorSpec_FieldTerminalPath) ClearValue(item *Area_VendorSpec) {
	if item != nil {
		switch fp.selector {
		case AreaVendorSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
		}
	}
}

func (fp *AreaVendorSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Area_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *AreaVendorSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AreaVendorSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithIValue(value interface{}) AreaVendorSpec_FieldPathValue {
	switch fp.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return &AreaVendorSpec_FieldTerminalPathValue{AreaVendorSpec_FieldTerminalPath: *fp, value: value.(*Area_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
	}
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) AreaVendorSpec_FieldPathArrayOfValues {
	fpaov := &AreaVendorSpec_FieldTerminalPathArrayOfValues{AreaVendorSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return &AreaVendorSpec_FieldTerminalPathArrayOfValues{AreaVendorSpec_FieldTerminalPath: *fp, values: values.([]*Area_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) AreaVendorSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fp.selector))
	}
}

func (fp *AreaVendorSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AreaVendorSpec_FieldSubPath struct {
	selector AreaVendorSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AreaVendorSpec_FieldPath = (*AreaVendorSpec_FieldSubPath)(nil)

func (fps *AreaVendorSpec_FieldSubPath) Selector() AreaVendorSpec_FieldPathSelector {
	return fps.selector
}
func (fps *AreaVendorSpec_FieldSubPath) AsPointGrabSubPath() (AreaVendorSpecPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(AreaVendorSpecPointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AreaVendorSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AreaVendorSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Area_VendorSpec
func (fps *AreaVendorSpec_FieldSubPath) Get(source *Area_VendorSpec) (values []interface{}) {
	switch fps.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		values = append(values, fps.subPath.GetRaw(source.GetPointGrab())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fps.selector))
	}
	return
}

func (fps *AreaVendorSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Area_VendorSpec))
}

// GetSingle returns value of selected field from source Area_VendorSpec
func (fps *AreaVendorSpec_FieldSubPath) GetSingle(source *Area_VendorSpec) (interface{}, bool) {
	switch fps.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fps.selector))
	}
}

func (fps *AreaVendorSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Area_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fps *AreaVendorSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AreaVendorSpec_FieldSubPath) ClearValue(item *Area_VendorSpec) {
	if item != nil {
		switch fps.selector {
		case AreaVendorSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fps.selector))
		}
	}
}

func (fps *AreaVendorSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Area_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *AreaVendorSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AreaVendorSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AreaVendorSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AreaVendorSpec_FieldSubPath) WithIValue(value interface{}) AreaVendorSpec_FieldPathValue {
	return &AreaVendorSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AreaVendorSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AreaVendorSpec_FieldSubPath) WithIArrayOfValues(values interface{}) AreaVendorSpec_FieldPathArrayOfValues {
	return &AreaVendorSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AreaVendorSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AreaVendorSpec_FieldSubPath) WithIArrayItemValue(value interface{}) AreaVendorSpec_FieldPathArrayItemValue {
	return &AreaVendorSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AreaVendorSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AreaVendorSpec_FieldPathValue allows storing values for VendorSpec fields according to their type
type AreaVendorSpec_FieldPathValue interface {
	AreaVendorSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Area_VendorSpec)
	CompareWith(*Area_VendorSpec) (cmp int, comparable bool)
}

func ParseAreaVendorSpec_FieldPathValue(pathStr, valueStr string) (AreaVendorSpec_FieldPathValue, error) {
	fp, err := ParseAreaVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(AreaVendorSpec_FieldPathValue), nil
}

func MustParseAreaVendorSpec_FieldPathValue(pathStr, valueStr string) AreaVendorSpec_FieldPathValue {
	fpv, err := ParseAreaVendorSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AreaVendorSpec_FieldTerminalPathValue struct {
	AreaVendorSpec_FieldTerminalPath
	value interface{}
}

var _ AreaVendorSpec_FieldPathValue = (*AreaVendorSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorSpec' as interface{}
func (fpv *AreaVendorSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AreaVendorSpec_FieldTerminalPathValue) AsPointGrabValue() (*Area_VendorSpec_PointGrab, bool) {
	res, ok := fpv.value.(*Area_VendorSpec_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorSpec
func (fpv *AreaVendorSpec_FieldTerminalPathValue) SetTo(target **Area_VendorSpec) {
	if *target == nil {
		*target = new(Area_VendorSpec)
	}
	switch fpv.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Area_VendorSpec_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *AreaVendorSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Area_VendorSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AreaVendorSpec_FieldTerminalPathValue' with the value under path in 'Area_VendorSpec'.
func (fpv *AreaVendorSpec_FieldTerminalPathValue) CompareWith(source *Area_VendorSpec) (int, bool) {
	switch fpv.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *AreaVendorSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Area_VendorSpec))
}

type AreaVendorSpec_FieldSubPathValue struct {
	AreaVendorSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AreaVendorSpec_FieldPathValue = (*AreaVendorSpec_FieldSubPathValue)(nil)

func (fpvs *AreaVendorSpec_FieldSubPathValue) AsPointGrabPathValue() (AreaVendorSpecPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AreaVendorSpecPointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *AreaVendorSpec_FieldSubPathValue) SetTo(target **Area_VendorSpec) {
	if *target == nil {
		*target = new(Area_VendorSpec)
	}
	switch fpvs.Selector() {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(AreaVendorSpecPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *AreaVendorSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Area_VendorSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AreaVendorSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AreaVendorSpec_FieldSubPathValue) CompareWith(source *Area_VendorSpec) (int, bool) {
	switch fpvs.Selector() {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(AreaVendorSpecPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *AreaVendorSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Area_VendorSpec))
}

// AreaVendorSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorSpec according to their type
// Present only for array (repeated) types.
type AreaVendorSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AreaVendorSpec_FieldPath
	ContainsValue(*Area_VendorSpec) bool
}

// ParseAreaVendorSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAreaVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) (AreaVendorSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseAreaVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AreaVendorSpec_FieldPathArrayItemValue), nil
}

func MustParseAreaVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) AreaVendorSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseAreaVendorSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AreaVendorSpec_FieldTerminalPathArrayItemValue struct {
	AreaVendorSpec_FieldTerminalPath
	value interface{}
}

var _ AreaVendorSpec_FieldPathArrayItemValue = (*AreaVendorSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Area_VendorSpec as interface{}
func (fpaiv *AreaVendorSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AreaVendorSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Area_VendorSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AreaVendorSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Area_VendorSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaiv *AreaVendorSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Area_VendorSpec) bool {
	slice := fpaiv.AreaVendorSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AreaVendorSpec_FieldSubPathArrayItemValue struct {
	AreaVendorSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AreaVendorSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AreaVendorSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (AreaVendorSpecPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AreaVendorSpecPointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaivs *AreaVendorSpec_FieldSubPathArrayItemValue) ContainsValue(source *Area_VendorSpec) bool {
	switch fpaivs.Selector() {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(AreaVendorSpecPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec: %d", fpaivs.Selector()))
	}
}

// AreaVendorSpec_FieldPathArrayOfValues allows storing slice of values for VendorSpec fields according to their type
type AreaVendorSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AreaVendorSpec_FieldPath
}

func ParseAreaVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (AreaVendorSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseAreaVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AreaVendorSpec_FieldPathArrayOfValues), nil
}

func MustParseAreaVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) AreaVendorSpec_FieldPathArrayOfValues {
	fpaov, err := ParseAreaVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AreaVendorSpec_FieldTerminalPathArrayOfValues struct {
	AreaVendorSpec_FieldTerminalPath
	values interface{}
}

var _ AreaVendorSpec_FieldPathArrayOfValues = (*AreaVendorSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AreaVendorSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AreaVendorSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Area_VendorSpec_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AreaVendorSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Area_VendorSpec_PointGrab, bool) {
	res, ok := fpaov.values.([]*Area_VendorSpec_PointGrab)
	return res, ok
}

type AreaVendorSpec_FieldSubPathArrayOfValues struct {
	AreaVendorSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AreaVendorSpec_FieldPathArrayOfValues = (*AreaVendorSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AreaVendorSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AreaVendorSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (AreaVendorSpecPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AreaVendorSpecPointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AreaVendorSpecPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() AreaVendorSpecPointGrab_FieldPathSelector
	Get(source *Area_VendorSpec_PointGrab) []interface{}
	GetSingle(source *Area_VendorSpec_PointGrab) (interface{}, bool)
	ClearValue(item *Area_VendorSpec_PointGrab)

	// Those methods build corresponding AreaVendorSpecPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AreaVendorSpecPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) AreaVendorSpecPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AreaVendorSpecPointGrab_FieldPathArrayItemValue
}

type AreaVendorSpecPointGrab_FieldPathSelector int32

const (
	AreaVendorSpecPointGrab_FieldPathSelectorBuildingId AreaVendorSpecPointGrab_FieldPathSelector = 0
)

func (s AreaVendorSpecPointGrab_FieldPathSelector) String() string {
	switch s {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return "building_id"
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", s))
	}
}

func BuildAreaVendorSpecPointGrab_FieldPath(fp gotenobject.RawFieldPath) (AreaVendorSpecPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Area_VendorSpec_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "building_id", "buildingId", "building-id":
			return &AreaVendorSpecPointGrab_FieldTerminalPath{selector: AreaVendorSpecPointGrab_FieldPathSelectorBuildingId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Area_VendorSpec_PointGrab", fp)
}

func ParseAreaVendorSpecPointGrab_FieldPath(rawField string) (AreaVendorSpecPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAreaVendorSpecPointGrab_FieldPath(fp)
}

func MustParseAreaVendorSpecPointGrab_FieldPath(rawField string) AreaVendorSpecPointGrab_FieldPath {
	fp, err := ParseAreaVendorSpecPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AreaVendorSpecPointGrab_FieldTerminalPath struct {
	selector AreaVendorSpecPointGrab_FieldPathSelector
}

var _ AreaVendorSpecPointGrab_FieldPath = (*AreaVendorSpecPointGrab_FieldTerminalPath)(nil)

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) Selector() AreaVendorSpecPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Area_VendorSpec_PointGrab
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) Get(source *Area_VendorSpec_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
			values = append(values, source.BuildingId)
		default:
			panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Area_VendorSpec_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Area_VendorSpec_PointGrab
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) GetSingle(source *Area_VendorSpec_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return source.GetBuildingId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Area_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) ClearValue(item *Area_VendorSpec_PointGrab) {
	if item != nil {
		switch fp.selector {
		case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
			item.BuildingId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Area_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AreaVendorSpecPointGrab_FieldPathSelectorBuildingId
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithIValue(value interface{}) AreaVendorSpecPointGrab_FieldPathValue {
	switch fp.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return &AreaVendorSpecPointGrab_FieldTerminalPathValue{AreaVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) AreaVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov := &AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues{AreaVendorSpecPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		return &AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues{AreaVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) AreaVendorSpecPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *AreaVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AreaVendorSpecPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type AreaVendorSpecPointGrab_FieldPathValue interface {
	AreaVendorSpecPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Area_VendorSpec_PointGrab)
	CompareWith(*Area_VendorSpec_PointGrab) (cmp int, comparable bool)
}

func ParseAreaVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) (AreaVendorSpecPointGrab_FieldPathValue, error) {
	fp, err := ParseAreaVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(AreaVendorSpecPointGrab_FieldPathValue), nil
}

func MustParseAreaVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) AreaVendorSpecPointGrab_FieldPathValue {
	fpv, err := ParseAreaVendorSpecPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AreaVendorSpecPointGrab_FieldTerminalPathValue struct {
	AreaVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ AreaVendorSpecPointGrab_FieldPathValue = (*AreaVendorSpecPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) AsBuildingIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) SetTo(target **Area_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Area_VendorSpec_PointGrab)
	}
	switch fpv.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		(*target).BuildingId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Area_VendorSpec_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AreaVendorSpecPointGrab_FieldTerminalPathValue' with the value under path in 'Area_VendorSpec_PointGrab'.
func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) CompareWith(source *Area_VendorSpec_PointGrab) (int, bool) {
	switch fpv.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		leftValue := fpv.value.(string)
		rightValue := source.GetBuildingId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Area_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *AreaVendorSpecPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Area_VendorSpec_PointGrab))
}

// AreaVendorSpecPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type AreaVendorSpecPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AreaVendorSpecPointGrab_FieldPath
	ContainsValue(*Area_VendorSpec_PointGrab) bool
}

// ParseAreaVendorSpecPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAreaVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (AreaVendorSpecPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseAreaVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AreaVendorSpecPointGrab_FieldPathArrayItemValue), nil
}

func MustParseAreaVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) AreaVendorSpecPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseAreaVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue struct {
	AreaVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ AreaVendorSpecPointGrab_FieldPathArrayItemValue = (*AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Area_VendorSpec_PointGrab as interface{}
func (fpaiv *AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Area_VendorSpec_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Area_VendorSpec_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *AreaVendorSpecPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Area_VendorSpec_PointGrab) bool {
	slice := fpaiv.AreaVendorSpecPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AreaVendorSpecPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type AreaVendorSpecPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AreaVendorSpecPointGrab_FieldPath
}

func ParseAreaVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (AreaVendorSpecPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseAreaVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AreaVendorSpecPointGrab_FieldPathArrayOfValues), nil
}

func MustParseAreaVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) AreaVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseAreaVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues struct {
	AreaVendorSpecPointGrab_FieldTerminalPath
	values interface{}
}

var _ AreaVendorSpecPointGrab_FieldPathArrayOfValues = (*AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AreaVendorSpecPointGrab_FieldPathSelectorBuildingId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AreaVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsBuildingIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
