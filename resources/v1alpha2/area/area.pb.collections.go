// Code generated by protoc-gen-goten-resource
// Resource: Area
// DO NOT EDIT!!!

package area

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &workplace_common.BBox{}
	_ = &floor.Floor{}
)

type AreaList []*Area

func (l AreaList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Area))
}

func (l AreaList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AreaList)...)
}

func (l AreaList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AreaList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Area)
}

func (l AreaList) Length() int {
	return len(l)
}

type AreaChangeList []*AreaChange

func (l AreaChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AreaChange))
}

func (l AreaChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AreaChangeList)...)
}

func (l AreaChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AreaChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AreaChange)
}

func (l AreaChangeList) Length() int {
	return len(l)
}

type AreaNameList []*Name

func (l AreaNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AreaNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AreaNameList)...)
}

func (l AreaNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AreaNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AreaNameList) Length() int {
	return len(l)
}

type AreaReferenceList []*Reference

func (l AreaReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AreaReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AreaReferenceList)...)
}

func (l AreaReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AreaReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AreaReferenceList) Length() int {
	return len(l)
}

type AreaParentNameList []*ParentName

func (l AreaParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l AreaParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(AreaParentNameList)...)
}

func (l AreaParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AreaParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l AreaParentNameList) Length() int {
	return len(l)
}

type AreaParentReferenceList []*ParentReference

func (l AreaParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l AreaParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(AreaParentReferenceList)...)
}

func (l AreaParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AreaParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AreaParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l AreaParentReferenceList) Length() int {
	return len(l)
}

type AreaMap map[Name]*Area

func (m AreaMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AreaMap) Set(res gotenresource.Resource) {
	tRes := res.(*Area)
	m[*tRes.Name] = tRes
}

func (m AreaMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AreaMap) Length() int {
	return len(m)
}

func (m AreaMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AreaChangeMap map[Name]*AreaChange

func (m AreaChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AreaChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AreaChange)
	m[*tChange.GetAreaName()] = tChange
}

func (m AreaChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AreaChangeMap) Length() int {
	return len(m)
}

func (m AreaChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
