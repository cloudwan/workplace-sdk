// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/site.proto
// DO NOT EDIT!!!

package site

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &workplace_common.BBox{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Site_FieldPath interface {
	gotenobject.FieldPath
	Selector() Site_FieldPathSelector
	Get(source *Site) []interface{}
	GetSingle(source *Site) (interface{}, bool)
	ClearValue(item *Site)

	// Those methods build corresponding Site_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Site_FieldPathValue
	WithIArrayOfValues(values interface{}) Site_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Site_FieldPathArrayItemValue
}

type Site_FieldPathSelector int32

const (
	Site_FieldPathSelectorName        Site_FieldPathSelector = 0
	Site_FieldPathSelectorDisplayName Site_FieldPathSelector = 1
	Site_FieldPathSelectorLocation    Site_FieldPathSelector = 2
	Site_FieldPathSelectorGeometry    Site_FieldPathSelector = 3
	Site_FieldPathSelectorVendorSpec  Site_FieldPathSelector = 4
	Site_FieldPathSelectorMetadata    Site_FieldPathSelector = 5
)

func (s Site_FieldPathSelector) String() string {
	switch s {
	case Site_FieldPathSelectorName:
		return "name"
	case Site_FieldPathSelectorDisplayName:
		return "display_name"
	case Site_FieldPathSelectorLocation:
		return "location"
	case Site_FieldPathSelectorGeometry:
		return "geometry"
	case Site_FieldPathSelectorVendorSpec:
		return "vendor_spec"
	case Site_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", s))
	}
}

func BuildSite_FieldPath(fp gotenobject.RawFieldPath) (Site_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Site")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorDisplayName}, nil
		case "location":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorLocation}, nil
		case "geometry":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorGeometry}, nil
		case "vendor_spec", "vendorSpec", "vendor-spec":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorVendorSpec}, nil
		case "metadata":
			return &Site_FieldTerminalPath{selector: Site_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := workplace_common.BuildStreetLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Site_FieldSubPath{selector: Site_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "geometry":
			if subpath, err := workplace_common.BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Site_FieldSubPath{selector: Site_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "vendor_spec", "vendorSpec", "vendor-spec":
			if subpath, err := BuildSiteVendorSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Site_FieldSubPath{selector: Site_FieldPathSelectorVendorSpec, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Site_FieldSubPath{selector: Site_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Site", fp)
}

func ParseSite_FieldPath(rawField string) (Site_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSite_FieldPath(fp)
}

func MustParseSite_FieldPath(rawField string) Site_FieldPath {
	fp, err := ParseSite_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Site_FieldTerminalPath struct {
	selector Site_FieldPathSelector
}

var _ Site_FieldPath = (*Site_FieldTerminalPath)(nil)

func (fp *Site_FieldTerminalPath) Selector() Site_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Site_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Site_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Site
func (fp *Site_FieldTerminalPath) Get(source *Site) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Site_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Site_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Site_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case Site_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case Site_FieldPathSelectorVendorSpec:
			if source.VendorSpec != nil {
				values = append(values, source.VendorSpec)
			}
		case Site_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
		}
	}
	return
}

func (fp *Site_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Site))
}

// GetSingle returns value pointed by specific field of from source Site
func (fp *Site_FieldTerminalPath) GetSingle(source *Site) (interface{}, bool) {
	switch fp.selector {
	case Site_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Site_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Site_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case Site_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case Site_FieldPathSelectorVendorSpec:
		res := source.GetVendorSpec()
		return res, res != nil
	case Site_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
	}
}

func (fp *Site_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Site))
}

// GetDefault returns a default value of the field type
func (fp *Site_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Site_FieldPathSelectorName:
		return (*Name)(nil)
	case Site_FieldPathSelectorDisplayName:
		return ""
	case Site_FieldPathSelectorLocation:
		return (*workplace_common.StreetLocation)(nil)
	case Site_FieldPathSelectorGeometry:
		return (*workplace_common.Geometry)(nil)
	case Site_FieldPathSelectorVendorSpec:
		return (*Site_VendorSpec)(nil)
	case Site_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
	}
}

func (fp *Site_FieldTerminalPath) ClearValue(item *Site) {
	if item != nil {
		switch fp.selector {
		case Site_FieldPathSelectorName:
			item.Name = nil
		case Site_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Site_FieldPathSelectorLocation:
			item.Location = nil
		case Site_FieldPathSelectorGeometry:
			item.Geometry = nil
		case Site_FieldPathSelectorVendorSpec:
			item.VendorSpec = nil
		case Site_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
		}
	}
}

func (fp *Site_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Site))
}

// IsLeaf - whether field path is holds simple value
func (fp *Site_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Site_FieldPathSelectorName ||
		fp.selector == Site_FieldPathSelectorDisplayName
}

func (fp *Site_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Site_FieldTerminalPath) WithIValue(value interface{}) Site_FieldPathValue {
	switch fp.selector {
	case Site_FieldPathSelectorName:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(*Name)}
	case Site_FieldPathSelectorDisplayName:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(string)}
	case Site_FieldPathSelectorLocation:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(*workplace_common.StreetLocation)}
	case Site_FieldPathSelectorGeometry:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(*workplace_common.Geometry)}
	case Site_FieldPathSelectorVendorSpec:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(*Site_VendorSpec)}
	case Site_FieldPathSelectorMetadata:
		return &Site_FieldTerminalPathValue{Site_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
	}
}

func (fp *Site_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Site_FieldTerminalPath) WithIArrayOfValues(values interface{}) Site_FieldPathArrayOfValues {
	fpaov := &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp}
	switch fp.selector {
	case Site_FieldPathSelectorName:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Site_FieldPathSelectorDisplayName:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]string)}
	case Site_FieldPathSelectorLocation:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]*workplace_common.StreetLocation)}
	case Site_FieldPathSelectorGeometry:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]*workplace_common.Geometry)}
	case Site_FieldPathSelectorVendorSpec:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]*Site_VendorSpec)}
	case Site_FieldPathSelectorMetadata:
		return &Site_FieldTerminalPathArrayOfValues{Site_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
	}
	return fpaov
}

func (fp *Site_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Site_FieldTerminalPath) WithIArrayItemValue(value interface{}) Site_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fp.selector))
	}
}

func (fp *Site_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Site_FieldSubPath struct {
	selector Site_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Site_FieldPath = (*Site_FieldSubPath)(nil)

func (fps *Site_FieldSubPath) Selector() Site_FieldPathSelector {
	return fps.selector
}
func (fps *Site_FieldSubPath) AsLocationSubPath() (workplace_common.StreetLocation_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.StreetLocation_FieldPath)
	return res, ok
}
func (fps *Site_FieldSubPath) AsGeometrySubPath() (workplace_common.Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(workplace_common.Geometry_FieldPath)
	return res, ok
}
func (fps *Site_FieldSubPath) AsVendorSpecSubPath() (SiteVendorSpec_FieldPath, bool) {
	res, ok := fps.subPath.(SiteVendorSpec_FieldPath)
	return res, ok
}
func (fps *Site_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Site_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Site_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Site
func (fps *Site_FieldSubPath) Get(source *Site) (values []interface{}) {
	switch fps.selector {
	case Site_FieldPathSelectorLocation:
		values = append(values, fps.subPath.GetRaw(source.GetLocation())...)
	case Site_FieldPathSelectorGeometry:
		values = append(values, fps.subPath.GetRaw(source.GetGeometry())...)
	case Site_FieldPathSelectorVendorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetVendorSpec())...)
	case Site_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fps.selector))
	}
	return
}

func (fps *Site_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Site))
}

// GetSingle returns value of selected field from source Site
func (fps *Site_FieldSubPath) GetSingle(source *Site) (interface{}, bool) {
	switch fps.selector {
	case Site_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case Site_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case Site_FieldPathSelectorVendorSpec:
		if source.GetVendorSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVendorSpec())
	case Site_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fps.selector))
	}
}

func (fps *Site_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Site))
}

// GetDefault returns a default value of the field type
func (fps *Site_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Site_FieldSubPath) ClearValue(item *Site) {
	if item != nil {
		switch fps.selector {
		case Site_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case Site_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case Site_FieldPathSelectorVendorSpec:
			fps.subPath.ClearValueRaw(item.VendorSpec)
		case Site_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Site: %d", fps.selector))
		}
	}
}

func (fps *Site_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Site))
}

// IsLeaf - whether field path is holds simple value
func (fps *Site_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Site_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Site_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Site_FieldSubPath) WithIValue(value interface{}) Site_FieldPathValue {
	return &Site_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Site_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Site_FieldSubPath) WithIArrayOfValues(values interface{}) Site_FieldPathArrayOfValues {
	return &Site_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Site_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Site_FieldSubPath) WithIArrayItemValue(value interface{}) Site_FieldPathArrayItemValue {
	return &Site_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Site_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Site_FieldPathValue allows storing values for Site fields according to their type
type Site_FieldPathValue interface {
	Site_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Site)
	CompareWith(*Site) (cmp int, comparable bool)
}

func ParseSite_FieldPathValue(pathStr, valueStr string) (Site_FieldPathValue, error) {
	fp, err := ParseSite_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Site field path value from %s: %v", valueStr, err)
	}
	return fpv.(Site_FieldPathValue), nil
}

func MustParseSite_FieldPathValue(pathStr, valueStr string) Site_FieldPathValue {
	fpv, err := ParseSite_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Site_FieldTerminalPathValue struct {
	Site_FieldTerminalPath
	value interface{}
}

var _ Site_FieldPathValue = (*Site_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Site' as interface{}
func (fpv *Site_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Site_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Site_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Site_FieldTerminalPathValue) AsLocationValue() (*workplace_common.StreetLocation, bool) {
	res, ok := fpv.value.(*workplace_common.StreetLocation)
	return res, ok
}
func (fpv *Site_FieldTerminalPathValue) AsGeometryValue() (*workplace_common.Geometry, bool) {
	res, ok := fpv.value.(*workplace_common.Geometry)
	return res, ok
}
func (fpv *Site_FieldTerminalPathValue) AsVendorSpecValue() (*Site_VendorSpec, bool) {
	res, ok := fpv.value.(*Site_VendorSpec)
	return res, ok
}
func (fpv *Site_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Site
func (fpv *Site_FieldTerminalPathValue) SetTo(target **Site) {
	if *target == nil {
		*target = new(Site)
	}
	switch fpv.selector {
	case Site_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Site_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Site_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*workplace_common.StreetLocation)
	case Site_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*workplace_common.Geometry)
	case Site_FieldPathSelectorVendorSpec:
		(*target).VendorSpec = fpv.value.(*Site_VendorSpec)
	case Site_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fpv.selector))
	}
}

func (fpv *Site_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Site)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Site_FieldTerminalPathValue' with the value under path in 'Site'.
func (fpv *Site_FieldTerminalPathValue) CompareWith(source *Site) (int, bool) {
	switch fpv.selector {
	case Site_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Site_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Site_FieldPathSelectorLocation:
		return 0, false
	case Site_FieldPathSelectorGeometry:
		return 0, false
	case Site_FieldPathSelectorVendorSpec:
		return 0, false
	case Site_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fpv.selector))
	}
}

func (fpv *Site_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Site))
}

type Site_FieldSubPathValue struct {
	Site_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Site_FieldPathValue = (*Site_FieldSubPathValue)(nil)

func (fpvs *Site_FieldSubPathValue) AsLocationPathValue() (workplace_common.StreetLocation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue)
	return res, ok
}
func (fpvs *Site_FieldSubPathValue) AsGeometryPathValue() (workplace_common.Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *Site_FieldSubPathValue) AsVendorSpecPathValue() (SiteVendorSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SiteVendorSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Site_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Site_FieldSubPathValue) SetTo(target **Site) {
	if *target == nil {
		*target = new(Site)
	}
	switch fpvs.Selector() {
	case Site_FieldPathSelectorLocation:
		fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue).SetTo(&(*target).Location)
	case Site_FieldPathSelectorGeometry:
		fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case Site_FieldPathSelectorVendorSpec:
		fpvs.subPathValue.(SiteVendorSpec_FieldPathValue).SetTo(&(*target).VendorSpec)
	case Site_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fpvs.Selector()))
	}
}

func (fpvs *Site_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Site)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Site_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Site_FieldSubPathValue) CompareWith(source *Site) (int, bool) {
	switch fpvs.Selector() {
	case Site_FieldPathSelectorLocation:
		return fpvs.subPathValue.(workplace_common.StreetLocation_FieldPathValue).CompareWith(source.GetLocation())
	case Site_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(workplace_common.Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case Site_FieldPathSelectorVendorSpec:
		return fpvs.subPathValue.(SiteVendorSpec_FieldPathValue).CompareWith(source.GetVendorSpec())
	case Site_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fpvs.Selector()))
	}
}

func (fpvs *Site_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Site))
}

// Site_FieldPathArrayItemValue allows storing single item in Path-specific values for Site according to their type
// Present only for array (repeated) types.
type Site_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Site_FieldPath
	ContainsValue(*Site) bool
}

// ParseSite_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSite_FieldPathArrayItemValue(pathStr, valueStr string) (Site_FieldPathArrayItemValue, error) {
	fp, err := ParseSite_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Site field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Site_FieldPathArrayItemValue), nil
}

func MustParseSite_FieldPathArrayItemValue(pathStr, valueStr string) Site_FieldPathArrayItemValue {
	fpaiv, err := ParseSite_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Site_FieldTerminalPathArrayItemValue struct {
	Site_FieldTerminalPath
	value interface{}
}

var _ Site_FieldPathArrayItemValue = (*Site_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Site as interface{}
func (fpaiv *Site_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Site_FieldTerminalPathArrayItemValue) GetSingle(source *Site) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Site_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Site))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Site'
func (fpaiv *Site_FieldTerminalPathArrayItemValue) ContainsValue(source *Site) bool {
	slice := fpaiv.Site_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Site_FieldSubPathArrayItemValue struct {
	Site_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Site_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Site_FieldSubPathArrayItemValue) AsLocationPathItemValue() (workplace_common.StreetLocation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.StreetLocation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Site_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (workplace_common.Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Site_FieldSubPathArrayItemValue) AsVendorSpecPathItemValue() (SiteVendorSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SiteVendorSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Site_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Site'
func (fpaivs *Site_FieldSubPathArrayItemValue) ContainsValue(source *Site) bool {
	switch fpaivs.Selector() {
	case Site_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(workplace_common.StreetLocation_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case Site_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(workplace_common.Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case Site_FieldPathSelectorVendorSpec:
		return fpaivs.subPathItemValue.(SiteVendorSpec_FieldPathArrayItemValue).ContainsValue(source.GetVendorSpec())
	case Site_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Site: %d", fpaivs.Selector()))
	}
}

// Site_FieldPathArrayOfValues allows storing slice of values for Site fields according to their type
type Site_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Site_FieldPath
}

func ParseSite_FieldPathArrayOfValues(pathStr, valuesStr string) (Site_FieldPathArrayOfValues, error) {
	fp, err := ParseSite_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Site field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Site_FieldPathArrayOfValues), nil
}

func MustParseSite_FieldPathArrayOfValues(pathStr, valuesStr string) Site_FieldPathArrayOfValues {
	fpaov, err := ParseSite_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Site_FieldTerminalPathArrayOfValues struct {
	Site_FieldTerminalPath
	values interface{}
}

var _ Site_FieldPathArrayOfValues = (*Site_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Site_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Site_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Site_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Site_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*workplace_common.StreetLocation) {
			values = append(values, v)
		}
	case Site_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*workplace_common.Geometry) {
			values = append(values, v)
		}
	case Site_FieldPathSelectorVendorSpec:
		for _, v := range fpaov.values.([]*Site_VendorSpec) {
			values = append(values, v)
		}
	case Site_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*workplace_common.StreetLocation, bool) {
	res, ok := fpaov.values.([]*workplace_common.StreetLocation)
	return res, ok
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*workplace_common.Geometry, bool) {
	res, ok := fpaov.values.([]*workplace_common.Geometry)
	return res, ok
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsVendorSpecArrayOfValues() ([]*Site_VendorSpec, bool) {
	res, ok := fpaov.values.([]*Site_VendorSpec)
	return res, ok
}
func (fpaov *Site_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Site_FieldSubPathArrayOfValues struct {
	Site_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Site_FieldPathArrayOfValues = (*Site_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Site_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Site_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (workplace_common.StreetLocation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.StreetLocation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Site_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (workplace_common.Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(workplace_common.Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Site_FieldSubPathArrayOfValues) AsVendorSpecPathArrayOfValues() (SiteVendorSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SiteVendorSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Site_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SiteVendorSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() SiteVendorSpec_FieldPathSelector
	Get(source *Site_VendorSpec) []interface{}
	GetSingle(source *Site_VendorSpec) (interface{}, bool)
	ClearValue(item *Site_VendorSpec)

	// Those methods build corresponding SiteVendorSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SiteVendorSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) SiteVendorSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SiteVendorSpec_FieldPathArrayItemValue
}

type SiteVendorSpec_FieldPathSelector int32

const (
	SiteVendorSpec_FieldPathSelectorPointGrab SiteVendorSpec_FieldPathSelector = 0
)

func (s SiteVendorSpec_FieldPathSelector) String() string {
	switch s {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", s))
	}
}

func BuildSiteVendorSpec_FieldPath(fp gotenobject.RawFieldPath) (SiteVendorSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Site_VendorSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &SiteVendorSpec_FieldTerminalPath{selector: SiteVendorSpec_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildSiteVendorSpecPointGrab_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SiteVendorSpec_FieldSubPath{selector: SiteVendorSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Site_VendorSpec", fp)
}

func ParseSiteVendorSpec_FieldPath(rawField string) (SiteVendorSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSiteVendorSpec_FieldPath(fp)
}

func MustParseSiteVendorSpec_FieldPath(rawField string) SiteVendorSpec_FieldPath {
	fp, err := ParseSiteVendorSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SiteVendorSpec_FieldTerminalPath struct {
	selector SiteVendorSpec_FieldPathSelector
}

var _ SiteVendorSpec_FieldPath = (*SiteVendorSpec_FieldTerminalPath)(nil)

func (fp *SiteVendorSpec_FieldTerminalPath) Selector() SiteVendorSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SiteVendorSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SiteVendorSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Site_VendorSpec
func (fp *SiteVendorSpec_FieldTerminalPath) Get(source *Site_VendorSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SiteVendorSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *SiteVendorSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Site_VendorSpec))
}

// GetSingle returns value pointed by specific field of from source Site_VendorSpec
func (fp *SiteVendorSpec_FieldTerminalPath) GetSingle(source *Site_VendorSpec) (interface{}, bool) {
	switch fp.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
	}
}

func (fp *SiteVendorSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Site_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fp *SiteVendorSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return (*Site_VendorSpec_PointGrab)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
	}
}

func (fp *SiteVendorSpec_FieldTerminalPath) ClearValue(item *Site_VendorSpec) {
	if item != nil {
		switch fp.selector {
		case SiteVendorSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
		}
	}
}

func (fp *SiteVendorSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Site_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *SiteVendorSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *SiteVendorSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithIValue(value interface{}) SiteVendorSpec_FieldPathValue {
	switch fp.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return &SiteVendorSpec_FieldTerminalPathValue{SiteVendorSpec_FieldTerminalPath: *fp, value: value.(*Site_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
	}
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) SiteVendorSpec_FieldPathArrayOfValues {
	fpaov := &SiteVendorSpec_FieldTerminalPathArrayOfValues{SiteVendorSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return &SiteVendorSpec_FieldTerminalPathArrayOfValues{SiteVendorSpec_FieldTerminalPath: *fp, values: values.([]*Site_VendorSpec_PointGrab)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) SiteVendorSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fp.selector))
	}
}

func (fp *SiteVendorSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SiteVendorSpec_FieldSubPath struct {
	selector SiteVendorSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SiteVendorSpec_FieldPath = (*SiteVendorSpec_FieldSubPath)(nil)

func (fps *SiteVendorSpec_FieldSubPath) Selector() SiteVendorSpec_FieldPathSelector {
	return fps.selector
}
func (fps *SiteVendorSpec_FieldSubPath) AsPointGrabSubPath() (SiteVendorSpecPointGrab_FieldPath, bool) {
	res, ok := fps.subPath.(SiteVendorSpecPointGrab_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SiteVendorSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SiteVendorSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Site_VendorSpec
func (fps *SiteVendorSpec_FieldSubPath) Get(source *Site_VendorSpec) (values []interface{}) {
	switch fps.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		values = append(values, fps.subPath.GetRaw(source.GetPointGrab())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fps.selector))
	}
	return
}

func (fps *SiteVendorSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Site_VendorSpec))
}

// GetSingle returns value of selected field from source Site_VendorSpec
func (fps *SiteVendorSpec_FieldSubPath) GetSingle(source *Site_VendorSpec) (interface{}, bool) {
	switch fps.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fps.selector))
	}
}

func (fps *SiteVendorSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Site_VendorSpec))
}

// GetDefault returns a default value of the field type
func (fps *SiteVendorSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SiteVendorSpec_FieldSubPath) ClearValue(item *Site_VendorSpec) {
	if item != nil {
		switch fps.selector {
		case SiteVendorSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fps.selector))
		}
	}
}

func (fps *SiteVendorSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Site_VendorSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *SiteVendorSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SiteVendorSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SiteVendorSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SiteVendorSpec_FieldSubPath) WithIValue(value interface{}) SiteVendorSpec_FieldPathValue {
	return &SiteVendorSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SiteVendorSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SiteVendorSpec_FieldSubPath) WithIArrayOfValues(values interface{}) SiteVendorSpec_FieldPathArrayOfValues {
	return &SiteVendorSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SiteVendorSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SiteVendorSpec_FieldSubPath) WithIArrayItemValue(value interface{}) SiteVendorSpec_FieldPathArrayItemValue {
	return &SiteVendorSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SiteVendorSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SiteVendorSpec_FieldPathValue allows storing values for VendorSpec fields according to their type
type SiteVendorSpec_FieldPathValue interface {
	SiteVendorSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Site_VendorSpec)
	CompareWith(*Site_VendorSpec) (cmp int, comparable bool)
}

func ParseSiteVendorSpec_FieldPathValue(pathStr, valueStr string) (SiteVendorSpec_FieldPathValue, error) {
	fp, err := ParseSiteVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(SiteVendorSpec_FieldPathValue), nil
}

func MustParseSiteVendorSpec_FieldPathValue(pathStr, valueStr string) SiteVendorSpec_FieldPathValue {
	fpv, err := ParseSiteVendorSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SiteVendorSpec_FieldTerminalPathValue struct {
	SiteVendorSpec_FieldTerminalPath
	value interface{}
}

var _ SiteVendorSpec_FieldPathValue = (*SiteVendorSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorSpec' as interface{}
func (fpv *SiteVendorSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SiteVendorSpec_FieldTerminalPathValue) AsPointGrabValue() (*Site_VendorSpec_PointGrab, bool) {
	res, ok := fpv.value.(*Site_VendorSpec_PointGrab)
	return res, ok
}

// SetTo stores value for selected field for object VendorSpec
func (fpv *SiteVendorSpec_FieldTerminalPathValue) SetTo(target **Site_VendorSpec) {
	if *target == nil {
		*target = new(Site_VendorSpec)
	}
	switch fpv.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*Site_VendorSpec_PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *SiteVendorSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Site_VendorSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SiteVendorSpec_FieldTerminalPathValue' with the value under path in 'Site_VendorSpec'.
func (fpv *SiteVendorSpec_FieldTerminalPathValue) CompareWith(source *Site_VendorSpec) (int, bool) {
	switch fpv.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fpv.selector))
	}
}

func (fpv *SiteVendorSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Site_VendorSpec))
}

type SiteVendorSpec_FieldSubPathValue struct {
	SiteVendorSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SiteVendorSpec_FieldPathValue = (*SiteVendorSpec_FieldSubPathValue)(nil)

func (fpvs *SiteVendorSpec_FieldSubPathValue) AsPointGrabPathValue() (SiteVendorSpecPointGrab_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SiteVendorSpecPointGrab_FieldPathValue)
	return res, ok
}

func (fpvs *SiteVendorSpec_FieldSubPathValue) SetTo(target **Site_VendorSpec) {
	if *target == nil {
		*target = new(Site_VendorSpec)
	}
	switch fpvs.Selector() {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(SiteVendorSpecPointGrab_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *SiteVendorSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Site_VendorSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SiteVendorSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SiteVendorSpec_FieldSubPathValue) CompareWith(source *Site_VendorSpec) (int, bool) {
	switch fpvs.Selector() {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(SiteVendorSpecPointGrab_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *SiteVendorSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Site_VendorSpec))
}

// SiteVendorSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorSpec according to their type
// Present only for array (repeated) types.
type SiteVendorSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SiteVendorSpec_FieldPath
	ContainsValue(*Site_VendorSpec) bool
}

// ParseSiteVendorSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSiteVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) (SiteVendorSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseSiteVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SiteVendorSpec_FieldPathArrayItemValue), nil
}

func MustParseSiteVendorSpec_FieldPathArrayItemValue(pathStr, valueStr string) SiteVendorSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseSiteVendorSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SiteVendorSpec_FieldTerminalPathArrayItemValue struct {
	SiteVendorSpec_FieldTerminalPath
	value interface{}
}

var _ SiteVendorSpec_FieldPathArrayItemValue = (*SiteVendorSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Site_VendorSpec as interface{}
func (fpaiv *SiteVendorSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SiteVendorSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Site_VendorSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SiteVendorSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Site_VendorSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaiv *SiteVendorSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Site_VendorSpec) bool {
	slice := fpaiv.SiteVendorSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SiteVendorSpec_FieldSubPathArrayItemValue struct {
	SiteVendorSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SiteVendorSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SiteVendorSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (SiteVendorSpecPointGrab_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SiteVendorSpecPointGrab_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorSpec'
func (fpaivs *SiteVendorSpec_FieldSubPathArrayItemValue) ContainsValue(source *Site_VendorSpec) bool {
	switch fpaivs.Selector() {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(SiteVendorSpecPointGrab_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec: %d", fpaivs.Selector()))
	}
}

// SiteVendorSpec_FieldPathArrayOfValues allows storing slice of values for VendorSpec fields according to their type
type SiteVendorSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SiteVendorSpec_FieldPath
}

func ParseSiteVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (SiteVendorSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseSiteVendorSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SiteVendorSpec_FieldPathArrayOfValues), nil
}

func MustParseSiteVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr string) SiteVendorSpec_FieldPathArrayOfValues {
	fpaov, err := ParseSiteVendorSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SiteVendorSpec_FieldTerminalPathArrayOfValues struct {
	SiteVendorSpec_FieldTerminalPath
	values interface{}
}

var _ SiteVendorSpec_FieldPathArrayOfValues = (*SiteVendorSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SiteVendorSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SiteVendorSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*Site_VendorSpec_PointGrab) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SiteVendorSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*Site_VendorSpec_PointGrab, bool) {
	res, ok := fpaov.values.([]*Site_VendorSpec_PointGrab)
	return res, ok
}

type SiteVendorSpec_FieldSubPathArrayOfValues struct {
	SiteVendorSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SiteVendorSpec_FieldPathArrayOfValues = (*SiteVendorSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SiteVendorSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SiteVendorSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (SiteVendorSpecPointGrab_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SiteVendorSpecPointGrab_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SiteVendorSpecPointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() SiteVendorSpecPointGrab_FieldPathSelector
	Get(source *Site_VendorSpec_PointGrab) []interface{}
	GetSingle(source *Site_VendorSpec_PointGrab) (interface{}, bool)
	ClearValue(item *Site_VendorSpec_PointGrab)

	// Those methods build corresponding SiteVendorSpecPointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SiteVendorSpecPointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) SiteVendorSpecPointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SiteVendorSpecPointGrab_FieldPathArrayItemValue
}

type SiteVendorSpecPointGrab_FieldPathSelector int32

const (
	SiteVendorSpecPointGrab_FieldPathSelectorSiteId SiteVendorSpecPointGrab_FieldPathSelector = 0
)

func (s SiteVendorSpecPointGrab_FieldPathSelector) String() string {
	switch s {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		return "site_id"
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", s))
	}
}

func BuildSiteVendorSpecPointGrab_FieldPath(fp gotenobject.RawFieldPath) (SiteVendorSpecPointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Site_VendorSpec_PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "site_id", "siteId", "site-id":
			return &SiteVendorSpecPointGrab_FieldTerminalPath{selector: SiteVendorSpecPointGrab_FieldPathSelectorSiteId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Site_VendorSpec_PointGrab", fp)
}

func ParseSiteVendorSpecPointGrab_FieldPath(rawField string) (SiteVendorSpecPointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSiteVendorSpecPointGrab_FieldPath(fp)
}

func MustParseSiteVendorSpecPointGrab_FieldPath(rawField string) SiteVendorSpecPointGrab_FieldPath {
	fp, err := ParseSiteVendorSpecPointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SiteVendorSpecPointGrab_FieldTerminalPath struct {
	selector SiteVendorSpecPointGrab_FieldPathSelector
}

var _ SiteVendorSpecPointGrab_FieldPath = (*SiteVendorSpecPointGrab_FieldTerminalPath)(nil)

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) Selector() SiteVendorSpecPointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Site_VendorSpec_PointGrab
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) Get(source *Site_VendorSpec_PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
			values = append(values, source.SiteId)
		default:
			panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Site_VendorSpec_PointGrab))
}

// GetSingle returns value pointed by specific field of from source Site_VendorSpec_PointGrab
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) GetSingle(source *Site_VendorSpec_PointGrab) (interface{}, bool) {
	switch fp.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		return source.GetSiteId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Site_VendorSpec_PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) ClearValue(item *Site_VendorSpec_PointGrab) {
	if item != nil {
		switch fp.selector {
		case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
			item.SiteId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
		}
	}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Site_VendorSpec_PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SiteVendorSpecPointGrab_FieldPathSelectorSiteId
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithIValue(value interface{}) SiteVendorSpecPointGrab_FieldPathValue {
	switch fp.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		return &SiteVendorSpecPointGrab_FieldTerminalPathValue{SiteVendorSpecPointGrab_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) SiteVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov := &SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues{SiteVendorSpecPointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		return &SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues{SiteVendorSpecPointGrab_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) SiteVendorSpecPointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fp.selector))
	}
}

func (fp *SiteVendorSpecPointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SiteVendorSpecPointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type SiteVendorSpecPointGrab_FieldPathValue interface {
	SiteVendorSpecPointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Site_VendorSpec_PointGrab)
	CompareWith(*Site_VendorSpec_PointGrab) (cmp int, comparable bool)
}

func ParseSiteVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) (SiteVendorSpecPointGrab_FieldPathValue, error) {
	fp, err := ParseSiteVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(SiteVendorSpecPointGrab_FieldPathValue), nil
}

func MustParseSiteVendorSpecPointGrab_FieldPathValue(pathStr, valueStr string) SiteVendorSpecPointGrab_FieldPathValue {
	fpv, err := ParseSiteVendorSpecPointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SiteVendorSpecPointGrab_FieldTerminalPathValue struct {
	SiteVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ SiteVendorSpecPointGrab_FieldPathValue = (*SiteVendorSpecPointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) AsSiteIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PointGrab
func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) SetTo(target **Site_VendorSpec_PointGrab) {
	if *target == nil {
		*target = new(Site_VendorSpec_PointGrab)
	}
	switch fpv.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		(*target).SiteId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Site_VendorSpec_PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SiteVendorSpecPointGrab_FieldTerminalPathValue' with the value under path in 'Site_VendorSpec_PointGrab'.
func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) CompareWith(source *Site_VendorSpec_PointGrab) (int, bool) {
	switch fpv.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		leftValue := fpv.value.(string)
		rightValue := source.GetSiteId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Site_VendorSpec_PointGrab: %d", fpv.selector))
	}
}

func (fpv *SiteVendorSpecPointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Site_VendorSpec_PointGrab))
}

// SiteVendorSpecPointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type SiteVendorSpecPointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SiteVendorSpecPointGrab_FieldPath
	ContainsValue(*Site_VendorSpec_PointGrab) bool
}

// ParseSiteVendorSpecPointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSiteVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (SiteVendorSpecPointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParseSiteVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SiteVendorSpecPointGrab_FieldPathArrayItemValue), nil
}

func MustParseSiteVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr string) SiteVendorSpecPointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParseSiteVendorSpecPointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue struct {
	SiteVendorSpecPointGrab_FieldTerminalPath
	value interface{}
}

var _ SiteVendorSpecPointGrab_FieldPathArrayItemValue = (*SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Site_VendorSpec_PointGrab as interface{}
func (fpaiv *SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *Site_VendorSpec_PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Site_VendorSpec_PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *SiteVendorSpecPointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *Site_VendorSpec_PointGrab) bool {
	slice := fpaiv.SiteVendorSpecPointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SiteVendorSpecPointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type SiteVendorSpecPointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SiteVendorSpecPointGrab_FieldPath
}

func ParseSiteVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (SiteVendorSpecPointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParseSiteVendorSpecPointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SiteVendorSpecPointGrab_FieldPathArrayOfValues), nil
}

func MustParseSiteVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) SiteVendorSpecPointGrab_FieldPathArrayOfValues {
	fpaov, err := ParseSiteVendorSpecPointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues struct {
	SiteVendorSpecPointGrab_FieldTerminalPath
	values interface{}
}

var _ SiteVendorSpecPointGrab_FieldPathArrayOfValues = (*SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SiteVendorSpecPointGrab_FieldPathSelectorSiteId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SiteVendorSpecPointGrab_FieldTerminalPathArrayOfValues) AsSiteIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
