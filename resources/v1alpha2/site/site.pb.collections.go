// Code generated by protoc-gen-goten-resource
// Resource: Site
// DO NOT EDIT!!!

package site

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &workplace_common.BBox{}
)

type SiteList []*Site

func (l SiteList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Site))
}

func (l SiteList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SiteList)...)
}

func (l SiteList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SiteList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Site)
}

func (l SiteList) Length() int {
	return len(l)
}

type SiteChangeList []*SiteChange

func (l SiteChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SiteChange))
}

func (l SiteChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SiteChangeList)...)
}

func (l SiteChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SiteChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SiteChange)
}

func (l SiteChangeList) Length() int {
	return len(l)
}

type SiteNameList []*Name

func (l SiteNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SiteNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SiteNameList)...)
}

func (l SiteNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SiteNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SiteNameList) Length() int {
	return len(l)
}

type SiteReferenceList []*Reference

func (l SiteReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SiteReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SiteReferenceList)...)
}

func (l SiteReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SiteReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SiteReferenceList) Length() int {
	return len(l)
}

type SiteParentNameList []*ParentName

func (l SiteParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l SiteParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(SiteParentNameList)...)
}

func (l SiteParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SiteParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l SiteParentNameList) Length() int {
	return len(l)
}

type SiteParentReferenceList []*ParentReference

func (l SiteParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l SiteParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(SiteParentReferenceList)...)
}

func (l SiteParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SiteParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SiteParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l SiteParentReferenceList) Length() int {
	return len(l)
}

type SiteMap map[Name]*Site

func (m SiteMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SiteMap) Set(res gotenresource.Resource) {
	tRes := res.(*Site)
	m[*tRes.Name] = tRes
}

func (m SiteMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SiteMap) Length() int {
	return len(m)
}

func (m SiteMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SiteChangeMap map[Name]*SiteChange

func (m SiteChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SiteChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SiteChange)
	m[*tChange.GetSiteName()] = tChange
}

func (m SiteChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SiteChangeMap) Length() int {
	return len(m)
}

func (m SiteChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
