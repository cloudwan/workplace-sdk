// Code generated by protoc-gen-goten-resource
// Resource: VendorConnection
// DO NOT EDIT!!!

package vendor_connection

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &workplace_common.BBox{}
)

type VendorConnectionList []*VendorConnection

func (l VendorConnectionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*VendorConnection))
}

func (l VendorConnectionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(VendorConnectionList)...)
}

func (l VendorConnectionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l VendorConnectionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*VendorConnection)
}

func (l VendorConnectionList) Length() int {
	return len(l)
}

type VendorConnectionChangeList []*VendorConnectionChange

func (l VendorConnectionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*VendorConnectionChange))
}

func (l VendorConnectionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(VendorConnectionChangeList)...)
}

func (l VendorConnectionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l VendorConnectionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*VendorConnectionChange)
}

func (l VendorConnectionChangeList) Length() int {
	return len(l)
}

type VendorConnectionNameList []*Name

func (l VendorConnectionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l VendorConnectionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(VendorConnectionNameList)...)
}

func (l VendorConnectionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l VendorConnectionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l VendorConnectionNameList) Length() int {
	return len(l)
}

type VendorConnectionReferenceList []*Reference

func (l VendorConnectionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l VendorConnectionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(VendorConnectionReferenceList)...)
}

func (l VendorConnectionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l VendorConnectionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l VendorConnectionReferenceList) Length() int {
	return len(l)
}

type VendorConnectionParentNameList []*ParentName

func (l VendorConnectionParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l VendorConnectionParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(VendorConnectionParentNameList)...)
}

func (l VendorConnectionParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l VendorConnectionParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l VendorConnectionParentNameList) Length() int {
	return len(l)
}

type VendorConnectionParentReferenceList []*ParentReference

func (l VendorConnectionParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l VendorConnectionParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(VendorConnectionParentReferenceList)...)
}

func (l VendorConnectionParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l VendorConnectionParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l VendorConnectionParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l VendorConnectionParentReferenceList) Length() int {
	return len(l)
}

type VendorConnectionMap map[Name]*VendorConnection

func (m VendorConnectionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m VendorConnectionMap) Set(res gotenresource.Resource) {
	tRes := res.(*VendorConnection)
	m[*tRes.Name] = tRes
}

func (m VendorConnectionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m VendorConnectionMap) Length() int {
	return len(m)
}

func (m VendorConnectionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type VendorConnectionChangeMap map[Name]*VendorConnectionChange

func (m VendorConnectionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m VendorConnectionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*VendorConnectionChange)
	m[*tChange.GetVendorConnectionName()] = tChange
}

func (m VendorConnectionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m VendorConnectionChangeMap) Length() int {
	return len(m)
}

func (m VendorConnectionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
