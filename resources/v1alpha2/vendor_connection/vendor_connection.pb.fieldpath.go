// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/vendor_connection.proto
// DO NOT EDIT!!!

package vendor_connection

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &workplace_common.BBox{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PointGrab_FieldPath interface {
	gotenobject.FieldPath
	Selector() PointGrab_FieldPathSelector
	Get(source *PointGrab) []interface{}
	GetSingle(source *PointGrab) (interface{}, bool)
	ClearValue(item *PointGrab)

	// Those methods build corresponding PointGrab_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PointGrab_FieldPathValue
	WithIArrayOfValues(values interface{}) PointGrab_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PointGrab_FieldPathArrayItemValue
}

type PointGrab_FieldPathSelector int32

func (s PointGrab_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", s))
	}
}

func BuildPointGrab_FieldPath(fp gotenobject.RawFieldPath) (PointGrab_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PointGrab")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PointGrab", fp)
}

func ParsePointGrab_FieldPath(rawField string) (PointGrab_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPointGrab_FieldPath(fp)
}

func MustParsePointGrab_FieldPath(rawField string) PointGrab_FieldPath {
	fp, err := ParsePointGrab_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PointGrab_FieldTerminalPath struct {
	selector PointGrab_FieldPathSelector
}

var _ PointGrab_FieldPath = (*PointGrab_FieldTerminalPath)(nil)

func (fp *PointGrab_FieldTerminalPath) Selector() PointGrab_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PointGrab_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PointGrab_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PointGrab
func (fp *PointGrab_FieldTerminalPath) Get(source *PointGrab) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
		}
	}
	return
}

func (fp *PointGrab_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PointGrab))
}

// GetSingle returns value pointed by specific field of from source PointGrab
func (fp *PointGrab_FieldTerminalPath) GetSingle(source *PointGrab) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
	}
}

func (fp *PointGrab_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PointGrab))
}

// GetDefault returns a default value of the field type
func (fp *PointGrab_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
	}
}

func (fp *PointGrab_FieldTerminalPath) ClearValue(item *PointGrab) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
		}
	}
}

func (fp *PointGrab_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PointGrab))
}

// IsLeaf - whether field path is holds simple value
func (fp *PointGrab_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *PointGrab_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PointGrab_FieldTerminalPath) WithIValue(value interface{}) PointGrab_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
	}
}

func (fp *PointGrab_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PointGrab_FieldTerminalPath) WithIArrayOfValues(values interface{}) PointGrab_FieldPathArrayOfValues {
	fpaov := &PointGrab_FieldTerminalPathArrayOfValues{PointGrab_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
	}
	return fpaov
}

func (fp *PointGrab_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PointGrab_FieldTerminalPath) WithIArrayItemValue(value interface{}) PointGrab_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fp.selector))
	}
}

func (fp *PointGrab_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PointGrab_FieldPathValue allows storing values for PointGrab fields according to their type
type PointGrab_FieldPathValue interface {
	PointGrab_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PointGrab)
	CompareWith(*PointGrab) (cmp int, comparable bool)
}

func ParsePointGrab_FieldPathValue(pathStr, valueStr string) (PointGrab_FieldPathValue, error) {
	fp, err := ParsePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path value from %s: %v", valueStr, err)
	}
	return fpv.(PointGrab_FieldPathValue), nil
}

func MustParsePointGrab_FieldPathValue(pathStr, valueStr string) PointGrab_FieldPathValue {
	fpv, err := ParsePointGrab_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PointGrab_FieldTerminalPathValue struct {
	PointGrab_FieldTerminalPath
	value interface{}
}

var _ PointGrab_FieldPathValue = (*PointGrab_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrab' as interface{}
func (fpv *PointGrab_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object PointGrab
func (fpv *PointGrab_FieldTerminalPathValue) SetTo(target **PointGrab) {
	if *target == nil {
		*target = new(PointGrab)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fpv.selector))
	}
}

func (fpv *PointGrab_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PointGrab)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PointGrab_FieldTerminalPathValue' with the value under path in 'PointGrab'.
func (fpv *PointGrab_FieldTerminalPathValue) CompareWith(source *PointGrab) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab: %d", fpv.selector))
	}
}

func (fpv *PointGrab_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PointGrab))
}

// PointGrab_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrab according to their type
// Present only for array (repeated) types.
type PointGrab_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PointGrab_FieldPath
	ContainsValue(*PointGrab) bool
}

// ParsePointGrab_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePointGrab_FieldPathArrayItemValue(pathStr, valueStr string) (PointGrab_FieldPathArrayItemValue, error) {
	fp, err := ParsePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PointGrab_FieldPathArrayItemValue), nil
}

func MustParsePointGrab_FieldPathArrayItemValue(pathStr, valueStr string) PointGrab_FieldPathArrayItemValue {
	fpaiv, err := ParsePointGrab_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PointGrab_FieldTerminalPathArrayItemValue struct {
	PointGrab_FieldTerminalPath
	value interface{}
}

var _ PointGrab_FieldPathArrayItemValue = (*PointGrab_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PointGrab as interface{}
func (fpaiv *PointGrab_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PointGrab_FieldTerminalPathArrayItemValue) GetSingle(source *PointGrab) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PointGrab_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PointGrab))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrab'
func (fpaiv *PointGrab_FieldTerminalPathArrayItemValue) ContainsValue(source *PointGrab) bool {
	slice := fpaiv.PointGrab_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PointGrab_FieldPathArrayOfValues allows storing slice of values for PointGrab fields according to their type
type PointGrab_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PointGrab_FieldPath
}

func ParsePointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) (PointGrab_FieldPathArrayOfValues, error) {
	fp, err := ParsePointGrab_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrab field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PointGrab_FieldPathArrayOfValues), nil
}

func MustParsePointGrab_FieldPathArrayOfValues(pathStr, valuesStr string) PointGrab_FieldPathArrayOfValues {
	fpaov, err := ParsePointGrab_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PointGrab_FieldTerminalPathArrayOfValues struct {
	PointGrab_FieldTerminalPath
	values interface{}
}

var _ PointGrab_FieldPathArrayOfValues = (*PointGrab_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PointGrab_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PointGrabTelemetry_FieldPath interface {
	gotenobject.FieldPath
	Selector() PointGrabTelemetry_FieldPathSelector
	Get(source *PointGrab_Telemetry) []interface{}
	GetSingle(source *PointGrab_Telemetry) (interface{}, bool)
	ClearValue(item *PointGrab_Telemetry)

	// Those methods build corresponding PointGrabTelemetry_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PointGrabTelemetry_FieldPathValue
	WithIArrayOfValues(values interface{}) PointGrabTelemetry_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PointGrabTelemetry_FieldPathArrayItemValue
}

type PointGrabTelemetry_FieldPathSelector int32

func (s PointGrabTelemetry_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", s))
	}
}

func BuildPointGrabTelemetry_FieldPath(fp gotenobject.RawFieldPath) (PointGrabTelemetry_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PointGrab_Telemetry")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PointGrab_Telemetry", fp)
}

func ParsePointGrabTelemetry_FieldPath(rawField string) (PointGrabTelemetry_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPointGrabTelemetry_FieldPath(fp)
}

func MustParsePointGrabTelemetry_FieldPath(rawField string) PointGrabTelemetry_FieldPath {
	fp, err := ParsePointGrabTelemetry_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PointGrabTelemetry_FieldTerminalPath struct {
	selector PointGrabTelemetry_FieldPathSelector
}

var _ PointGrabTelemetry_FieldPath = (*PointGrabTelemetry_FieldTerminalPath)(nil)

func (fp *PointGrabTelemetry_FieldTerminalPath) Selector() PointGrabTelemetry_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PointGrabTelemetry_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PointGrabTelemetry_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PointGrab_Telemetry
func (fp *PointGrabTelemetry_FieldTerminalPath) Get(source *PointGrab_Telemetry) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
		}
	}
	return
}

func (fp *PointGrabTelemetry_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PointGrab_Telemetry))
}

// GetSingle returns value pointed by specific field of from source PointGrab_Telemetry
func (fp *PointGrabTelemetry_FieldTerminalPath) GetSingle(source *PointGrab_Telemetry) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PointGrab_Telemetry))
}

// GetDefault returns a default value of the field type
func (fp *PointGrabTelemetry_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) ClearValue(item *PointGrab_Telemetry) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
		}
	}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PointGrab_Telemetry))
}

// IsLeaf - whether field path is holds simple value
func (fp *PointGrabTelemetry_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *PointGrabTelemetry_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithIValue(value interface{}) PointGrabTelemetry_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithIArrayOfValues(values interface{}) PointGrabTelemetry_FieldPathArrayOfValues {
	fpaov := &PointGrabTelemetry_FieldTerminalPathArrayOfValues{PointGrabTelemetry_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
	}
	return fpaov
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithIArrayItemValue(value interface{}) PointGrabTelemetry_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fp.selector))
	}
}

func (fp *PointGrabTelemetry_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PointGrabTelemetry_FieldPathValue allows storing values for Telemetry fields according to their type
type PointGrabTelemetry_FieldPathValue interface {
	PointGrabTelemetry_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PointGrab_Telemetry)
	CompareWith(*PointGrab_Telemetry) (cmp int, comparable bool)
}

func ParsePointGrabTelemetry_FieldPathValue(pathStr, valueStr string) (PointGrabTelemetry_FieldPathValue, error) {
	fp, err := ParsePointGrabTelemetry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Telemetry field path value from %s: %v", valueStr, err)
	}
	return fpv.(PointGrabTelemetry_FieldPathValue), nil
}

func MustParsePointGrabTelemetry_FieldPathValue(pathStr, valueStr string) PointGrabTelemetry_FieldPathValue {
	fpv, err := ParsePointGrabTelemetry_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PointGrabTelemetry_FieldTerminalPathValue struct {
	PointGrabTelemetry_FieldTerminalPath
	value interface{}
}

var _ PointGrabTelemetry_FieldPathValue = (*PointGrabTelemetry_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Telemetry' as interface{}
func (fpv *PointGrabTelemetry_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Telemetry
func (fpv *PointGrabTelemetry_FieldTerminalPathValue) SetTo(target **PointGrab_Telemetry) {
	if *target == nil {
		*target = new(PointGrab_Telemetry)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fpv.selector))
	}
}

func (fpv *PointGrabTelemetry_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PointGrab_Telemetry)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PointGrabTelemetry_FieldTerminalPathValue' with the value under path in 'PointGrab_Telemetry'.
func (fpv *PointGrabTelemetry_FieldTerminalPathValue) CompareWith(source *PointGrab_Telemetry) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PointGrab_Telemetry: %d", fpv.selector))
	}
}

func (fpv *PointGrabTelemetry_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PointGrab_Telemetry))
}

// PointGrabTelemetry_FieldPathArrayItemValue allows storing single item in Path-specific values for Telemetry according to their type
// Present only for array (repeated) types.
type PointGrabTelemetry_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PointGrabTelemetry_FieldPath
	ContainsValue(*PointGrab_Telemetry) bool
}

// ParsePointGrabTelemetry_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePointGrabTelemetry_FieldPathArrayItemValue(pathStr, valueStr string) (PointGrabTelemetry_FieldPathArrayItemValue, error) {
	fp, err := ParsePointGrabTelemetry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Telemetry field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PointGrabTelemetry_FieldPathArrayItemValue), nil
}

func MustParsePointGrabTelemetry_FieldPathArrayItemValue(pathStr, valueStr string) PointGrabTelemetry_FieldPathArrayItemValue {
	fpaiv, err := ParsePointGrabTelemetry_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PointGrabTelemetry_FieldTerminalPathArrayItemValue struct {
	PointGrabTelemetry_FieldTerminalPath
	value interface{}
}

var _ PointGrabTelemetry_FieldPathArrayItemValue = (*PointGrabTelemetry_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PointGrab_Telemetry as interface{}
func (fpaiv *PointGrabTelemetry_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PointGrabTelemetry_FieldTerminalPathArrayItemValue) GetSingle(source *PointGrab_Telemetry) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PointGrabTelemetry_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PointGrab_Telemetry))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Telemetry'
func (fpaiv *PointGrabTelemetry_FieldTerminalPathArrayItemValue) ContainsValue(source *PointGrab_Telemetry) bool {
	slice := fpaiv.PointGrabTelemetry_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PointGrabTelemetry_FieldPathArrayOfValues allows storing slice of values for Telemetry fields according to their type
type PointGrabTelemetry_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PointGrabTelemetry_FieldPath
}

func ParsePointGrabTelemetry_FieldPathArrayOfValues(pathStr, valuesStr string) (PointGrabTelemetry_FieldPathArrayOfValues, error) {
	fp, err := ParsePointGrabTelemetry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Telemetry field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PointGrabTelemetry_FieldPathArrayOfValues), nil
}

func MustParsePointGrabTelemetry_FieldPathArrayOfValues(pathStr, valuesStr string) PointGrabTelemetry_FieldPathArrayOfValues {
	fpaov, err := ParsePointGrabTelemetry_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PointGrabTelemetry_FieldTerminalPathArrayOfValues struct {
	PointGrabTelemetry_FieldTerminalPath
	values interface{}
}

var _ PointGrabTelemetry_FieldPathArrayOfValues = (*PointGrabTelemetry_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PointGrabTelemetry_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnection_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnection_FieldPathSelector
	Get(source *VendorConnection) []interface{}
	GetSingle(source *VendorConnection) (interface{}, bool)
	ClearValue(item *VendorConnection)

	// Those methods build corresponding VendorConnection_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnection_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnection_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnection_FieldPathArrayItemValue
}

type VendorConnection_FieldPathSelector int32

const (
	VendorConnection_FieldPathSelectorName        VendorConnection_FieldPathSelector = 0
	VendorConnection_FieldPathSelectorDisplayName VendorConnection_FieldPathSelector = 1
	VendorConnection_FieldPathSelectorVendor      VendorConnection_FieldPathSelector = 2
	VendorConnection_FieldPathSelectorSpec        VendorConnection_FieldPathSelector = 3
	VendorConnection_FieldPathSelectorInfo        VendorConnection_FieldPathSelector = 4
	VendorConnection_FieldPathSelectorMetadata    VendorConnection_FieldPathSelector = 5
)

func (s VendorConnection_FieldPathSelector) String() string {
	switch s {
	case VendorConnection_FieldPathSelectorName:
		return "name"
	case VendorConnection_FieldPathSelectorDisplayName:
		return "display_name"
	case VendorConnection_FieldPathSelectorVendor:
		return "vendor"
	case VendorConnection_FieldPathSelectorSpec:
		return "spec"
	case VendorConnection_FieldPathSelectorInfo:
		return "info"
	case VendorConnection_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", s))
	}
}

func BuildVendorConnection_FieldPath(fp gotenobject.RawFieldPath) (VendorConnection_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorDisplayName}, nil
		case "vendor":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorVendor}, nil
		case "spec":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorSpec}, nil
		case "info":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorInfo}, nil
		case "metadata":
			return &VendorConnection_FieldTerminalPath{selector: VendorConnection_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "spec":
			if subpath, err := BuildVendorConnectionSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnection_FieldSubPath{selector: VendorConnection_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "info":
			if subpath, err := BuildVendorConnectionInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnection_FieldSubPath{selector: VendorConnection_FieldPathSelectorInfo, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnection_FieldSubPath{selector: VendorConnection_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection", fp)
}

func ParseVendorConnection_FieldPath(rawField string) (VendorConnection_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnection_FieldPath(fp)
}

func MustParseVendorConnection_FieldPath(rawField string) VendorConnection_FieldPath {
	fp, err := ParseVendorConnection_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnection_FieldTerminalPath struct {
	selector VendorConnection_FieldPathSelector
}

var _ VendorConnection_FieldPath = (*VendorConnection_FieldTerminalPath)(nil)

func (fp *VendorConnection_FieldTerminalPath) Selector() VendorConnection_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnection_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnection_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection
func (fp *VendorConnection_FieldTerminalPath) Get(source *VendorConnection) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnection_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case VendorConnection_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case VendorConnection_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case VendorConnection_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case VendorConnection_FieldPathSelectorInfo:
			if source.Info != nil {
				values = append(values, source.Info)
			}
		case VendorConnection_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnection_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection))
}

// GetSingle returns value pointed by specific field of from source VendorConnection
func (fp *VendorConnection_FieldTerminalPath) GetSingle(source *VendorConnection) (interface{}, bool) {
	switch fp.selector {
	case VendorConnection_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case VendorConnection_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case VendorConnection_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case VendorConnection_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case VendorConnection_FieldPathSelectorInfo:
		res := source.GetInfo()
		return res, res != nil
	case VendorConnection_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
	}
}

func (fp *VendorConnection_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnection_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnection_FieldPathSelectorName:
		return (*Name)(nil)
	case VendorConnection_FieldPathSelectorDisplayName:
		return ""
	case VendorConnection_FieldPathSelectorVendor:
		return workplace_common.Vendor_VENDOR_UNSPECIFIED
	case VendorConnection_FieldPathSelectorSpec:
		return (*VendorConnection_Spec)(nil)
	case VendorConnection_FieldPathSelectorInfo:
		return (*VendorConnection_Info)(nil)
	case VendorConnection_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
	}
}

func (fp *VendorConnection_FieldTerminalPath) ClearValue(item *VendorConnection) {
	if item != nil {
		switch fp.selector {
		case VendorConnection_FieldPathSelectorName:
			item.Name = nil
		case VendorConnection_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case VendorConnection_FieldPathSelectorVendor:
			item.Vendor = workplace_common.Vendor_VENDOR_UNSPECIFIED
		case VendorConnection_FieldPathSelectorSpec:
			item.Spec = nil
		case VendorConnection_FieldPathSelectorInfo:
			item.Info = nil
		case VendorConnection_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
		}
	}
}

func (fp *VendorConnection_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnection_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VendorConnection_FieldPathSelectorName ||
		fp.selector == VendorConnection_FieldPathSelectorDisplayName ||
		fp.selector == VendorConnection_FieldPathSelectorVendor
}

func (fp *VendorConnection_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnection_FieldTerminalPath) WithIValue(value interface{}) VendorConnection_FieldPathValue {
	switch fp.selector {
	case VendorConnection_FieldPathSelectorName:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(*Name)}
	case VendorConnection_FieldPathSelectorDisplayName:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnection_FieldPathSelectorVendor:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(workplace_common.Vendor)}
	case VendorConnection_FieldPathSelectorSpec:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(*VendorConnection_Spec)}
	case VendorConnection_FieldPathSelectorInfo:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(*VendorConnection_Info)}
	case VendorConnection_FieldPathSelectorMetadata:
		return &VendorConnection_FieldTerminalPathValue{VendorConnection_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
	}
}

func (fp *VendorConnection_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnection_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnection_FieldPathArrayOfValues {
	fpaov := &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnection_FieldPathSelectorName:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]*Name)}
	case VendorConnection_FieldPathSelectorDisplayName:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnection_FieldPathSelectorVendor:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]workplace_common.Vendor)}
	case VendorConnection_FieldPathSelectorSpec:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Spec)}
	case VendorConnection_FieldPathSelectorInfo:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Info)}
	case VendorConnection_FieldPathSelectorMetadata:
		return &VendorConnection_FieldTerminalPathArrayOfValues{VendorConnection_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnection_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnection_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnection_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fp.selector))
	}
}

func (fp *VendorConnection_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnection_FieldSubPath struct {
	selector VendorConnection_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnection_FieldPath = (*VendorConnection_FieldSubPath)(nil)

func (fps *VendorConnection_FieldSubPath) Selector() VendorConnection_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnection_FieldSubPath) AsSpecSubPath() (VendorConnectionSpec_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionSpec_FieldPath)
	return res, ok
}
func (fps *VendorConnection_FieldSubPath) AsInfoSubPath() (VendorConnectionInfo_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionInfo_FieldPath)
	return res, ok
}
func (fps *VendorConnection_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnection_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnection_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection
func (fps *VendorConnection_FieldSubPath) Get(source *VendorConnection) (values []interface{}) {
	if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asInfoFieldPath, ok := fps.AsInfoSubPath(); ok {
		values = append(values, asInfoFieldPath.Get(source.GetInfo())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fps.selector))
	}
	return
}

func (fps *VendorConnection_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection))
}

// GetSingle returns value of selected field from source VendorConnection
func (fps *VendorConnection_FieldSubPath) GetSingle(source *VendorConnection) (interface{}, bool) {
	switch fps.selector {
	case VendorConnection_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case VendorConnection_FieldPathSelectorInfo:
		if source.GetInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInfo())
	case VendorConnection_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fps.selector))
	}
}

func (fps *VendorConnection_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnection_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnection_FieldSubPath) ClearValue(item *VendorConnection) {
	if item != nil {
		switch fps.selector {
		case VendorConnection_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case VendorConnection_FieldPathSelectorInfo:
			fps.subPath.ClearValueRaw(item.Info)
		case VendorConnection_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fps.selector))
		}
	}
}

func (fps *VendorConnection_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnection_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnection_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnection_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnection_FieldSubPath) WithIValue(value interface{}) VendorConnection_FieldPathValue {
	return &VendorConnection_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnection_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnection_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnection_FieldPathArrayOfValues {
	return &VendorConnection_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnection_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnection_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnection_FieldPathArrayItemValue {
	return &VendorConnection_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnection_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnection_FieldPathValue allows storing values for VendorConnection fields according to their type
type VendorConnection_FieldPathValue interface {
	VendorConnection_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection)
	CompareWith(*VendorConnection) (cmp int, comparable bool)
}

func ParseVendorConnection_FieldPathValue(pathStr, valueStr string) (VendorConnection_FieldPathValue, error) {
	fp, err := ParseVendorConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorConnection field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnection_FieldPathValue), nil
}

func MustParseVendorConnection_FieldPathValue(pathStr, valueStr string) VendorConnection_FieldPathValue {
	fpv, err := ParseVendorConnection_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnection_FieldTerminalPathValue struct {
	VendorConnection_FieldTerminalPath
	value interface{}
}

var _ VendorConnection_FieldPathValue = (*VendorConnection_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VendorConnection' as interface{}
func (fpv *VendorConnection_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsVendorValue() (workplace_common.Vendor, bool) {
	res, ok := fpv.value.(workplace_common.Vendor)
	return res, ok
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsSpecValue() (*VendorConnection_Spec, bool) {
	res, ok := fpv.value.(*VendorConnection_Spec)
	return res, ok
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsInfoValue() (*VendorConnection_Info, bool) {
	res, ok := fpv.value.(*VendorConnection_Info)
	return res, ok
}
func (fpv *VendorConnection_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object VendorConnection
func (fpv *VendorConnection_FieldTerminalPathValue) SetTo(target **VendorConnection) {
	if *target == nil {
		*target = new(VendorConnection)
	}
	switch fpv.selector {
	case VendorConnection_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case VendorConnection_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case VendorConnection_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(workplace_common.Vendor)
	case VendorConnection_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*VendorConnection_Spec)
	case VendorConnection_FieldPathSelectorInfo:
		(*target).Info = fpv.value.(*VendorConnection_Info)
	case VendorConnection_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fpv.selector))
	}
}

func (fpv *VendorConnection_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnection_FieldTerminalPathValue' with the value under path in 'VendorConnection'.
func (fpv *VendorConnection_FieldTerminalPathValue) CompareWith(source *VendorConnection) (int, bool) {
	switch fpv.selector {
	case VendorConnection_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnection_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnection_FieldPathSelectorVendor:
		leftValue := fpv.value.(workplace_common.Vendor)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnection_FieldPathSelectorSpec:
		return 0, false
	case VendorConnection_FieldPathSelectorInfo:
		return 0, false
	case VendorConnection_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fpv.selector))
	}
}

func (fpv *VendorConnection_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection))
}

type VendorConnection_FieldSubPathValue struct {
	VendorConnection_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnection_FieldPathValue = (*VendorConnection_FieldSubPathValue)(nil)

func (fpvs *VendorConnection_FieldSubPathValue) AsSpecPathValue() (VendorConnectionSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionSpec_FieldPathValue)
	return res, ok
}
func (fpvs *VendorConnection_FieldSubPathValue) AsInfoPathValue() (VendorConnectionInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionInfo_FieldPathValue)
	return res, ok
}
func (fpvs *VendorConnection_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnection_FieldSubPathValue) SetTo(target **VendorConnection) {
	if *target == nil {
		*target = new(VendorConnection)
	}
	switch fpvs.Selector() {
	case VendorConnection_FieldPathSelectorSpec:
		fpvs.subPathValue.(VendorConnectionSpec_FieldPathValue).SetTo(&(*target).Spec)
	case VendorConnection_FieldPathSelectorInfo:
		fpvs.subPathValue.(VendorConnectionInfo_FieldPathValue).SetTo(&(*target).Info)
	case VendorConnection_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnection_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnection_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnection_FieldSubPathValue) CompareWith(source *VendorConnection) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnection_FieldPathSelectorSpec:
		return fpvs.subPathValue.(VendorConnectionSpec_FieldPathValue).CompareWith(source.GetSpec())
	case VendorConnection_FieldPathSelectorInfo:
		return fpvs.subPathValue.(VendorConnectionInfo_FieldPathValue).CompareWith(source.GetInfo())
	case VendorConnection_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnection_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection))
}

// VendorConnection_FieldPathArrayItemValue allows storing single item in Path-specific values for VendorConnection according to their type
// Present only for array (repeated) types.
type VendorConnection_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnection_FieldPath
	ContainsValue(*VendorConnection) bool
}

// ParseVendorConnection_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnection_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnection_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorConnection field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnection_FieldPathArrayItemValue), nil
}

func MustParseVendorConnection_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnection_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnection_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnection_FieldTerminalPathArrayItemValue struct {
	VendorConnection_FieldTerminalPath
	value interface{}
}

var _ VendorConnection_FieldPathArrayItemValue = (*VendorConnection_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection as interface{}
func (fpaiv *VendorConnection_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnection_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnection_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorConnection'
func (fpaiv *VendorConnection_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection) bool {
	slice := fpaiv.VendorConnection_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnection_FieldSubPathArrayItemValue struct {
	VendorConnection_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnection_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnection_FieldSubPathArrayItemValue) AsSpecPathItemValue() (VendorConnectionSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VendorConnection_FieldSubPathArrayItemValue) AsInfoPathItemValue() (VendorConnectionInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VendorConnection_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VendorConnection'
func (fpaivs *VendorConnection_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection) bool {
	switch fpaivs.Selector() {
	case VendorConnection_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(VendorConnectionSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case VendorConnection_FieldPathSelectorInfo:
		return fpaivs.subPathItemValue.(VendorConnectionInfo_FieldPathArrayItemValue).ContainsValue(source.GetInfo())
	case VendorConnection_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection: %d", fpaivs.Selector()))
	}
}

// VendorConnection_FieldPathArrayOfValues allows storing slice of values for VendorConnection fields according to their type
type VendorConnection_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnection_FieldPath
}

func ParseVendorConnection_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnection_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnection_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VendorConnection field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnection_FieldPathArrayOfValues), nil
}

func MustParseVendorConnection_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnection_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnection_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnection_FieldTerminalPathArrayOfValues struct {
	VendorConnection_FieldTerminalPath
	values interface{}
}

var _ VendorConnection_FieldPathArrayOfValues = (*VendorConnection_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnection_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case VendorConnection_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnection_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]workplace_common.Vendor) {
			values = append(values, v)
		}
	case VendorConnection_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*VendorConnection_Spec) {
			values = append(values, v)
		}
	case VendorConnection_FieldPathSelectorInfo:
		for _, v := range fpaov.values.([]*VendorConnection_Info) {
			values = append(values, v)
		}
	case VendorConnection_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]workplace_common.Vendor, bool) {
	res, ok := fpaov.values.([]workplace_common.Vendor)
	return res, ok
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*VendorConnection_Spec, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Spec)
	return res, ok
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsInfoArrayOfValues() ([]*VendorConnection_Info, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Info)
	return res, ok
}
func (fpaov *VendorConnection_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type VendorConnection_FieldSubPathArrayOfValues struct {
	VendorConnection_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnection_FieldPathArrayOfValues = (*VendorConnection_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnection_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnection_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (VendorConnectionSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VendorConnection_FieldSubPathArrayOfValues) AsInfoPathArrayOfValues() (VendorConnectionInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VendorConnection_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionSpec_FieldPathSelector
	Get(source *VendorConnection_Spec) []interface{}
	GetSingle(source *VendorConnection_Spec) (interface{}, bool)
	ClearValue(item *VendorConnection_Spec)

	// Those methods build corresponding VendorConnectionSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionSpec_FieldPathArrayItemValue
}

type VendorConnectionSpec_FieldPathSelector int32

const (
	VendorConnectionSpec_FieldPathSelectorPointGrab VendorConnectionSpec_FieldPathSelector = 0
)

func (s VendorConnectionSpec_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return "point_grab"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", s))
	}
}

func BuildVendorConnectionSpec_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			return &VendorConnectionSpec_FieldTerminalPath{selector: VendorConnectionSpec_FieldPathSelectorPointGrab}, nil
		}
	} else {
		switch fp[0] {
		case "point_grab", "pointGrab", "point-grab":
			if subpath, err := BuildVendorConnectionSpecPointGrabSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionSpec_FieldSubPath{selector: VendorConnectionSpec_FieldPathSelectorPointGrab, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Spec", fp)
}

func ParseVendorConnectionSpec_FieldPath(rawField string) (VendorConnectionSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionSpec_FieldPath(fp)
}

func MustParseVendorConnectionSpec_FieldPath(rawField string) VendorConnectionSpec_FieldPath {
	fp, err := ParseVendorConnectionSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionSpec_FieldTerminalPath struct {
	selector VendorConnectionSpec_FieldPathSelector
}

var _ VendorConnectionSpec_FieldPath = (*VendorConnectionSpec_FieldTerminalPath)(nil)

func (fp *VendorConnectionSpec_FieldTerminalPath) Selector() VendorConnectionSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Spec
func (fp *VendorConnectionSpec_FieldTerminalPath) Get(source *VendorConnection_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionSpec_FieldPathSelectorPointGrab:
			if source.PointGrab != nil {
				values = append(values, source.PointGrab)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Spec))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Spec
func (fp *VendorConnectionSpec_FieldTerminalPath) GetSingle(source *VendorConnection_Spec) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		res := source.GetPointGrab()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Spec))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return (*VendorConnection_Spec_PointGrabSpec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) ClearValue(item *VendorConnection_Spec) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionSpec_FieldPathSelectorPointGrab:
			item.PointGrab = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VendorConnectionSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionSpec_FieldPathValue {
	switch fp.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return &VendorConnectionSpec_FieldTerminalPathValue{VendorConnectionSpec_FieldTerminalPath: *fp, value: value.(*VendorConnection_Spec_PointGrabSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionSpec_FieldPathArrayOfValues {
	fpaov := &VendorConnectionSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return &VendorConnectionSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpec_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Spec_PointGrabSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnectionSpec_FieldSubPath struct {
	selector VendorConnectionSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnectionSpec_FieldPath = (*VendorConnectionSpec_FieldSubPath)(nil)

func (fps *VendorConnectionSpec_FieldSubPath) Selector() VendorConnectionSpec_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnectionSpec_FieldSubPath) AsPointGrabSubPath() (VendorConnectionSpecPointGrabSpec_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionSpecPointGrabSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnectionSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnectionSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection_Spec
func (fps *VendorConnectionSpec_FieldSubPath) Get(source *VendorConnection_Spec) (values []interface{}) {
	if asPointGrabSpecFieldPath, ok := fps.AsPointGrabSubPath(); ok {
		values = append(values, asPointGrabSpecFieldPath.Get(source.GetPointGrab())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fps.selector))
	}
	return
}

func (fps *VendorConnectionSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection_Spec))
}

// GetSingle returns value of selected field from source VendorConnection_Spec
func (fps *VendorConnectionSpec_FieldSubPath) GetSingle(source *VendorConnection_Spec) (interface{}, bool) {
	switch fps.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		if source.GetPointGrab() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fps.selector))
	}
}

func (fps *VendorConnectionSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection_Spec))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnectionSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnectionSpec_FieldSubPath) ClearValue(item *VendorConnection_Spec) {
	if item != nil {
		switch fps.selector {
		case VendorConnectionSpec_FieldPathSelectorPointGrab:
			fps.subPath.ClearValueRaw(item.PointGrab)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fps.selector))
		}
	}
}

func (fps *VendorConnectionSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnectionSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnectionSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnectionSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnectionSpec_FieldSubPath) WithIValue(value interface{}) VendorConnectionSpec_FieldPathValue {
	return &VendorConnectionSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnectionSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnectionSpec_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnectionSpec_FieldPathArrayOfValues {
	return &VendorConnectionSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnectionSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnectionSpec_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnectionSpec_FieldPathArrayItemValue {
	return &VendorConnectionSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnectionSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnectionSpec_FieldPathValue allows storing values for Spec fields according to their type
type VendorConnectionSpec_FieldPathValue interface {
	VendorConnectionSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Spec)
	CompareWith(*VendorConnection_Spec) (cmp int, comparable bool)
}

func ParseVendorConnectionSpec_FieldPathValue(pathStr, valueStr string) (VendorConnectionSpec_FieldPathValue, error) {
	fp, err := ParseVendorConnectionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionSpec_FieldPathValue), nil
}

func MustParseVendorConnectionSpec_FieldPathValue(pathStr, valueStr string) VendorConnectionSpec_FieldPathValue {
	fpv, err := ParseVendorConnectionSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionSpec_FieldTerminalPathValue struct {
	VendorConnectionSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpec_FieldPathValue = (*VendorConnectionSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *VendorConnectionSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionSpec_FieldTerminalPathValue) AsPointGrabValue() (*VendorConnection_Spec_PointGrabSpec, bool) {
	res, ok := fpv.value.(*VendorConnection_Spec_PointGrabSpec)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *VendorConnectionSpec_FieldTerminalPathValue) SetTo(target **VendorConnection_Spec) {
	if *target == nil {
		*target = new(VendorConnection_Spec)
	}
	switch fpv.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		(*target).PointGrab = fpv.value.(*VendorConnection_Spec_PointGrabSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionSpec_FieldTerminalPathValue' with the value under path in 'VendorConnection_Spec'.
func (fpv *VendorConnectionSpec_FieldTerminalPathValue) CompareWith(source *VendorConnection_Spec) (int, bool) {
	switch fpv.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Spec))
}

type VendorConnectionSpec_FieldSubPathValue struct {
	VendorConnectionSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnectionSpec_FieldPathValue = (*VendorConnectionSpec_FieldSubPathValue)(nil)

func (fpvs *VendorConnectionSpec_FieldSubPathValue) AsPointGrabPathValue() (VendorConnectionSpecPointGrabSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionSpecPointGrabSpec_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnectionSpec_FieldSubPathValue) SetTo(target **VendorConnection_Spec) {
	if *target == nil {
		*target = new(VendorConnection_Spec)
	}
	switch fpvs.Selector() {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		fpvs.subPathValue.(VendorConnectionSpecPointGrabSpec_FieldPathValue).SetTo(&(*target).PointGrab)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnectionSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnectionSpec_FieldSubPathValue) CompareWith(source *VendorConnection_Spec) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return fpvs.subPathValue.(VendorConnectionSpecPointGrabSpec_FieldPathValue).CompareWith(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection_Spec))
}

// VendorConnectionSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type VendorConnectionSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionSpec_FieldPath
	ContainsValue(*VendorConnection_Spec) bool
}

// ParseVendorConnectionSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionSpec_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionSpec_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionSpec_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionSpec_FieldTerminalPathArrayItemValue struct {
	VendorConnectionSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpec_FieldPathArrayItemValue = (*VendorConnectionSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Spec as interface{}
func (fpaiv *VendorConnectionSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionSpec_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *VendorConnectionSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Spec) bool {
	slice := fpaiv.VendorConnectionSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnectionSpec_FieldSubPathArrayItemValue struct {
	VendorConnectionSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnectionSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnectionSpec_FieldSubPathArrayItemValue) AsPointGrabPathItemValue() (VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *VendorConnectionSpec_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection_Spec) bool {
	switch fpaivs.Selector() {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		return fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue).ContainsValue(source.GetPointGrab())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec: %d", fpaivs.Selector()))
	}
}

// VendorConnectionSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type VendorConnectionSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionSpec_FieldPath
}

func ParseVendorConnectionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionSpec_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionSpec_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionSpec_FieldTerminalPathArrayOfValues struct {
	VendorConnectionSpec_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionSpec_FieldPathArrayOfValues = (*VendorConnectionSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionSpec_FieldPathSelectorPointGrab:
		for _, v := range fpaov.values.([]*VendorConnection_Spec_PointGrabSpec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionSpec_FieldTerminalPathArrayOfValues) AsPointGrabArrayOfValues() ([]*VendorConnection_Spec_PointGrabSpec, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Spec_PointGrabSpec)
	return res, ok
}

type VendorConnectionSpec_FieldSubPathArrayOfValues struct {
	VendorConnectionSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnectionSpec_FieldPathArrayOfValues = (*VendorConnectionSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnectionSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnectionSpec_FieldSubPathArrayOfValues) AsPointGrabPathArrayOfValues() (VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionInfo_FieldPathSelector
	Get(source *VendorConnection_Info) []interface{}
	GetSingle(source *VendorConnection_Info) (interface{}, bool)
	ClearValue(item *VendorConnection_Info)

	// Those methods build corresponding VendorConnectionInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionInfo_FieldPathArrayItemValue
}

type VendorConnectionInfo_FieldPathSelector int32

const (
	VendorConnectionInfo_FieldPathSelectorInfo VendorConnectionInfo_FieldPathSelector = 0
)

func (s VendorConnectionInfo_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return "info"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", s))
	}
}

func BuildVendorConnectionInfo_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Info")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "info":
			return &VendorConnectionInfo_FieldTerminalPath{selector: VendorConnectionInfo_FieldPathSelectorInfo}, nil
		}
	} else {
		switch fp[0] {
		case "info":
			if subpath, err := BuildVendorConnectionInfoPointGrabInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionInfo_FieldSubPath{selector: VendorConnectionInfo_FieldPathSelectorInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Info", fp)
}

func ParseVendorConnectionInfo_FieldPath(rawField string) (VendorConnectionInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionInfo_FieldPath(fp)
}

func MustParseVendorConnectionInfo_FieldPath(rawField string) VendorConnectionInfo_FieldPath {
	fp, err := ParseVendorConnectionInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionInfo_FieldTerminalPath struct {
	selector VendorConnectionInfo_FieldPathSelector
}

var _ VendorConnectionInfo_FieldPath = (*VendorConnectionInfo_FieldTerminalPath)(nil)

func (fp *VendorConnectionInfo_FieldTerminalPath) Selector() VendorConnectionInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Info
func (fp *VendorConnectionInfo_FieldTerminalPath) Get(source *VendorConnection_Info) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionInfo_FieldPathSelectorInfo:
			if source.Info != nil {
				values = append(values, source.Info)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Info))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Info
func (fp *VendorConnectionInfo_FieldTerminalPath) GetSingle(source *VendorConnection_Info) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		res := source.GetInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Info))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return (*VendorConnection_Info_PointGrabInfo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) ClearValue(item *VendorConnection_Info) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionInfo_FieldPathSelectorInfo:
			item.Info = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Info))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionInfo_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VendorConnectionInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionInfo_FieldPathValue {
	switch fp.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return &VendorConnectionInfo_FieldTerminalPathValue{VendorConnectionInfo_FieldTerminalPath: *fp, value: value.(*VendorConnection_Info_PointGrabInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionInfo_FieldPathArrayOfValues {
	fpaov := &VendorConnectionInfo_FieldTerminalPathArrayOfValues{VendorConnectionInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return &VendorConnectionInfo_FieldTerminalPathArrayOfValues{VendorConnectionInfo_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Info_PointGrabInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnectionInfo_FieldSubPath struct {
	selector VendorConnectionInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnectionInfo_FieldPath = (*VendorConnectionInfo_FieldSubPath)(nil)

func (fps *VendorConnectionInfo_FieldSubPath) Selector() VendorConnectionInfo_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnectionInfo_FieldSubPath) AsInfoSubPath() (VendorConnectionInfoPointGrabInfo_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionInfoPointGrabInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnectionInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnectionInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection_Info
func (fps *VendorConnectionInfo_FieldSubPath) Get(source *VendorConnection_Info) (values []interface{}) {
	if asPointGrabInfoFieldPath, ok := fps.AsInfoSubPath(); ok {
		values = append(values, asPointGrabInfoFieldPath.Get(source.GetInfo())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fps.selector))
	}
	return
}

func (fps *VendorConnectionInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection_Info))
}

// GetSingle returns value of selected field from source VendorConnection_Info
func (fps *VendorConnectionInfo_FieldSubPath) GetSingle(source *VendorConnection_Info) (interface{}, bool) {
	switch fps.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		if source.GetInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fps.selector))
	}
}

func (fps *VendorConnectionInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection_Info))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnectionInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnectionInfo_FieldSubPath) ClearValue(item *VendorConnection_Info) {
	if item != nil {
		switch fps.selector {
		case VendorConnectionInfo_FieldPathSelectorInfo:
			fps.subPath.ClearValueRaw(item.Info)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fps.selector))
		}
	}
}

func (fps *VendorConnectionInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection_Info))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnectionInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnectionInfo_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnectionInfo_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnectionInfo_FieldSubPath) WithIValue(value interface{}) VendorConnectionInfo_FieldPathValue {
	return &VendorConnectionInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnectionInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnectionInfo_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnectionInfo_FieldPathArrayOfValues {
	return &VendorConnectionInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnectionInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnectionInfo_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnectionInfo_FieldPathArrayItemValue {
	return &VendorConnectionInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnectionInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnectionInfo_FieldPathValue allows storing values for Info fields according to their type
type VendorConnectionInfo_FieldPathValue interface {
	VendorConnectionInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Info)
	CompareWith(*VendorConnection_Info) (cmp int, comparable bool)
}

func ParseVendorConnectionInfo_FieldPathValue(pathStr, valueStr string) (VendorConnectionInfo_FieldPathValue, error) {
	fp, err := ParseVendorConnectionInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Info field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionInfo_FieldPathValue), nil
}

func MustParseVendorConnectionInfo_FieldPathValue(pathStr, valueStr string) VendorConnectionInfo_FieldPathValue {
	fpv, err := ParseVendorConnectionInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionInfo_FieldTerminalPathValue struct {
	VendorConnectionInfo_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfo_FieldPathValue = (*VendorConnectionInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Info' as interface{}
func (fpv *VendorConnectionInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionInfo_FieldTerminalPathValue) AsInfoValue() (*VendorConnection_Info_PointGrabInfo, bool) {
	res, ok := fpv.value.(*VendorConnection_Info_PointGrabInfo)
	return res, ok
}

// SetTo stores value for selected field for object Info
func (fpv *VendorConnectionInfo_FieldTerminalPathValue) SetTo(target **VendorConnection_Info) {
	if *target == nil {
		*target = new(VendorConnection_Info)
	}
	switch fpv.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		(*target).Info = fpv.value.(*VendorConnection_Info_PointGrabInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Info)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionInfo_FieldTerminalPathValue' with the value under path in 'VendorConnection_Info'.
func (fpv *VendorConnectionInfo_FieldTerminalPathValue) CompareWith(source *VendorConnection_Info) (int, bool) {
	switch fpv.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Info))
}

type VendorConnectionInfo_FieldSubPathValue struct {
	VendorConnectionInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnectionInfo_FieldPathValue = (*VendorConnectionInfo_FieldSubPathValue)(nil)

func (fpvs *VendorConnectionInfo_FieldSubPathValue) AsInfoPathValue() (VendorConnectionInfoPointGrabInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionInfoPointGrabInfo_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnectionInfo_FieldSubPathValue) SetTo(target **VendorConnection_Info) {
	if *target == nil {
		*target = new(VendorConnection_Info)
	}
	switch fpvs.Selector() {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		fpvs.subPathValue.(VendorConnectionInfoPointGrabInfo_FieldPathValue).SetTo(&(*target).Info)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Info)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnectionInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnectionInfo_FieldSubPathValue) CompareWith(source *VendorConnection_Info) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return fpvs.subPathValue.(VendorConnectionInfoPointGrabInfo_FieldPathValue).CompareWith(source.GetInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection_Info))
}

// VendorConnectionInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for Info according to their type
// Present only for array (repeated) types.
type VendorConnectionInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionInfo_FieldPath
	ContainsValue(*VendorConnection_Info) bool
}

// ParseVendorConnectionInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionInfo_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Info field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionInfo_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionInfo_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionInfo_FieldTerminalPathArrayItemValue struct {
	VendorConnectionInfo_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfo_FieldPathArrayItemValue = (*VendorConnectionInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Info as interface{}
func (fpaiv *VendorConnectionInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionInfo_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Info) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Info))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Info'
func (fpaiv *VendorConnectionInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Info) bool {
	slice := fpaiv.VendorConnectionInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnectionInfo_FieldSubPathArrayItemValue struct {
	VendorConnectionInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnectionInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnectionInfo_FieldSubPathArrayItemValue) AsInfoPathItemValue() (VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Info'
func (fpaivs *VendorConnectionInfo_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection_Info) bool {
	switch fpaivs.Selector() {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		return fpaivs.subPathItemValue.(VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue).ContainsValue(source.GetInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info: %d", fpaivs.Selector()))
	}
}

// VendorConnectionInfo_FieldPathArrayOfValues allows storing slice of values for Info fields according to their type
type VendorConnectionInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionInfo_FieldPath
}

func ParseVendorConnectionInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Info field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionInfo_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionInfo_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionInfo_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionInfo_FieldTerminalPathArrayOfValues struct {
	VendorConnectionInfo_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionInfo_FieldPathArrayOfValues = (*VendorConnectionInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionInfo_FieldPathSelectorInfo:
		for _, v := range fpaov.values.([]*VendorConnection_Info_PointGrabInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionInfo_FieldTerminalPathArrayOfValues) AsInfoArrayOfValues() ([]*VendorConnection_Info_PointGrabInfo, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Info_PointGrabInfo)
	return res, ok
}

type VendorConnectionInfo_FieldSubPathArrayOfValues struct {
	VendorConnectionInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnectionInfo_FieldPathArrayOfValues = (*VendorConnectionInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnectionInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnectionInfo_FieldSubPathArrayOfValues) AsInfoPathArrayOfValues() (VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionSpecPointGrabSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionSpecPointGrabSpec_FieldPathSelector
	Get(source *VendorConnection_Spec_PointGrabSpec) []interface{}
	GetSingle(source *VendorConnection_Spec_PointGrabSpec) (interface{}, bool)
	ClearValue(item *VendorConnection_Spec_PointGrabSpec)

	// Those methods build corresponding VendorConnectionSpecPointGrabSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue
}

type VendorConnectionSpecPointGrabSpec_FieldPathSelector int32

const (
	VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint     VendorConnectionSpecPointGrabSpec_FieldPathSelector = 0
	VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth         VendorConnectionSpecPointGrabSpec_FieldPathSelector = 1
	VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec VendorConnectionSpecPointGrabSpec_FieldPathSelector = 2
)

func (s VendorConnectionSpecPointGrabSpec_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		return "endpoint"
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return "auth"
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return "callback_spec"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", s))
	}
}

func BuildVendorConnectionSpecPointGrabSpec_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionSpecPointGrabSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Spec_PointGrabSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint}, nil
		case "auth":
			return &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth}, nil
		case "callback_spec", "callbackSpec", "callback-spec":
			return &VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec}, nil
		}
	} else {
		switch fp[0] {
		case "auth":
			if subpath, err := BuildVendorConnectionSpecPointGrabSpecAuth_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionSpecPointGrabSpec_FieldSubPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth, subPath: subpath}, nil
			}
		case "callback_spec", "callbackSpec", "callback-spec":
			if subpath, err := BuildVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionSpecPointGrabSpec_FieldSubPath{selector: VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Spec_PointGrabSpec", fp)
}

func ParseVendorConnectionSpecPointGrabSpec_FieldPath(rawField string) (VendorConnectionSpecPointGrabSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionSpecPointGrabSpec_FieldPath(fp)
}

func MustParseVendorConnectionSpecPointGrabSpec_FieldPath(rawField string) VendorConnectionSpecPointGrabSpec_FieldPath {
	fp, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionSpecPointGrabSpec_FieldTerminalPath struct {
	selector VendorConnectionSpecPointGrabSpec_FieldPathSelector
}

var _ VendorConnectionSpecPointGrabSpec_FieldPath = (*VendorConnectionSpecPointGrabSpec_FieldTerminalPath)(nil)

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) Selector() VendorConnectionSpecPointGrabSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Spec_PointGrabSpec
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) Get(source *VendorConnection_Spec_PointGrabSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
			values = append(values, source.Endpoint)
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
			if source.Auth != nil {
				values = append(values, source.Auth)
			}
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
			if source.CallbackSpec != nil {
				values = append(values, source.CallbackSpec)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Spec_PointGrabSpec))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Spec_PointGrabSpec
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		return source.GetEndpoint(), source != nil
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		res := source.GetAuth()
		return res, res != nil
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		res := source.GetCallbackSpec()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		return ""
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return (*VendorConnection_Spec_PointGrabSpec_Auth)(nil)
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return (*VendorConnection_Spec_PointGrabSpec_CallbackSpec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
			item.Endpoint = ""
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
			item.Auth = nil
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
			item.CallbackSpec = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathValue {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, value: value.(*VendorConnection_Spec_PointGrabSpec_Auth)}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, value: value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues {
	fpaov := &VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Spec_PointGrabSpec_Auth)}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return &VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpec_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnectionSpecPointGrabSpec_FieldSubPath struct {
	selector VendorConnectionSpecPointGrabSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnectionSpecPointGrabSpec_FieldPath = (*VendorConnectionSpecPointGrabSpec_FieldSubPath)(nil)

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) Selector() VendorConnectionSpecPointGrabSpec_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) AsAuthSubPath() (VendorConnectionSpecPointGrabSpecAuth_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionSpecPointGrabSpecAuth_FieldPath)
	return res, ok
}
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) AsCallbackSpecSubPath() (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection_Spec_PointGrabSpec
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) Get(source *VendorConnection_Spec_PointGrabSpec) (values []interface{}) {
	if asAuthFieldPath, ok := fps.AsAuthSubPath(); ok {
		values = append(values, asAuthFieldPath.Get(source.GetAuth())...)
	} else if asCallbackSpecFieldPath, ok := fps.AsCallbackSpecSubPath(); ok {
		values = append(values, asCallbackSpecFieldPath.Get(source.GetCallbackSpec())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fps.selector))
	}
	return
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection_Spec_PointGrabSpec))
}

// GetSingle returns value of selected field from source VendorConnection_Spec_PointGrabSpec
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec) (interface{}, bool) {
	switch fps.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		if source.GetAuth() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuth())
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		if source.GetCallbackSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCallbackSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fps.selector))
	}
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec) {
	if item != nil {
		switch fps.selector {
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
			fps.subPath.ClearValueRaw(item.Auth)
		case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
			fps.subPath.ClearValueRaw(item.CallbackSpec)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fps.selector))
		}
	}
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnectionSpecPointGrabSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathValue {
	return &VendorConnectionSpecPointGrabSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues {
	return &VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue {
	return &VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnectionSpecPointGrabSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnectionSpecPointGrabSpec_FieldPathValue allows storing values for PointGrabSpec fields according to their type
type VendorConnectionSpecPointGrabSpec_FieldPathValue interface {
	VendorConnectionSpecPointGrabSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Spec_PointGrabSpec)
	CompareWith(*VendorConnection_Spec_PointGrabSpec) (cmp int, comparable bool)
}

func ParseVendorConnectionSpecPointGrabSpec_FieldPathValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpec_FieldPathValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionSpecPointGrabSpec_FieldPathValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpec_FieldPathValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpec_FieldPathValue {
	fpv, err := ParseVendorConnectionSpecPointGrabSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue struct {
	VendorConnectionSpecPointGrabSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpec_FieldPathValue = (*VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrabSpec' as interface{}
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) AsEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) AsAuthValue() (*VendorConnection_Spec_PointGrabSpec_Auth, bool) {
	res, ok := fpv.value.(*VendorConnection_Spec_PointGrabSpec_Auth)
	return res, ok
}
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) AsCallbackSpecValue() (*VendorConnection_Spec_PointGrabSpec_CallbackSpec, bool) {
	res, ok := fpv.value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	return res, ok
}

// SetTo stores value for selected field for object PointGrabSpec
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec)
	}
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(string)
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		(*target).Auth = fpv.value.(*VendorConnection_Spec_PointGrabSpec_Auth)
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		(*target).CallbackSpec = fpv.value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue' with the value under path in 'VendorConnection_Spec_PointGrabSpec'.
func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec) (int, bool) {
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return 0, false
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec))
}

type VendorConnectionSpecPointGrabSpec_FieldSubPathValue struct {
	VendorConnectionSpecPointGrabSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnectionSpecPointGrabSpec_FieldPathValue = (*VendorConnectionSpecPointGrabSpec_FieldSubPathValue)(nil)

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) AsAuthPathValue() (VendorConnectionSpecPointGrabSpecAuth_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecAuth_FieldPathValue)
	return res, ok
}
func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) AsCallbackSpecPathValue() (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec)
	}
	switch fpvs.Selector() {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecAuth_FieldPathValue).SetTo(&(*target).Auth)
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue).SetTo(&(*target).CallbackSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecAuth_FieldPathValue).CompareWith(source.GetAuth())
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue).CompareWith(source.GetCallbackSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpecPointGrabSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec))
}

// VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrabSpec according to their type
// Present only for array (repeated) types.
type VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionSpecPointGrabSpec_FieldPath
	ContainsValue(*VendorConnection_Spec_PointGrabSpec) bool
}

// ParseVendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpec_FieldPathArrayItemValue = (*VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Spec_PointGrabSpec as interface{}
func (fpaiv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Spec_PointGrabSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabSpec'
func (fpaiv *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec) bool {
	slice := fpaiv.VendorConnectionSpecPointGrabSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue) AsAuthPathItemValue() (VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue) AsCallbackSpecPathItemValue() (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabSpec'
func (fpaivs *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec) bool {
	switch fpaivs.Selector() {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		return fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue).ContainsValue(source.GetAuth())
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		return fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue).ContainsValue(source.GetCallbackSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec: %d", fpaivs.Selector()))
	}
}

// VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues allows storing slice of values for PointGrabSpec fields according to their type
type VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionSpecPointGrabSpec_FieldPath
}

func ParseVendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpec_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorAuth:
		for _, v := range fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_Auth) {
			values = append(values, v)
		}
	case VendorConnectionSpecPointGrabSpec_FieldPathSelectorCallbackSpec:
		for _, v := range fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues) AsAuthArrayOfValues() ([]*VendorConnection_Spec_PointGrabSpec_Auth, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_Auth)
	return res, ok
}
func (fpaov *VendorConnectionSpecPointGrabSpec_FieldTerminalPathArrayOfValues) AsCallbackSpecArrayOfValues() ([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	return res, ok
}

type VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnectionSpecPointGrabSpec_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues) AsAuthPathArrayOfValues() (VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VendorConnectionSpecPointGrabSpec_FieldSubPathArrayOfValues) AsCallbackSpecPathArrayOfValues() (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionSpecPointGrabSpecAuth_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector
	Get(source *VendorConnection_Spec_PointGrabSpec_Auth) []interface{}
	GetSingle(source *VendorConnection_Spec_PointGrabSpec_Auth) (interface{}, bool)
	ClearValue(item *VendorConnection_Spec_PointGrabSpec_Auth)

	// Those methods build corresponding VendorConnectionSpecPointGrabSpecAuth_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue
}

type VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector int32

const (
	VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication   VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector = 0
	VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret        VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector = 1
	VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector = 2
)

func (s VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		return "application"
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		return "secret"
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		return "token_endpoint"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", s))
	}
}

func BuildVendorConnectionSpecPointGrabSpecAuth_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionSpecPointGrabSpecAuth_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Spec_PointGrabSpec_Auth")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "application":
			return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication}, nil
		case "secret":
			return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret}, nil
		case "token_endpoint", "tokenEndpoint", "token-endpoint":
			return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Spec_PointGrabSpec_Auth", fp)
}

func ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(rawField string) (VendorConnectionSpecPointGrabSpecAuth_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionSpecPointGrabSpecAuth_FieldPath(fp)
}

func MustParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(rawField string) VendorConnectionSpecPointGrabSpecAuth_FieldPath {
	fp, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath struct {
	selector VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector
}

var _ VendorConnectionSpecPointGrabSpecAuth_FieldPath = (*VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath)(nil)

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) Selector() VendorConnectionSpecPointGrabSpecAuth_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Spec_PointGrabSpec_Auth
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) Get(source *VendorConnection_Spec_PointGrabSpec_Auth) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
			values = append(values, source.Application)
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
			values = append(values, source.Secret)
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
			values = append(values, source.TokenEndpoint)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Spec_PointGrabSpec_Auth
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec_Auth) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		return source.GetApplication(), source != nil
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		return source.GetSecret(), source != nil
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		return source.GetTokenEndpoint(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		return ""
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		return ""
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec_Auth) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
			item.Application = ""
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
			item.Secret = ""
		case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
			item.TokenEndpoint = ""
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication ||
		fp.selector == VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret ||
		fp.selector == VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathValue {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues {
	fpaov := &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		return &VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VendorConnectionSpecPointGrabSpecAuth_FieldPathValue allows storing values for Auth fields according to their type
type VendorConnectionSpecPointGrabSpecAuth_FieldPathValue interface {
	VendorConnectionSpecPointGrabSpecAuth_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Spec_PointGrabSpec_Auth)
	CompareWith(*VendorConnection_Spec_PointGrabSpec_Auth) (cmp int, comparable bool)
}

func ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecAuth_FieldPathValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionSpecPointGrabSpecAuth_FieldPathValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecAuth_FieldPathValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecAuth_FieldPathValue {
	fpv, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue struct {
	VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecAuth_FieldPathValue = (*VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Auth' as interface{}
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) AsApplicationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) AsSecretValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) AsTokenEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Auth
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec_Auth) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec_Auth)
	}
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		(*target).Application = fpv.value.(string)
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		(*target).Secret = fpv.value.(string)
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		(*target).TokenEndpoint = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec_Auth)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue' with the value under path in 'VendorConnection_Spec_PointGrabSpec_Auth'.
func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec_Auth) (int, bool) {
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		leftValue := fpv.value.(string)
		rightValue := source.GetApplication()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		leftValue := fpv.value.(string)
		rightValue := source.GetSecret()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetTokenEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_Auth: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

// VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue allows storing single item in Path-specific values for Auth according to their type
// Present only for array (repeated) types.
type VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionSpecPointGrabSpecAuth_FieldPath
	ContainsValue(*VendorConnection_Spec_PointGrabSpec_Auth) bool
}

// ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayItemValue = (*VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Spec_PointGrabSpec_Auth as interface{}
func (fpaiv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Spec_PointGrabSpec_Auth) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_Auth))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Auth'
func (fpaiv *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec_Auth) bool {
	slice := fpaiv.VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues allows storing slice of values for Auth fields according to their type
type VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionSpecPointGrabSpecAuth_FieldPath
}

func ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionSpecPointGrabSpecAuth_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorApplication:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorSecret:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnectionSpecPointGrabSpecAuth_FieldPathSelectorTokenEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues) AsApplicationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues) AsSecretArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnectionSpecPointGrabSpecAuth_FieldTerminalPathArrayOfValues) AsTokenEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector
	Get(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) []interface{}
	GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (interface{}, bool)
	ClearValue(item *VendorConnection_Spec_PointGrabSpec_CallbackSpec)

	// Those methods build corresponding VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector int32

const (
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector = 0
)

func (s VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return "auth_token"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", s))
	}
}

func BuildVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Spec_PointGrabSpec_CallbackSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "auth_token", "authToken", "auth-token":
			return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken}, nil
		}
	} else {
		switch fp[0] {
		case "auth_token", "authToken", "auth-token":
			if subpath, err := BuildVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Spec_PointGrabSpec_CallbackSpec", fp)
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(rawField string) (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(fp)
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(rawField string) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath struct {
	selector VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath)(nil)

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) Selector() VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Spec_PointGrabSpec_CallbackSpec
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) Get(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
			if source.AuthToken != nil {
				values = append(values, source.AuthToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Spec_PointGrabSpec_CallbackSpec
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		res := source.GetAuthToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return (*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
			item.AuthToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath: *fp, value: value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues {
	fpaov := &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath: *fp, values: values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath struct {
	selector VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath)(nil)

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) Selector() VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) AsAuthTokenSubPath() (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection_Spec_PointGrabSpec_CallbackSpec
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) Get(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (values []interface{}) {
	if asAuthTokenFieldPath, ok := fps.AsAuthTokenSubPath(); ok {
		values = append(values, asAuthTokenFieldPath.Get(source.GetAuthToken())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fps.selector))
	}
	return
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// GetSingle returns value of selected field from source VendorConnection_Spec_PointGrabSpec_CallbackSpec
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (interface{}, bool) {
	switch fps.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		if source.GetAuthToken() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuthToken())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fps.selector))
	}
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
	if item != nil {
		switch fps.selector {
		case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
			fps.subPath.ClearValueRaw(item.AuthToken)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fps.selector))
		}
	}
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue {
	return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues {
	return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue {
	return &VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue allows storing values for CallbackSpec fields according to their type
type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue interface {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	CompareWith(*VendorConnection_Spec_PointGrabSpec_CallbackSpec) (cmp int, comparable bool)
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CallbackSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue {
	fpv, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CallbackSpec' as interface{}
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) AsAuthTokenValue() (*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken, bool) {
	res, ok := fpv.value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	return res, ok
}

// SetTo stores value for selected field for object CallbackSpec
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	}
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		(*target).AuthToken = fpv.value.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue' with the value under path in 'VendorConnection_Spec_PointGrabSpec_CallbackSpec'.
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (int, bool) {
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathValue = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue)(nil)

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) AsAuthTokenPathValue() (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec_CallbackSpec) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	}
	switch fpvs.Selector() {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue).SetTo(&(*target).AuthToken)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return fpvs.subPathValue.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue).CompareWith(source.GetAuthToken())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for CallbackSpec according to their type
// Present only for array (repeated) types.
type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
	ContainsValue(*VendorConnection_Spec_PointGrabSpec_CallbackSpec) bool
}

// ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CallbackSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayItemValue = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Spec_PointGrabSpec_CallbackSpec as interface{}
func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CallbackSpec'
func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) bool {
	slice := fpaiv.VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayItemValue) AsAuthTokenPathItemValue() (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CallbackSpec'
func (fpaivs *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec) bool {
	switch fpaivs.Selector() {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		return fpaivs.subPathItemValue.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue).ContainsValue(source.GetAuthToken())
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec: %d", fpaivs.Selector()))
	}
}

// VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues allows storing slice of values for CallbackSpec fields according to their type
type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CallbackSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathSelectorAuthToken:
		for _, v := range fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldTerminalPathArrayOfValues) AsAuthTokenArrayOfValues() ([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken, bool) {
	res, ok := fpaov.values.([]*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	return res, ok
}

type VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpec_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnectionSpecPointGrabSpecCallbackSpec_FieldSubPathArrayOfValues) AsAuthTokenPathArrayOfValues() (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector
	Get(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) []interface{}
	GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (interface{}, bool)
	ClearValue(item *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)

	// Those methods build corresponding VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue
}

type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector int32

const (
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector = 0
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue  VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector = 1
)

func (s VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		return "token_header"
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		return "token_value"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", s))
	}
}

func BuildVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "token_header", "tokenHeader", "token-header":
			return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader}, nil
		case "token_value", "tokenValue", "token-value":
			return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath{selector: VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken", fp)
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(rawField string) (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(fp)
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(rawField string) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath struct {
	selector VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath = (*VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath)(nil)

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) Selector() VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) Get(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
			values = append(values, source.TokenHeader)
		case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
			values = append(values, source.TokenValue)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		return source.GetTokenHeader(), source != nil
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		return source.GetTokenValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		return ""
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) ClearValue(item *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
			item.TokenHeader = ""
		case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
			item.TokenValue = ""
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader ||
		fp.selector == VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue {
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue{VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues {
	fpaov := &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		return &VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues{VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fp.selector))
	}
}

func (fp *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue allows storing values for AuthToken fields according to their type
type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue interface {
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	CompareWith(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (cmp int, comparable bool)
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthToken field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue {
	fpv, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathValue = (*VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AuthToken' as interface{}
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) AsTokenHeaderValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) AsTokenValueValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AuthToken
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) SetTo(target **VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) {
	if *target == nil {
		*target = new(VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	}
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		(*target).TokenHeader = fpv.value.(string)
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		(*target).TokenValue = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue' with the value under path in 'VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken'.
func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) CompareWith(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (int, bool) {
	switch fpv.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		leftValue := fpv.value.(string)
		rightValue := source.GetTokenHeader()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		leftValue := fpv.value.(string)
		rightValue := source.GetTokenValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

// VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue allows storing single item in Path-specific values for AuthToken according to their type
// Present only for array (repeated) types.
type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath
	ContainsValue(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) bool
}

// ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthToken field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue struct {
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayItemValue = (*VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken as interface{}
func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AuthToken'
func (fpaiv *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Spec_PointGrabSpec_CallbackSpec_AuthToken) bool {
	slice := fpaiv.VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues allows storing slice of values for AuthToken fields according to their type
type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath
}

func ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthToken field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues struct {
	VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathArrayOfValues = (*VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenHeader:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldPathSelectorTokenValue:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues) AsTokenHeaderArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnectionSpecPointGrabSpecCallbackSpecAuthToken_FieldTerminalPathArrayOfValues) AsTokenValueArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionInfoPointGrabInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionInfoPointGrabInfo_FieldPathSelector
	Get(source *VendorConnection_Info_PointGrabInfo) []interface{}
	GetSingle(source *VendorConnection_Info_PointGrabInfo) (interface{}, bool)
	ClearValue(item *VendorConnection_Info_PointGrabInfo)

	// Those methods build corresponding VendorConnectionInfoPointGrabInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue
}

type VendorConnectionInfoPointGrabInfo_FieldPathSelector int32

const (
	VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions VendorConnectionInfoPointGrabInfo_FieldPathSelector = 0
)

func (s VendorConnectionInfoPointGrabInfo_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return "telemetry_subscriptions"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", s))
	}
}

func BuildVendorConnectionInfoPointGrabInfo_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionInfoPointGrabInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Info_PointGrabInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "telemetry_subscriptions", "telemetrySubscriptions", "telemetry-subscriptions":
			return &VendorConnectionInfoPointGrabInfo_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions}, nil
		}
	} else {
		switch fp[0] {
		case "telemetry_subscriptions", "telemetrySubscriptions", "telemetry-subscriptions":
			if subpath, err := BuildVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VendorConnectionInfoPointGrabInfo_FieldSubPath{selector: VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Info_PointGrabInfo", fp)
}

func ParseVendorConnectionInfoPointGrabInfo_FieldPath(rawField string) (VendorConnectionInfoPointGrabInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionInfoPointGrabInfo_FieldPath(fp)
}

func MustParseVendorConnectionInfoPointGrabInfo_FieldPath(rawField string) VendorConnectionInfoPointGrabInfo_FieldPath {
	fp, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionInfoPointGrabInfo_FieldTerminalPath struct {
	selector VendorConnectionInfoPointGrabInfo_FieldPathSelector
}

var _ VendorConnectionInfoPointGrabInfo_FieldPath = (*VendorConnectionInfoPointGrabInfo_FieldTerminalPath)(nil)

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) Selector() VendorConnectionInfoPointGrabInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Info_PointGrabInfo
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) Get(source *VendorConnection_Info_PointGrabInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
			for _, value := range source.GetTelemetrySubscriptions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Info_PointGrabInfo))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Info_PointGrabInfo
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) GetSingle(source *VendorConnection_Info_PointGrabInfo) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		res := source.GetTelemetrySubscriptions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Info_PointGrabInfo))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return ([]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) ClearValue(item *VendorConnection_Info_PointGrabInfo) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
			item.TelemetrySubscriptions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Info_PointGrabInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathValue {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return &VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue{VendorConnectionInfoPointGrabInfo_FieldTerminalPath: *fp, value: value.([]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues {
	fpaov := &VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues{VendorConnectionInfoPointGrabInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return &VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues{VendorConnectionInfoPointGrabInfo_FieldTerminalPath: *fp, values: values.([][]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return &VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue{VendorConnectionInfoPointGrabInfo_FieldTerminalPath: *fp, value: value.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VendorConnectionInfoPointGrabInfo_FieldSubPath struct {
	selector VendorConnectionInfoPointGrabInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VendorConnectionInfoPointGrabInfo_FieldPath = (*VendorConnectionInfoPointGrabInfo_FieldSubPath)(nil)

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) Selector() VendorConnectionInfoPointGrabInfo_FieldPathSelector {
	return fps.selector
}
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) AsTelemetrySubscriptionsSubPath() (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath, bool) {
	res, ok := fps.subPath.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VendorConnection_Info_PointGrabInfo
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) Get(source *VendorConnection_Info_PointGrabInfo) (values []interface{}) {
	if asTelemetrySubscriptionFieldPath, ok := fps.AsTelemetrySubscriptionsSubPath(); ok {
		for _, item := range source.GetTelemetrySubscriptions() {
			values = append(values, asTelemetrySubscriptionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fps.selector))
	}
	return
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VendorConnection_Info_PointGrabInfo))
}

// GetSingle returns value of selected field from source VendorConnection_Info_PointGrabInfo
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) GetSingle(source *VendorConnection_Info_PointGrabInfo) (interface{}, bool) {
	switch fps.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		if len(source.GetTelemetrySubscriptions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTelemetrySubscriptions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fps.selector))
	}
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VendorConnection_Info_PointGrabInfo))
}

// GetDefault returns a default value of the field type
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) ClearValue(item *VendorConnection_Info_PointGrabInfo) {
	if item != nil {
		switch fps.selector {
		case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
			for _, subItem := range item.TelemetrySubscriptions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fps.selector))
		}
	}
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VendorConnection_Info_PointGrabInfo))
}

// IsLeaf - whether field path is holds simple value
func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VendorConnectionInfoPointGrabInfo_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithIValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathValue {
	return &VendorConnectionInfoPointGrabInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithIArrayOfValues(values interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues {
	return &VendorConnectionInfoPointGrabInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithIArrayItemValue(value interface{}) VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue {
	return &VendorConnectionInfoPointGrabInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VendorConnectionInfoPointGrabInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VendorConnectionInfoPointGrabInfo_FieldPathValue allows storing values for PointGrabInfo fields according to their type
type VendorConnectionInfoPointGrabInfo_FieldPathValue interface {
	VendorConnectionInfoPointGrabInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Info_PointGrabInfo)
	CompareWith(*VendorConnection_Info_PointGrabInfo) (cmp int, comparable bool)
}

func ParseVendorConnectionInfoPointGrabInfo_FieldPathValue(pathStr, valueStr string) (VendorConnectionInfoPointGrabInfo_FieldPathValue, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionInfoPointGrabInfo_FieldPathValue), nil
}

func MustParseVendorConnectionInfoPointGrabInfo_FieldPathValue(pathStr, valueStr string) VendorConnectionInfoPointGrabInfo_FieldPathValue {
	fpv, err := ParseVendorConnectionInfoPointGrabInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue struct {
	VendorConnectionInfoPointGrabInfo_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfoPointGrabInfo_FieldPathValue = (*VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PointGrabInfo' as interface{}
func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) AsTelemetrySubscriptionsValue() ([]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription, bool) {
	res, ok := fpv.value.([]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	return res, ok
}

// SetTo stores value for selected field for object PointGrabInfo
func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) SetTo(target **VendorConnection_Info_PointGrabInfo) {
	if *target == nil {
		*target = new(VendorConnection_Info_PointGrabInfo)
	}
	switch fpv.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		(*target).TelemetrySubscriptions = fpv.value.([]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Info_PointGrabInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue' with the value under path in 'VendorConnection_Info_PointGrabInfo'.
func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) CompareWith(source *VendorConnection_Info_PointGrabInfo) (int, bool) {
	switch fpv.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Info_PointGrabInfo))
}

type VendorConnectionInfoPointGrabInfo_FieldSubPathValue struct {
	VendorConnectionInfoPointGrabInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VendorConnectionInfoPointGrabInfo_FieldPathValue = (*VendorConnectionInfoPointGrabInfo_FieldSubPathValue)(nil)

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) AsTelemetrySubscriptionsPathValue() (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue)
	return res, ok
}

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) SetTo(target **VendorConnection_Info_PointGrabInfo) {
	if *target == nil {
		*target = new(VendorConnection_Info_PointGrabInfo)
	}
	switch fpvs.Selector() {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Info_PointGrabInfo)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) CompareWith(source *VendorConnection_Info_PointGrabInfo) (int, bool) {
	switch fpvs.Selector() {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *VendorConnectionInfoPointGrabInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VendorConnection_Info_PointGrabInfo))
}

// VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for PointGrabInfo according to their type
// Present only for array (repeated) types.
type VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionInfoPointGrabInfo_FieldPath
	ContainsValue(*VendorConnection_Info_PointGrabInfo) bool
}

// ParseVendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue struct {
	VendorConnectionInfoPointGrabInfo_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfoPointGrabInfo_FieldPathArrayItemValue = (*VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Info_PointGrabInfo as interface{}
func (fpaiv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue) AsTelemetrySubscriptionsItemValue() (*VendorConnection_Info_PointGrabInfo_TelemetrySubscription, bool) {
	res, ok := fpaiv.value.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	return res, ok
}

func (fpaiv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Info_PointGrabInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Info_PointGrabInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabInfo'
func (fpaiv *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Info_PointGrabInfo) bool {
	slice := fpaiv.VendorConnectionInfoPointGrabInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VendorConnectionInfoPointGrabInfo_FieldSubPathArrayItemValue struct {
	VendorConnectionInfoPointGrabInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VendorConnectionInfoPointGrabInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VendorConnectionInfoPointGrabInfo_FieldSubPathArrayItemValue) AsTelemetrySubscriptionsPathItemValue() (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PointGrabInfo'
func (fpaivs *VendorConnectionInfoPointGrabInfo_FieldSubPathArrayItemValue) ContainsValue(source *VendorConnection_Info_PointGrabInfo) bool {
	switch fpaivs.Selector() {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo: %d", fpaivs.Selector()))
	}
}

// VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues allows storing slice of values for PointGrabInfo fields according to their type
type VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionInfoPointGrabInfo_FieldPath
}

func ParseVendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PointGrabInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues struct {
	VendorConnectionInfoPointGrabInfo_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues = (*VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionInfoPointGrabInfo_FieldPathSelectorTelemetrySubscriptions:
		for _, v := range fpaov.values.([][]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionInfoPointGrabInfo_FieldTerminalPathArrayOfValues) AsTelemetrySubscriptionsArrayOfValues() ([][]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription, bool) {
	res, ok := fpaov.values.([][]*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	return res, ok
}

type VendorConnectionInfoPointGrabInfo_FieldSubPathArrayOfValues struct {
	VendorConnectionInfoPointGrabInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VendorConnectionInfoPointGrabInfo_FieldPathArrayOfValues = (*VendorConnectionInfoPointGrabInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VendorConnectionInfoPointGrabInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VendorConnectionInfoPointGrabInfo_FieldSubPathArrayOfValues) AsTelemetrySubscriptionsPathArrayOfValues() (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath interface {
	gotenobject.FieldPath
	Selector() VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector
	Get(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) []interface{}
	GetSingle(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (interface{}, bool)
	ClearValue(item *VendorConnection_Info_PointGrabInfo_TelemetrySubscription)

	// Those methods build corresponding VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue
	WithIArrayOfValues(values interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue
}

type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector int32

const (
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId   VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector = 0
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector = 1
)

func (s VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector) String() string {
	switch s {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		return "subscription_id"
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		return "notification_type"
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", s))
	}
}

func BuildVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(fp gotenobject.RawFieldPath) (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VendorConnection_Info_PointGrabInfo_TelemetrySubscription")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "subscription_id", "subscriptionId", "subscription-id":
			return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId}, nil
		case "notification_type", "notificationType", "notification-type":
			return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath{selector: VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VendorConnection_Info_PointGrabInfo_TelemetrySubscription", fp)
}

func ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(rawField string) (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(fp)
}

func MustParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(rawField string) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath {
	fp, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath struct {
	selector VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector
}

var _ VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath = (*VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath)(nil)

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) Selector() VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VendorConnection_Info_PointGrabInfo_TelemetrySubscription
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) Get(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
			values = append(values, source.SubscriptionId)
		case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
			values = append(values, source.NotificationType)
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
		}
	}
	return
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

// GetSingle returns value pointed by specific field of from source VendorConnection_Info_PointGrabInfo_TelemetrySubscription
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) GetSingle(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (interface{}, bool) {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		return source.GetSubscriptionId(), source != nil
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		return source.GetNotificationType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

// GetDefault returns a default value of the field type
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		return ""
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		return VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NOTIFICATION_TYPE_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) ClearValue(item *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) {
	if item != nil {
		switch fp.selector {
		case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
			item.SubscriptionId = ""
		case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
			item.NotificationType = VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NOTIFICATION_TYPE_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
		}
	}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

// IsLeaf - whether field path is holds simple value
func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId ||
		fp.selector == VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithIValue(value interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue {
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue{VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath: *fp, value: value.(string)}
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue{VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath: *fp, value: value.(VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithIArrayOfValues(values interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues {
	fpaov := &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues{VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath: *fp}
	switch fp.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues{VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath: *fp, values: values.([]string)}
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		return &VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues{VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath: *fp, values: values.([]VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
	}
	return fpaov
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithIArrayItemValue(value interface{}) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fp.selector))
	}
}

func (fp *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue allows storing values for TelemetrySubscription fields according to their type
type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue interface {
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	CompareWith(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (cmp int, comparable bool)
}

func ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue(pathStr, valueStr string) (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TelemetrySubscription field path value from %s: %v", valueStr, err)
	}
	return fpv.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue), nil
}

func MustParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue(pathStr, valueStr string) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue {
	fpv, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue struct {
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathValue = (*VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TelemetrySubscription' as interface{}
func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) AsSubscriptionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) AsNotificationTypeValue() (VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType, bool) {
	res, ok := fpv.value.(VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)
	return res, ok
}

// SetTo stores value for selected field for object TelemetrySubscription
func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) SetTo(target **VendorConnection_Info_PointGrabInfo_TelemetrySubscription) {
	if *target == nil {
		*target = new(VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	}
	switch fpv.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		(*target).SubscriptionId = fpv.value.(string)
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		(*target).NotificationType = fpv.value.(VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue' with the value under path in 'VendorConnection_Info_PointGrabInfo_TelemetrySubscription'.
func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) CompareWith(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (int, bool) {
	switch fpv.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetSubscriptionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		leftValue := fpv.value.(VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)
		rightValue := source.GetNotificationType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VendorConnection_Info_PointGrabInfo_TelemetrySubscription: %d", fpv.selector))
	}
}

func (fpv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

// VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue allows storing single item in Path-specific values for TelemetrySubscription according to their type
// Present only for array (repeated) types.
type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath
	ContainsValue(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription) bool
}

// ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue(pathStr, valueStr string) (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TelemetrySubscription field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue), nil
}

func MustParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue(pathStr, valueStr string) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue {
	fpaiv, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue struct {
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath
	value interface{}
}

var _ VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayItemValue = (*VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VendorConnection_Info_PointGrabInfo_TelemetrySubscription as interface{}
func (fpaiv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue) GetSingle(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VendorConnection_Info_PointGrabInfo_TelemetrySubscription))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TelemetrySubscription'
func (fpaiv *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayItemValue) ContainsValue(source *VendorConnection_Info_PointGrabInfo_TelemetrySubscription) bool {
	slice := fpaiv.VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues allows storing slice of values for TelemetrySubscription fields according to their type
type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath
}

func ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues(pathStr, valuesStr string) (VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues, error) {
	fp, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TelemetrySubscription field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues), nil
}

func MustParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues(pathStr, valuesStr string) VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues {
	fpaov, err := ParseVendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues struct {
	VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPath
	values interface{}
}

var _ VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathArrayOfValues = (*VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorSubscriptionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldPathSelectorNotificationType:
		for _, v := range fpaov.values.([]VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues) AsSubscriptionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VendorConnectionInfoPointGrabInfoTelemetrySubscription_FieldTerminalPathArrayOfValues) AsNotificationTypeArrayOfValues() ([]VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType, bool) {
	res, ok := fpaov.values.([]VendorConnection_Info_PointGrabInfo_TelemetrySubscription_NotificationType)
	return res, ok
}
