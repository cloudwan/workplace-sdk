// Code generated by protoc-gen-goten-go
// File: workplace/proto/v1alpha2/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
	_ = &agent.Agent{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device_Type int32

const (
	Device_TYPE_UNSPECIFIED Device_Type = 0
	//    EDGELQ_DEVICE = 1;
	Device_HVAC              Device_Type = 2
	Device_RIPTIDE_HUB       Device_Type = 3
	Device_WEATHER           Device_Type = 4
	Device_PM25_SENSOR       Device_Type = 5
	Device_POINT_GRAB_SENSOR Device_Type = 32
)

var (
	Device_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		2:  "HVAC",
		3:  "RIPTIDE_HUB",
		4:  "WEATHER",
		5:  "PM25_SENSOR",
		32: "POINT_GRAB_SENSOR",
	}

	Device_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"HVAC":              2,
		"RIPTIDE_HUB":       3,
		"WEATHER":           4,
		"PM25_SENSOR":       5,
		"POINT_GRAB_SENSOR": 32,
	}
)

func (x Device_Type) Enum() *Device_Type {
	p := new(Device_Type)
	*p = x
	return p
}

func (x Device_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Type) Descriptor() preflect.EnumDescriptor {
	return workplace_proto_v1alpha2_device_proto_enumTypes[0].Descriptor()
}

func (Device_Type) Type() preflect.EnumType {
	return &workplace_proto_v1alpha2_device_proto_enumTypes[0]
}

func (x Device_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Type.ProtoReflect.Descriptor instead.
func (Device_Type) EnumDescriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0}
}

type Device_State_Connection_ConnectionStatus int32

const (
	Device_State_Connection_CONNECTION_STATUS_UNSPECIFIED Device_State_Connection_ConnectionStatus = 0
	Device_State_Connection_ONLINE                        Device_State_Connection_ConnectionStatus = 1
	Device_State_Connection_OFFLINE                       Device_State_Connection_ConnectionStatus = 2
)

var (
	Device_State_Connection_ConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "ONLINE",
		2: "OFFLINE",
	}

	Device_State_Connection_ConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"ONLINE":                        1,
		"OFFLINE":                       2,
	}
)

func (x Device_State_Connection_ConnectionStatus) Enum() *Device_State_Connection_ConnectionStatus {
	p := new(Device_State_Connection_ConnectionStatus)
	*p = x
	return p
}

func (x Device_State_Connection_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_State_Connection_ConnectionStatus) Descriptor() preflect.EnumDescriptor {
	return workplace_proto_v1alpha2_device_proto_enumTypes[1].Descriptor()
}

func (Device_State_Connection_ConnectionStatus) Type() preflect.EnumType {
	return &workplace_proto_v1alpha2_device_proto_enumTypes[1]
}

func (x Device_State_Connection_ConnectionStatus) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_State_Connection_ConnectionStatus.ProtoReflect.Descriptor instead.
func (Device_State_Connection_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

// Device Resource
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Device
	Name        *Name       `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	DisplayName string      `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	Type        Device_Type `protobuf:"varint,3,opt,name=type,proto3,enum=ntt.workplace.v1alpha2.Device_Type" json:"type,omitempty" firestore:"type"`
	// Site geometry
	Geometry *workplace_common.Geometry `protobuf:"bytes,4,opt,name=geometry,proto3" json:"geometry,omitempty" firestore:"geometry"`
	// Owner agent
	OwnerAgent *agent.Reference `protobuf:"bytes,5,opt,customtype=Reference,name=owner_agent,json=ownerAgent,proto3" json:"owner_agent,omitempty" firestore:"ownerAgent"`
	// Site Placement
	SitePlacement *Device_SitePlacement `protobuf:"bytes,6,opt,name=site_placement,json=sitePlacement,proto3" json:"site_placement,omitempty" firestore:"sitePlacement"`
	// Vendor info
	VendorInfo *Device_VendorInfo `protobuf:"bytes,7,opt,name=vendor_info,json=vendorInfo,proto3" json:"vendor_info,omitempty" firestore:"vendorInfo"`
	// State
	State    *Device_State  `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
	Metadata *ntt_meta.Meta `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *Device) Reset() {
	*m = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device) ProtoMessage() {}

func (m *Device) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device) GotenMessage() {}

// Deprecated, Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0}
}

func (m *Device) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Device) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Device) GetType() Device_Type {
	if m != nil {
		return m.Type
	}
	return Device_TYPE_UNSPECIFIED
}

func (m *Device) GetGeometry() *workplace_common.Geometry {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *Device) GetOwnerAgent() *agent.Reference {
	if m != nil {
		return m.OwnerAgent
	}
	return nil
}

func (m *Device) GetSitePlacement() *Device_SitePlacement {
	if m != nil {
		return m.SitePlacement
	}
	return nil
}

func (m *Device) GetVendorInfo() *Device_VendorInfo {
	if m != nil {
		return m.VendorInfo
	}
	return nil
}

func (m *Device) GetState() *Device_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Device) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Device) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device"))
	}
	m.Name = fv
}

func (m *Device) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Device"))
	}
	m.DisplayName = fv
}

func (m *Device) SetType(fv Device_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device"))
	}
	m.Type = fv
}

func (m *Device) SetGeometry(fv *workplace_common.Geometry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Geometry", "Device"))
	}
	m.Geometry = fv
}

func (m *Device) SetOwnerAgent(fv *agent.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwnerAgent", "Device"))
	}
	m.OwnerAgent = fv
}

func (m *Device) SetSitePlacement(fv *Device_SitePlacement) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SitePlacement", "Device"))
	}
	m.SitePlacement = fv
}

func (m *Device) SetVendorInfo(fv *Device_VendorInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VendorInfo", "Device"))
	}
	m.VendorInfo = fv
}

func (m *Device) SetState(fv *Device_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Device"))
	}
	m.State = fv
}

func (m *Device) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Device"))
	}
	m.Metadata = fv
}

// SitePlacement describes hierarchy of where Device is placed in Site.
// It may specify only some of those fields
type Device_SitePlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Site references a site
	Site *site.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=site,proto3" json:"site,omitempty" firestore:"site"`
	// Building in which the device is placed.
	Building *building.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=building,proto3" json:"building,omitempty" firestore:"building"`
	// Floor on which the device is placed.
	Floor *floor.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=floor,proto3" json:"floor,omitempty" firestore:"floor"`
	// area, e.g. room, commonlpace where the device is placed.
	Area *area.Reference `protobuf:"bytes,4,opt,customtype=Reference,name=area,proto3" json:"area,omitempty" firestore:"area"`
	// area, e.g. room, commonlpace where the device is placed.
	Zone *zone.Reference `protobuf:"bytes,5,opt,customtype=Reference,name=zone,proto3" json:"zone,omitempty" firestore:"zone"`
}

func (m *Device_SitePlacement) Reset() {
	*m = Device_SitePlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_SitePlacement) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_SitePlacement) ProtoMessage() {}

func (m *Device_SitePlacement) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_SitePlacement) GotenMessage() {}

// Deprecated, Use Device_SitePlacement.ProtoReflect.Descriptor instead.
func (*Device_SitePlacement) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Device_SitePlacement) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_SitePlacement) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_SitePlacement) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_SitePlacement) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_SitePlacement) GetSite() *site.Reference {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *Device_SitePlacement) GetBuilding() *building.Reference {
	if m != nil {
		return m.Building
	}
	return nil
}

func (m *Device_SitePlacement) GetFloor() *floor.Reference {
	if m != nil {
		return m.Floor
	}
	return nil
}

func (m *Device_SitePlacement) GetArea() *area.Reference {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *Device_SitePlacement) GetZone() *zone.Reference {
	if m != nil {
		return m.Zone
	}
	return nil
}

func (m *Device_SitePlacement) SetSite(fv *site.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Site", "Device_SitePlacement"))
	}
	m.Site = fv
}

func (m *Device_SitePlacement) SetBuilding(fv *building.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Building", "Device_SitePlacement"))
	}
	m.Building = fv
}

func (m *Device_SitePlacement) SetFloor(fv *floor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Floor", "Device_SitePlacement"))
	}
	m.Floor = fv
}

func (m *Device_SitePlacement) SetArea(fv *area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Area", "Device_SitePlacement"))
	}
	m.Area = fv
}

func (m *Device_SitePlacement) SetZone(fv *zone.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Zone", "Device_SitePlacement"))
	}
	m.Zone = fv
}

type Device_VendorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Vendor
	Vendor workplace_common.Vendor `protobuf:"varint,8,opt,name=vendor,proto3,enum=ntt.workplace.v1alpha2.Vendor" json:"vendor,omitempty" firestore:"vendor"`
	// Bacnet Entity descriptor
	Bacnet    *workplace_common.BACNetEntity   `protobuf:"bytes,1,opt,name=bacnet,proto3" json:"bacnet,omitempty" firestore:"bacnet"`
	PointGrab *Device_VendorInfo_PointGrabInfo `protobuf:"bytes,2,opt,name=point_grab,json=pointGrab,proto3" json:"point_grab,omitempty" firestore:"pointGrab"`
}

func (m *Device_VendorInfo) Reset() {
	*m = Device_VendorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_VendorInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_VendorInfo) ProtoMessage() {}

func (m *Device_VendorInfo) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_VendorInfo) GotenMessage() {}

// Deprecated, Use Device_VendorInfo.ProtoReflect.Descriptor instead.
func (*Device_VendorInfo) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Device_VendorInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_VendorInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_VendorInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_VendorInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_VendorInfo) GetVendor() workplace_common.Vendor {
	if m != nil {
		return m.Vendor
	}
	return workplace_common.Vendor_VENDOR_UNSPECIFIED
}

func (m *Device_VendorInfo) GetBacnet() *workplace_common.BACNetEntity {
	if m != nil {
		return m.Bacnet
	}
	return nil
}

func (m *Device_VendorInfo) GetPointGrab() *Device_VendorInfo_PointGrabInfo {
	if m != nil {
		return m.PointGrab
	}
	return nil
}

func (m *Device_VendorInfo) SetVendor(fv workplace_common.Vendor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_VendorInfo"))
	}
	m.Vendor = fv
}

func (m *Device_VendorInfo) SetBacnet(fv *workplace_common.BACNetEntity) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bacnet", "Device_VendorInfo"))
	}
	m.Bacnet = fv
}

func (m *Device_VendorInfo) SetPointGrab(fv *Device_VendorInfo_PointGrabInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointGrab", "Device_VendorInfo"))
	}
	m.PointGrab = fv
}

type Device_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Connection state
	Connection *Device_State_Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty" firestore:"connection"`
}

func (m *Device_State) Reset() {
	*m = Device_State{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_State) ProtoMessage() {}

func (m *Device_State) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_State) GotenMessage() {}

// Deprecated, Use Device_State.ProtoReflect.Descriptor instead.
func (*Device_State) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Device_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_State) GetConnection() *Device_State_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Device_State) SetConnection(fv *Device_State_Connection) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Connection", "Device_State"))
	}
	m.Connection = fv
}

// PointGrab Device description
type Device_VendorInfo_PointGrabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Device Id in PointGrab
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" firestore:"deviceId"`
	// Device rotation in degrees. Note that this value isn't the same as one
	// in PointGrab. It translates PointGrab data and orients 0 as North.
	Rotation float64 `protobuf:"fixed64,2,opt,name=rotation,proto3" json:"rotation,omitempty" firestore:"rotation"`
}

func (m *Device_VendorInfo_PointGrabInfo) Reset() {
	*m = Device_VendorInfo_PointGrabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_VendorInfo_PointGrabInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_VendorInfo_PointGrabInfo) ProtoMessage() {}

func (m *Device_VendorInfo_PointGrabInfo) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_VendorInfo_PointGrabInfo) GotenMessage() {}

// Deprecated, Use Device_VendorInfo_PointGrabInfo.ProtoReflect.Descriptor instead.
func (*Device_VendorInfo_PointGrabInfo) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Device_VendorInfo_PointGrabInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_VendorInfo_PointGrabInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_VendorInfo_PointGrabInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_VendorInfo_PointGrabInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_VendorInfo_PointGrabInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Device_VendorInfo_PointGrabInfo) GetRotation() float64 {
	if m != nil {
		return m.Rotation
	}
	return float64(0)
}

func (m *Device_VendorInfo_PointGrabInfo) SetDeviceId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceId", "Device_VendorInfo_PointGrabInfo"))
	}
	m.DeviceId = fv
}

func (m *Device_VendorInfo_PointGrabInfo) SetRotation(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rotation", "Device_VendorInfo_PointGrabInfo"))
	}
	m.Rotation = fv
}

type Device_State_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Connection status
	Status Device_State_Connection_ConnectionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ntt.workplace.v1alpha2.Device_State_Connection_ConnectionStatus" json:"status,omitempty" firestore:"status"`
	// Last connection status change
	StatusSince *timestamp.Timestamp `protobuf:"bytes,2,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty" firestore:"statusSince"`
}

func (m *Device_State_Connection) Reset() {
	*m = Device_State_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &workplace_proto_v1alpha2_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_State_Connection) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_State_Connection) ProtoMessage() {}

func (m *Device_State_Connection) ProtoReflect() preflect.Message {
	mi := &workplace_proto_v1alpha2_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_State_Connection) GotenMessage() {}

// Deprecated, Use Device_State_Connection.ProtoReflect.Descriptor instead.
func (*Device_State_Connection) Descriptor() ([]byte, []int) {
	return workplace_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Device_State_Connection) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_State_Connection) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_State_Connection) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_State_Connection) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_State_Connection) GetStatus() Device_State_Connection_ConnectionStatus {
	if m != nil {
		return m.Status
	}
	return Device_State_Connection_CONNECTION_STATUS_UNSPECIFIED
}

func (m *Device_State_Connection) GetStatusSince() *timestamp.Timestamp {
	if m != nil {
		return m.StatusSince
	}
	return nil
}

func (m *Device_State_Connection) SetStatus(fv Device_State_Connection_ConnectionStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_State_Connection"))
	}
	m.Status = fv
}

func (m *Device_State_Connection) SetStatusSince(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StatusSince", "Device_State_Connection"))
	}
	m.StatusSince = fv
}

var workplace_proto_v1alpha2_device_proto preflect.FileDescriptor

var workplace_proto_v1alpha2_device_proto_rawDesc = []byte{
	0x0a, 0x25, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x0d, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x69, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd2, 0x01, 0x0a,
	0x0d, 0x53, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda,
	0x21, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x10, 0x02, 0x52, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x10, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x72, 0x65, 0x61, 0x10, 0x02, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x22, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x1a, 0xa4, 0x02, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x42, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x1a, 0x48,
	0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd0, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xf5, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x6c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x56, 0x41,
	0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49, 0x50, 0x54, 0x49, 0x44, 0x45, 0x5f, 0x48,
	0x55, 0x42, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4d, 0x32, 0x35, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x42,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x20, 0x3a, 0xf4, 0x01, 0xea, 0x41, 0x60, 0x0a,
	0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x7d, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x92,
	0xd9, 0x21, 0x1e, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c,
	0x5f, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x08, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x9e, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x43, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xd2, 0x84, 0xd1,
	0x02, 0x45, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xf2, 0x85, 0xd1, 0x02, 0x4b, 0x0a, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x62,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x80, 0xd1, 0x02, 0x45, 0x0a, 0x0d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	workplace_proto_v1alpha2_device_proto_rawDescOnce sync.Once
	workplace_proto_v1alpha2_device_proto_rawDescData = workplace_proto_v1alpha2_device_proto_rawDesc
)

func workplace_proto_v1alpha2_device_proto_rawDescGZIP() []byte {
	workplace_proto_v1alpha2_device_proto_rawDescOnce.Do(func() {
		workplace_proto_v1alpha2_device_proto_rawDescData = protoimpl.X.CompressGZIP(workplace_proto_v1alpha2_device_proto_rawDescData)
	})
	return workplace_proto_v1alpha2_device_proto_rawDescData
}

var workplace_proto_v1alpha2_device_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var workplace_proto_v1alpha2_device_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var workplace_proto_v1alpha2_device_proto_goTypes = []interface{}{
	(Device_Type)(0), // 0: ntt.workplace.v1alpha2.Device_Type
	(Device_State_Connection_ConnectionStatus)(0), // 1: ntt.workplace.v1alpha2.Device_State_Connection_ConnectionStatus
	(*Device)(nil),                          // 2: ntt.workplace.v1alpha2.Device
	(*Device_SitePlacement)(nil),            // 3: ntt.workplace.v1alpha2.Device.SitePlacement
	(*Device_VendorInfo)(nil),               // 4: ntt.workplace.v1alpha2.Device.VendorInfo
	(*Device_State)(nil),                    // 5: ntt.workplace.v1alpha2.Device.State
	(*Device_VendorInfo_PointGrabInfo)(nil), // 6: ntt.workplace.v1alpha2.Device.VendorInfo.PointGrabInfo
	(*Device_State_Connection)(nil),         // 7: ntt.workplace.v1alpha2.Device.State.Connection
	(*workplace_common.Geometry)(nil),       // 8: ntt.workplace.v1alpha2.Geometry
	(*ntt_meta.Meta)(nil),                   // 9: ntt.types.Meta
	(workplace_common.Vendor)(0),            // 10: ntt.workplace.v1alpha2.Vendor
	(*workplace_common.BACNetEntity)(nil),   // 11: ntt.workplace.v1alpha2.BACNetEntity
	(*timestamp.Timestamp)(nil),             // 12: google.protobuf.Timestamp
}
var workplace_proto_v1alpha2_device_proto_depIdxs = []int32{
	0,  // 0: ntt.workplace.v1alpha2.Device.type:type_name -> ntt.workplace.v1alpha2.Device_Type
	8,  // 1: ntt.workplace.v1alpha2.Device.geometry:type_name -> ntt.workplace.v1alpha2.Geometry
	3,  // 2: ntt.workplace.v1alpha2.Device.site_placement:type_name -> ntt.workplace.v1alpha2.Device.SitePlacement
	4,  // 3: ntt.workplace.v1alpha2.Device.vendor_info:type_name -> ntt.workplace.v1alpha2.Device.VendorInfo
	5,  // 4: ntt.workplace.v1alpha2.Device.state:type_name -> ntt.workplace.v1alpha2.Device.State
	9,  // 5: ntt.workplace.v1alpha2.Device.metadata:type_name -> ntt.types.Meta
	10, // 6: ntt.workplace.v1alpha2.Device.VendorInfo.vendor:type_name -> ntt.workplace.v1alpha2.Vendor
	11, // 7: ntt.workplace.v1alpha2.Device.VendorInfo.bacnet:type_name -> ntt.workplace.v1alpha2.BACNetEntity
	6,  // 8: ntt.workplace.v1alpha2.Device.VendorInfo.point_grab:type_name -> ntt.workplace.v1alpha2.Device.VendorInfo.PointGrabInfo
	7,  // 9: ntt.workplace.v1alpha2.Device.State.connection:type_name -> ntt.workplace.v1alpha2.Device.State.Connection
	1,  // 10: ntt.workplace.v1alpha2.Device.State.Connection.status:type_name -> ntt.workplace.v1alpha2.Device_State_Connection_ConnectionStatus
	12, // 11: ntt.workplace.v1alpha2.Device.State.Connection.status_since:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { workplace_proto_v1alpha2_device_proto_init() }
func workplace_proto_v1alpha2_device_proto_init() {
	if workplace_proto_v1alpha2_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		workplace_proto_v1alpha2_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_SitePlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_VendorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_VendorInfo_PointGrabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		workplace_proto_v1alpha2_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_State_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: workplace_proto_v1alpha2_device_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           workplace_proto_v1alpha2_device_proto_goTypes,
		DependencyIndexes: workplace_proto_v1alpha2_device_proto_depIdxs,
		EnumInfos:         workplace_proto_v1alpha2_device_proto_enumTypes,
		MessageInfos:      workplace_proto_v1alpha2_device_proto_msgTypes,
	}.Build()
	workplace_proto_v1alpha2_device_proto = out.File
	workplace_proto_v1alpha2_device_proto_rawDesc = nil
	workplace_proto_v1alpha2_device_proto_goTypes = nil
	workplace_proto_v1alpha2_device_proto_depIdxs = nil
}
