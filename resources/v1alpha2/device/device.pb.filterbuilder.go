// Code generated by protoc-gen-goten-resource
// Resource: Device
// DO NOT EDIT!!!

package device

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	agent "github.com/cloudwan/workplace-sdk/resources/v1alpha2/agent"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha2/area"
	building "github.com/cloudwan/workplace-sdk/resources/v1alpha2/building"
	workplace_common "github.com/cloudwan/workplace-sdk/resources/v1alpha2/common"
	floor "github.com/cloudwan/workplace-sdk/resources/v1alpha2/floor"
	site "github.com/cloudwan/workplace-sdk/resources/v1alpha2/site"
	zone "github.com/cloudwan/workplace-sdk/resources/v1alpha2/zone"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &agent.Agent{}
	_ = &area.Area{}
	_ = &workplace_common.BACNetEntity{}
	_ = &building.Building{}
	_ = &floor.Floor{}
	_ = &site.Site{}
	_ = &zone.Zone{}
)

type FilterBuilderOrCondition interface {
	_IsDeviceFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsDeviceFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Device_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Device_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Type() *filterCndBuilderType {
	return &filterCndBuilderType{builder: b.builder}
}

func (b *filterCndBuilder) Geometry() *filterCndBuilderGeometry {
	return &filterCndBuilderGeometry{builder: b.builder}
}

func (b *filterCndBuilder) OwnerAgent() *filterCndBuilderOwnerAgent {
	return &filterCndBuilderOwnerAgent{builder: b.builder}
}

func (b *filterCndBuilder) SitePlacement() *filterCndBuilderSitePlacement {
	return &filterCndBuilderSitePlacement{builder: b.builder}
}

func (b *filterCndBuilder) VendorInfo() *filterCndBuilderVendorInfo {
	return &filterCndBuilderVendorInfo{builder: b.builder}
}

func (b *filterCndBuilder) State() *filterCndBuilderState {
	return &filterCndBuilderState{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderType) Eq(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderType) Neq(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderType) Gt(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderType) Gte(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderType) Lt(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderType) Lte(value Device_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderType) In(values []Device_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderType) NotIn(values []Device_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Type().FieldPath(),
	})
}

func (b *filterCndBuilderType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Type().FieldPath(),
	})
}

func (b *filterCndBuilderType) compare(op gotenfilter.CompareOperator, value Device_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Type().WithValue(value),
	})
}

type filterCndBuilderGeometry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometry) Eq(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometry) Neq(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometry) Gt(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometry) Gte(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometry) Lt(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometry) Lte(value *workplace_common.Geometry) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometry) In(values []*workplace_common.Geometry) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometry) NotIn(values []*workplace_common.Geometry) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().FieldPath(),
	})
}

func (b *filterCndBuilderGeometry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().FieldPath(),
	})
}

func (b *filterCndBuilderGeometry) compare(op gotenfilter.CompareOperator, value *workplace_common.Geometry) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().WithValue(value),
	})
}

func (b *filterCndBuilderGeometry) Center() *filterCndBuilderGeometryCenter {
	return &filterCndBuilderGeometryCenter{builder: b.builder}
}

func (b *filterCndBuilderGeometry) Bbox() *filterCndBuilderGeometryBbox {
	return &filterCndBuilderGeometryBbox{builder: b.builder}
}

func (b *filterCndBuilderGeometry) Polygon() *filterCndBuilderGeometryPolygon {
	return &filterCndBuilderGeometryPolygon{builder: b.builder}
}

func (b *filterCndBuilderGeometry) Panning() *filterCndBuilderGeometryPanning {
	return &filterCndBuilderGeometryPanning{builder: b.builder}
}

type filterCndBuilderGeometryCenter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryCenter) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryCenter) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryCenter) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryCenter) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryCenter) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryCenter) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryCenter) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Center().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryCenter) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Center().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryCenter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Center().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryCenter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Center().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryCenter) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Center().WithValue(value),
	})
}

type filterCndBuilderGeometryBbox struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryBbox) Eq(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryBbox) Neq(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryBbox) Gt(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryBbox) Gte(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryBbox) Lt(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryBbox) Lte(value *workplace_common.BBox) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryBbox) In(values []*workplace_common.BBox) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBbox) NotIn(values []*workplace_common.BBox) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBbox) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBbox) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBbox) compare(op gotenfilter.CompareOperator, value *workplace_common.BBox) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Bbox().WithValue(value),
	})
}

func (b *filterCndBuilderGeometryBbox) SouthWest() *filterCndBuilderGeometryBboxSouthWest {
	return &filterCndBuilderGeometryBboxSouthWest{builder: b.builder}
}

func (b *filterCndBuilderGeometryBbox) NorthEast() *filterCndBuilderGeometryBboxNorthEast {
	return &filterCndBuilderGeometryBboxNorthEast{builder: b.builder}
}

type filterCndBuilderGeometryBboxSouthWest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryBboxSouthWest) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryBboxSouthWest) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().SouthWest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBboxSouthWest) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().SouthWest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBboxSouthWest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().SouthWest().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBboxSouthWest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().SouthWest().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBboxSouthWest) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Bbox().SouthWest().WithValue(value),
	})
}

type filterCndBuilderGeometryBboxNorthEast struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryBboxNorthEast) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryBboxNorthEast) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().NorthEast().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBboxNorthEast) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Bbox().NorthEast().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryBboxNorthEast) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().NorthEast().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBboxNorthEast) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Bbox().NorthEast().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryBboxNorthEast) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Bbox().NorthEast().WithValue(value),
	})
}

type filterCndBuilderGeometryPolygon struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryPolygon) Eq(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryPolygon) Neq(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryPolygon) Gt(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryPolygon) Gte(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryPolygon) Lt(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryPolygon) Lte(value *workplace_common.Polygon) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryPolygon) In(values []*workplace_common.Polygon) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Polygon().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPolygon) NotIn(values []*workplace_common.Polygon) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Polygon().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPolygon) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPolygon) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPolygon) compare(op gotenfilter.CompareOperator, value *workplace_common.Polygon) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Polygon().WithValue(value),
	})
}

func (b *filterCndBuilderGeometryPolygon) Coordinates() *filterCndBuilderGeometryPolygonCoordinates {
	return &filterCndBuilderGeometryPolygonCoordinates{builder: b.builder}
}

type filterCndBuilderGeometryPolygonCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Eq(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Neq(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Gt(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Gte(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Lt(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Lte(value []*latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryPolygonCoordinates) In(values [][]*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) NotIn(values [][]*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) Contains(value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().WithItemValue(value),
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) ContainsAnyOf(values []*latlng.LatLng) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) ContainsAll(values []*latlng.LatLng) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderGeometryPolygonCoordinates) compare(op gotenfilter.CompareOperator, value []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Polygon().Coordinates().WithValue(value),
	})
}

type filterCndBuilderGeometryPanning struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGeometryPanning) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGeometryPanning) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGeometryPanning) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGeometryPanning) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGeometryPanning) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGeometryPanning) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGeometryPanning) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Panning().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPanning) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Geometry().Panning().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGeometryPanning) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Panning().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPanning) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Geometry().Panning().FieldPath(),
	})
}

func (b *filterCndBuilderGeometryPanning) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Geometry().Panning().WithValue(value),
	})
}

type filterCndBuilderOwnerAgent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderOwnerAgent) Eq(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderOwnerAgent) Neq(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderOwnerAgent) Gt(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderOwnerAgent) Gte(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderOwnerAgent) Lt(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderOwnerAgent) Lte(value *agent.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderOwnerAgent) In(values []*agent.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().OwnerAgent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderOwnerAgent) NotIn(values []*agent.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().OwnerAgent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderOwnerAgent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().OwnerAgent().FieldPath(),
	})
}

func (b *filterCndBuilderOwnerAgent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().OwnerAgent().FieldPath(),
	})
}

func (b *filterCndBuilderOwnerAgent) compare(op gotenfilter.CompareOperator, value *agent.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().OwnerAgent().WithValue(value),
	})
}

type filterCndBuilderSitePlacement struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacement) Eq(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacement) Neq(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacement) Gt(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacement) Gte(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacement) Lt(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacement) Lte(value *Device_SitePlacement) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacement) In(values []*Device_SitePlacement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacement) NotIn(values []*Device_SitePlacement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacement) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacement) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacement) compare(op gotenfilter.CompareOperator, value *Device_SitePlacement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().WithValue(value),
	})
}

func (b *filterCndBuilderSitePlacement) Site() *filterCndBuilderSitePlacementSite {
	return &filterCndBuilderSitePlacementSite{builder: b.builder}
}

func (b *filterCndBuilderSitePlacement) Building() *filterCndBuilderSitePlacementBuilding {
	return &filterCndBuilderSitePlacementBuilding{builder: b.builder}
}

func (b *filterCndBuilderSitePlacement) Floor() *filterCndBuilderSitePlacementFloor {
	return &filterCndBuilderSitePlacementFloor{builder: b.builder}
}

func (b *filterCndBuilderSitePlacement) Area() *filterCndBuilderSitePlacementArea {
	return &filterCndBuilderSitePlacementArea{builder: b.builder}
}

func (b *filterCndBuilderSitePlacement) Zone() *filterCndBuilderSitePlacementZone {
	return &filterCndBuilderSitePlacementZone{builder: b.builder}
}

type filterCndBuilderSitePlacementSite struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacementSite) Eq(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacementSite) Neq(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacementSite) Gt(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacementSite) Gte(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacementSite) Lt(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacementSite) Lte(value *site.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacementSite) In(values []*site.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Site().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementSite) NotIn(values []*site.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Site().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementSite) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Site().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementSite) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Site().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementSite) compare(op gotenfilter.CompareOperator, value *site.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().Site().WithValue(value),
	})
}

type filterCndBuilderSitePlacementBuilding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacementBuilding) Eq(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacementBuilding) Neq(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacementBuilding) Gt(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacementBuilding) Gte(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacementBuilding) Lt(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacementBuilding) Lte(value *building.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacementBuilding) In(values []*building.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Building().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementBuilding) NotIn(values []*building.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Building().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementBuilding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Building().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementBuilding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Building().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementBuilding) compare(op gotenfilter.CompareOperator, value *building.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().Building().WithValue(value),
	})
}

type filterCndBuilderSitePlacementFloor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacementFloor) Eq(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacementFloor) Neq(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacementFloor) Gt(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacementFloor) Gte(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacementFloor) Lt(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacementFloor) Lte(value *floor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacementFloor) In(values []*floor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Floor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementFloor) NotIn(values []*floor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Floor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementFloor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Floor().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementFloor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Floor().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementFloor) compare(op gotenfilter.CompareOperator, value *floor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().Floor().WithValue(value),
	})
}

type filterCndBuilderSitePlacementArea struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacementArea) Eq(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacementArea) Neq(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacementArea) Gt(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacementArea) Gte(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacementArea) Lt(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacementArea) Lte(value *area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacementArea) In(values []*area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Area().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementArea) NotIn(values []*area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Area().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementArea) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Area().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementArea) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Area().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementArea) compare(op gotenfilter.CompareOperator, value *area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().Area().WithValue(value),
	})
}

type filterCndBuilderSitePlacementZone struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSitePlacementZone) Eq(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSitePlacementZone) Neq(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSitePlacementZone) Gt(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSitePlacementZone) Gte(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSitePlacementZone) Lt(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSitePlacementZone) Lte(value *zone.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSitePlacementZone) In(values []*zone.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Zone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementZone) NotIn(values []*zone.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().SitePlacement().Zone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSitePlacementZone) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Zone().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementZone) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().SitePlacement().Zone().FieldPath(),
	})
}

func (b *filterCndBuilderSitePlacementZone) compare(op gotenfilter.CompareOperator, value *zone.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().SitePlacement().Zone().WithValue(value),
	})
}

type filterCndBuilderVendorInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfo) Eq(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfo) Neq(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfo) Gt(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfo) Gte(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfo) Lt(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfo) Lte(value *Device_VendorInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfo) In(values []*Device_VendorInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfo) NotIn(values []*Device_VendorInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfo) compare(op gotenfilter.CompareOperator, value *Device_VendorInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().WithValue(value),
	})
}

func (b *filterCndBuilderVendorInfo) Vendor() *filterCndBuilderVendorInfoVendor {
	return &filterCndBuilderVendorInfoVendor{builder: b.builder}
}

func (b *filterCndBuilderVendorInfo) Bacnet() *filterCndBuilderVendorInfoBacnet {
	return &filterCndBuilderVendorInfoBacnet{builder: b.builder}
}

func (b *filterCndBuilderVendorInfo) PointGrab() *filterCndBuilderVendorInfoPointGrab {
	return &filterCndBuilderVendorInfoPointGrab{builder: b.builder}
}

type filterCndBuilderVendorInfoVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoVendor) Eq(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoVendor) Neq(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoVendor) Gt(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoVendor) Gte(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoVendor) Lt(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoVendor) Lte(value workplace_common.Vendor) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoVendor) In(values []workplace_common.Vendor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoVendor) NotIn(values []workplace_common.Vendor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoVendor) compare(op gotenfilter.CompareOperator, value workplace_common.Vendor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Vendor().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnet struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnet) Eq(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnet) Neq(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnet) Gt(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnet) Gte(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnet) Lt(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnet) Lte(value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnet) In(values []*workplace_common.BACNetEntity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnet) NotIn(values []*workplace_common.BACNetEntity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnet) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnet) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnet) compare(op gotenfilter.CompareOperator, value *workplace_common.BACNetEntity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().WithValue(value),
	})
}

func (b *filterCndBuilderVendorInfoBacnet) ObjectType() *filterCndBuilderVendorInfoBacnetObjectType {
	return &filterCndBuilderVendorInfoBacnetObjectType{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) PropertyType() *filterCndBuilderVendorInfoBacnetPropertyType {
	return &filterCndBuilderVendorInfoBacnetPropertyType{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) Name() *filterCndBuilderVendorInfoBacnetName {
	return &filterCndBuilderVendorInfoBacnetName{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) Uuid() *filterCndBuilderVendorInfoBacnetUuid {
	return &filterCndBuilderVendorInfoBacnetUuid{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) Uri() *filterCndBuilderVendorInfoBacnetUri {
	return &filterCndBuilderVendorInfoBacnetUri{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) ObjectId() *filterCndBuilderVendorInfoBacnetObjectId {
	return &filterCndBuilderVendorInfoBacnetObjectId{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) UpdateInterval() *filterCndBuilderVendorInfoBacnetUpdateInterval {
	return &filterCndBuilderVendorInfoBacnetUpdateInterval{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) ProtoUrl() *filterCndBuilderVendorInfoBacnetProtoUrl {
	return &filterCndBuilderVendorInfoBacnetProtoUrl{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) EnumValues() *filterCndBuilderVendorInfoBacnetEnumValues {
	return &filterCndBuilderVendorInfoBacnetEnumValues{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) StringTags() *filterCndBuilderVendorInfoBacnetStringTags {
	return &filterCndBuilderVendorInfoBacnetStringTags{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoBacnet) MarkerTags() *filterCndBuilderVendorInfoBacnetMarkerTags {
	return &filterCndBuilderVendorInfoBacnetMarkerTags{builder: b.builder}
}

type filterCndBuilderVendorInfoBacnetObjectType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectType().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectType().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectType().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetPropertyType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().PropertyType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().PropertyType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().PropertyType().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().PropertyType().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetPropertyType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().PropertyType().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Name().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Name().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Name().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uuid().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetUri struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetUri) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUri) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uri().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUri) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uri().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUri) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uri().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUri) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uri().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUri) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().Uri().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetObjectId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectId().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectId().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetObjectId) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ObjectId().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetUpdateInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().UpdateInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().UpdateInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().UpdateInterval().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().UpdateInterval().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetUpdateInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().UpdateInterval().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetProtoUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ProtoUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ProtoUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ProtoUrl().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ProtoUrl().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetProtoUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().ProtoUrl().WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetEnumValues struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithValue(value),
	})
}

func (b *filterCndBuilderVendorInfoBacnetEnumValues) WithKey(key string) *mapFilterCndBuilderVendorInfoBacnetEnumValues {
	return &mapFilterCndBuilderVendorInfoBacnetEnumValues{builder: b.builder, key: key}
}

type mapFilterCndBuilderVendorInfoBacnetEnumValues struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetEnumValues) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().EnumValues().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetStringTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithValue(value),
	})
}

func (b *filterCndBuilderVendorInfoBacnetStringTags) WithKey(key string) *mapFilterCndBuilderVendorInfoBacnetStringTags {
	return &mapFilterCndBuilderVendorInfoBacnetStringTags{builder: b.builder, key: key}
}

type mapFilterCndBuilderVendorInfoBacnetStringTags struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderVendorInfoBacnetStringTags) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().StringTags().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderVendorInfoBacnetMarkerTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().WithItemValue(value),
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderVendorInfoBacnetMarkerTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().Bacnet().MarkerTags().WithValue(value),
	})
}

type filterCndBuilderVendorInfoPointGrab struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoPointGrab) Eq(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) Neq(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) Gt(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) Gte(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) Lt(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) Lte(value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoPointGrab) In(values []*Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrab) NotIn(values []*Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrab) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrab) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrab) compare(op gotenfilter.CompareOperator, value *Device_VendorInfo_PointGrabInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().WithValue(value),
	})
}

func (b *filterCndBuilderVendorInfoPointGrab) DeviceId() *filterCndBuilderVendorInfoPointGrabDeviceId {
	return &filterCndBuilderVendorInfoPointGrabDeviceId{builder: b.builder}
}

func (b *filterCndBuilderVendorInfoPointGrab) Rotation() *filterCndBuilderVendorInfoPointGrabRotation {
	return &filterCndBuilderVendorInfoPointGrabRotation{builder: b.builder}
}

type filterCndBuilderVendorInfoPointGrabDeviceId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().DeviceId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().DeviceId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().DeviceId().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().DeviceId().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabDeviceId) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().DeviceId().WithValue(value),
	})
}

type filterCndBuilderVendorInfoPointGrabRotation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().Rotation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().Rotation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().Rotation().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().Rotation().FieldPath(),
	})
}

func (b *filterCndBuilderVendorInfoPointGrabRotation) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().VendorInfo().PointGrab().Rotation().WithValue(value),
	})
}

type filterCndBuilderState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderState) Eq(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderState) Neq(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderState) Gt(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderState) Gte(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderState) Lt(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderState) Lte(value *Device_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderState) In(values []*Device_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) NotIn(values []*Device_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) compare(op gotenfilter.CompareOperator, value *Device_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().State().WithValue(value),
	})
}

func (b *filterCndBuilderState) Connection() *filterCndBuilderStateConnection {
	return &filterCndBuilderStateConnection{builder: b.builder}
}

type filterCndBuilderStateConnection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateConnection) Eq(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateConnection) Neq(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateConnection) Gt(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateConnection) Gte(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateConnection) Lt(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateConnection) Lte(value *Device_State_Connection) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateConnection) In(values []*Device_State_Connection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnection) NotIn(values []*Device_State_Connection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnection) compare(op gotenfilter.CompareOperator, value *Device_State_Connection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().State().Connection().WithValue(value),
	})
}

func (b *filterCndBuilderStateConnection) Status() *filterCndBuilderStateConnectionStatus {
	return &filterCndBuilderStateConnectionStatus{builder: b.builder}
}

func (b *filterCndBuilderStateConnection) StatusSince() *filterCndBuilderStateConnectionStatusSince {
	return &filterCndBuilderStateConnectionStatusSince{builder: b.builder}
}

type filterCndBuilderStateConnectionStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateConnectionStatus) Eq(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateConnectionStatus) Neq(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateConnectionStatus) Gt(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateConnectionStatus) Gte(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateConnectionStatus) Lt(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateConnectionStatus) Lte(value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateConnectionStatus) In(values []Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnectionStatus) NotIn(values []Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnectionStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnectionStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnectionStatus) compare(op gotenfilter.CompareOperator, value Device_State_Connection_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().State().Connection().Status().WithValue(value),
	})
}

type filterCndBuilderStateConnectionStatusSince struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateConnectionStatusSince) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateConnectionStatusSince) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().StatusSince().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnectionStatusSince) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().State().Connection().StatusSince().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateConnectionStatusSince) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().StatusSince().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnectionStatusSince) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().State().Connection().StatusSince().FieldPath(),
	})
}

func (b *filterCndBuilderStateConnectionStatusSince) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().State().Connection().StatusSince().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}
