// Code generated by protoc-gen-goten-resource
// Resource: Agent
// DO NOT EDIT!!!

package agent

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
)

type AgentList []*Agent

func (l AgentList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Agent))
}

func (l AgentList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AgentList)...)
}

func (l AgentList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AgentList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Agent)
}

func (l AgentList) Length() int {
	return len(l)
}

type AgentChangeList []*AgentChange

func (l AgentChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AgentChange))
}

func (l AgentChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AgentChangeList)...)
}

func (l AgentChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AgentChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AgentChange)
}

func (l AgentChangeList) Length() int {
	return len(l)
}

type AgentNameList []*Name

func (l AgentNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AgentNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AgentNameList)...)
}

func (l AgentNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AgentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AgentNameList) Length() int {
	return len(l)
}

type AgentReferenceList []*Reference

func (l AgentReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AgentReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AgentReferenceList)...)
}

func (l AgentReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AgentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AgentReferenceList) Length() int {
	return len(l)
}

type AgentParentNameList []*ParentName

func (l AgentParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l AgentParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(AgentParentNameList)...)
}

func (l AgentParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AgentParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l AgentParentNameList) Length() int {
	return len(l)
}

type AgentParentReferenceList []*ParentReference

func (l AgentParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l AgentParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(AgentParentReferenceList)...)
}

func (l AgentParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AgentParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AgentParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l AgentParentReferenceList) Length() int {
	return len(l)
}

type AgentMap map[Name]*Agent

func (m AgentMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AgentMap) Set(res gotenresource.Resource) {
	tRes := res.(*Agent)
	m[*tRes.Name] = tRes
}

func (m AgentMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AgentMap) Length() int {
	return len(m)
}

func (m AgentMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AgentChangeMap map[Name]*AgentChange

func (m AgentChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AgentChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AgentChange)
	m[*tChange.GetAgentName()] = tChange
}

func (m AgentChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AgentChangeMap) Length() int {
	return len(m)
}

func (m AgentChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
