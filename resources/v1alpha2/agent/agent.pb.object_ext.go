// Code generated by protoc-gen-goten-object
// File: workplace/proto/v1alpha2/agent.proto
// DO NOT EDIT!!!

package agent

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
)

func (o *Agent) GotenObjectExt() {}

func (o *Agent) MakeFullFieldMask() *Agent_FieldMask {
	return FullAgent_FieldMask()
}

func (o *Agent) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAgent_FieldMask()
}

func (o *Agent) MakeDiffFieldMask(other *Agent) *Agent_FieldMask {
	if o == nil && other == nil {
		return &Agent_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAgent_FieldMask()
	}

	res := &Agent_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Agent_FieldTerminalPath{selector: Agent_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Agent_FieldTerminalPath{selector: Agent_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Agent_FieldSubPath{selector: Agent_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Agent) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Agent))
}

func (o *Agent) Clone() *Agent {
	if o == nil {
		return nil
	}
	result := &Agent{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Agent) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Agent) Merge(source *Agent) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Agent) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Agent))
}
