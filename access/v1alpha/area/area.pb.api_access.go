// Code generated by protoc-gen-goten-access
// Resource: Area
// DO NOT EDIT!!!

package area_access

import (
	"context"
	"fmt"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"

	area_client "github.com/cloudwan/workplace-sdk/client/v1alpha/area"
	area "github.com/cloudwan/workplace-sdk/resources/v1alpha/area"
)

var (
	_ = context.Context(nil)
	_ = fmt.GoStringer(nil)

	_ = codes.NotFound
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = gotenresource.ListQuery(nil)
)

type apiAreaAccess struct {
	client area_client.AreaServiceClient
}

func NewApiAreaAccess(client area_client.AreaServiceClient) area.AreaAccess {
	return &apiAreaAccess{client: client}
}

func (a *apiAreaAccess) GetArea(ctx context.Context, query *area.GetQuery) (*area.Area, error) {
	request := &area_client.GetAreaRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	return a.client.GetArea(ctx, request)
}

func (a *apiAreaAccess) BatchGetAreas(ctx context.Context, refs []*area.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	request := &area_client.BatchGetAreasRequest{
		Names: refs,
	}
	resp, err := a.client.BatchGetAreas(ctx, request)
	if err != nil {
		return err
	}
	resultMap := make(map[area.Name]*area.Area, len(refs))
	for _, resolvedRes := range resp.GetAreas() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiAreaAccess) QueryAreas(ctx context.Context, query *area.ListQuery) (*area.QueryResultSnapshot, error) {
	request := &area_client.ListAreasRequest{
		Filter:    query.Filter,
		FieldMask: query.Mask,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	resp, err := a.client.ListAreas(ctx, request)
	if err != nil {
		return nil, err
	}
	return &area.QueryResultSnapshot{
		Areas:          resp.Areas,
		NextPageCursor: resp.NextPageToken,
		PrevPageCursor: resp.PrevPageToken,
	}, nil
}

func (a *apiAreaAccess) WatchArea(ctx context.Context, query *area.GetQuery, observerCb func(*area.AreaChange) error) error {
	request := &area_client.WatchAreaRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	changesStream, initErr := a.client.WatchArea(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiAreaAccess) WatchAreas(ctx context.Context, query *area.WatchQuery, observerCb func(*area.QueryResultChange) error) error {
	request := &area_client.WatchAreasRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	changesStream, initErr := a.client.WatchAreas(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		changesWithPaging := &area.QueryResultChange{
			Changes:      respChange.AreaChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiAreaAccess) SaveArea(ctx context.Context, res *area.Area, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	previousRes := saveOpts.GetPreviousResource()

	if previousRes == nil {
		var err error
		previousRes, err = a.GetArea(ctx, &area.GetQuery{Reference: res.Name.AsReference()})
		if err != nil {
			if statusErr, ok := status.FromError(err); !ok || statusErr.Code() != codes.NotFound {
				return err
			}
		}
	}

	if previousRes != nil {
		updateRequest := &area_client.UpdateAreaRequest{
			Area: res,
		}
		_, err := a.client.UpdateArea(ctx, updateRequest)
		if err != nil {
			return err
		}
		return nil
	} else {
		createRequest := &area_client.CreateAreaRequest{
			Area: res,
		}
		_, err := a.client.CreateArea(ctx, createRequest)
		if err != nil {
			return err
		}
		return nil
	}
}

func (a *apiAreaAccess) DeleteArea(ctx context.Context, ref *area.Reference, opts ...gotenresource.DeleteOption) error {
	request := &area_client.DeleteAreaRequest{
		Name: ref,
	}
	_, err := a.client.DeleteArea(ctx, request)
	return err
}
